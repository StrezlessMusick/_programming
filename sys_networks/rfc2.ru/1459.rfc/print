<!DOCTYPE html><html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><link rel="stylesheet" href="../tpl/style.css@f4e332aa" type="text/css" /><link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css' /><style type="text/css">h1,h2,h3,h4{font-family:'Open Sans',sans-serif}</style><link rel="canonical" href="../1459.rfc" /><meta name="Robots" content="noindex, nofollow" /><title>Перевод RFC 1459 — Протокол ретранслируемого интернет-чата (IRC)</title><link rel="alternate" type="application/rss+xml" title="RFC2.ru - Русские Переводы RFC" href="../rss.xml"></head><body><div id="content"><div id="nav"><div class="icon i0"></div> <a href="../index.html" accesskey="`">На Главную</a></div><div id="search" class="ya-site-form ya-site-form_inited_no"><form action="http://yandex.ru/sitesearch" method="get" target="_blank"><input type="hidden" name="searchid" value="2154295"/><input type="hidden" name="l10n" value="ru"/><input type="hidden" name="reqenc" value=""/><input type="hidden" name="submit" value="Найти"/><input type="search" value="" name="text" placeholder="Поиск по RFC2.ru" /></form></div><div itemscope itemtype="http://schema.org/ScholarlyArticle"><meta itemprop="inLanguage" content="ru" /><meta itemprop="editor" content="ru" /><div id="header"><h1><a itemprop="headline" href="../1459.rfc">RFC 1459 — Протокол ретранслируемого интернет-чата (IRC)</a></h1></div><dl class="mute"><dt></dt><dd><div class="icon i1"></div> RFC: 1459</dd><dd><div class="icon i3"></div> Оригинал: <a href="original" target="_blank"><span itemprop="alternativeHeadline">Internet Relay Chat Protocol</span></a></dd><dd><div class="icon i2"></div> Категория: <span itemprop="articleSection">Экспериментальный</span></dd><dd><div class="icon i4"></div> Дата публикации: <time itemprop="datePublished" datetime="1993-05-01">Май 1993</time></dd><dd><div class="icon i5"></div> Авторы: <span itemprop="author">J. Oikarinen</span>, <span itemprop="author">D. Reed</span></dd><dd><div class="icon i6"></div> Перевод: <span itemprop="editor">Рустам Шихалиев aka russo</span></dd></dl><div id="text" itemprop="articleBody"><h3>Статус документа</h3><p>Данный документ описывает Експериментальный Протокол для Интернет обьединения. Обсуждения и предложения для улучшения приветствуются. Пожалуйста, изучите текущую редакцию "Официальные Стандарты протокола IAB". Распространение документа не ограничено.</p><h3>Резюме</h3><p>IRC-протокол был разработан 4 года назад (в 1989 году, относительно года издания этого документа. — прим. пер.) для того, чтобы пользователи BBS могли общаться между собой. Сейчас этот протокол поддерживается web-серверами и клиентами, и на этом он завершает свое развитие. Последние 2 года среднее количество пользовательских соединений к IRC-сети возросло в 10 раз.</p><p>IRC-протокол работает с текстом, и поэтому даже самый простой клиент, оснащенный сокет-программой, может соединиться с сервером.</p><h2>Содержание</h2><ul class="map"><li><a href="print#p1">1. Вступление</a></li><li class="lia"><a href="print#p1.1">1.1. Серверы</a></li><li class="lia"><a href="print#p1.2">1.2. Клиенты</a></li><li class="lib"><a href="print#p1.2.1">1.2.1. Операторы</a></li><li class="lia"><a href="print#p1.3">1.3. Каналы</a></li><li class="lib"><a href="print#p1.3.1">1.3.1. Операторы Каналов</a></li><li><a href="print#p2">2. Спецификация IRC</a></li><li class="lia"><a href="print#p2.1">2.1. Ознакомление</a></li><li class="lia"><a href="print#p2.2">2.2. Коды символов</a></li><li class="lia"><a href="print#p2.3">2.3. Сообщения</a></li><li class="lib"><a href="print#p2.3.1">2.3.1. Формат сообщения в «псевдо» BNF</a></li><li class="lia"><a href="print#p2.4">2.4. Нумерация ответов</a></li><li><a href="print#p3">3. Концепция IRC</a></li><li class="lia"><a href="print#p3.1">3.1. Соединение один-на-один</a></li><li class="lia"><a href="print#p3.2">3.2. Один-со-всеми</a></li><li class="lib"><a href="print#p3.2.1">3.2.1. Со списком</a></li><li class="lib"><a href="print#p3.2.2">3.2.2. С группой (каналом)</a></li><li class="lib"><a href="print#p3.2.3">3.2.3. С маской хоста/сервера</a></li><li class="lia"><a href="print#p3.3">3.3. Один-всем</a></li><li class="lib"><a href="print#p3.3.1">3.3.1. Клиент-Клиенту</a></li><li class="lib"><a href="print#p3.3.2">3.3.2. Клиент-Серверу</a></li><li class="lib"><a href="print#p3.3.3">3.3.3. Сервер-Серверу</a></li><li><a href="print#p4">4. Детальное Рассмотрение Сообщений</a></li><li class="lia"><a href="print#p4.1">4.1. Регистрация Соединения</a></li><li class="lib"><a href="print#p4.1.1">4.1.1. Password</a></li><li class="lib"><a href="print#p4.1.2">4.1.2. Nickname</a></li><li class="lib"><a href="print#p4.1.3">4.1.3. User</a></li><li class="lib"><a href="print#p4.1.4">4.1.4. Server</a></li><li class="lib"><a href="print#p4.1.5">4.1.5. Oper</a></li><li class="lib"><a href="print#p4.1.6">4.1.6. Quit</a></li><li class="lib"><a href="print#p4.1.7">4.1.7. Server Quit</a></li><li class="lia"><a href="print#p4.2">4.2. Операторы Каналов</a></li><li class="lib"><a href="print#p4.2.1">4.2.1. Join-сообщение</a></li><li class="lib"><a href="print#p4.2.2">4.2.2. Part-сообщение</a></li><li class="lib"><a href="print#p4.2.3">4.2.3. Mode-команда</a></li><li class="lic"><a href="print#p4.2.3.1">4.2.3.1. Режимы канала</a></li><li class="lic"><a href="print#p4.2.3.2">4.2.3.2. Режимы пользователя</a></li><li class="lib"><a href="print#p4.2.4">4.2.4. Topic-сообщение</a></li><li class="lib"><a href="print#p4.2.5">4.2.5. Names-сообщение</a></li><li class="lib"><a href="print#p4.2.6">4.2.6. List-сообщение</a></li><li class="lib"><a href="print#p4.2.7">4.2.7. Invite-сообщение</a></li><li class="lib"><a href="print#p4.2.8">4.2.8. Kick-сообщение</a></li><li class="lia"><a href="print#p4.3">4.3. Серверные запросы и комманды</a></li><li class="lib"><a href="print#p4.3.1">4.3.1. Version-сообщение</a></li><li class="lib"><a href="print#p4.3.2">4.3.2. Stats-сообщение</a></li><li class="lib"><a href="print#p4.3.3">4.3.3. Links-сообщения</a></li><li class="lib"><a href="print#p4.3.4">4.3.4. Time-сообщение</a></li><li class="lib"><a href="print#p4.3.5">4.3.5. Connect-сообщение</a></li><li class="lib"><a href="print#p4.3.6">4.3.6. Trace-сообщение</a></li><li class="lib"><a href="print#p4.3.7">4.3.7. Admin-команда</a></li><li class="lib"><a href="print#p4.3.8">4.3.8. Info-команда</a></li><li class="lib"><a href="print#p4.4">4.4. Сообщения отправки</a></li><li class="lib"><a href="print#p4.4.1">4.4.1. Private-сообщения</a></li><li class="lib"><a href="print#p4.4.2">4.4.2. Notice-сообщения</a></li><li class="lia"><a href="print#p4.5">4.5. Пользовательские запросы</a></li><li class="lib"><a href="print#p4.5.1">4.5.1. Who-запрос</a></li><li class="lib"><a href="print#p4.5.2">4.5.2. Whois-запрос</a></li><li class="lib"><a href="print#p4.5.3">4.5.3. Whowas-сообщение</a></li><li class="lia"><a href="print#p4.6">4.6. Всевозможные сообщения</a></li><li class="lib"><a href="print#p4.6.1">4.6.1. Kill-сообщение</a></li><li class="lib"><a href="print#p4.6.2">4.6.2. Ping-сообщение</a></li><li class="lib"><a href="print#p4.6.3">4.6.3. Pong-сообщение</a></li><li class="lib"><a href="print#p4.6.4">4.6.4. Error-сообщение</a></li><li><a href="print#p5">5. Опциональные сообщения</a></li><li class="lia"><a href="print#p5.1">5.1. Away-сообщение</a></li><li class="lia"><a href="print#p5.2">5.2. Rehash-команда</a></li><li class="lia"><a href="print#p5.3">5.3. Restart-команда</a></li><li class="lia"><a href="print#p5.4">5.4. Summon-сообщение</a></li><li class="lia"><a href="print#p5.5">5.5. Users-сообщение</a></li><li class="lia"><a href="print#p5.6">5.6. Operwall-команда</a></li><li class="lia"><a href="print#p5.7">5.7. Userhost-сообщение</a></li><li class="lia"><a href="print#p5.8">5.8. Ison-сообщение</a></li><li><a href="print#p6">6. Ответы</a></li><li class="lia"><a href="print#p6.1">6.1. Error-ответы</a></li><li class="lia"><a href="print#p6.2">6.2. Отклики команд</a></li><li class="lia"><a href="print#p6.3">6.3. Зарезервированные числа</a></li><li><a href="print#p7">7. Идентификация клиента и сервера</a></li><li><a href="print#p8">8. Подробное рассмотрение текущих средств связи</a></li><li class="lia"><a href="print#p8.1">8.1. Сетевой протокол TCP</a></li><li class="lib"><a href="print#p8.1.1">8.1.1. Поддержка Unix-сокетов</a></li><li class="lia"><a href="print#p8.2">8.2. Проверка команд</a></li><li class="lia"><a href="print#p8.3">8.3. Передача сообщений</a></li><li class="lia"><a href="print#p8.4">8.4. Соединение «Liveness»</a></li><li class="lia"><a href="print#p8.5">8.5. Установка соединения сервер-клиент</a></li><li class="lia"><a href="print#p8.6">8.6. Установка соединения сервер-сервер</a></li><li class="lia"><a href="print#p8.6.1">8.6.1. Обмен информацией о состоянии соединения</a></li><li class="lia"><a href="print#p8.7">8.7. Разрыв соединения сервер-клиент</a></li><li class="lia"><a href="print#p8.8">8.8. Разрыв соединения сервер-сервер</a></li><li class="lia"><a href="print#p8.9">8.9. Слежение за измененияит никнейма</a></li><li class="lia"><a href="print#p8.10">8.10. Flood-контроль клиентов</a></li><li class="lia"><a href="print#p8.11">8.11. Non-blocking lookups</a></li><li class="lib"><a href="print#p8.11.1">8.11.1. Hostname (DNS) lookups</a></li><li class="lib"><a href="print#p8.11.2">8.11.2. Username (Ident) lookups</a></li><li class="lia"><a href="print#p8.12">8.12. Конфигурационный файл</a></li><li class="lib"><a href="print#p8.12.1">8.12.1. Допуск клиентов к соединению</a></li><li class="lib"><a href="print#p8.12.2">8.12.2. Операторы</a></li><li class="lib"><a href="print#p8.12.3">8.12.3. Допуск серверов к соединению</a></li><li class="lib"><a href="print#p8.12.4">8.12.4. Административная часть</a></li><li class="lia"><a href="print#p8.13">8.13. Формирование сообществ</a></li><li><a href="print#p9">9. Текущие проблемы</a></li><li class="lia"><a href="print#p9.1">9.1. Расширение</a></li><li class="lia"><a href="print#p9.2">9.2. Знаки</a></li><li class="lib"><a href="print#p9.2.1">9.2.1. Никнеймы</a></li><li class="lib"><a href="print#p9.2.2">9.2.2. Каналы</a></li><li class="lib"><a href="print#p9.2.3">9.2.3. Серверы</a></li><li class="lia"><a href="print#p9.3">9.3. Алгоритмы</a></li><li><a href="print#p10">10. Поддержка и доступ</a></li><li><a href="print#p11">11. Рассмотрение безопасности</a></li><li><a href="print#p12">12. Адреса авторов</a></li></ul><h2 id="p1">1. Вступление</h2><p>IRC ("Internet Relay Chat" можно перевести как "Общение передающееся посредством Интернета". Если не забыли, что первоначально этот протокол связывал пользователей BBS — прим. пер.) протокол был разработан несколько лет назад для общения посредством текста (чат). Этот документ описывает текущее (на 1993 год — прим. пер.) состояние IRC-протокола.</p><p>IRC-протокол разработан для систем, использующих сетевой протокол TCP/IP, хотя это не требование, чтобы этот пережиток работал только в этой сфере.</p><p>IRC представляет собой систему телеконференций, которые (через использование модели клиент-сервер) хорошо подходят для работы на многих машинах в распространяемой зоне. Типичная настройка представляет собой процесс (сервер), предоставляющий доступ для клиентов (или других серверов), и выполняющий доставку/мультиплексирование сообщений и других функций.</p><h3 id="p1.1">1.1. Серверы</h3><p>Сервер формирует бэкбон IRC, предоставляющий точки присоединения клиентов для общения и присоединения других серверов для формирования IRC-сети. Серверы, доступные в сети формируют IRC-сеть, образуя сетевое дерево (см. рис. 1), в котором каждый сервер является самостоятельным, но тем не менее взаимодействующим с остальными серверами. (Подобная форма сети предполагает наибольшую сохранность сети, даже при падении одного или нескольких серверов. — прим. пер.).</p><pre>                       [ Сервер 15 ]  [ Сервер 13 ] [ Сервер 14]
                             /                \         /
                            /                  \       /
    [ Сервер 11 ] ------ [ Сервер 1 ]       [ Сервер 12]
                          /        \          /
                         /          \        /
              [ Сервер 2 ]          [ Сервер 3 ]
                /       \                      \
               /         \                      \
       [ Сервер 4 ]    [ Сервер 5 ]         [ Сервер 6 ]
        /    |    \                           /
       /     |     \                         /
      /      |      \____                   /
     /       |           \                 /
[ Сервер 7 ] [ Сервер 8 ] [ Сервер 9 ]   [ Сервер 10 ]

                              :
                           [ etc. ]
                              :

                Рисунок 1: Схематичное изображение IRC-сети</pre><h3 id="p1.2">1.2. Клиенты</h3><p>Клиент это любое присоединение к серверу, и который не является сервером. Каждый клиент отличается от других клиентов наличием уникального (не похожего ни на чей другой. — прим. пер.) никнейма, имеющего длину не больше девяти (9) символов. Посмотрите правила протокольной грамматики для того, чтобы знать что можно и что нельзя использовать в никнейме. В дополнение к никнейму, все серверы должны иметь следующую информацию о всех клиентах: настоящее имя хоста, с которого запустился клиент, имя пользователя клиента на этом хосте и сервер, к которому присоединился клиент.</p><h3 id="p1.2.1">1.2.1. Операторы</h3><p>Для поддержания порядка в IRC-сети, существует специальный класс клиентов (операторы. В данный момент их называют "иркопы" — прим. пер.). Хотя, возможности операторов можно рассматривать как «опасные», они не подчиняются приказам. Операторы выполняют основные сетевые задачи, такие как отсоединение и пересоединение серверов для улучшения состояния сети или исправления каких-либо сетевых ошибок. Смотрите разделы 4.1.7 (SQUIT) и 4.3.5 (CONNECT).</p><p>В дополнение к возможностям операторов можно добавить, что в их силах так же закрыть соединение между клиентов и сервером. Правда, подобное бывает только при диструктивных и раздражающих действиях клиента. Подробней об этом действии сказано в разделе 4.6.1 (KILL).</p><h3 id="p1.3">1.3. Каналы</h3><p>Канал это обозначение группы из одного или большего числа клиентов, которые получают сообщения, адресованные в этот канал. Канал создается при соединении первого клиента с ним и канал исчезает, когда его покидает последний клиент. Пока канал отсутствует, любой клиент может завладеть каналом, назвав свой таким же именем.</p><p>Имена каналов - строка (начинающаяся с символа '&' или '#') длинной до 200 символов. В стороне от требований, что первый символ должен быть или '&' или '#'; органичение на то, что название канала не может содержать пробелов (' '), Ctrl-G (^G или ASCII 7), или запятых (',' которая используется для создания списка каналов).</p><p>Протоколом предоставляется два типа каналов, Один распространяемый
канал, который известен всем серверам, подсоединенным к сети.</p><p>Эти каналы помечены первым символом; доступны только тем клиентам, на сервере которых он существует. Такие каналы отличаются начальным символом '&'. этих двух типов, доступны различные режимы каналов для изменения индивидуальных характеристик канала. Смотрите раздел 4.2.3 (MODE-команда) для более подробной информации.</p><p>Для создания нового канала или входа в существующий, пользователь должен запросить JOIN канала. Если канал отсутствовал, то канал создается и вошедший пользователь станоавится оператором канала. Если канал уже существует, но так или иначе он не отвечает на попытки войти, значит в настройках канала установлен какой-либо из нижеприведенных режимов. Возможно, этот канал только-для-приглашенных (invite-only), (режим +i), и вы сможете на его войти только будучи приглашенным. Пользователь может находится не нескольких каналах одновременно, но рекомендуется ограничиться десятью (10) каналами, ибо это полне достаточно для новичков и набирания опыта. Для более подробной информации обо всем этом смотрите раздел 8.13.</p><p>Если в IRC-сети происходит разрыв, вызванный разъединением двух серверов, канал так же разрывается на несколько частей, в которых остаются пользователи, сидящие на своих серверах. Когда серверы соединяются вновь, они восстанавливают части канала и его режимы. Если канал доступен по разные стороны, вхождения и режимы канала интерпретируются в своих манерах.</p><h3 id="p1.3.1">1.3.1. Операторы каналов</h3><p>Оператор канала (так же называемые "чоп" [сокращение и транскрибирование словосочетания "чаннел оператор", но их принято называть просто "оп". &mdash прим. пер.]) на данном канале рассматривается как владелец канала. В добавление к этому статусу, оператор канала выполняет функции стража порядка на канале. Как владелец канала, оператор не осуждается за действия на своей территории, хотя если его действия несут антисоциальные или какие другие оскорбительные действия, то будет благоразумней обратиться к IRC-оператору за поддержкой, или даже смещения с поста оператора канала.</p><p>Список команд, которые могут использоваться только оператором канала:</p><ul><li>KICK — Выброс клиента с канала</li><li>MODE — Изменение режима канала</li><li>INVITE — Приглашение клиента на канал с режимом +i (invite-only)</li><li>TOPIC — Изменение топика канала в режиме канала - +t</li></ul><p>Оператор канала идентифицируется символом '@', следующим за его никнеймом, всякий раз, как он ассоциируется с каналом (например, ответы на команды NAMES, WHO и WHOIS).</p><h2 id="p2">2. Спецификация IRC</h2><h3 id="p2.1">2.1. Ознакомление</h3><p>Протокол, как описывалось выше, используется для соединений между серверами и, серверами и клиентами. Ограничение стоит больше на клиентские соединения (которые рассматриваются как не стоящие доверия) чем на серверные.</p><h3 id="p2.2">2.2. Коды символов</h3><p>Используются обычные символы. Протокол базируется на установке кодов, которые составляют восемь (8) бит, составляя октет. Каждое сообщение может содержать любое количество октетов: к тому же, некоторые восьмизначные величины использутся для контрольных кодов, которые распознаются как неограниченые сообщения.</p><p>Не обращая внимания на 8-битный протокол, неограниченность и переменные этого протокола наиболее используемые терминалом USASCII и телнет-соединением.</p><p>Так как IRC имеет скандинавские корни, символы {}| рассматриваются как эквивалент символов []\, но в малом регистре. Это приводит к критическим результатам, когда определяется уникальность двух никнеймов.</p><h3 id="p2.3">2.3. Сообщения</h3><p>Серверы и клиенты создают сообщения на которые можно ответить, а можно и нет. Если сообщение содержит правильные команды, как описано в предыдущем разделе, клиенту следует ответить как полагается, но это не означает, что всегда можно дождаться ответа; связь клиент-сервер и сервер-сервер очень рассинхронизированы по своей природе.</p><p>Каждое IRC-сообщение может содержать до трех главных частей: префикс (опционально), команду и параметры команды (которых может быть до 15). Префикс, команда и все параметры разделены одним (или более) символом пробела (' ', 0x20).</p><p>Префикс обозначается одним символом, стоящим вначале (':', 0x3b), который должен быть первым символом в сообщении. Между префиксом и двоеточием не должно быть никаких пробелов. Префикс используется серверами для обозначения источника появления сообщения.</p><p>Если префикс сообщения утерян, то за источник сообщения берут соединение, с которого было получено сообщение. Клиентам не следует использоваться префиксами при отсылке сообщения; если они начнут использовать префиксы, то приниматься будут только правильные и только с зарегистрированных никнеймов. Если исходные идентификаторы префиксов не будет найдены в серверных базах данных, или если они зарегистрированы с различных линков, то сервер будет игнорировать сообщение.</p><p>Команда должна содержать правильную IRC-команду или трехзначное число, представленное в ASCII-тексте.</p><p>IRC-сообщения всегда выглядят как строки символов, заканчивающихся парой символов CR-LF (Carriage Return - Line Feed. Возврат Каретки - Перевод Строки) и длиной строки, не превышающей 512 символов (в эти 512 входят и CR-LF). Так что, максимальная длина строки для команд и параметров - 510 символов. Перенос строки невозможен. Для более подробной информации смотрите раздел 7.</p><h4 id="p2.3.1">2.3.1. Формат сообщения в «псевдо» BNF</h4><p>Протокол сообщений должен быть извлечен из смежных потоков октетов Текущим решением стало определение двух символов, CR и LS, как разделители сообщений. Игнорирование пустых сообщений, которые используют последовательности CR-LF между сообщениями без каких-либо проблем.</p><p>Распакованное сообщение проверяется внутри компонентов &lt;prefix&gt;, &lt;command&gt; и список параметров подравнивается с помощью &lt;middle&gt; или &lt;trailing&gt; компонентами.</p><p>BNF представляет собой нечто подобное:</p><pre>&lt;message&gt;  ::= [':' &lt;prefix&gt; &lt;SPACE&gt; ] &lt;command&gt; &lt;params&gt; &lt;crlf&gt;
&lt;prefix&gt;   ::= &lt;servername&gt; | &lt;nick&gt; [ '!' &lt;user&gt; ] [ '@' &lt;host&gt; ]
&lt;command&gt;  ::= &lt;letter&gt; { &lt;letter&gt; } | &lt;number&gt; &lt;number&gt; &lt;number&gt;
&lt;SPACE&gt;    ::= ' ' { ' ' }
&lt;params&gt;   ::= &lt;SPACE&gt; [ ':' &lt;trailing&gt; | &lt;middle&gt; &lt;params&gt; ]

&lt;middle&gt;   ::= &lt;Любая *не пустая* последовательность октетов, не
            включающая в себя пробел, или NUL, или CR, или LF;
        первой не может быть ':'&gt;
&lt;trailing&gt; ::= &lt;Любая, возможно *пустая*, последовательность октетов, не
            включающих в себя NUL или CR, или LF&gt;

&lt;crlf&gt;     ::= CR LF</pre><p>Замечания:</p><ol><li>&lt;SPACE&gt; содержит только символ(ы) пробела (0x20). Табуляция и другие контрольные символы рассматриваются как НЕ-ПУСТЫЕ-ПРОБЕЛЫ (NON-WHITE-SPACE).</li><li>После извлечения списка параметров, все параметры равняются с помощью &lt;middle&gt; или &lt;trailing&gt;. &lt;trailing&gt; просто синтаксическая штуковина, включающая SPACE внутри параметра.</li><li>Факт, что CR и LF нельзя добавить в строки параметров, просто артефакт оформления сообщения. Его можно изменить позже.</li><li>NUL не является специальным символом в оформлении сообщения и в основе служит окончанием внутри параметра, но это является причиной усложнения в нормальной C-строке. Так же, NUL не позволителен внутри сообщений.</li><li>Последний параметр может быть пустой строкой.</li><li>Использование расширенного префикса (['!' &lt;user&gt; ] ['@' &lt;host&gt; ]) может быть в связи сервера с сервером и предполагается только для сообщений между сервером и клиентом, предоставляя клиентам больше полезной информации о пользователях без использования дополнительных запросов.</li></ol><p>Многопротокольные сообщения указывают на дополнительную семантику и синтаксис для параметров извлечения строк, указанием их позицией в списке. Например, многие команды серверов будут предполагать, что первый параметр после команды - список заданий, которые описаны таким образом:</p><pre>&lt;target&gt;     ::= &lt;to&gt; [ &quot;,&quot; &lt;target&gt; ]
&lt;to&gt;         ::= &lt;channel&gt; | &lt;user&gt; '@' &lt;servername&gt; | &lt;nick&gt; | &lt;mask&gt;
&lt;channel&gt;    ::= ('#' | '&amp;') &lt;chstring&gt;
&lt;servername&gt; ::= &lt;host&gt;
&lt;host&gt;       ::= смотри RFC 952 [DNS:4] для информации о именах хостов
&lt;nick&gt;       ::= &lt;letter&gt; { &lt;letter&gt; | &lt;number&gt; | &lt;special&gt; }
&lt;mask&gt;       ::= ('#' | '$') &lt;chstring&gt;
&lt;chstring&gt;   ::= &lt;любой 8-битный код, включающий в себя SPACE, BELL,
                  NUL, CR, LF и запятую (',')&gt;</pre><p>Другие параметры синтаксиса:</p><pre>&lt;user&gt;       ::= &lt;nonwhite&gt; { &lt;nonwhite&gt; }
&lt;letter&gt;     ::= 'a' ... 'z' | 'A' ... 'Z'
&lt;number&gt;     ::= '0' ... '9'
&lt;special&gt;    ::= '-' | '[' | ']' | '\' | '`' | '^' | '{' | '}'
&lt;nonwhite&gt;   ::= &lt;любой 8-битный код, включающий SPACE, (0x20),
                 NUL (0x0), CR(0xd), и LF (0xa)&gt;</pre><h3 id="p2.4">2.4. Нумерация ответов</h3><p>Многие сообщения, отправленные к серверу, создают отсортированные ответы. Многие полученные ответы являются пронумерованными, что используется как для отлова ошибок, так и нормальных ответов. Пронумерованный ответ может быть послан как одно сообщение, содержащее префикс отправителя, трехзначный номер и цель ответа. Нумерация ответов не допускает сообщения от клиента-отправителя; любые такие сообщения, полученные сервером, удаляются. Во всех других случаях, нумерованный ответ просто обычное сообщение, которое содержит переменную. Переменная имеет вид трехзначного номера, что неизменно лучше, чем строка символов. Список различных ответов находится в разделе 6.</p><h2 id="p3">3. Концепция IRC</h2><p>Этот раздел призван описать нынешнюю концепцию организации протокола IRC и представление о различных классах сообщений.</p><pre>                       1--\
                           A        D---4
                       2--/ \      /
                             B----C
                            /      \
                           3        E

Серверы: A, B, C, D, E         Клиенты: 1, 2, 3, 4

                   Рисунок 2: Пример небольшой IRC-сети</pre><h3 id="p3.1">3.1. Соединение один-на-один</h3><p>Соединение один-на-один обычно осуществляется клиентами, но с тех пор как траффик между серверами стал не так важен, данный вид соединения упразднили. Предоставление возможности безопасного общения для клиентов, предполагает собой, что все серверы должны предоставить возможность прохождение сообщения по всей длине дерева до любого клиента. Сообщение должно найти наиболее короткий путь между двумя точками в серверном дереве.</p><p>Следующие примеры относятся к рис. 2.</p><ul><li>Пример 1:</li><li class="lib">Сообщение между клиентами 1 и 2 должно пройти только через сервер A, который отправит его прямо к клиенту 2.</li><li>Пример 2:</li><li class="lib">Сообщение между клиентами 1 и 3 должно пройти через серверы A и B. Остальным клиентам и серверам увидеть сообщение не суждено.</li><li>Пример 3:</li><li class="lib">Сообщение между клиентами 2 и 4 пройдет по серверам A, B, С и D.</li></ul><h3 id="p3.2">3.2. Один-со-всеми</h3><p>Основная цель IRC - предоставить форум, который позволит легко и эффективно устраивать конференции (одному с многими собеседниками). И IRC как нельзя лучше справляется с этой обязанностью.</p><h4 id="p3.2.1">3.2.1. Со списком</h4><p>Самый большое неудобство в общении один-со-всеми - разговор с помощью клиентов со "списком" пользователей. Как это происходит: клиенты предоставляют список получателей, которым адресовано сообщение и сервер копирует сообщение всем указанным получателям. Это не так эффективно, как использование группы, при нарушении списка получателей и отправке сообщений без проверки может породить дубликаты сообщений.</p><h4 id="p3.2.2">3.2.2. С группой (каналом)</h4><p>В IRC-канале имеется фунцкия, эквивалентная многосоставной группе; их жизнь динамична (люди входят и покидают каналы) и текущая беседа выходит на канал и отсылается серверам, которые поддерживают пользователей на данном канале. Если на сервере несколько пользователей, сидящих на одном канале, текст сообщения отсылается только серверу, который в свою очередь отсылает каждому клиенту на канале. Это действие повторяется для каждого соединения клиент-сервер, пока исходное сообщение не дойдет до каждого пользователя на канале.</p><p>Следующие примеры относятся к рис. 2.</p><ul><li>Пример 4:</li><li class="lib">Любой канал с одним клиентом(клиент 1). Сообщения в канал уходят на сервер и потом кому-нибудь еще.</li><li>Пример 5:</li><li class="lib">На канале клиент 1 и клиент 2. Все сообщения проходят путь, как если бы они были приватными сообщениями между двумя клиентами вне канала.</li><li>Пример 6:</li><li class="lib">На канале клиенты 1, 2 и 3. Все сообщения канала отправляются всем клиентам и только их сервера, которые обязаны пропустить сообщение, как если бы оно было приватное и для одного клиента. Если клиент 1 отправил сообщение, оно повернет обратно на клиента 2 и только тогда через сервер B к клиенту 3.</li></ul><h4 id="p3.2.3">3.2.3. С маской хоста/сервера</h4><p>Предоставляя IRC-операторам возможность отправки сообщений большому числу общающихся пользователей, используются маски отправки сообщений по хосту или серверу. Эти сообщения отправляются пользователям, чья информация о хоста или сервера попала под маску. Сообщения отсылаются только туда, где расположены пользователи, в виду похожести каналов.</p><h3 id="p3.3">3.3. Один-всем</h3><p>Тип сообщения один-всем лучше описать как обьявление, отправляемое всем клиентам или серверам, или тем и другим вместе. В больших сетях одно сообщение может повлечь большое количество траффика для того, чтобы попасть ко всем желающим.</p><p>Для многих сообщений, которые не имеют выбора, но извещение ими всех серверов эта форма посылки информации каждым сервером - разумная последовательность между серверами.</p><h4 id="p3.3.1">3.3.1. Клиент-Клиенту</h4><p>Класса подобных сообщений нет, который позволяет отсылать сообщение от пользователя, к каждому другому клиенту.</p><h4 id="p3.3.2">3.3.2. Клиент-Серверу</h4><p>Многие команды, которые в результате изменения информации (такой как членство канала, режим канала, статус пользователя, etc), могут быть отправлены всем сервером по умолчанию, и их распространение не может быть изменено клиентом.</p><h4 id="p3.3.3">3.3.3. Сервер-Серверу</h4><p>Пока многие сообщения между серверами распространяются на все «другие» серверы, требования для любого такого сообщения - влиять на каждого пользователя, канал или сервер. С тех пор, как эти начальные пункты находятся в IRC, почти все сообщения, отправленные с сервера, являются извещениями для всех остальных присоединенных серверов.</p><h2 id="p4">4. Детальное рассмотрение сообщений</h2><p>На следующих страницах описывается каждое сообщение узнаваемое IRC-сервером и клиентом. Все команды, описанные в этом разделе должны быть обеспечены любым сервером для этого протокола.</p><p>Когда приходит ответ ERR_NOSUCSERVER, это значит, что параметр &lt;server&gt; не найден. Сервер может не отсылать других ответов после этой команды.</p><p>Сервер, к которому присоединился клиент требует к парсингу (проверка на синтаксис. — прим. пер.) полное сообщение, возвращая любые найденные ошибки. Если сервер встретит смертельную ошибку в процессе парсинга, ошика может быть возвращена обратно клиенту с остановкой процесса проверки. Эта ошибка может быть вызвана некорректной командой, направление которой неизвестно серверу (сервер, никнейм или название канала подходят под эту категорию), не достаточно параметров или неправильные привилегии.</p><p>Если представлен полная список параметров, тогда каждый из них должен быть проверен на правильность и с присущим ответом вернуться клиенту. В этом случае сообщения, которые использовалист списками параметров, использующие запятую как разделитель пунктов, должны получить ответы для каждого такого пункта.</p><p>В примерах ниже, многие сообщения, кажется, используют полный формат:</p><pre>:Name COMMAND parameter list</pre><p>Как пример, сообщение от "Name" отправлена транзитом между серверами, где оно вставит имя оригинального отправителя сообщения и удаленные серверы смогут отправить ответ по правильному пути.</p><h3 id="p4.1">4.1. Регистрация Соединения</h3><p>Команды, описываемые здесь, используется для регистрации соединения с IRC-серверов, как для пользователя или сервер, как лучше и как правильней рассоединяться.</p><p>Команда "PASS" не требуется для регистрации каждого клиентского или серверного соединения, но она должна предшествовать сообщения сервера или быть после комбинации NICK/USER. Она очень рекомендуется, чтобы у всех серверных соединений был пароль, который дает некоторый уровень защиты в текущих соединениях. Рекомендуемые условия для регистрации клиента ниже:</p><ol><li>Pass-сообщение</li><li>Nick-сообщение</li><li>User-сообщение</li></ol><h4 id="p4.1.1">4.1.1. Password-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>PASS</td></tr><tr><td class="top">Параметры:</td><td>&lt;password&gt;</td></tr></table><p>Команда PASS используется для установки «парольного соединения». Пароль может и должен быть установлен перед любой попыткой регистрации установленного соединения. В текущий момент, это требования к клиентам отправлять команду PASS перед отправкой комбинации NICK/USER и серверы *должны* отправить команду PASS перед любой SERVER-командой. Пароль должен быть снабжен одним содержимым в C/N-строках (для серверов) или I-строках (для клиентов). Это возможно для отправки большого количества PASS-команд перед регистрированием, но только одно последнее используется для проверки и может не изменить уже зарегистрированое.</p><p>Числовые ответы:</p><pre>ERR_NEEDMOREPARAMS              ERR_ALREADYREGISTRED</pre><p>Пример:</p><pre>PASS secretpasswordhere</pre><h4 id="p4.1.2">4.1.2. Nick-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>NICK</td></tr><tr><td class="top">Параметры:</td><td>&lt;nickname&gt; [ &lt;hopcount&gt; ]</td></tr></table><p>NICK используется для установки пользовательского никнейма или изменения предыдущего. Параметр &lt;hopcount&gt; используется только серверами, показывая как далеко никнейм от своего "домашнего" сервера. При локальном соединении счетчик (hopcount) будет равен 0. Если этот параметр запросится клиентом, параметр будет игнорирован.</p><p>Если NICK-сообщение придет от сервера, который уже знает об идентификации никнейма другим клиентов, никнейм ... Результатом этого ..., все примеры этого никнейма сотрутся из серверной базы данных и командой KILL удалит этот никнейм из базы данных остальных серверов. Если сообщение NICK станет причиной изменения никнейма, то оргинальный (старый) никнейм удалится.</p><p>Если сервер получит идентичный NICK от клиента, который подсоединился напрямую, он может вывести ERR_NICKCOLLISION локальному клиенту, отменить команду NICK и не генерировать любых киллов.</p><p>Числовые ответы:</p><pre>ERR_NONICKNAMEGIVEN             ERR_ERRONEUSNICKNAME
ERR_NICKNAMEINUSE               ERR_NICKCOLLISION</pre><p>Пример:</p><pre>NICK Wiz                        ; Вступление нового никнейма "Wiz".

:WiZ NICK Kilroy                ; WiZ изменяет свой никнейм на Kilroy.</pre><h4 id="p4.1.3">4.1.3. User-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>USER</td></tr><tr><td class="top">Параметры:</td><td>&lt;username&gt; &lt;hostname&gt; &lt;servername&gt; &lt;realname&gt;</td></tr></table><p>Сообщение USER используется вначале соединения для указания имени пользователя, названия хоста, названия сервера и реального имени нового пользователя. Так же оно используется в соединении между серверами для указания нового пользователя, попавшего на IRC, с того только после USER или NICK, полученными от клиента, пользователь будет зарегистрирован.</p><p>Между серверами USER должен быть использован как префикс для клиентского NICKнейма. Замечено, что имя хоста и имя сервера обычно игнорируются IRC-сервером, когда приходит команда USER от клиента, присоединенного напрямую (по причине безопасности), но они использовались в соединении сервер-сервер. По этому NICK должен всегда посылаться удаленному серверу, когда новый юзер появляется в сети, перед посылкой USER.</p><p>Должно быть обьявлено, что параметр realname должен быть последним, потому что он может содержать пробелы и перед ним должен быть префикс (':'), делающим распознавание более лучшим.</p><p>С тех пор для клиентов стало обычным делом - сочинять свое имя исключительно с помощью USER, рекомендуется использовать "Сервер Идентификации" ("Identity Server")</p><p>Числовые ответы:</p><pre>ERR_NEEDMOREPARAMS              ERR_ALREADYREGISTRED</pre><p>Примеры:</p><pre>USER guest tolmoon tolsun :Ronnie Reagan
                               ; Пользователь зарегистрировал себя
                               ; под именем "guest" и его реальное имя
                               ; "Ronnie Reagan".


:testnick USER guest tolmoon tolsun :Ronnie Reagan
                               ; Сообщение между серверами с
                               ; никнеймом, установленным командой USER</pre><h4 id="p4.1.4">4.1.4. Server-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>SERVER</td></tr><tr><td class="top">Параметры:</td><td>&lt;servername&gt; &lt;hopcount&gt; &lt;info&gt;</td></tr></table><p>Эта команда используется для того, чтобы сервер мог понять, что на другом конце соединения тоже сервер. Так же используется для передачи данных сервера через всю сеть. Когда новый сервер присоединяется к сети, информация об этом расходится по всей сети. &lt;hopcount&gt; используется для передачи всем серверам информации о том, на каком расстоянии находятся друг от друга серверы. С полным списком серверов возможно создать карту серверного дерева, но маски хостов предотвратят подобное дело.</p><p>Сообщение SERVER может быть подтверждено только (a) соединеним, которое еще будет зарегистрировано и зарегистрировано как сервер, или (b) соединение другого сервера, в этом случае сообщение SERVER является, как бы, приветствием нового сервера.</p><p>Многие ошибки, случающиеся при получении команды SERVER, являются результатом разрыва соединения хостом-получателем (мишень SERVER). Ответы ошибок обычно посылаются, используя команду "ERROR", что несравненно лучше, чем числовые. Подобные ответы несут больше полезной информации.</p><p>Если SERVER-сообщение проверено и пытается пробится к серверу, который уже знает запрашиваемый сервер, соединение, с которого идет это сообщение, может быть закрыто (следую корректным процедурам).</p><p>Числовые ответы:</p><pre>ERR_ALREADYREGISTRED</pre><p>Пример:</p><pre>SERVER test.oulu.fi 1 :[tolsun.oulu.fi] Experimental server
                             ; Новый сервер test.oulu.fi представляет
                             ; себя и пытается зарегистрироваться.
                             ; В [] имя хоста для хоста, запущенного
                             ; test.oulu.fi.

:tolsun.oulu.fi SERVER csd.bu.edu 5 :BU Central Server
                             ; Сервер tolsun.oulu.fi является вашим
                             ; аплинком для csd.bu.edu, который
                             ; находится в 5 скачках от вас.</pre><h4 id="p4.1.5">4.1.5. Oper</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>OPER</td></tr><tr><td class="top">Параметры:</td><td>&lt;user&gt; &lt;password&gt;</td></tr></table><p>Сообщение OPER используется нормальным пользователем для взятия операторских привилегий. Комбинация &lt;user&gt; и &lt;password&gt; используется для идентификации пользователя, запрашивающего права IRC-оператора.</p><p>Если клиент послал команду OPER с корректным паролем для текущего пользователя, сервер информамирует сеть о новом операторе, используя "MODE +o" для никнейма клиента.</p><p>Сообщение OPER только для клиент-сеовер.</p><p>Числовые ответы:</p><pre>ERR_NEEDMOREPARAMS              RPL_YOUREOPER
ERR_NOOPERHOST                  ERR_PASSWDMISMATCH</pre><p>Пример:</p><pre>OPER foo bar                    ; Попытка зарегистрироваться как
                                ; оператору, используя имя пользователя
                                ; "foo" и пароль "bar".</pre><h4 id="p4.1.6">4.1.6. Quit-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>QUIT</td></tr><tr><td class="top">Параметры:</td><td>[&lt;Quit message&gt;]</td></tr></table><p>Сессия клиента заканчивается с QUIT-сообщением. Сервер должен закрыть соединение с клиентом, когда увидит посланное сообщение.</p><p>При нетсплите (разрыве соединения между двумя серверами), сообщение QUIT содержит в себе имена двух серверов, разделенные пробелами.</p><p>Первое имя это сервер, который соединяется, второе имя сервера, который отсоединился.</p><p>Если, по какой-либо причине, соединение клиента закрылось без введения клиентом команды QUIT (например, обрыв связи), сервер потребует запаса в quit-сообщениях с некоторой сортировкой сообщения, в поисках причины разрыва.</p><p>Числовые ответы:</p><pre>None.</pre><p>Пример:</p><pre>QUIT :Gone to have lunch        ; Обычный формат сообщения.</pre><h4 id="p4.1.7">4.1.7. Server Quit-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>SQUIT</td></tr><tr><td class="top">Параметры:</td><td>&lt;server&gt; &lt;comment&gt;</td></tr></table><p>Сообщение SQUIT требуется для указания мертвых или вышедших серверов. Если сервер желает оборвать соединение с другим сервером, он должен послать сообщение SQUIT другому серверу, используя имя другого сервера в качестве параметра server.</p><p>Эта команда так же доступна IRC-операторам для помощи в сохранеии сети соединений IRC-серверов в порядке. IRC-операторы могут так же послать SQUIT для удаленных серверных соединений. В этом случае, SQUID будет парситься каждым сервером, находящимся между IRC-оператором и удаленным сервером.</p><p>Параметр &lt;comment&gt; обеспечивается всеми операторами, которые запускают SQUIT для удаленных серверов (которые не присоединены к серверу, который хотят выключить), так что все операторы знают причины этого действия.</p><p>Один из серверов, которые находятся на другой стороне соединения, будет закрыт по требованию, высланным сообщением SQUID (ко всем другим соединениям) дл остальных серверво, которые рассматриваются как линки.</p><p>Подобным образом, SQUIT может быть послана другим серверам, находящимся в сети ради клиентов. В дополнение к этому, все члены канала, который разбило сплитом, может послать SQUIT-сообщение.</p><p>Если соединение сервера закрыто преждевременно (т.е сервер на другом конце соединения разорвал линк), сервер, который засек этот разрыв соединения, информирует всю сеть о том, что соединение закрыто и показывает поле &lt;comment&gt;, обьясняя причину рассоединения.</p><p>Числовые ответы:</p><pre>ERR_NOPRIVILEGES                ERR_NOSUCHSERVER</pre><p>Пример:</p><pre>SQUIT tolsun.oulu.fi :Bad Link ? ; серверный линк tolson.oulu.fi has
                                 ; будет закрыт, потому что "Bad Link".

:Trillian SQUIT cm22.eng.umd.edu : Server out of control
                                 ; сообщение от Trillian, отсоединило
                                 ; cm22.eng.umd.edu от сети,
                                 ; потому что "Server out of control".</pre><h3 id="p4.2">4.2. Операторы каналов</h3><p>Этот раздел посвящен управлению каналами, их настройками (режимы каналов), и их содержимым (обычно - клиенты). Для обеспечения этого, число коренных обстоятельств неизбежен,  когда клиенты на разных концах сети начнут посылать команды, которые приведут в конечном счете к конфликту. Так же требует, что серверы хранят историю никнейма, обеспечивая ввод параметра &lt;nick&gt;, сервер проверяет его историю, в случае, если он был изменен.</p><h4 id="p4.2.1">4.2.1. Join-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>JOIN</td></tr><tr><td class="top">Параметры:</td><td>&lt;channel&gt;{,&lt;channel&gt;} [&lt;key&gt;{,&lt;key&gt;}]</td></tr></table><p>Команда JOIN используется клиентом для входа на канал. Так или иначе, клиенту позволительно войти на канал, проверенным только сервером, к которому подсоединен; все остальные серверы автоматически добавляют пользователя на канал, когда получают уведомление от других серверов. Условия выполнения все того, ниже:</p><ol><li>Пользователь может быть приглашен, если канал invite-only;</li><li>Никнейм/имя пользователя/имя хоста не должны быть забанеными;</li><li>Если установлен пароль, но должен быть верным.</li></ol><p>Это обсуждается в разделе MODE-команды более подробно (см. 4.2.3). Когда пользователи заходят на канал, они получат уведомление о всех командах их сервера. Оно вмещает в себе MODE, KICK, PART, QUIT и, конечно же, PRIVMSG/NOTICE. Команда JOIN требуется для сообщения всем серверам, чтобы каждый сервер знал, где искать пользователей, которые находятся на канале. Это позволяет оптимальную передачу сообщений PRIVMSG/NOTICE в канал.</p><p>Если JOIN прошла хорошо, пользователь получает топик канала (используя RPL_TOPIC) и список пользователей, которые находятся на канале (используя RPL_NAMREPLY).</p><p>Числовые ответы:</p><pre>ERR_NEEDMOREPARAMS              ERR_BANNEDFROMCHAN
ERR_INVITEONLYCHAN              ERR_BADCHANNELKEY
ERR_CHANNELISFULL               ERR_BADCHANMASK
ERR_NOSUCHCHANNEL               ERR_TOOMANYCHANNELS
RPL_TOPIC</pre><p>Примеры:</p><pre>JOIN #foobar                    ; вход на канал #foobar.

JOIN &amp;foo fubar                 ; вход на канал &amp;foo, используя ключ "fubar".

JOIN #foo,&amp;bar fubar            ; вход на канал #foo, используя ключ "fubar"
                                ; и на канал &amp;bar без использования ключа.

JOIN #foo,#bar fubar,foobar     ; вход на канал #foo, используя ключ "fubar".
                                ; и на канал #bar, используя ключ "foobar".

JOIN #foo,#bar                  ; вход на каналы #foo и #bar.

:WiZ JOIN #Twilight_zone        ; JOIN-сообщение от WiZ</pre><h4 id="p4.2.2">4.2.2. Part-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>PART</td></tr><tr><td class="top">Параметры:</td><td>&lt;channel&gt;{,&lt;channel&gt;}</td></tr></table><p>Сообщение PART удаляет клиента, пославшего эту команду из списка активных пользователей для всех каналов, указанных в параметре.</p><p>Числовые ответы:</p><pre>ERR_NEEDMOREPARAMS              ERR_NOSUCHCHANNEL
ERR_NOTONCHANNEL</pre><p>Примеры:</p><pre>PART #twilight_zone             ; покинуть канал "#twilight_zone"

PART #oz-ops,&amp;group5            ; покинуть каналы "&amp;group5" и
                                ; "#oz-ops".</pre><h4 id="p4.2.3">4.2.3. Mode-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>MODE</td></tr></table><p>Команда MODE интересна своей двоякостью в IRC. Она позволяет изменять режим как имен пользователей, так и каналов. Рациональность этого выбора в том, что один день никнеймы будут устаревшими. Так же дела обстоят и с настройкой канала.</p><p>Когда проверяются MODE-сообщения, это рекомендуется делать, ибо вводимое сообщение будет проверено первым, и тогда изменения, которые проверены и верны, вступят в силу.</p><h5 id="p4.2.3.1">4.2.3.1. Режимы канала</h5><table class="nobrd"><tr><td class="top">Параметры:</td><td>&lt;channel&gt; {[+|-]|o|p|s|i|t|n|b|v} [&lt;limit&gt;] [&lt;user&gt;]<br />[&lt;ban mask&gt;]</td></tr></table><p>Команда MODE предоставляет операторам канала изменять характеристики «своего» канала. Так же есть требование, что изменять режимы канала могут только те операторы канала, которые создали канал.</p><p>Список доступных режимов канала:</p><ul><li>o - брать/давать привилегии операторов канала</li><li>p - флаг приватности канала;</li><li>s - флаг секретности канала;</li><li>i - флаг канала invite-only;</li><li>t - при установке этого флага, менять топик могут только операторы;</li><li>n - запрещает сообщения на канал от посторонних клиентов;</li><li>m - модерируемый канал;</li><li>l - установка ограничения на количество пользователей;</li><li>b - установка маски бана;</li><li>v - брать/давать возможность голоса при модерируемом режиме;</li><li>k - установка на канал ключа (пароля).</li></ul><p>Когда используются установки 'o' и 'b', ограничение на полный из трех When using the 'o' and 'b' options, a restriction on a total of three per mode command has been imposed.  That is, any combination of 'o' and</p><h5 id="p4.2.3.2">4.2.3.2. Параметры пользователя</h5><table class="nobrd"><tr><td class="top">Параметры:</td><td>&lt;nickname&gt; {[+|-]|i|w|s|o}</td></tr></table><p>Режимы пользователя обычны такими изменениями, которые воздействуют на то, каким видят клиента или какие «экста»-сообщения посылает клиент. Пользовательская команда MODE может относитется или к отправителю сообщения или к тому, чей никнейм указали в качестве параметра.</p><p>Доступные режимы:</p><ul><li>i - делает пользователя невидимым;</li><li>s - marks a user for receipt of server notices;</li><li>w - user receives wallops;</li><li>o - флаг оператора.</li></ul><p>Дополнительне режимы будут доступны позже.</p><p>Если пользователь пытается сделать себя оператором, используя "+o" флаг, его попытка будет проигнорирована. Это не разрешено, в отличие от чьего-либо «деопа» себя самого (используя "-o").</p><p>Числовые ответы:</p><pre>ERR_NEEDMOREPARAMS              RPL_CHANNELMODEIS
ERR_CHANOPRIVSNEEDED            ERR_NOSUCHNICK
ERR_NOTONCHANNEL                ERR_KEYSET
RPL_BANLIST                     RPL_ENDOFBANLIST
ERR_UNKNOWNMODE                 ERR_NOSUCHCHANNEL

ERR_USERSDONTMATCH              RPL_UMODEIS
ERR_UMODEUNKNOWNFLAG</pre><p>Примеры:</p><pre>        Использования режимов канала:

MODE #Finnish +im               ; Делает канал #Finnish модерируемым и
                                ; 'invite-only'.

MODE #Finnish +o Kilroy         ; Дает привилегии оператора Kilroy
                                ; на канале #Finnish.

MODE #Finnish +v Wiz            ; Дает WiZ право голоса на канале #Finnish.

MODE #Fins -s                   ; Убирает флаг 'secret' с канала #Fins.

MODE #42 +k oulu                ; Устанавливает на канал пароль "oulu".

MODE #eu-opers +l 10            ; Устанавливает максимальное количество
                                ; пользователей на канале (10).

MODE &amp;oulu +b                   ; Вывод списка масок бана для канала.

MODE &amp;oulu +b *!*@*             ; Предотвращает вход на канал для любого
                                ; пользователя.

MODE &amp;oulu +b *!*@*.edu         ; Предотвращает вход любого пользователя
                                ; подходящего под маску хоста *.edu.</pre><pre>     Использование пользовательских режимов:

:MODE WiZ -w                    ; turns reception of WALLOPS messages
                                ; off for WiZ.

:Angel MODE Angel +i            ; Сообщение от Angel далает его невидимым.

MODE WiZ -o                     ; WiZ 'деопится' (убирает статус
                                ; оператора). Прямой доступ к этой команде
                                ; ("MODE WiZ +o") не может быть доступен
                                ; пользователям, с тех пор как введена
                                ; команда OPER.</pre><h4 id="p4.2.4">4.2.4. Topic-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>TOPIC</td></tr><tr><td class="top">Параметры:</td><td>&lt;channel&gt; [&lt;topic&gt;]</td></tr></table><p>Используется для изменения или просмотра топика канала. Топик канала &lt;channel&gt; останется прежним, если не будет дан новый топик &lt;topic&gt;. Если параметр &lt;topic&gt; подставлен, - топик канала изменится, если режим канала позволяет это сделать.</p><p>Числовые ответы:</p><pre>ERR_NEEDMOREPARAMS              ERR_NOTONCHANNEL
RPL_NOTOPIC                     RPL_TOPIC
ERR_CHANOPRIVSNEEDED</pre><p>Примеры:</p><pre>:Wiz TOPIC #test :New topic     ; Пользователь Wiz устанавливает топик.

TOPIC #test :another topic      ; Установка на #test топика "another
                                ; topic".

TOPIC #test                     ; Проверка топика на #test.</pre><h4 id="p4.2.5">4.2.5. Names-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>NAMES</td></tr><tr><td class="top">Параметры:</td><td>[&lt;channel&gt;{,&lt;channel&gt;}]</td></tr></table><p>Используя команду NAMES, пользователь может получитт список всех никнеймов, которые он видит на любом канале, на которых они находятся. Имена каналов, которые они могут видеть это те, которые не приватные (+p) или секретные (+s), или те, на которых сидит пользователь. Параметр &lt;channel&gt; указывает, с какого канала(ов) собрать информацию. Эта команда не возвращает кода ошибки из-за неправильных названий каналов.</p><p>Если параметр &lt;channel&gt; не задан, выводится список всех каналов и имен тех, кто на них находится. И к концу списка - список пользователей, которые видимые, но не находятся ни на одной канале, или не на одном видимом канале, которые начинаюся как 'channel' "*".</p><p>Числовые ответы:</p><pre>RPL_NAMREPLY                    RPL_ENDOFNAMES</pre><p>Примеры:</p><pre>NAMES #twilight_zone,#42        ; Список видимых пользователей на канале
                                ; #twilight_zone и #42, если каналы
                                ; видимы вам.

NAMES                           ; Список всех видимых каналов и
                                ; пользователей.</pre><h4 id="p4.2.6">4.2.6. List-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>LIST</td></tr><tr><td class="top">Параметры:</td><td>[&lt;channel&gt;{,&lt;channel&gt;} [&lt;server&gt;]]</td></tr></table><p>LIST используется для вывода списка канало и их топиков. Если используется параметр &lt;channel&gt;, то выводится только статус этого канала. Приватные каналы указаны (без их топиков) как каналы "Prv", без указания количества клиентов, сидящих на этом канале. Само собой - секретные каналы не приводятся в списке, если, конечно, клиент не является членом подобного канала.</p><p>Числовые ответы:</p><pre>ERR_NOSUCHSERVER                RPL_LISTSTART
RPL_LIST                        RPL_LISTEND</pre><p>Примеры:</p><pre>LIST                            ; Список всех каналов.

LIST #twilight_zone,#42         ; Список каналов #twilight_zone и #42</pre><h4 id="p4.2.7">4.2.7. Invite-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>INVITE</td></tr><tr><td class="top">Параметры:</td><td>&lt;nickname&gt; &lt;channel&gt;</td></tr></table><p>Сообщение INVITE используется для приглашения пользователей на канал. Параметр &lt;nickname&gt; - указание пользователя, которого требуется пригласить на канал, который указывается следующим параметром &lt;channel&gt;. Не обязательно, чтобы канал, на который приглашается указанный пользователь, был отсутствующим или не правильным каналом. Приглашая пользователя на канал, который является invite-only (MODE +i), клиент, посылающий приглашение, должет быть указан как оператор канала на данном канале.</p><p>Числовые ответы:</p><pre>ERR_NEEDMOREPARAMS              ERR_NOSUCHNICK
ERR_NOTONCHANNEL                ERR_USERONCHANNEL
ERR_CHANOPRIVSNEEDED
RPL_INVITING                    RPL_AWAY</pre><p>Примеры:</p><pre>:Angel INVITE Wiz #Dust         ; Пользователь Angel пригласил WiZ на
                                ; канал #Dust

INVITE Wiz #Twilight_Zone       ; Команда приглашения WiZ на канал
                                ; #Twilight_zone</pre><h4 id="p4.2.8">4.2.8. Kick-команда</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>KICK</td></tr><tr><td class="top">Параметры:</td><td>&lt;channel&gt; &lt;user&gt; [&lt;comment&gt;]</td></tr></table><p>Команда KICK может быть использована для ускоренного удаления пользователя с канала. Как бы выпинывает его с канала (быстрый PART).</p><p>Только оператора канала может "кикнуть" другого пользователя с канала. Каждый сервер, который получил сообщение KICK, проверяет ее на достоверность (напрмер, что отправитель являтся оператором канала), перед удалением жертвы с канала.</p><p>Числовые ответы:</p><pre>ERR_NEEDMOREPARAMS              ERR_NOSUCHCHANNEL
ERR_BADCHANMASK                 ERR_CHANOPRIVSNEEDED
ERR_NOTONCHANNEL</pre><p>Примеры</p><pre>KICK &amp;Melbourne Matthew         ; Кик Matthew с канала &amp;Melbourne

KICK #Finnish John :Speaking English
                                ; Кик John с #Finnish, используя
                                ; "Speaking English", как причину
                                ; (комментарий).

:WiZ KICK #Finnish John         ; KICK-сообщение WiZ удаляет John
                                ; с канала #Finnish</pre><p class="note">Примечание: Возможно расширение команды KICK следующими параметрами:</p><pre>&lt;channel&gt;{,&lt;channel&gt;} &lt;user&gt;{,&lt;user&gt;} [&lt;comment&gt;]</pre><h3 id="p4.3">4.3. Серверные запросы и команды</h3><p>Группа команд запроса сервера была разработана для возврата информации о любом сервере, который находится в сети. Все присоединенные сервера должны отвечать на эти запросы и отвечать корректно. Любой неверный ответ должен быть рассмотрен как знак того, что сервер неисправен и его следует отсоединить/отключить до прояснения ситуации.</p><p>В этих запросах, в качестве параметра &lt;server&gt; можно указать как никнейм или сервер, так и маску имен. Для каждого параметра будет создан один запрос и установлены ответы.</p><h4 id="p4.3.1">4.3.1. Version-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>VERSION</td></tr><tr><td class="top">Параметры:</td><td>[&lt;server&gt;]</td></tr></table><p>Используется для запроса версии программы сервера. Параметр &lt;server&gt; используется для указания сервера, к которому клиент не подсоединен.</p><p>Числовые ответы:</p><pre>ERR_NOSUCHSERVER                RPL_VERSION</pre><p>Примеры:</p><pre>:Wiz VERSION *.se               ; Сообщение от Wiz для проверки версии
                                ; сервера, попадающего под маску "*.se"

VERSION tolsun.oulu.fi          ; Проверка версии сервера "tolsun.oulu.fi".</pre><h4 id="p4.3.2">4.3.2. Stats-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>STATS</td></tr><tr><td class="top">Параметры:</td><td>[&lt;query&gt; [&lt;server&gt;]]</td></tr></table><p>STATS предназначен для запроса статистики указанного сервера. Если параметр &lt;server&gt; опущен, то возвращается обратно только окончание stats-ответа.</p><p>Запрос может быть дан любым письмом, которое проверяется только сервером-получателем (если указан параметр &lt;server&gt;) и в противном случае - на промежуточных серверах, игнорируя и неизменяя. Следующие запросы содержаться в текущем IRC, обеспечивая и предоставляя большую часть информации о нужном сервере. Хотя, они могут не поддерживаться в некоторых версиях, все серверы будут обеспечивать корректный ответ на запрос STATS, который содержится в текущих используемых форматах ответа.</p><p>На данный момент поддерживаются следующие запросы:</p><ul><li>c - возврат списка серверов, к которым может присоединится сервер;</li><li>h - возврат списка серверов, которые доступны как хабы или свободные;</li><li>i - возврат списка хостов, сервер которых доспускает соединение клиента;</li><li>k - возврат списка забаненых имен пользователей/хостов для указанного сервера;</li><li>l - возврат списка серверных соединений, проказывающих длину каждого соединения и траффик в байтах и сообщениях для каждого направления;</li><li>m - возврат списка команд, поддерживаемых сервером и используемый подсчет для каждого, если не равен нулю;</li><li>o - возврат списка хостов, с которых нормальные клиенты могут достать операторов;</li><li>y - показ Y (Class) строк из конфигурационного файла сервера;</li><li>u - возврат строки, показывающей как давно был поднят сервер.</li></ul><p>Числовые Ответы:</p><pre>ERR_NOSUCHSERVER
RPL_STATSCLINE                  RPL_STATSNLINE
RPL_STATSILINE                  RPL_STATSKLINE
RPL_STATSQLINE                  RPL_STATSLLINE
RPL_STATSLINKINFO               RPL_STATSUPTIME
RPL_STATSCOMMANDS               RPL_STATSOLINE
RPL_STATSHLINE                  RPL_ENDOFSTATS</pre><p>Примеры:</p><pre>STATS m                         ; проверка используемой команды для
                                ; сервера, с которым вы соединены

:Wiz STATS c eff.org            ; запрос WiZ для C/N строки
                                ; информации с сервера eff.org</pre><h4 id="p4.3.3">4.3.3. Links-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>LINKS</td></tr><tr><td class="top">Параметры:</td><td>[[&lt;remote server&gt;] &lt;server mask&gt;]</td></tr></table><p>С LINKS пользователь может создать список всех серверов, которые знают сервер ответом на запрос. Возвращенный список серверов должен попадать под маску, или если маска не задана - вернуть полный список.</p><p>Если &lt;remote server&gt; задан в дополнительно в &lt;server mask&gt;, команда LINKS отправится на первый сервер, найденный по этому значению, имени (если несколько), и этот сервер будет опрашиваться.</p><p>Числовые ответы:</p><pre>ERR_NOSUCHSERVER
RPL_LINKS                       RPL_ENDOFLINKS</pre><p>Примеры:</p><pre>LINKS *.au                      ; список всех серверов, попадающих
                                ; под маску *.au;

:WiZ LINKS *.bu.edu *.edu       ; LINKS-сообщение от WiZ первому серверу
                                ; из попадающих под маску *.edu для выдачи
                                ; списка серверов с маской *.bu.edu.</pre><h4 id="p4.3.4">4.3.4. Time-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>TIME</td></tr><tr><td class="top">Параметры:</td><td>[&lt;server&gt;]</td></tr></table><p>Используется для запроса локального времени указанного сервера. Если параметр &lt;server&gt; опущен, будет выдан ответ с сервера ващего соединения.</p><p>Числовые ответы:</p><pre>ERR_NOSUCHSERVER                RPL_TIME</pre><p>Примеры:</p><pre>TIME tolsun.oulu.fi             ; проверка времени на сервере
                                ; "tolson.oulu.fi"

Angel TIME *.au                 ; пользователь Angel запрашивает время
                                ; на серверах, попадающих под маску "*.au"</pre><h4 id="p4.3.5">4.3.5. Connect-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>CONNECT</td></tr><tr><td class="top">Параметры:</td><td>&lt;target server&gt; [&lt;port&gt; [&lt;remote server&gt;]]</td></tr></table><p>Команда используется для попытки создания сервером нового соединения с другим сервером. CONNECT-сообщением могут пользоваться только IRC-операторы. Если удаленный сервер указан в строке параметров, он присоединяется к &lt;target server&gt; на &lt;port&gt;.</p><p>Числовые ответы:</p><pre>ERR_NOSUCHSERVER                ERR_NOPRIVILEGES
ERR_NEEDMOREPARAMS</pre><p>Примеры:</p><pre>CONNECT tolsun.oulu.fi          ; Попытка присоединиться к серверу
                                ; tolsun.oulu.fi

:WiZ CONNECT eff.org 6667 csd.bu.edu
                                ; CONNECT вызывает WiZ для соединения
                                ; eff.org и csd.bu.edu на порт 6667.</pre><h4 id="p4.3.6">4.3.6. Trace-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>TRACE</td></tr><tr><td class="top">Параметры:</td><td>[&lt;server&gt;]</td></tr></table><p>TRACE используется для поиска маршрута до указанного сервера. Каждый сервер, через которого проходит это сообщение, должен информировать отправителя о прозрачности линка и формировать цепочку ответов от использования "traceroute". После отправления ответа, он должен послать TRACE-сообщение следующему серверу и так до указанного сервера. Если параметр &lt;server&gt; опущен, то отправителю придет ответ, который будет содержать всех серверы, которые соединены с его сервером.</p><p>Если указанный в &lt;server&gt; является текущим сервером, тогда придет ответ, содержащий все серверы и пользователей, которые присоединены к нему, хотя просмотр пользователей разрешается делать только операторам. Если в &lt;server&gt; указать никнейм, придет ответ для этого никнейма.</p><p>Числовые ответы:</p><pre>ERR_NOSUCHSERVER</pre><p>Если TRACE отправлено к другому серверу, все промежуточные серверы должны вернуть ответ RPL_TRACELINK для сообщения о прохождении сквозь них TRACE-сообщения.</p><pre>RPL_TRACELINK</pre><p>TRACE-ответ может быть составлен из любых следующих числовых ответов.</p><pre>RPL_TRACECONNECTING             RPL_TRACEHANDSHAKE
RPL_TRACEUNKNOWN                RPL_TRACEOPERATOR
RPL_TRACEUSER                   RPL_TRACESERVER
RPL_TRACESERVICE                RPL_TRACENEWTYPE
RPL_TRACECLASS</pre><p>Примеры:</p><pre>TRACE *.oulu.fi                 ; TRACE серверу из маски *.oulu.fi

:WiZ TRACE AngelDust            ; TRACE используется WiZ для никнейма AngelDust</pre><h4 id="p4.3.7">4.3.7. Admin-команда</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>ADMIN</td></tr><tr><td class="top">Параметры:</td><td>[&lt;server&gt;]</td></tr></table><p>Сообщение ADMIN используется для поиска администратора указанного сервера, или текущего сервера, если параметр &lt;server&gt; не указан. Каждый сервер должен иметь возможность отправить ADMIN-сообщения другим серверам.</p><p>Числовые ответы:</p><pre>ERR_NOSUCHSERVER
RPL_ADMINME                     RPL_ADMINLOC1
RPL_ADMINLOC2                   RPL_ADMINEMAIL</pre><p>Примеры:</p><pre>ADMIN tolsun.oulu.fi            ; запрос ADMIN-ответа с tolsun.oulu.fi

:WiZ ADMIN *.edu                ; ADMIN-запрос от WiZ для первого
                                ; сервера, найденного по маске *.edu.</pre><h4 id="p4.3.8">4.3.8. Info-команда</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>INFO</td></tr><tr><td class="top">Параметры:</td><td>[&lt;server&gt;]</td></tr></table><p>Команда запрашивает информацию, которой описывается сервер: версия, когда скомпилирован, patchlevel, когда запущен, и другую информацию, которая может заинтерисовать запрашивающего.</p><p>Числовые ответы:</p><pre>ERR_NOSUCHSERVER
RPL_INFO                        RPL_ENDOFINFO</pre><p>Примеры:</p><pre>INFO csd.bu.edu                 ; запрос INFO с csd.bu.edu

:Avalon INFO *.fi               ; INFO запрошен Avalon для первого
                                ; сервера, найденного по маске *.fi.

INFO Angel                      ; запрос INFO от сервера, к которому
                                ; подсоединен Angel.</pre><h3 id="p4.4">4.4. Сообщения отправки</h3><p>Основное предназначение IRC-протокола - предоставление основы для связи и общения между клиентами. PRIVMSG и NOTICE являются текстовыми сообщениями от одного клиента к другим.</p><h4 id="p4.4.1">4.4.1. Private-сообщения</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>PRIVMSG</td></tr><tr><td class="top">Параметры:</td><td>&lt;receiver&gt;{,&lt;receiver&gt;} &lt;text to be sent&gt;</td></tr></table><p>PRIVMSG используется для частной переписки между пользователями. &lt;receiver&gt; - никнейм получателя сообщения. Так же там можно указать список имен или каналов, разделенных запятыми.</p><p>Параметр &lt;receiver&gt; так же может быть маской хоста (#mask) или маски сервера ($mask). В обоих случаях сервер будет отсылать PRIVMSG только тем, кто попадает под серверную или хост-маску. Маска должна содержать в себе как минимум 1 (одну) ".". Это требование вынуждаеит пользователей отсылать сообщения к "#*" или "$*", которые уже потом рассылаются всем пользователям; по опыту, этим злоупотребляет большое количество пользователей. В масках используются такие символы как '*' и '?'. Это расширение команды PRIVMSG доступно только IRC-операторам.</p><p>Числовые ответы:</p><pre>ERR_NORECIPIENT                 ERR_NOTEXTTOSEND
ERR_CANNOTSENDTOCHAN            ERR_NOTOPLEVEL
ERR_WILDTOPLEVEL                ERR_TOOMANYTARGETS
ERR_NOSUCHNICK
RPL_AWAY</pre><p>Примеры:</p><pre>:Angel PRIVMSG Wiz :Hello are you receiving this message ?
                                ; Сообщение от Angel к Wiz;

PRIVMSG Angel :yes I'm receiving it !receiving it !'u>(768u+1n) .br
                                ; Сообщение к Angel;

PRIVMSG jto@tolsun.oulu.fi :Hello !
                                ; Сообщение от клиента на сервер.
                                ; tolsun.oulu.fi с именем "jto";

PRIVMSG $*.fi :Server tolsun.oulu.fi rebooting.
                                ; Сообщение ко всем, кто находится на
                                ; серверах, попадающих под маску *.fi;

PRIVMSG #*.edu :NSFNet is undergoing work, expect interruptions
                                ; Сообщение для всех пользователей,
                                ; сидящих на хосте, попадающим под маску *.edu.</pre><h4 id="p4.4.2">4.4.2. Notice-сообщения</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>NOTICE</td></tr><tr><td class="top">Параметры:</td><td>&lt;nickname&gt; &lt;text&gt;</td></tr></table><p>Сообщение NOTICE используеьтся подобно PRIVMSG. Отличия между ними в том, что на NOTICE-сообщение ждать автоматического ответа бесполезно. Это правило распространяется и на серверы, - они не должны отсылать обратно сообщения-NOTICE клиентам, содержащие ошибки. Обьект этого правила заключается в петле между клиентом, автоматически посылающим что-либо в ответ на что-либо полученное. Обычно, это используется автоматами (клиентами с AI или другой интерактивной программой, управляющей их действиями).</p><p>См. PRIVMSG для более подробной информации о запросах и ответах.</p><h3 id="p4.5">4.5. Пользовательские запросы</h3><p>Пользовательские запросы являют собой группу команд, которая главным образом касается поиска подробностей на особенном пользователе или группы пользователей. Когда используются маски с разнымит командами, если они подставляются, они должны возвращать информацию только тех пользователей, которые «видны» вам. Видимость пользователя определяется как комбинация режима пользователя и установки каналов.</p><h4 id="p4.5.1">4.5.1. Who-запрос</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>WHO</td></tr><tr><td class="top">Параметры:</td><td>[&lt;name&gt; [&lt;o&gt;]]</td></tr></table><p>Сообщение WHO используется клиентом для создания запроса, который возвращает список информации, которая «подставляется» параметром &lt;name&gt; указанным клиентом. В отсутствии параметра &lt;name&gt;, все видимые (пользователи, которых не видно (пользовательский режим +i) и те, кто находятся на других каналах, нежели запрашивающий клиент) попадают в список. Результат может быть достигнут использованием вместо &lt;name&gt; "0" или других масок, которые будут подставлять все возможные окончания.</p><p>&lt;name&gt; обратиться к WHO, подставленному против пользовательского хоста, сервера, реального имени или никнейма, если канал &lt;name&gt; не найден.</p><p>Если параметр "o" прошел только операторам, обеспечивается возврат только маски имени.</p><p>Числовые ответы:</p><pre>ERR_NOSUCHSERVER
RPL_WHOREPLY                    RPL_ENDOFWHO</pre><p>Примеры:</p><pre>WHO *.fi                        ; Список пользователей, кто стоит
                                ; напротив "*.fi";

WHO jto* o                      ; Список пользователей, кто находится
                                ; напротив подходящей маски "jto*", если
                                ; они являются операторами.</pre><h4 id="p4.5.2">4.5.2. Whois-запрос</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>WHOIS</td></tr><tr><td class="top">Параметры:</td><td>[&lt;server&gt;] &lt;nickmask&gt;[,&lt;nickmask&gt;[,...]]</td></tr></table><p>Это сообщение используется для запроса информации об отдельном пользователе. Сервер будет отвечать на это сообщением различными числовыми сообщениями, указывая разность положений каждого пользователя, который попал под маску (если вы указали ее). Если в &lt;nickmask&gt; не указана никакая информация о том, какой никнейм опросить, вы получите информацию о всех доступных никнеймах. Запятая разделяет список никнеймов.</p><p>Предыдущая версия отправляла запрос на указанный сервер. Это полезно, если хотите знать как долго опрашиваемый пользователь будет бездействовать, как только локальный сервер (т.е, пользователь напрямую соединен с сервером) узнает эту информацию.</p><p>Числовые ответы:</p><pre>ERR_NOSUCHSERVER                ERR_NONICKNAMEGIVEN
RPL_WHOISUSER                   RPL_WHOISCHANNELS
RPL_WHOISCHANNELS               RPL_WHOISSERVER
RPL_AWAY                        RPL_WHOISOPERATOR
RPL_WHOISIDLE                   ERR_NOSUCHNICK
RPL_ENDOFWHOIS</pre><p>Примеры:</p><pre>WHOIS wiz                       ; возврат пользователю информацию
                                ; о никнейме WiZ;

WHOIS eff.org trillian          ; опрос сервера eff.org о информации
                                ; пользователя trillian.</pre><h4 id="p4.5.3">4.5.3. Whowas-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>WHOWAS</td></tr><tr><td class="top">Параметры:</td><td>&lt;nickname&gt; [&lt;count&gt; [&lt;server&gt;]]</td></tr></table><p>WHOWAS запрашивает информацию о никнейме, который долгое время отсутствует. Это может понадобиться при изменении никнейма или если пользователь покинул IRC. В ответе на этот запрос, сервер ищет историю никнейма, просматривая все никнеймы, которые хоть как-то похожи на нужный (без использования масок). Наибольший размер найденного отсылается обратно. Если было многоразовый ввод, ответы будут равны числу указанного в &lt;count&gt; (или все из них, если параметр будет не задан).</p><p>Числовый ответы:</p><pre>ERR_NONICKNAMEGIVEN             ERR_WASNOSUCHNICK
RPL_WHOWASUSER                  RPL_WHOISSERVER
RPL_ENDOFWHOWAS</pre><p>Примеры:</p><pre>WHOWAS Wiz                      ; возврат всей информации в истории о
                                ; никнейме "WiZ";

WHOWAS Mermaid 9                ; возврат 9 наиболее запрашиваемых
                                ; вводов в никнейм-истории для "Mermaid";

WHOWAS Trillian 1 *.edu         ; возврат наиболее запрашиваемой
                                ; истории для "Trillian" с первого
                                ; сервера, попавшего под маску  "*.edu".</pre><h3 id="p4.6">4.6. Всевозможные сообщения</h3><p>Сообщения этого раздела не попали в другие категории, но они так же доступны и требуемые протоколом.</p><h4 id="p4.6.1">4.6.1. Kill-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>KILL</td></tr><tr><td class="top">Параметры:</td><td>&lt;nickname&gt; &lt;comment&gt;</td></tr></table><p>Сообщение KILL используется соединением клиент-сервер для закрытия сервером текущего соедиения. KILL используется серверами, когда они замечают двойной вход в список разрешенных никнеймов и удаляют второго зашедшего. Так же, команда доступна IRC-операторам.</p><p>Клиенты, у которых настройки позволяют автоматически пересоединяться, делают эту команду бесполезной. Этому так же может служить ухудшение связи и использоваться в остановке большого количества ошибок, любой пользователь может выбрать получение KILL-сообщений, созданных для других, сохраняя «глаз» на наличествующей проблеме.</p><p>В месте, где к никнеймам существует требование уникальности, сообщения KILL отправляется всем замеченым «дупликатам» (что пытаются зарегистрировать двух пользователей с некоторым никнеймом) в надежде, что один из них исчезнет и останется только один.</p><p>Коментарий указывается для сообщения причины KILL. Для KILL'ов, созданных сервером, обычно причина указывается как конфликт между двумя никнеймами. Для пользователей это является достаточной адекватной причиной для удовлетворения тех, кто видел это. Предотвращая обманные KILL'ы, коментарий так же показывает 'kill-path', который обновляется каждым сервером, тем самым показывая "источник" KILL-сообщения.</p><p>Числовые ответы:</p><pre>ERR_NOPRIVILEGES                ERR_NEEDMOREPARAMS
ERR_NOSUCHNICK                  ERR_CANTKILLSERVER</pre><p>Примеры:</p><pre>KILL David (csd.bu.edu &lt;- tolsun.oulu.fi)
                                ; Никнейм застрял между csd.bu.edu
                                ; и tolson.oulu.fi</pre><p class="note">Замечание: Рекомендуется разрешить "убивать" других пользователей только IRC-операторам. В идеальном мире не каждому оператору понадобиться делать подобное.</p><h4 id="p4.6.2">4.6.2. Ping-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>PING</td></tr><tr><td class="top">Параметры:</td><td>&lt;server1&gt; [&lt;server2&gt;]</td></tr></table><p>PING испольщуется для тестирования наличия активности клиента на другом конце соединения. Это сообщение посылается с регулярными интервалами, если не замечено другой активности, исходящей от соединения. Если соединение не отвечает на PING - соединение закрыто.</p><p>Любой клиент, который получил PING-сообщение, должен ответить на &lt;server1&gt; (сервер, который посылает сообщение PING) так быстро, как это только возможно, с PONG-сообщением, указывая на то, что он еще здесь и живой. Серверы могут не отвечать на команды PING, но полагаясь на PING'и с другого конца соединения, устанавливают живо ли соединение. Если указан параметр &lt;server2&gt;, PING'сообщение перенаправляется туда.</p><p>Числовые ответы:</p><pre>ERR_NOORIGIN                    ERR_NOSUCHSERVER</pre><p>Примеры:</p><pre>PING tolsun.oulu.fi             ; сервер послал PING-сообщение другому
                                ; серверу для проверки живости соединения.

PING WiZ                        ; PING-сообщение послано никнейму WiZ</pre><h4 id="p4.6.3">4.6.3. Pong-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>PONG</td></tr><tr><td class="top">Параметры:</td><td>&lt;daemon&gt; [&lt;daemon2&gt;]</td></tr></table><p>PONG является ответной реакцией на PING. Если дан параметр &lt;daemon2&gt;, это сообщение должно быть перенаправленна данному демону. Параметр &lt;daemon&gt; является именем демона, который отвечает на PING-сообщение и генерирует это сообщение.</p><p>Числовые ответы:</p><pre>ERR_NOORIGIN                    ERR_NOSUCHSERVER</pre><p>Примеры:</p><pre>PONG csd.bu.edu tolsun.oulu.fi  ; PONG-сообщение от csd.bu.edu к
                                ; tolsun.oulu.fi</pre><h4 id="p4.6.4">4.6.4. Error-сообщение</h4><table class="nobrd"><tr><td class="top">Команда:</td><td>ERROR</td></tr><tr><td class="top">Параметры:</td><td>&lt;error message&gt;</td></tr></table><p>Команда ERROR предназначена для использования серверами, когда они сообщают о серьезных или смертельных ошибках IRC-операторам. Сообщение так же может быть отправлена с одного сервера на другой, но это не сможет быть подтверждено с любых нормальных неизвестных клиентов.</p><p>ERROR используется для сообщения ошибок, которые случаются только при соединениях класса сервер-к-серверу. Сообщение отсылается на сервер с другого конца соединения (который оправляет его всем IRC-операторам, подсоединенным к нему) и всем операторам текущего соединения. Оно не может быть отослано каким-либо другим серверам, если оно не получено с сервера.</p><p>Когда сервер отсылает полученное ERROR-сообщение к своим операторам, сообщение следует поместить в сообщение NOTICE, сообщающее, что клиент не может отвечать на ошибку.</p><p>Числовые ответы:</p><pre>None.</pre><p>Примеры:</p><pre>ERROR :Server *.fi already exists   ; ERROR-сообщение с другого сервера,
                                    ; являющегося причиной ошибки.

NOTICE WiZ :ERROR from csd.bu.edu -- Server *.fi already exists
                                    ; Несколько ERROR-сообщений, но
                                    ; посланнных от пользователя WiZ на
                                    ; другой сервер.</pre><h2 id="p5">5. Опциональные сообщения</h2><p>Этот раздел описывает опциональные сообщения. Они не требуются в рабочем сервере, но так или иначе они тоже часть протокола. В отсутствии опции, может создаваться ERROR-сообщение или просто неизвестная командная ошибка. Если сообщение адресовано другому серверу, тогда она должна быть пропущена (потребуется элементарный парсинг). Назначенные числители для того, описаны ниже.</p><h3 id="p5.1">5.1. Away-сообщение</h3><table class="nobrd"><tr><td class="top">Команда:</td><td>AWAY</td></tr><tr><td class="top">Параметры:</td><td>[message]</td></tr></table><p>С сообщением AWAY, клиенты могут устанавливать автоматическую строку ответа на любые PRIVMSG-команды, направленные им (не на канал). Автоматический ответ посылается сервером к клиенту, пославшего команду PRIVMSG. Только отвечающий сервер может быть только один, к которому подсоединен клиент.</p><p>AWAY используется вместе с одним параметром (установка сообщения AWAY) или без параметров (снятие сообщения AWAY).</p><p>Числовые ответы:</p><pre>RPL_UNAWAY                      RPL_NOWAWAY</pre><p>Примеры:</p><pre>AWAY :Gone to lunch.  Back in 5 ; установка away-сообщения "Gone to lunch.
                                ; Back in 5".

:WiZ AWAY                       ; снятие пользователем WiZ сообщения
                                ; AWAY.</pre><h3 id="p5.2">5.2. Rehash-сообщение</h3><table class="nobrd"><tr><td class="top">Команда:</td><td>REHASH</td></tr><tr><td class="top">Параметры:</td><td>None</td></tr></table><p>REHASH используется IRC-оператором для перечитывания конфигурационных файлов сервера.</p><p>Числовые ответы:</p><pre>RPL_REHASHING                   ERR_NOPRIVILEGES</pre><p>Примеры:</p><pre>REHASH                          ; сообщение от клиента со статусом
                                ; IRC-оператора запускает процесс перечитывания
                                ; конфигурационных файлов сервера.</pre><h3 id="p5.3">5.3. Restart-сообщение</h3><table class="nobrd"><tr><td class="top">Команда:</td><td>RESTART</td></tr><tr><td class="top">Параметры:</td><td>None</td></tr></table><p>RESTART также испольщуется только IRC-оператором для перезагрузки сервера. Это сообщение опциональное, хотя оно может быть рассмотрено как рискованное - позволяя пользователям присоединяться к серверу в качестве IRC-оператора и запустить эту команду, причиняя разрушения сервису.</p><p>Команда RESTART должна всегда быть полностью выполняема сервером, к которому присоединен посылающий команду клиент и не принимать от других серверов.</p><p>Числовые ответы:</p><pre>ERR_NOPRIVILEGES</pre><p>Примеры:</p><pre>RESTART                         ; не требует параметров.</pre><h3 id="p5.4">5.4. Summon-сообщение</h3><table class="nobrd"><tr><td class="top">Команда:</td><td>SUMMON</td></tr><tr><td class="top">Параметры:</td><td>&lt;user&gt; [&lt;server&gt;]</td></tr></table><p>Команда может быть использована для вызова пользователей, сидящих на том же хосте, что и IRC-сервер, в IRC. Это сообщение посылается только если требуемый сервер (a) имеет включенный SUMMON, (b) пользователь находится в сети и (c) сервер может написать в пользовательский tty (или подобное).</p><p>Если параметр &lt;server&gt; не задан, то попытки вызвать &lt;user&gt; с сервера будут на сервере, на котором подсоединен клиент, вызывающий &lt;user&gt;.</p><p>Если SUMMON отключена на сервере, должен возвратиться числовой ответ ERR_SUMMONDISABLED и оригинал сообщения.</p><p>Числовые ответы:</p><pre>ERR_NORECIPIENT                 ERR_FILEERROR
ERR_NOLOGIN                     ERR_NOSUCHSERVER
RPL_SUMMONING</pre><p>Примеры:</p><pre>SUMMON jto                      ; вызов пользователя jto на хост сервера

SUMMON jto tolsun.oulu.fi       ; вызов пользователя jto на схост
                                ; сервера, который обьявлен параметром -
                                ; "tolsun.oulu.fi"</pre><h3 id="p5.5">5.5. Users-сообщение</h3><table class="nobrd"><tr><td class="top">Команда:</td><td>USERS</td></tr><tr><td class="top">Параметры:</td><td>[&lt;server&gt;]</td></tr></table><p>USERS выводит список пользователей находящихся на сервера в формате, подобном who(1), rusers(1) и  finger(1). Многие могут отключить эту команду на своем сервере по причине безопасности. Если отключено, то выйдет числовой ответ, указавая на это.</p><p>Числовые ответы:</p><pre>ERR_NOSUCHSERVER                ERR_FILEERROR
RPL_USERSSTART                  RPL_USERS
RPL_NOUSERS                     RPL_ENDOFUSERS
ERR_USERSDISABLED</pre><p>Ответ отключенной команды:</p><pre>ERR_USERSDISABLED</pre><p>Примеры:</p><pre>USERS eff.org                   ; запрос списка пользователей с сервера eff.org

:John USERS tolsun.oulu.fi      ; запрос от John списка пользователей
                                ; с сервера tolsun.oulu.fi</pre><h3 id="p5.6">5.6. Operwall-команда</h3><table class="nobrd"><tr><td class="top">Команда:</td><td>WALLOPS</td></tr><tr><td class="top">Параметры:</td><td>Текст, отсылаемый всем IRC-операторам, находящихся в сети.</td></tr></table><p>Отправка сообщения всем IRC-оператороам, которые находятся в данный момент в сети. После выполнения WALLOPS как команды пользователя, это будет расцениваться как частое и обычно неверное, ибо отправлено сообщение большому количеству людей (подобно WALL). Прямо рекомендуемо, что текущая принадлежность WALLOP будет использована каак пример доступности и узнаваема только серверами, как отправителями WALLOPS.</p><p>Числовые ответы:</p><pre>ERR_NEEDMOREPARAMS</pre><p>Примеры:</p><pre>:csd.bu.edu WALLOPS :Connect '*.uiuc.edu 6667' from Joshua
                                ; WALLOPS сообщение от csd.bu.edu,
                                ; обьявляющая, что CONNECT-сообщение
                                ; получено и активизировано Joshua.</pre><h3 id="p5.7">5.7. Userhost-сообщение</h3><table class="nobrd"><tr><td class="top">Команда:</td><td>USERHOST</td></tr><tr><td class="top">Параметры:</td><td>&lt;nickname&gt;{&lt;space&gt;&lt;nickname&gt;}</td></tr></table><p>Команда USERHOST требует список больше 5-ти никнеймов, разделеных пробелом и возвращает информацию о каждом никнейме, который был найден.</p><p>Числовые ответы:</p><pre>RPL_USERHOST                    ERR_NEEDMOREPARAMS</pre><p>Примеры:</p><pre>USERHOST Wiz Michael Marty p    ; USERHOST запрос информации о никнеймах
                                ; "Wiz", "Michael", "Marty" и "p"</pre><h3 id="p5.8">5.8. Ison-сообщение</h3><table class="nobrd"><tr><td class="top">Команда:</td><td>ISON</td></tr><tr><td class="top">Параметры:</td><td>&lt;nickname&gt;{&lt;space&gt;&lt;nickname&gt;}</td></tr></table><p>ISON предоставляет быстрый и экономичный вариант отдачи отклика о каком-либо из двух никнеймов, находящихся в IRC. ISON использует тольуо один (1) параметр: список никнеймов, разделенных пробелами. Для каждого никнейма, представленного в списке, сервер добавляет в свою ответную строку. Но эта строка может вернуться и пустой, и просто копией параметра строки, или какой-другой подстановкой никнеймов. Есть только одно ограничение - длина списка никнеймов не должна превышать 512 символов, иначе сервер обрежет параметр под этот предел.</p><p>ISON поддерживается сервером только для клиентов, присоединенных к нему и игнорирует запросы других.</p><p>Числовые ответы:</p><pre>RPL_ISON                ERR_NEEDMOREPARAMS</pre><p>Примеры:</p><pre>ISON phone trillian WiZ jarlek Avalon Angel Monstah
                                ; Пример ISON запроса 7 никнеймов.</pre><h2 id="p6">6. Ответы</h2><p>Следующий список числовых ответов, которые создаются как ответная реакция на вводимые команды. Each numeric is given with its number, name and reply string.</p><h3 id="p6.1">6.1. Error-ответы</h3><table><tr><td>401</td><td>ERR_NOSUCHNICK</td><td>&quot;&lt;nickname&gt; :No such nick/channel&quot;</td><td>Используется для сообщения, что опущен параметр, отвечающий за никнейм.</td></tr><tr><td>402</td><td>ERR_NOSUCHSERVER</td><td>&quot;&lt;server name&gt; :No such server&quot;</td><td>Используется для сообщения, что сервер, указанный в строке параметров, не найден.</td></tr><tr><td>403</td><td>ERR_NOSUCHCHANNEL</td><td>&quot;&lt;channel name&gt; :No such channel&quot;</td><td>Используется для сообщения, что название канала не верно.</td></tr><tr><td>404</td><td>ERR_CANNOTSENDTOCHAN</td><td>&quot;&lt;channel name&gt; :Cannot send to channel&quot;</td><td>Отсылается пользователю, который либо (a) не на канале, с режимом +n, либо (b) не является чанопом (или режима +v) на канале, который имеет режим +m, и пытается отослать PRIVMSG-сообщение  на этот канал.</td></tr><tr><td>405</td><td>ERR_TOOMANYCHANNELS</td><td>&quot;&lt;channel name&gt; :You have joined too many channels&quot;</td><td>Отсылается пользователю, когда он уже находится на максимально разрешенном количестве каналов и пытается айти на еще один канал.</td></tr><tr><td>406</td><td>ERR_WASNOSUCHNICK</td><td>&quot;&lt;nickname&gt; :There was no such nickname&quot;</td><td>Возвращается командой WHOWAS, показывая тем самым отсутствие истории информации об указанном никнейме.</td></tr><tr><td>407</td><td>ERR_TOOMANYTARGETS</td><td>&quot;&lt;target&gt; :Duplicate recipients. No message delivered&quot;</td><td>Возвращается клиенту, который пытается отослать PRIVMSG/NOTICE, используя формат отправки user@host и для user@host, который имеет особые случаи.</td></tr><tr><td>409</td><td>ERR_NOORIGIN</td><td>&quot;:No origin specified&quot;</td><td>PING или PONG сообщения теряют параметр источника, который требуется, хотя эти команды должны работать без правильных префиксов.</td></tr><tr><td>411</td><td>ERR_NORECIPIENT</td><td>&quot;:No recipient given (&lt;command&gt;)&quot;</td><td rowspan="3"></td></tr><tr><td>412</td><td>ERR_NOTEXTTOSEND</td><td>&quot;:No text to send&quot;</td></tr><tr><td>413</td><td>ERR_NOTOPLEVEL</td><td>&quot;&lt;mask&gt; :No toplevel domain specified&quot;</td></tr><tr><td>414</td><td>ERR_WILDTOPLEVEL</td><td>&quot;&lt;mask&gt; :Wildcard in toplevel domain&quot;</td><td>412-414 возвращаются командой PRIVMSG, показывая, что сообщение не смогло пройти по некоторым причинам. ERR_NOTOPLEVEL и ERR_WILDTOPLEVEL ошибки, что возвращаются, когда неправильно используют &quot;PRIVMSG $&lt;server&gt;&quot; или &quot;PRIVMSG #&lt;host&gt;&quot;.</td></tr><tr><td>421</td><td>ERR_UNKNOWNCOMMAND</td><td>&quot;&lt;command&gt; :Unknown command&quot;</td><td>Возвращается зарегистрированному клиенту, при попытке отослать неизвестную серверу команду.</td></tr><tr><td>422</td><td>ERR_NOMOTD</td><td>&quot;:MOTD File is missing&quot;</td><td>Серверный файл MOTD не может быть открыт сервером.</td></tr><tr><td>423</td><td>ERR_NOADMININFO</td><td>&quot;&lt;server&gt; :No administrative info available&quot;</td><td>Возвращается сервером при ответе на ADMIN-сообщение, когда оно является ошибкой в найденной информации.</td></tr><tr><td>424</td><td>ERR_FILEERROR</td><td>&quot;:File error doing &lt;file op&gt; on &lt;file&gt;&quot;</td><td>Генерация ERROR-сообщения, используя для отчета поврежденного файла.</td></tr><tr><td>431</td><td>ERR_NONICKNAMEGIVEN</td><td>&quot;:No nickname given&quot;</td><td>Возвращается, когда в параметре отсутствует никнейм.</td></tr><tr><td>432</td><td>ERR_ERRONEUSNICKNAME</td><td>&quot;&lt;nick&gt; :Erroneus nickname&quot;</td><td>Возвращается после получения NICK-сообщения, которое содержит символы, которые запрещены. Смотрите раздел х.х.х для более подробной информации.</td></tr><tr><td>433</td><td>ERR_NICKNAMEINUSE</td><td>&quot;&lt;nick&gt; :Nickname is already in use&quot;</td><td>Возвращается при смене никнейма на другой, уже используемый.</td></tr><tr><td>436</td><td>ERR_NICKCOLLISION</td><td>&quot;&lt;nick&gt; :Nickname collision KILL&quot;</td><td>Возвращается сервером к клиенту, когда сервер видит конфликт никнейма (зарегистрированный никнейм уже есть).</td></tr><tr><td>441</td><td>ERR_USERNOTINCHANNEL</td><td>&quot;&lt;nick&gt; &lt;channel&gt; :They aren't on that channel&quot;</td><td>Возвращается сервером, указывая на то, что данный пользователь отсутствует на канале, заданном в параметре.</td></tr><tr><td>442</td><td>ERR_NOTONCHANNEL</td><td>&quot;&lt;channel&gt; :You're not on that channel&quot;</td><td>Возвращается сервером, как только клиент пытается выполнить команду канала, на котором отсутствует.</td></tr><tr><td>443</td><td>ERR_USERONCHANNEL</td><td>&quot;&lt;user&gt; &lt;channel&gt; :is already on channel&quot;</td><td>Возвращается, когда клиент пытается пригласить пользователя на канал, на котором пользователь уже присутствует.</td></tr><tr><td>444</td><td>ERR_NOLOGIN</td><td>&quot;&lt;user&gt; :User not logged in&quot;</td><td>Возвращается вызывающим после команды SUMMON для пользователя, который в данное время недоступен в сети.</td></tr><tr><td>445</td><td>ERR_SUMMONDISABLED</td><td>&quot;:SUMMON has been disabled&quot;</td><td>Возвращается как ответ на команду SUMMON. Может быть возвращено любым сервером.</td></tr><tr><td>446</td><td>ERR_USERSDISABLED</td><td>&quot;:USERS has been disabled&quot;</td><td>Возвращается как ответ на команду USERS. Может быть возвращено любым сервером.</td></tr><tr><td>451</td><td>ERR_NOTREGISTERED</td><td>&quot;:You have not registered&quot;</td><td>Возвращается сервером для напоминания, что клиент должен быть зарегистрирован, перед тем, как сервер даст дополнительные возможности.</td></tr><tr><td>461</td><td>ERR_NEEDMOREPARAMS</td><td>&quot;&lt;command&gt; :Not enough parameters&quot;</td><td>Возвращается сервером, числительными командами для указания пользователю, что тот не указал всех параметров.</td></tr><tr><td>462</td><td>ERR_ALREADYREGISTRED</td><td>&quot;:You may not reregister&quot;</td><td>Возвращается сервером любому линку, который пытается изменить часть подробностей регистрации (подобные паролю или пользовательской информацией из второго USER-сообщения).</td></tr><tr><td>463</td><td>ERR_NOPERMFORHOST</td><td>&quot;:Your host isn't among the privileged&quot;</td><td>Возвращается клиенту, который пытается зарегистрироваться с сервером, который не настроен на поддержку соединений с хостом, который пытается присоединиться.</td></tr><tr><td>464</td><td>ERR_PASSWDMISMATCH</td><td>&quot;:Password incorrect&quot;</td><td>Возвращается при неправильно введеном или неуказанным паролем.</td></tr><tr><td>465</td><td>ERR_YOUREBANNEDCREEP</td><td>&quot;:You are banned from this server&quot;</td><td>Возвращается после попытки соединения и регистрации с сервером, который настроен на отказ регистрации с вами.</td></tr><tr><td>467</td><td>ERR_KEYSET</td><td>&quot;&lt;channel&gt; :Channel key already set&quot;</td><td rowspan="6"></td></tr><tr><td>471</td><td>ERR_CHANNELISFULL</td><td>&quot;&lt;channel&gt; :Cannot join channel (+l)&quot;</td></tr><tr><td>472</td><td>ERR_UNKNOWNMODE</td><td>&quot;&lt;char&gt; :is unknown mode char to me&quot;</td></tr><tr><td>473</td><td>ERR_INVITEONLYCHAN</td><td>&quot;&lt;channel&gt; :Cannot join channel (+i)&quot;</td></tr><tr><td>474</td><td>ERR_BANNEDFROMCHAN</td><td>&quot;&lt;channel&gt; :Cannot join channel (+b)&quot;</td></tr><tr><td>475</td><td>ERR_BADCHANNELKEY</td><td>&quot;&lt;channel&gt; :Cannot join channel (+k)&quot;</td></tr><tr><td>481</td><td>ERR_NOPRIVILEGES</td><td>&quot;:Permission Denied- You're not an IRC operator&quot;</td><td>Любая команда, требующая привилегий IRC-оператора, должна вернуть подобную ошибку, показывая на безуспешность действий рядового пользователя.</td></tr><tr><td>482</td><td>ERR_CHANOPRIVSNEEDED</td><td>&quot;&lt;channel&gt; :You're not channel operator&quot;</td><td>Любая команда, требущая привилегий &quot;чанопа&quot; (подобно MODE-сообщениям), должна вернуть подобную ошибку, показывая на безуспешность действий рядового пользователя.</td></tr><tr><td>483</td><td>ERR_CANTKILLSERVER</td><td>&quot;:You cant kill a server!&quot;</td><td>Любые попытки использования KILL-команды на сервере будут отклонены и эта ошибка вернется клиенту.</td></tr><tr><td>491</td><td>ERR_NOOPERHOST</td><td>&quot;:No O-lines for your host&quot;</td><td>Если сервер не настроен на поддержку клиентского хоста для сообщения OPER, клиенту будет возвращена эта ошибка.</td></tr><tr><td>501</td><td>ERR_UMODEUNKNOWNFLAG</td><td>&quot;:Unknown MODE flag&quot;</td><td>Возвращается сервером, если MODE-сообщение не было распознано.</td></tr><tr><td>502</td><td>ERR_USERSDONTMATCH</td><td>&quot;:Cant change mode for other users&quot;</td><td>Ошибка отсылается любому пользоватею, пытающемуся посмотреть или изменить режим какого-либо другого пользователя.</td></tr></table><h3 id="p6.2">6.2. Отклики команд</h3><pre>300     RPL_NONE
                Dummy reply number. Not used.

302     RPL_USERHOST
                &quot;:[&lt;reply&gt;{&lt;space&gt;&lt;reply&gt;}]&quot;

        - Формат ответа, используемый командой USERHOST для списка
          ответов к запрашиваемому списку. Строка ответа
          представляет собой следующее:

          &lt;reply&gt; ::= &lt;nick&gt;['*'] '=' &lt;'+'|'-'&gt;&lt;hostname&gt;

          '*' обозначает, что клиент зарегистрирован как
          IRC-оператор. Символы '-' или '+' обозначает, что клиент
          установил режим AWAY или не доступен.

303     RPL_ISON
                &quot;:[&lt;nick&gt; {&lt;space&gt;&lt;nick&gt;}]&quot;

        - Формат ответа, используемый командой ISON для списка
          ответов к запрашиваемому списку.

301     RPL_AWAY
                &quot;&lt;nick&gt; :&lt;away message&gt;&quot;

305     RPL_UNAWAY
                &quot;:You are no longer marked as being away&quot;
306     RPL_NOWAWAY
                &quot;:You have been marked as being away&quot;

        - Эти ответы используются с командой AWAY (если доступно).
          RPL_AWAY отсылается любому клиенту, пославшему PRIVMSG
          клиенту, который находит в состоянии AWAY. RPL_AWAY
          отсылается только сервером, к котому присоединен клиент.
          Ответы RPL_UNAWAY и RPL_NOWAWAY отправляются, когда
          клиент удаляет или устанавливает режим AWAY.

311     RPL_WHOISUSER
                &quot;&lt;nick&gt; &lt;user&gt; &lt;host&gt; * :&lt;real name&gt;&quot;
312     RPL_WHOISSERVER
                &quot;&lt;nick&gt; &lt;server&gt; :&lt;server info&gt;&quot;
313     RPL_WHOISOPERATOR
                &quot;&lt;nick&gt; :is an IRC operator&quot;
317     RPL_WHOISIDLE
                &quot;&lt;nick&gt; &lt;integer&gt; :seconds idle&quot;
318     RPL_ENDOFWHOIS
                &quot;&lt;nick&gt; :End of /WHOIS list&quot;
319     RPL_WHOISCHANNELS
                &quot;&lt;nick&gt; :{[@|+]&lt;channel&gt;&lt;space&gt;}&quot;

        - Ответы 311 - 313, 317 - 319 генерируются в ответ на
          WHOIS-сообщение. Отвечающий сервер должен
          формулировать каждый ответ числовым (если найден
          запрашиваемый никнейм) или возвращать ERROR-ответ. '*' В
          RPL_WHOISUSER не является маской, но буквенным символом.
          Для каждого ответа установка, только RPL_WHOISCHANNELS
          может казаться больше, тогда только (для длинных списков
          имен каналов). '@' и '+' символы, указывающие какой
          клиент является оператором канала или кому разрашается
          говорить на модерируемом канале. RPL_ENDOFWHOIS
          используется для пометки окончания WHOIS-сообщения.

314     RPL_WHOWASUSER
                &quot;&lt;nick&gt; &lt;user&gt; &lt;host&gt; * :&lt;real name&gt;&quot;
369     RPL_ENDOFWHOWAS
                &quot;&lt;nick&gt; :End of WHOWAS&quot;

        - Когда отвечают на WHOWAS-сообщения, сервер должен
          использовать ответы RPL_WHOWASUSER, RPL_WHOISSERVER или
          ERR_WASNISUCHNICK для каждого никнейма в указаном
          списке. К концу всех пакетов ответов, может быть
          RPL_ENDOFWHOWAS (только если будет один ответ или будет
          являться ошибкой).

321     RPL_LISTSTART
                &quot;Channel :Users  Name&quot;
322     RPL_LIST
                &quot;&lt;channel&gt; &lt;# visible&gt; :&lt;topic&gt;&quot;
323     RPL_LISTEND
                &quot;:End of /LIST&quot;

        - Ответы RPL_LISTSTART, RPL_LIST, RPL_LISTEND помечают
          начало текущих ответос с данными и конец серверных
          ответов на команду LIST. Если недоступен ни один канал,
          отправятся только начало и конец ответа.

324     RPL_CHANNELMODEIS
                &quot;&lt;channel&gt; &lt;mode&gt; &lt;mode params&gt;&quot;

331     RPL_NOTOPIC
                &quot;&lt;channel&gt; :No topic is set&quot;
332     RPL_TOPIC
                &quot;&lt;channel&gt; :&lt;topic&gt;&quot;

        - Когда отправляется TOPIC-сообщение, обозначающее топик
          канала, отправиться должен один из двуъ ответов. Если
          топик установлен, отсылается RPL_TOPIC. Иначе -
          RPL_NOTOPIC.

341     RPL_INVITING
                &quot;&lt;channel&gt; &lt;nick&gt;&quot;

        - Возвращается сервером, обозначая что попытка
          INVITE-сообщения была успешно выполнена по отношению к
          приглашенному клиенту.

342     RPL_SUMMONING
                &quot;&lt;user&gt; :Summoning user to IRC&quot;

        - Возвращается сервером, отвечающего на SUMMON-сообщение
          и обозначающего, что вызывается пользователь.

351     RPL_VERSION
                &quot;&lt;version&gt;.&lt;debuglevel&gt; &lt;server&gt; :&lt;comments&gt;&quot;

        - Ответ сервером, показывающий версию в подробностях.
          &lt;version&gt; - версия программного обеспечения,
          (включая все патчи) и &lt;debuglevel&gt; использующийся для
          обозначения того, что сервер запущен &quot;дебаг-режиме&quot;.

          Поле &quot;comments&quot; может содержать любые комментарии о
          версии и других подробностях.

352     RPL_WHOREPLY
                &quot;&lt;channel&gt; &lt;user&gt; &lt;host&gt; &lt;server&gt; &lt;nick&gt; \
                 &lt;H|G&gt;[*][@|+] :&lt;hopcount&gt; &lt;real name&gt;&quot;
315     RPL_ENDOFWHO
                &quot;&lt;name&gt; :End of /WHO list&quot;

        - RPL_WHOREPLY и RPL_ENDOFWHO пара, используемая для
          ответа WHO-сообщения. RPL_WHOREPLY отсылается только
          если предназначена подстановкой к WHO-запросу. Если
          список параметров обеспечен WHO-сообщением, RPL_ENDOFWHO
          должен отослаться после обработки каждого пункта
          списка, начинающегося на &lt;name&gt;.

353     RPL_NAMREPLY
                &quot;&lt;channel&gt; :[[@|+]&lt;nick&gt; [[@|+]&lt;nick&gt; [...]]]&quot;
366     RPL_ENDOFNAMES
                &quot;&lt;channel&gt; :End of /NAMES list&quot;

        - Для ответа на NAMES-сообщения, пара ответов, содержащих
          RPL_NAMEREPLY и RPL_ENDOFNAMES отправляются сервером
          обратно к клиенту. Если запрашиваемый канал не найден,
          возвращается RPL_ENDOFNAMES. Исключая то, когда
          NAMES-сообщение отправлено без параметров, и все каналы
          видимые с содержимым - возвращается серия
          RPL_NAMEREPLY-сообщений с RPL_ENDOFNAMES, как пометкой
          окончания.

364     RPL_LINKS
                &quot;&lt;mask&gt; &lt;server&gt; :&lt;hopcount&gt; &lt;server info&gt;&quot;
365     RPL_ENDOFLINKS
                &quot;&lt;mask&gt; :End of /LINKS list&quot;

        - В ответе на LINKS-сообщение, сервер должен отослать
          ответы обратно, используя RPL_LINKS и пометкой конца
          списка - RPL_INDOFREPLY.

367     RPL_BANLIST
                &quot;&lt;channel&gt; &lt;banid&gt;&quot;
368     RPL_ENDOFBANLIST
                &quot;&lt;channel&gt; :End of channel ban list&quot;

        - Когда создается список активных 'банов' для данного канал,
          сервер требует отправки списка обратно, используя
          сообщения RPL_BANLIST и RPL_ENDOFBANLIST. Разделитель
          RPL_BANLIST отсылается для каждого активного забаненного.
          После того, как все забаненные попали в список (или если
          отсутствуют), должен отослаться RPL_ENDOFBANLIST.

371     RPL_INFO
                &quot;:&lt;string&gt;&quot;
374     RPL_ENDOFINFO
                &quot;:End of /INFO list&quot;

        - Сервер, отвечая на INFO-сообщение требует отправления
          всех этих 'info' в серии RPL_INFO-сообщений с
          RPL_ENDOFINFO ответом, указывающем окончание ответов.

375     RPL_MOTDSTART
                &quot;:- &lt;server&gt; Message of the day - &quot;
372     RPL_MOTD
                &quot;:- &lt;text&gt;&quot;
376     RPL_ENDOFMOTD
                &quot;:End of /MOTD command&quot;

        - При ответе на MOTD-сообщение и MOTD-файл найден, файл
          отбражается строка к строке с каждой строкой, не длше80
          символов, используя RPL_MOTD-формат ответов. Их следует
          разместить между RPL_MOTDSTART (перед RPL_MOTD) и
          RPL_ENDOFMOTD (после).

381     RPL_YOUREOPER
                &quot;:You are now an IRC operator&quot;

        - RPL_YOUREOPER отправляется клиенту, который благополучно
          выполнил OPER-сообщение и получил статус IRC-оператора.

382     RPL_REHASHING
                &quot;&lt;config file&gt; :Rehashing&quot;

        - Если использовалась функция REHASH и оператор послал
          REHASH-сообщение, RPL_REHASHING отправилась обратно
          оператору.

391     RPL_TIME
                &quot;&lt;server&gt; :&lt;string showing server's local time&gt;&quot;

        - При ответе на TIME-сообщение, сервер должен отправить
          ответ, используя RPL_TIME-формат. Строка, показывающая
          время, должна содержать только правильный день и время.
          Это не является допольнительным требованием к строке
          времени.

392     RPL_USERSSTART
                &quot;:UserID   Terminal  Host&quot;
393     RPL_USERS
                &quot;:%-8s %-9s %-8s&quot;
394     RPL_ENDOFUSERS
                &quot;:End of users&quot;
395     RPL_NOUSERS
                &quot;:Nobody logged in&quot;

        - Если USERS-сообщение обработано сервером, использовались
          ответы RPL_USERSTART, RPL_USERS, RPL_ENDOFUSERS и
          RPL_NOUSERS. RPL_USERSSTART должен отправится первым,
          следуя за одним из RPL_USERS или одним RPL_NOUSER.
          Следом идет RPL_ENDOFUSERS.

200     RPL_TRACELINK
                &quot;Link &lt;version &amp; debug level&gt; &lt;destination&gt; \
                 &lt;next server&gt;&quot;
201     RPL_TRACECONNECTING
                &quot;Try. &lt;class&gt; &lt;server&gt;&quot;
202     RPL_TRACEHANDSHAKE
                &quot;H.S. &lt;class&gt; &lt;server&gt;&quot;
203     RPL_TRACEUNKNOWN
                &quot;???? &lt;class&gt; [&lt;client IP address in dot form&gt;]&quot;
204     RPL_TRACEOPERATOR
                &quot;Oper &lt;class&gt; &lt;nick&gt;&quot;
205     RPL_TRACEUSER
                &quot;User &lt;class&gt; &lt;nick&gt;&quot;
206     RPL_TRACESERVER
                &quot;Serv &lt;class&gt; &lt;int&gt;S &lt;int&gt;C &lt;server&gt; \
                 &lt;nick!user|*!*&gt;@&lt;host|server&gt;&quot;
208     RPL_TRACENEWTYPE
                &quot;&lt;newtype&gt; 0 &lt;client name&gt;&quot;
261     RPL_TRACELOG
                &quot;File &lt;logfile&gt; &lt;debug level&gt;&quot;

        - Все RPL_TRACE* возвращаются сервером в ответ на
          TRACE-сообщение. Как много будет возвратов на
          TRACE-сообщение зависит от того, посланы они
          IRC-оператором или нет. Ответы RPL_TRACEUNKNOW,
          RPL_TRACECONNECTING И RPL_TRACEHANDSHAKE используются
          для соединений, которые не имеют полного разрешения и
          неизвестны, попытки соединения, оканчивающиеся на
          'server handshake'. RPL_TRACELINK посылается любым
          сервером, который пропустил TRACE-сообщение и отправил
          ее к следующему серверу. Список команд RPL_TRACELINK
          отправится в ответ на TRACE-команду через всю IRC-сеть,
          создавая карту серверных соединений. RPL_TRACENEWTYPE
          будет использован для другого соединения, которое не
          стыкуется с остальными категориями, но было отображено.

211     RPL_STATSLINKINFO
                &quot;&lt;linkname&gt; &lt;sendq&gt; &lt;sent messages&gt; \
                 &lt;sent bytes&gt; &lt;received messages&gt; \
                 &lt;received bytes&gt; &lt;time open&gt;&quot;
212     RPL_STATSCOMMANDS
                &quot;&lt;command&gt; &lt;count&gt;&quot;
213     RPL_STATSCLINE
                &quot;C &lt;host&gt; * &lt;name&gt; &lt;port&gt; &lt;class&gt;&quot;
214     RPL_STATSNLINE
                &quot;N &lt;host&gt; * &lt;name&gt; &lt;port&gt; &lt;class&gt;&quot;
215     RPL_STATSILINE
                &quot;I &lt;host&gt; * &lt;host&gt; &lt;port&gt; &lt;class&gt;&quot;
216     RPL_STATSKLINE
                &quot;K &lt;host&gt; * &lt;username&gt; &lt;port&gt; &lt;class&gt;&quot;
218     RPL_STATSYLINE
                &quot;Y &lt;class&gt; &lt;ping frequency&gt; &lt;connect \
                 frequency&gt; &lt;max sendq&gt;&quot;
219     RPL_ENDOFSTATS
                &quot;&lt;stats letter&gt; :End of /STATS report&quot;
241     RPL_STATSLLINE
                &quot;L &lt;hostmask&gt; * &lt;servername&gt; &lt;maxdepth&gt;&quot;
242     RPL_STATSUPTIME
                &quot;:Server Up %d days %d:%02d:%02d&quot;
243     RPL_STATSOLINE
                &quot;O &lt;hostmask&gt; * &lt;name&gt;&quot;
244     RPL_STATSHLINE
                &quot;H &lt;hostmask&gt; * &lt;servername&gt;&quot;

221     RPL_UMODEIS
                &quot;&lt;user mode string&gt;&quot;

                - Для ответа запроса о режиме владельца клиенту,
                  RPL_UMODEIS отправляектся обратно.

251     RPL_LUSERCLIENT
                &quot;:There are &lt;integer&gt; users and &lt;integer&gt; \
                invisible on &lt;integer&gt; servers&quot;
252     RPL_LUSEROP
                &quot;&lt;integer&gt; :operator(s) online&quot;
253     RPL_LUSERUNKNOWN
                &quot;&lt;integer&gt; :unknown connection(s)&quot;
254     RPL_LUSERCHANNELS
                &quot;&lt;integer&gt; :channels formed&quot;
255     RPL_LUSERME
                &quot;:I have &lt;integer&gt; clients and &lt;integer&gt; \
                  servers&quot;

                - При обработке LUSERS-сообщения, сервер
                  отправляет настроки ответов от RPL_LUSERCLIENT,
                  RPL_LUSEROP, RPL_USERUNKNOWN, RPL_LUSERCHANNELS
                  и RPL_LUSERME. При ответе, сервер должен
                  отослать обратно RPL_LUSERCLIENT и RPL_LUSERME.
                  Другие ответы отсылаются только если найдено их
                  не нулевое значение.

256     RPL_ADMINME
                &quot;&lt;server&gt; :Administrative info&quot;
257     RPL_ADMINLOC1
                &quot;:&lt;admin info&gt;&quot;
258     RPL_ADMINLOC2
                &quot;:&lt;admin info&gt;&quot;
259     RPL_ADMINEMAIL
                &quot;:&lt;admin info&gt;&quot;

                - При ответе на ADMIN-сообщение, сервер ожидает
                  использование ответов RPL_ADMINME через
                  RPL_ADMINEMAIL и предоставляет текст сообщения с
                  каждым. Для RPL_ADMINLOC1 описывапется город,
                  шатат и страна сервера, следуемый подробностями
                  университета и факультета (RPL_ADMINLOC2) и
                  оканчивается административной связью для сервера
                  (здесь потребуется e-mail адрес) в RPL_ADMINEMAIL.</pre><h3 id="p6.3">6.3. Зарезервированные числа</h3><p>Эти числа не описани, хотя они попадают в одну из следующих категорий:</p><ol><li>не долго в использовании;</li><li>зарезервированы для последющего использования;</li><li>используются в данный момент, но часть "прибамбасов" не генерируются текущим IRC-сервером.</li></ol><pre>209     RPL_TRACECLASS          217     RPL_STATSQLINE
231     RPL_SERVICEINFO         232     RPL_ENDOFSERVICES
233     RPL_SERVICE             234     RPL_SERVLIST
235     RPL_SERVLISTEND
316     RPL_WHOISCHANOP         361     RPL_KILLDONE
362     RPL_CLOSING             363     RPL_CLOSEEND
373     RPL_INFOSTART           384     RPL_MYPORTIS
466     ERR_YOUWILLBEBANNED     476     ERR_BADCHANMASK
492     ERR_NOSERVICEHOST</pre><h2 id="p7">7. Идентификация клиента и сервера</h2><p>Клиенты и серверы используют одни и те же уровни идентификации. Для обоих это IP-номер имени хоста (и обратная проверка этого) это выполняется для всех соединений к серверу. Так же соединения проверяются парольно (если возможно установить пароль для этого соединения и он установлен). Их проверяют на всех возможных соединениях, хотя проверка пароля испольщуется только с серверами.</p><p>В дополнение проверка отклика имени пользователя для созданных соединений. Поиск пользовательского имени на другом конце соединения, обычно включаются соединения, идентификация сервера подобна IDENT, или описана в <a href="../1413.rfc" title="RFC 1413 - Протокол идентификации">RFC 1413</a> «Протокол идентификации».</p><p>Есть мнение, что без паролей не так то легко достоверно определить, кто находится на другом конце сетевого соединения, использовать пароли очень рекомендуется в интер-сервер соединениях в дополнеение к другим возможностям идентификации сервера.</p><h2 id="p8">8. Подробное рассмотрение текущих средств связи</h2><p>Текущей версией IRC-сервера, для рассмотрения этого протокола, является версия 2.8. Более ранние версии могут быть совместимы некоторыми или всеми командами, описанные в этом документе с NOTICE-сообщениями расположены многие числовые ответы. К несчастью, требуется обратная совместимость, предоставленные части этого документа различаются с выложенным. Отличия в:</p><ul><li class="lib">* определение, что любые LF или CR везде в сообщении помечают окончание этого сообщения (в отличие от требуемых CR-LF);</li></ul><p>Остаток этого раздела наиболее важен тем, кто желает держать сервер, но некоторые части так же напрямую связаны с клиентом.</p><h3 id="p8.1">8.1. Сетевой протокол TCP - почему его здесь лучше использовать</h3><p>IRC обеспечивается на высоте TCP, и TCP предоставляет надежный сетевой протокол, который наиболее хорошо вписывается в масштабы общения. Использование многослойность IP является альтернативой, но он не пока не получил широкого растространения и поддержки.</p><h4 id="p8.1.1">8.1.1. Поддержка Unix-сокетов</h4><p>Unix-domain-сокетам доступны операции прослушивания/соединения, в текущем исполнении может быть настроена на прослушивание и подтверждение как клиентских, так и серверных соединений на Unix-domain-сокете. Их узнают как сокеты, где имя хоста начинается с '/'.</p><p>Когда предоставление любой информации о соединениях на Unix-domain-сокете, сервер требует вытеснения текущего имени хоста в пути, если текущее имя сокета будет этого просить.</p><h3 id="p8.2">8.2. Проверка команд</h3><p>В предоставление полезной 'non-buffered' сети IO для клиентов и серверов, каждое соединение из которых является частным 'input buffer', в котором результируются большинство полученного, читается и проверяется. Размер буфера 512 байт, используется как одно полное сообщение, хотя обычно оно бывает с разными командам. Приватный буфер проверяется после каждой операции чтения на правильность сообщений. Когда распределение с многослойными сообщениями от одного клиента в буфере, следует быть в качестве одного случившегося, клиент может быть «удален».</p><h3 id="p8.3">8.3. Передача сообщения</h3><p>Это простой поиск сети, насыщенной линками или хостами, к которым вы отправляете данные. Хотя Unix обычно это делает через TCP-окно и внутренними буферами, часто сервер имеет большое количество данных, готовых к отправке (особенно при формировании нового сервер-сервер линка) и небольших буферов в ядре не хватает для исходящей очереди.</p><p>Для облегчения этой проблемы, "send queue" использует как FIFO-очередь для пересылки данных. Обычно, "send queue" может возрастать до 200 кб в большой IRC-сети с медленным сетевым соединением при соединении нового сервера.</p><p>Когда они начинают соединяться, сервер первым читает и проверяет все входящие данные, откладывая все исходящие данные. Когда все доступные вводы обработаны, посылаются отложенные данные. Это понижение числа write() системных звонков и помогает TCP создавать большие пакеты.</p><h3 id="p8.4">8.4. Соединение «Liveness»</h3><p>Для выявления прекращения соединения или отклика, сервер должен пинговать каждое из соединений.</p><p>Если соединение не отвечает некоторое время, это соединение закрывается, используя предназначенные для этого процедуры. Так же соединение может оборваться, если отправлено сверх обозначенного максимума, ибо это наилучщий выход при медленном соединении.</p><h3 id="p8.5">8.5. Установка соединения сервер-клиент</h3><p>При соединении с IRC-сервером, клиенту посылается MOTD (если присутствует), а так же текущее число серверов/клиентов (подобно команде LUSER). Так же сервер требует сообщения к клиенту, которое содержит имя и версию, как и любые другие сообщения-вступления.</p><p>После разделения с этим, сервер должен отправить наружу новый никнейм пользователя и другой информации, как снабжение себя (команда USER) и как открываюший сервер (из DNS/серверы идентификации). Сервер должен послать эту информацию с NICK первым следующим USER.</p><h3 id="p8.6">8.6. Установка соединения сервер-сервер</h3><p>Процесс установки соединения сервер-к-серверу чреват опасностью с тех пор, как много возможных областей, где возникают проблемы - наименьшие из которых - конфликтные ситуации.</p><p>После соединения сервера, следуя PASS/SERVER, которыми При соединении, сервера обмениваются парами PASS/SERVER, с помощью которых устанавливаются парольные линки. С помощью этих же команд и их ответов, сервера обмениваются информацией о соединении, которая описана ниже.</p><p>При инициализировании серверных запросов пары PASS/SERVER, так же проверярся, что сервер должным образом отвечает на идентификацию перед подтверждением соединения (проверяется для того, чтобы убедиться в том, что это действительно сервер).</p><h4 id="p8.6.1">8.6.1. Обмен информацией о состоянии соединения</h4><p>Информацию необходимо будет разделить между  серверами. Преимущества следущие:</p><ul class="dot"><li>все знают другие сервера;</li><li>все знают пользовательскую информацию;</li><li>все знают информацию каналов.</li></ul><p>Информация которой располагают сервера, пересылается SERVER-сообщениями, пользовательская информация с сообщениями NICK/USER/MODE/JOIN и с каналов (MODE-сообщения).</p><p class="note">Замечание: Топики канала *НЕ* обмениваются здесь, потому что команда TOPIC перезапишет всю остальную информацию о топиках, это хорошо при двухстороннем соединении и обмене топиками.</p><p>Прохождением информации о серверах первой, любые конфликты с серверами, которые уже существуют, занимая место перед никнеймом, могут происходить только всвязи со специфичностью никнейма, находящегося на втором сервере. IRC-сеть только будучи к существующему, как нециклический график; это может быть возможно, что сеть уже переподсоединилась в другом месте, где происходит конфликт, показывая сети необходимость в разрыве.</p><h3 id="p8.7">8.7. Разрыв соединения сервер-клиент</h3><p>Когда клиет закрывает соединение, создается QUIT-сообщение от имени клиента сервером, к которому присоединен клиент. Не используется и не создается никакое другое сообщение.</p><h3 id="p8.8">8.8. Разрыв соединения сервер-сервер</h3><p>При закрытии соединения сервер-сервер, и тот и другой удаленно создают SQUIT или «натуральные» причины закрытия соединения с IRC-сетью, которые должны быть известны всем серверам. Для этого сервер отсылает список SQUIT'ов (по одному на каждый сервер, имеющий соединение с ним) и список QUIT'ов (снова, по одному для каждого клиента, соединенных с ним).</p><h3 id="p8.9">8.9. Слежение за изменениями никнейма</h3><p>Все IRC-сервера требуют хранение истории последних изменений никнейма. Это требование предоставляет серверу шанс предоставить нетронутую информацию по изменениями никнейма при возникновении конфликтов с командами управления им. Команды, которые должны фиксировать изменения никнейма.</p><ul class="dot"><li>KILL (прибитие никнейма)</li><li>MODE (+/- o,v)</li><li>KICK (кик никнейма)</li></ul><p>Остальные команды не проверяют изменения никнейма.</p><p>В упомянутых случаях, сервер требует, во-первых, проверку на наличие никнейма, тогда проверяется его история, смотря кому этот никнейме принадлежит в данный момент. Это уменьшает шансы возникновения конфликтов, но они могут встретиться на сервере, упомянутые по ошибке клиентом. При выполнении изменения дается некий отрезок времени, которые дает возможность игнорировать более старые.</p><p>Для умеренной истории, серверу следует хранить предыдущие никнеймы для каждого известного ему клиента, если они все решатся их изменить. Этот обьем ограничен другими факторами (такие как обьем памяти и тому подобное).</p><h3 id="p8.10">8.10. Flood-контроль клиентов</h3><p>В больших сетях соединенных между собой IRC-серверов, действительно легко для любого клиента, присоединенного к сети, обеспечивать непрерывный потоксообщений, как результат не только сетевого флуда, но так же и ухудшение работы сервисов. Лучше чем требовать от каждой «жертву» защиты самих себя, флуд-защита была встроена в сервер и добавлена к сервисам, доступных всем клиентам. Текущий алгоритм таков:</p><ul class="dot"><li>проверка клиентского «таймера сообщений», если он отстает от текущего времени - подкорректировать;</li><li>чтение любых данных, поступающих с клиента;</li><li>пока таймер опережает текущее время меньше, чем на десять секунд, - проверять любые сообщения с клиента и штрафовать клиента по две секунды за каждое сообщение;</li></ul><p>который, в сущности, разрешает клиенту посылать одно сообщение каждые две секунды без каких-либо последствий.</p><h3 id="p8.11">8.11. Non-blocking lookups</h3><p>В окружении реального времени, необходимо чтобы сервер мог делать как можно меньшие остановки для того, чтобы все клиенты обслуживались в равной мере. Очевидно, этот асинхронный IO работает во всех сетевых операциях чтения\записи. Для нормальных серверных соединений, это было не трудно, но здесь другая поддержка операций, что может статть причиной блокирования сервера (подобно чтениям диска). Это возможно, подобно активации, следующей быть выполненной с коротким перерывом.</p><h4 id="p8.11.1">8.11.1. Hostname (DNS) lookups</h4><p>Использование стандартных resolver-библиотек от Berkeley и другие, имеющие предназначение больших задержек в некоторых случаях, где ответы имеют перерывы. Во избежение этого, разделяют уставноленные DNS-шаблоны, которые настраивают для асинхронных операций ввода\вывода (IO) и тогда вызывается внутренняя IO-петля главного сервера.</p><h4 id="p8.11.2">8.11.2. Username (Ident) lookups</h4><p>Хотя эти многочисленные ident-библиотеки существуют для использования и включения в другие программы, они являются причинами проблем, с тех пор как они работают в синхронном режиме и выводят результат в обычных задержках. Вновь разрешение записано установкой шаблонов, которые будет обьединяться с неподвижностью сервера и работать, используя асинхронный ввод\вывод.</p><h3 id="p8.12">8.12. Конфигурационный файл</h3><p>Предоставляя гибкость настройки и запуска сервера, рекомендуется исползовать конфигурационный файл, который содержит инструкции к серверу на следующие темы:</p><ul class="dot"><li>с каких хостов допускать соединения клиентов;</li><li>с каких хостов допускать серверные соединения;</li><li>с какими хостами соединяться (как активно, так и пассивно);</li><li>иформация о нахождении сервера (университет, город/район, компания и тому подобное);</li><li>кто отвечает за сервер и е-мейл адрес, по которому можно связаться с администратором;</li><li>имена хостов и пароли для клиентов, которые хотят получить доступ к командам IRC-операторов.</li></ul><p>В указании имен хостов, следует указывать как имена доменов, так и использовать «точечную» запись (127.0.0.1). Это дает возможность указания пароля, используемого/подтверждаемого все входящие и исходящие соединения (хотя, на другие серверы используются только исходящие соедения).</p><p>Выше есть список минимальных требований для любого сервера, который желает создать соединение с каким-либо другим сервером. Остальные пункты, которые могут быть использованы:</p><ul class="dot"><li>указание, каким серверам можно присоединяться;</li><li>глубина серверного дерева, разрешенного на доступ;</li><li>часы, в которые могут присоединяться клиенты.</li></ul><h4 id="p8.12.1">8.12.1. Допуск клиентов к соединению</h4><p>Серверу следует использовать некую сортировку «списка контроля допуска» (или в конфигурационном файле, или еще где), который читается при загрузке и используется для приятия решения о том, могут или нет хосты клиентов использовать его для соединения.</p><p>«Запрет», как и «разрешение» следует предоставлять для более гибкого
контроля доступа хоста.</p><h4 id="p8.12.2">8.12.2. Операторы</h4><p>Предоставление привилегий оператору для уничтожения пользователя может иметь ужасные последствия для благополучия IRC-сети. В следствии чего возникают трения. В текущей настройке требуется два «пароля», один из которых отгадывается весьмо просто. Хранение IRC-операторских паролей в конфигурационных файлах предпочительно в хорошо закодированном виде (например, использование crypt(3) из Unix), предотвращая легкое похищение.</p><h4 id="p8.12.3">8.12.3. Допуск серверов к соединению</h4><p>Взаимное соединение серверов не имеет тривиального значения: плохое соединение может быть вызвано большим столкновением на usefulness of IRC. Таким образом, каждому серверу следует имет список серверовв, к которым он может присоединиться и тех, кто может присоединиться к нему. Под безцеремонностью следует понимать сервер, доступный к соединению с произвольным хостом, как с сервером. В дополнение ко всему этому, серверы могут присоединяться или не присоединяться, и вследствии этого предпочительней хранить пароль и другие характеристики на линка в конфигурационном файле.</p><h4 id="p8.12.4">8.12.4. Административная часть</h4><p>Для предоставления верных и правильных отклиеов на ADMIN-команды (см. раздел 4.3.7), сервер следует на обеспечить нужными подробностями в конфигурации.</p><h3 id="p8.13">8.13. Формирование сообществ</h3><p>Текущий сервер предоставляет любому зарегистрированному локальному пользователю зайти на не более 10 различных каналов. Это не ограничение на не-локальных пользователей, а скорей предпочтение, для формирования неких сообществ, которые находятся на определенных каналах.</p><h2 id="p9">9. Текущие проблемы</h2><p>Число известных проблем с этим протоколом, все из которых надеются быть решенными в ближайщее время, в ближайшем будущем будет переписано. В данный момент, идет работа по разрешению этих проблем.</p><h3 id="p9.1">9.1. Расширение</h3><p>В расширенном распознании этот протокол бывает не достаточно хорош. Основная проблема происходит от требования, чтобы все сервера знали обо всех остальных серверах, и пользователи; и что информация, относительно их, будет обновляться по мере ее изменения. Желательно, так же, хранить число серверов доступно для того, чтобы расстояние между двумя точками сохранялась минимальной и дерево ветвилось как можно сильней.</p><h3 id="p9.2">9.2. Имена</h3><p>В данный момент, протокол IRC имеет три типа имени: никнейм, имя канала и имя сервера. Каждый из них имеет свой домен и не пересекается друг с другом. Так же, для пользователей возможен выбор любого из трех имен, не вызывая возражений. Для расширения распознавания требуется переработка, с намерением для уникальности имен для каналов и никнеймов, чтобы предотвратить нежелателные столкновения, так же как и растворение доступа к циклическому дереву.</p><h4 id="p9.2.1">9.2.1. Никнеймы</h4><p>Идея никнеймов в IRC очень удобна для пользователей в использовании при общении с любым на другом конце канала. Но только ограничение размера никнейма увеличивает шансы попытки испаользования одного никнейма разными людьми. Если такое происходит, то каждый из этих людей становится под угрозой KILL (4.6.1).</p><h4 id="p9.2.2">9.2.2. Каналы</h4><p>Требования к текущему каналу всего лишь, чтоб все сервера знали о всех каналах, их место расположения и настройки. Конфликты каналов обьясняются как тем же случаем (так и людей, кто создал новый канал, рассматривают как членов канала), подобно которому возникают конфликты по поводу использования никнеймов.</p><h4 id="p9.2.3">9.2.3. Серверы</h4><p>Хотя число серверов, обычно, намного меньше числа пользователей или каналов, их требования будут известны всем.</p><h3 id="p9.3">9.3. Алгоритмы</h3><p>В некотрых местах серверного кода, не возможно отклониться от N^2 алгоритмов, подобных проверке списка каналов установки клиентов.</p><p>В текущих версиях сервера отсутствуют проверки базы данных на содержимое, каждый сервер отвечает за корректность информации соседнего сервера. Это открытые двери к большим проблемам, если присоединенный сервер содержит ошибки или наоборот пытается противоречить каким-либо сетевым правилам и установкам.</p><p>В данном случае, потому что недостаток уникальных внутренних и глобальных имен является многогранным камнем преткновения. Конфликты возникают, главным образом, из-за проблемы захвата времени для ответных сообщений и еффекта IRC-сети. Как раз изменением уникальных имен и решаются проблемы с командами настроек канала.</p><h2 id="p10">10. Поддержка и доступ</h2><ul><li>Листы подписки:</li><li class="lib">Будущее протокола: ircd-three-request@eff.org</li><li class="lib">Общие обсуждения: operlist-request@eff.org</li><li>Программное обеспечение:</li><li class="lib">cs.bu.edu:/irc</li><li class="lib">nic.funet.fi:/pub/irc</li><li class="lib">coombs.anu.edu.au:/pub/irc</li><li>Newsgroup: alt.irc</li></ul><h2 id="p11">11. Рассмотрение безопасности</h2><p>Безопасность обсуждалась в разделах 4.1, 4.1.1, 4.1.3, 5.5, и 7.</p><h2 id="p12">12. Адреса авторов</h2><p>Jarkko Oikarinen<br />Tuirantie 17 as 9<br />90500 OULU<br />FINLAND<br />Email: <bdo dir="rtl">&#105;&#102;&#46;&#117;&#108;&#117;&#111;&#46;&#110;&#117;&#115;&#108;&#111;&#116;&#64;&#111;&#116;&#106;</bdo></p><p>Darren Reed<br />4 Pateman Street<br />Watsonia, Victoria 3087<br />Australia<br />Email: <bdo dir="rtl">&#117;&#97;&#46;&#117;&#100;&#101;&#46;&#117;&#110;&#97;&#46;&#115;&#98;&#109;&#111;&#111;&#99;&#64;&#110;&#111;&#108;&#97;&#118;&#97;</bdo></p></div></div><div id="disqus_thread"></div><script type="text/javascript">var disqus_shortname="rfc2",disqus_title="RFC 1459 - Протокол ретранслируемого интернет-чата (IRC)",disqus_identifier="1459.rfc",disqus_url="http://rfc2.ru/1459.rfc";(function(){var dsq=document.createElement("script");dsq.type="text/javascript";dsq.async=true;dsq.src = "//"+disqus_shortname+".disqus.com/embed.js";(document.getElementsByTagName("head")[0]||document.getElementsByTagName("body")[0]).appendChild(dsq);})();</script><div class="bubble">2007 - 2014 © <a href="../index.html" title="Русские переводы RFC">Русские переводы RFC</a>, IETF, ISOC.</div></div><div id="bottom" style="position:static !important;bottom:auto !important"><div class="bubble"><ul><li><!--723572853672--></li></ul></div></div><!-- Yandex.Metrika counter --><script type="text/javascript">(function (d, w, c) { (w[c] = w[c] || []).push(function() { try { w.yaCounter4680559 = new Ya.Metrika({id:4680559, webvisor:true, clickmap:true, accurateTrackBounce:true, trackHash:true, ut:"noindex"}); } catch(e) { } }); var n = d.getElementsByTagName("script")[0], s = d.createElement("script"), f = function () { n.parentNode.insertBefore(s, n); }; s.type = "text/javascript"; s.async = true; s.src = (d.location.protocol == "https:" ? "https:" : "http:") + "//mc.yandex.ru/metrika/watch.js"; if (w.opera == "[object Opera]") { d.addEventListener("DOMContentLoaded", f, false); } else { f(); } })(document, window, "yandex_metrika_callbacks");</script><noscript><div><img src="http://mc.yandex.ru/watch/4680559?ut=noindex" style="position:absolute; left:-9999px;" alt="" /></div></noscript><!-- /Yandex.Metrika counter --></body></html>