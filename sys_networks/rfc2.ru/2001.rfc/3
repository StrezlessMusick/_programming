<!DOCTYPE html><html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><link rel="stylesheet" href="../tpl/style.css@f4e332aa" type="text/css" /><link rel="prev" href="2" /><link rel="next" href="4" /><link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css' /><style type="text/css">h1,h2,h3,h4{font-family:'Open Sans',sans-serif}</style><title>Перевод RFC 2001 — Алгоритмы Slow Start, Congestion Avoidance, Fast Retransmit, и Fast Recovery для протокола TCP, стр. 3</title><meta name="author" content="W. Stevens" /><link rel="alternate" type="application/rss+xml" title="RFC2.ru - Русские Переводы RFC" href="../rss.xml"></head><body><div id="content"><div id="nav"><div class="icon i0"></div> <a href="../index.html" accesskey="`">На Главную</a></div><div id="search" class="ya-site-form ya-site-form_inited_no"><form action="http://yandex.ru/sitesearch" method="get" target="_blank"><input type="hidden" name="searchid" value="2154295"/><input type="hidden" name="l10n" value="ru"/><input type="hidden" name="reqenc" value=""/><input type="hidden" name="submit" value="Найти"/><input type="search" value="" name="text" placeholder="Поиск по RFC2.ru" /></form></div><div itemscope itemtype="http://schema.org/ScholarlyArticle"><meta itemprop="inLanguage" content="ru" /><meta itemprop="editor" content="ru" /><div id="header"><h1><a itemprop="headline" href="../2001.rfc">RFC 2001 — Алгоритмы Slow Start, Congestion Avoidance, Fast Retransmit, и Fast Recovery для протокола TCP</a></h1></div><dl class="mute"><dt></dt><dd><div class="icon i1"></div> RFC: 2001</dd><dd><div class="icon i3"></div> Оригинал: <a href="original" target="_blank" rel="nofollow"><span itemprop="alternativeHeadline">TCP Slow Start, Congestion Avoidance, Fast Retransmit, and Fast Recovery Algorithms</span></a></dd><dd><div class="icon i7"></div> Другие версии: <strong class="obsoleted_by">RFC 2581</strong></dd><dd><div class="icon i2"></div> Категория: <span itemprop="articleSection">Предложенный стандарт</span></dd><dd><div class="icon i4"></div> Дата публикации: <time itemprop="datePublished" datetime="1997-01-01">Январь 1997</time></dd><dd><div class="icon i5"></div> Автор: <span itemprop="author">W. Stevens</span></dd><dd><div class="icon i6"></div> Перевод: <span itemprop="editor">Николай Малых</span></dd></dl><div class="pages"><p class="r"> <h2 class="pt"><span class="z">RFC 2001,</span> Страница 3 из 5</h2></p><ul><li><noindex><a href="print" rel="nofollow">Одной Страницей</a></noindex></li><li><a accesskey="1" title="Первая страница" href="../2001.rfc" class="arr">&lArr;</a></li><li><a accesskey="2" title="На страницу назад" href="2"><b>&larr;</b></a></li><li><a href="../2001.rfc">1</a></li><li><a href="2">2</a></li><li class="this"><span>3</span></li><li><a href="4">4</a></li><li><a href="5">5</a></li><li><a accesskey="3" title="На страницу вперед" href="4">&rarr;</a></li><li><a accesskey="4" title="Последняя страница" href="5">&rArr;</a></li></ul></div><div id="text" itemprop="articleBody"><h3>Congestion Avoidance</h3><p>Насыщение может возникать в тех случаях, когда данные поступают из «толстой трубы» (например, скоростная ЛВС) и должны передаваться в узкополосный канал (медленная сеть WAN). Может возникать насыщение и в тех случаях, когда множество потоков приходят на маршрутизатор одновременно и производительности этого маршрутизатора не хватает для обслуживания всех потоков. Алгоритм предотвращения насыщения (Congestion avoidance) используется при потере пакетов. Описание алгоритма приведено в работе [2].</p><p>Алгоритм основан на допущении, что потери пакетов, связанные с их повреждением при передаче, весьма малы (менее 1%). Следовательно, причиной потери пакетов является насыщение где-то на пути между отправителем и получателем. Существует два индикатора потери пакетов - возникновение тайм-аутов и появление дубликатов ACK.</p><p>Алгоритмы congestion avoidance и slow start независимы один от другого и имеют разные цели. Однако при возникновении насыщения протокол TCP должен снизить скорость передачи пакетов в сеть и даже подключить алгоритм slow start для снижения размера окна насыщения. На практике эти алгоритмы обычно используются совместно.</p><p>Алгоритмы congestion avoidance и slow start требуют поддержки для каждого соединения двух переменных - cwnd (размер окна насыщения и ssthresh (порог slow start). Комбинация этих алгоритмов работает следующим образом:</p><ol><li>При инициализации соединения задается cwnd = 1 (сегмент) и ssthresh = 65535 (байтов)</li><li>Модуль передачи протокола TCP никогда не передает в сеть число сегментов, превышающее минимальное из двух значений - cwnd и анонсируемый получателем размер окна.</li><li>При возникновении насыщения (тайм-аут или появление дубликатов ACK) для переменной ssthresh устанавливается значение, соответствующее половине размера меньшего из окон (cwnd и анонсируемый получателем размер окна), но не менее размера одного сегмента. Кроме того, при наличии тайм-аутов для переменной cwnd устанавливается значение 1 (т. е., повторяется процедура slow start).</li><li>При получении подтверждений от удаленной стороны значение cwnd увеличивается. Способ увеличения зависит от того, какой алгоритм будет использовать модуль TCP - slow start или congestion avoidance. Если cwnd &lt;= ssthresh, TCP будет использовать алгоритм slow start, в остальных случаях - congestion avoidance. Процедура slow start продолжается, пока TCP находится в первой половине пути к насыщению (поскольку, на этапе 3 был установлен порог в половину размера окна, при котором возникло насыщение), а дальше начинает использоваться алгоритм предотвращения насыщения (congestion avoidance. Алгоритм slow start использует начальное значение cwnd = 1 и увеличивает размер окна насыщения на 1 при получении каждого пакета ACK. Как было отмечено выше, это ведет к экспоненциальному росту размера окна - передается сначала 1 сегмент, затем 2, 4 и т. д. Алгоритм congestion avoidance задает для окна cwnd увеличение на segsize*segsize/cwnd при получении каждого пакета ACK (segsize - размер сегмента, а значение cwnd пересчитано в байты).<br />Такая процедура обеспечивает линейный рост cwnd в отличие от экспоненциального роста в slow start. Размер cwnd должен увеличиваться хотя бы на 1 сегмент в течение каждого периода кругового обхода (round-trip time - RTT), независимо от числа полученных в течение периода RTT подтверждений ACK, тогда как slow start увеличивает размер cwnd на количество принятых подтверждений.</li></ol><p>Многие реализации некорректно используют увеличение размера окна насыщения на часть размера сегмента (обычно, на 1/8) в течение периода congestion avoidance. Это неправильно и такое поведение не будет эмулироваться в будущих версиях.</p></div></div><noindex><div class="pages"><p class="r"> <b>Страница 3 из 5</b></p><ul><li><noindex><a href="print" rel="nofollow">Одной Страницей</a></noindex></li><li><a title="Первая страница" href="../2001.rfc" class="arr">&lArr;</a></li><li><a title="На страницу назад" href="2"><b>&larr;</b></a></li><li><a href="../2001.rfc">1</a></li><li><a href="2">2</a></li><li class="this"><span>3</span></li><li><a href="4">4</a></li><li><a href="5">5</a></li><li><a title="На страницу вперед" href="4">&rarr;</a></li><li><a title="Последняя страница" href="5">&rArr;</a></li></ul></div></noindex><div id="disqus_thread"></div><script type="text/javascript">var disqus_shortname="rfc2",disqus_title="RFC 2001 - Алгоритмы Slow Start, Congestion Avoidance, Fast Retransmit, и Fast Recovery для протокола TCP",disqus_identifier="2001.rfc",disqus_url="http://rfc2.ru/2001.rfc";(function(){var dsq=document.createElement("script");dsq.type="text/javascript";dsq.async=true;dsq.src = "//"+disqus_shortname+".disqus.com/embed.js";(document.getElementsByTagName("head")[0]||document.getElementsByTagName("body")[0]).appendChild(dsq);})();</script><div class="bubble">2007 - 2014 © <a href="../index.html" title="Русские переводы RFC">Русские переводы RFC</a>, IETF, ISOC.</div></div><div id="bottom" style="position:static !important;bottom:auto !important"><div class="bubble"><ul><li><!--723572853672--></li></ul></div></div><!-- Yandex.Metrika counter --><script type="text/javascript">(function (d, w, c) { (w[c] = w[c] || []).push(function() { try { w.yaCounter4680559 = new Ya.Metrika({id:4680559, webvisor:true, clickmap:true, accurateTrackBounce:true, trackHash:true}); } catch(e) { } }); var n = d.getElementsByTagName("script")[0], s = d.createElement("script"), f = function () { n.parentNode.insertBefore(s, n); }; s.type = "text/javascript"; s.async = true; s.src = (d.location.protocol == "https:" ? "https:" : "http:") + "//mc.yandex.ru/metrika/watch.js"; if (w.opera == "[object Opera]") { d.addEventListener("DOMContentLoaded", f, false); } else { f(); } })(document, window, "yandex_metrika_callbacks");</script><noscript><div><img src="http://mc.yandex.ru/watch/4680559" style="position:absolute; left:-9999px;" alt="" /></div></noscript><!-- /Yandex.Metrika counter --></body></html>