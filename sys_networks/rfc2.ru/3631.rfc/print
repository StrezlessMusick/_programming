<!DOCTYPE html><html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><link rel="stylesheet" href="../tpl/style.css@f4e332aa" type="text/css" /><link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css' /><style type="text/css">h1,h2,h3,h4{font-family:'Open Sans',sans-serif}</style><link rel="canonical" href="../3631.rfc" /><meta name="Robots" content="noindex, nofollow" /><title>Перевод RFC 3631 — Способы обеспечения информационной безопасности в Internet</title><link rel="alternate" type="application/rss+xml" title="RFC2.ru - Русские Переводы RFC" href="../rss.xml"></head><body><div id="content"><div id="nav"><div class="icon i0"></div> <a href="../index.html" accesskey="`">На Главную</a></div><div id="search" class="ya-site-form ya-site-form_inited_no"><form action="http://yandex.ru/sitesearch" method="get" target="_blank"><input type="hidden" name="searchid" value="2154295"/><input type="hidden" name="l10n" value="ru"/><input type="hidden" name="reqenc" value=""/><input type="hidden" name="submit" value="Найти"/><input type="search" value="" name="text" placeholder="Поиск по RFC2.ru" /></form></div><div itemscope itemtype="http://schema.org/ScholarlyArticle"><meta itemprop="inLanguage" content="ru" /><meta itemprop="editor" content="ru" /><div id="header"><h1><a itemprop="headline" href="../3631.rfc">RFC 3631 — Способы обеспечения информационной безопасности в Internet</a></h1></div><dl class="mute"><dt></dt><dd><div class="icon i1"></div> RFC: 3631</dd><dd><div class="icon i3"></div> Оригинал: <a href="original" target="_blank" rel="nofollow"><span itemprop="alternativeHeadline">Security Mechanisms for the Internet</span></a></dd><dd><div class="icon i2"></div> Категория: <span itemprop="articleSection">Информационный</span></dd><dd><div class="icon i4"></div> Дата публикации: <time itemprop="datePublished" datetime="2003-12-03">Декабрь 2003</time></dd><dd><div class="icon i5"></div> Авторы: <span itemprop="author">S. Bellovin</span>, <span itemprop="author">J. Schille</span>, <span itemprop="author">C. Kaufman</span></dd><dd><div class="icon i6"></div> Перевод: <span itemprop="editor">Мельников Дмитрий Анатольевич</span></dd></dl><div id="text" itemprop="articleBody"><h3>Аннотация</h3><p>Способы обеспечения информационной безопасности (ИБ) должны встраиваться в Internet-протоколы, функционирование которых должно быть защищенным. Многие проблемы ИБ могут возникнуть в результате некорректной реализации способов обеспечения ИБ (ошибки при встраивании). Однако даже когда способ обеспечения ИБ функционирует (реализован) корректно, все равно будут иметь место проблемы ИБ, так как фундаментальный протокол сам по себе требует корректной реализации на практике. Точно также и способ обеспечения ИБ, который необходимо реализовать в защищаемом протоколе, может быть различным, так как защищаемый протокол имеет свою собственную внутреннюю структуру. Тем не менее, существует множество протоколов, для которых уже существуют стандартизованные в Internet способы обеспечения ИБ, вполне приемлемые для реализации. Конкретный выбор способа может быть различным, так как все зависит от конкретной ситуации. В данном стандарте приводится обзор таких способов обеспечения ИБ с пояснением функций и свойств каждого.</p><h2>1. Введение</h2><p>Варианты компрометации ИБ в Internet могут быть разделены на несколько классов (групп), во всем диапазоне от «отказа в обслуживании» до компрометации IP-узла. Атаки типа «отказ в обслуживании» основаны на том, что транслируемый трафик является открытым, однако эта группа вариантов компрометации ИБ выходит за пределы интересов данного стандарта, несмотря на то, что такие атаки являются объектом многих дискуссий и исследований, проводимых в настоящее время. Необходимо заметить, что многие такие атаки весьма трудно реализуемы, так как в настоящее время накоплен достаточно большой опыт по защите от них. Компрометация IP-узла (наиболее общим случаем является необнаруживаемая перегрузка буферных устройств памяти) скорее всего, является следствием недостатков при конкретной реализации способов обеспечения ИБ в программном модуле IP-узле, нежели следствием недостатков в самих протоколах, реализованных в IP-узле. Тем не менее, тщательно проработанные протоколы могут иметь гораздо меньше таких недостатков («брешей»), чем их может быть, и могут быть менее трудоемки при эксплуатации.</p><p>Однако существуют варианты копрометации ИБ, которые усугубляются самими же протоколами, используемыми в Internet-сети. Если проблема обеспечения ИБ является свойственной для протокола, то тогда не существует метода по реализации того или иного способа обеспечения ИБ, который бы мог исключить данную проблему.</p><p>И поэтому жизненно важно, чтобы все протоколы, создаваемые для Internet-сети, обладали функциональными основами, обеспечивающими ИБ. Точно также как и способ обеспечения ИБ, который должен быть внедрен в протокол, защищает последний, так и сам защищаемый протокол должен обеспечивать свою функциональную защищенность на основе своей внутренней структуры. Однако в данном документе рассматриваются IETF-стандартизованные способы обеспечения ИБ. Во многих случаях корректное применение этих способов вполне может обеспечить необходимый уровень защищенности протокола.</p><p>Для обеспечения ИБ в Internet-сети могут использоваться все возможные способы. А вот какой способ необходимо использовать, будет зависеть от многих различных факторов.</p><p>Данный документ является в некотором смысле руководством, в котором обсуждаются факторы, влияющие на выбор того или иного решения, сами решения (как правило стандартизированные), обсуждавшиеся ранее в стандарте RFC-2316.</p><p>Обеспечение ИБ, однако, является искусством, а не наукой. Предлагая слепо тот или иной рецепт, можно получить катастрофу. Как всегда, при разработке любого протокола необходимо проводить его всестороннее тестирование.</p><p>И в заключении, способы обеспечения ИБ не являются каким-то «звездным дождем волшебных эльфов», которым можно «полностью покрыть» протоколы. Маловероятно, чтобы способ обеспечения ИБ встраивалась на долго. Хорошие проекты (то есть, безопасные, прозрачные и эффективные проекты) получаются тогда, когда способы обеспечения ИБ разрабатываются вместе с протоколом. Это немыслимо, чтобы криптография смогла защитить протокол с явными семантическими изъянами.</p><h2>2. Факторы, влияющие на принятие решения</h2><h3>2.1. Модель угроз</h3><p>Наиболее важным (а порой определяющим) фактором, влияющим на выбор способа обеспечения ИБ, является модель угроз ИБ. То есть, кто может провести атаку, на какой источник информации, с использованием каких способов? Мало информативная цель атаки, такая как WWW-сервер, который предлагает только открытую информацию, может быть не удостоен сильной защитой. И наоборот, источник, который (если он скомпрометирован) мог оставить незащищенными важнейшие компоненты Internet-инфраструктуры, скажем главный магистральный маршрутизатор или DNS-сервер высокого уровня иерархии, должен быть защищен с помощью очень надежных способов обеспечения ИБ. Нарушитель выбирает объект, исходя из его важности, в зависимости от цели атаки. Если целью атаки является критическая информация (то есть попытка доступа к такой информации), то тогда все системы, которые управляются с помощью такой информации или выступают посредниками для доступа к ней, становятся важными для нарушителя. Если целью нарушителя является нанесение поражающего воздействия, то тогда системы, от нормального функционирования которых зависят крупные сегменты Internet-сети, становятся чрезвычайно важными и ценными. Даже когда WWW-сервер демонстрирует только открытую информацию (на WWW-сайте), то тогда любое изменение её содержания может вызвать замешательство у её владельца, и, в конце концов, может нанести значительный ущерб. При разработке протокола весьма трудно предсказать, что он когда-нибудь найдет свое применение.</p><p>Все системы, подключенные к Internet, требуют хотя бы минимального уровня защищенности. Начиная с 2000 года и продолжая по настоящее время, мы являемся свидетелями появления нового типа атак на системы ИБ в Internet: так называемая программа «червь», которая разыскивает и автоматически атакует системы, который уязвимы, с точки зрения их компрометации, к атакам, которые встроены в сам «программный червь». Такие «программные черви» могут скомпроматировать буквально тысячи систем в течении весьма короткого периода времени.</p><p class="note">Замечание. Первым таким Internet-червем был червь «Morris» в 1988 году. Однако, эта идея не нашла своего продолжения в подобных программах в течении более чем 12 лет!</p><p>Как отмечалось ранее, все эти черви достигли поставленной цели благодаря наличию программных ошибок при реализации протоколов, которые, с другой стороны, были разумно защищены. Однако, трудно представить себе атаку, которая нацелена на фундаментальную брешь в защищенном протоколе, который применяется повсеместно. И тем не менее, существует настоятельное требование (императив): стремиться к минимизации таких брешей в разрабатываемых протоколах.</p><p>Значимость цели для нарушителя может зависеть и от места её дислокации. Сервер сетевого мониторинга, который расположен на магистральном кабеле, является очень важной целью, так как он может быть легко «превращен» в сервер прослушивания сетевого трафика. Аналогичный сервер, но размещенный в сетевом субсегменте и используемый для обработки сообщений, мог быть гораздо менее привлекательным для изощренного нарушителя и, следовательно, мог быть гораздо менее подвержен риску.</p><p>Каждый должен также обязательно учитывать тип атаки, которая может быть предпринята. Как минимум, прослушивание трафика должно рассматриваться как очень серьезная угроза ИБ. Последнее время, начиная, по крайней мере, с 1993 года, произошло много инциндентов, связанных с противоправным прослушиванием (контролем) трафика. Очень часто система подвергается риску вследствие активных атак, которые предусматривают вставку ложных или удаление истинных IP-пакетов нарушителем. Необходимо отметить, что такие атаки могут быть проведены с помощью общедоступных средств и, фактически, наблюдались «в природе». С практической точки зрения, особый интерес представляет тип атак, называемый «вторжение в сеанс связи» («session hijacking»), когда «некто», находясь между взаимодействующими сторонами и дождавшись завершения процедуры аутентификации, начинает в дальнейшем изображать одну из взаимодействующих сторон и продолжает сеанс связи с другой.</p><p>Одним из наиболее важных средств, которые доступны каждому при обеспечении ИБ протоколов, является криптография. Криптография позволяет обеспечить различные уровни защиты данных, которые транслируются по сети, причем вне зависимости от степени защищенности самой сети. Последнее чрезвычайно важно, так как Internet-сеть, по причине распределенности своего управления и контроля, не может рассматриваться как надежная среда передачи информации. Ее безопасность основана на способах обеспечения ИБ, которые встраиваются в сетевые протоколы, независящие от среды передачи данных или сетевых операторов.</p><p>В заключении, конечно, при использовании криптографии необходимы определенные финансовые затраты. Но эти затраты очень быстро снижаются; «закон Мура», который гласит, что каждый год быстродействие процессоров возрастает в 1½ раза, плюс легкая доступность криптографических компонентов и средств делают криптографию относительно простой с точки зрения применения надежных методов защиты информации. Несмотря на это, существуют некоторые исключения. Это относится к системам с открытыми ключами, которые по-прежнему весьма дорогостоящие. Такие системы особенно недоступны тогда, когда стоимость каждой процедуры по формированию открытого ключа покрывает слишком малое число простых процедур информационого обмена (ПИНО), то есть дорогостоящий, с точки зрения его формирования, ключ используется в незначительном числе ПИНО, защищаемых с его помощью. В дальнейшем, более тщательная инженерная проработка протоколов позволит использовать каждую процедуру формирования криптоключа в интересах гораздо большего числа ПИНО.</p><p>В общем, сегодня, если нет каких-либо ограничений, рекомендуется использовать наиболее надежные криптографические способы защиты информации, которые приемлемы для какого бы то ни было протокола. Очень часто, самые надежные криптографические способы защиты информации стоят не на много больше, а иногда и меньше, чем менее надежные. Реальные затраты, связанные с обеспечением быстродействия криптоалгоритма, очень часто не связаны с уровнем обеспечиваемой им защищенности. В зависимости от используемой аппаратной части комплекса, криптографические процедуры могут осуществляться с очень высокой скоростью (1Gb/s), и даже в программном исполнении быстродействие реализуемых криптографических процедур приближается к такой скорости.</p><h3>2.2. Несколько слов об обязательных способах обеспечения ИБ</h3><p>В Internet-сообществе (IETF) стандартизировано понятие «способы обеспечения ИБ, обязательные для применения». Данный подход предусматривает разработку такого протокола безопасности, который бы гарантировал функциональную совместимость различных прикладных служб, использующих данный протокол. Если протокол предлагает несколько дополнительных функций для решения поставленной задачи, но при этом он нереализуем хотя бы в одной из прикладных служб, с которой должен функционировать совместно, то тогда в дальнейшем возможно, что несколько прикладных служб будут функционально несовместимы. Это есть следствие ошибочного выбора способа обеспечения ИБ, который приводит в функциональной несовместимости различных прикладных служб.</p><p>Несмотря на то, что протокол безопасности может включать один или несколько способов обеспечения ИБ, эти способы, в свою очередь, очень часто могут использовать несколько криптографических систем. Сами же криптосистемы могут варьироваться с точки зрения их надежности (стойкости) и быстродействия. Однако во многих протоколах безопасности необходимо определить «обязательные для применения» криптосистемы, чтобы гарантировать двум любым прикладным службам способность в дальнейшем согласовывать между собой взаимоприемлемую криптосистему.</p><p>Существуют некоторые протоколы безопасности, которые изначально разрабатывались для применения в конкретных ограниченных прикладных системах. И очень частым аргументом в пользу создания таких протоколов было то, что область применения соответствующего протокола достаточно хорошо определена, а сам протокол надежно защищен и не нуждается в дополнительных способах обеспечения ИБ. История опровергала эту аргументацию. Неизбежно, что даже «хорошие» протоколы (если они разрабатывались для ограниченного применения) прекращают свое функционирование в граничной зоне, в которой изначально вопросы обеспечения безопасности не рассматривались.</p><p>Для решения этой проблемы IETF требует, чтобы все без исключения протоколы безопасности поддерживали соответствующие способы обеспечения ИБ (включая самые надежные), и даже тогда, когда область их применения была, изначально, очень ограничена.</p><p>Очень важно понимать, что обязательные способы обеспечения ИБ необходимы для применения (так как они обеспечивают высокий уровень защищенности). Однако, это вовсе не означает, что конечные пользователи должны обязательно применять эти способы. Даже если конечный пользователь знает, что эти более надежные способы встроены в используемый им протокол, обеспечиващий сетевую безопасность, все равно пользователь может выбрать ненадежные (не самые лучшие) способы обеспечения ИБ, но которым он доверяет и надеется на то, что они восполнят недостаток защищенности, исходя из своих затрат на обеспечение ИБ. (В данном случае, можно весьма скептически отнестись к такому якобы «благоразумному» выбору, который отклоняет применение более надежных способов безопасности, но эта тема лежит за пределами данного стандарта).</p><p>Требование, чтобы надежные способы обеспечения ИБ были обязательны для применения, означает только то, что те оконечные пользователи, которым необходим протокол, реализующий эти способы, могли воспользоваться им, когда в этом возникнет необходимость. Если говорить о способах обеспечения ИБ, то обязательность их применения заключается в том, что они должны (целесообразно) использоваться в режиме «по умолчанию», то есть даже тогда, когда пользователь отказался от их применения или когда настройка системы блокирует их применение. Если же обязательный к применению алгоритм устарел и стал ненадежным, то тогда лучше отказаться от него, при условии, что доступен более надежный алгоритм.</p><h3>2.3. Распределенная система защиты</h3><p>Некоторые способы обеспечения ИБ могут защищать всю сеть целиком. Несмотря на то, что такой подход позволяет сэкономить на аппаратных сетевых комплексах, он может оставить внутренний сегмент такой сети открытым для атак изнутри. Другие способы могут обеспечить защиту для конкретного пользователя компьютера, работающего в режиме разделения времени, несмотря на возможный риск атаки со стороны нарушителя, выдающего себя за реального пользователя, если конечно компьютер уже был скомпрометирован.</p><p>Когда рассчитывается необходимый уровень распределенности системы защиты, разработчики протокола должны учитывать вероятные модели его применения, уровни Internet-архитектуры, на которые встраивается протокол, а также его предполагаемая степень распространнености в Internet. Если протокол, скорее всего, будет использоваться изнутри одной защищаемой группы компьютеров (например, Центра управления сетью), то тогда степень топологического деления сетевого сегмента на субсегменты может быть различной (вплоть до самой максимальной). С другой стороны, некоторый способ обеспечения ИБ, представляющий интерес только для одной прикладной службы, может быть лучше всего встроен только в этот прикладной протокол, по сравнению, например, с ТСР-протоколом. Однако, это может повлечь за собой значительные трудности встраивания этого способа в другие протоколы, а значит это вызовет трудности его распространения в Internet.</p><h3>2.4. Уровень Internet-архитектуры, на котором встраивается протокол</h3><p>Способы обеспечения ИБ могут встраиваться на любом уровне Internet-архитектуры. В целом, если встраивать способ на более низком уровне архитектуры, то тогда он способен защитить широкий спектр высокоуровневых протоколов, но с другой стороны, эта защита может быть недостаточно надежной. Шифратор канального уровня («link layer») способен защитить не только IP-пакеты, но и ARP-пакеты. Однако, он защищает только один канал связи. И наоборот, подписанное с помощью электронной цифровой подписи (ЭЦП) почтовое сообщение, которое может транслироваться через несколько почтовых серверов-ретрансляторов (в режиме «хранение-передача»), способно идентифицировать реального отправителя, а сама ЭЦП может быть проверена гораздо позже после доставки сообщения. Тем не менее, в данном случае защищается только один тип сообщений. Сообщения простых форматов, например, сетевые новости, не защищаются, пока один из способов безопасности не будет адаптирован для таких сообщений и не встроен в программы их рассылки.</p><h3>3. Стандартные способы обеспечения ИБ</h3><h3>3.1. Системы с одноразовыми паролями</h3><p>Такие системы (RFC-2289) являются гораздо более надежными, по сравнению с обычными парольными системами. В таких системах IP-узел не должен хранить копию пароля пользователя и, тем более, передавать ее через сеть. Однако, существуют определенные риски. Так как передаваемая последовательность (одноразовый пароль) формируется из пароля пользователя, то можно предположить, что атаки по-прежнему вполне реальны и осуществимы. (Более того, программа для проведения таких атак вполне доступна.) Кроме того, необходимо прекращать доступ пользователя в систему после заранее определенного числа его зарегистрированных обращений для доступа к системе. Несмотря на то, что во многих системах эта функция является неотъемлемой, она необходима, скорее всего, как способ перезапуска базы данных для процедуры аутентификации, который не требует передачи нового пароля в открытом виде через сеть.</p><p>В настоящее время используются специальные метки для аутентификации коммерческого сетевого оборудования. Помимо решения проблемы, связанной с защитой от атак, называемых «вторжение в сеанс связи», в таких системах могут понадобиться дополнительные протокольные сообщения для передачи самих специальных меток (обычно такие метки передаются в режиме «запрос/ответ», при этом сервер передает уникальное случайное число в течении каждой процедуры аутентификации).</p><h3>3.2. HMAC-системы</h3><p>В основе HMAC-системы (HMAC: Keyed-Hashing for Message Authentication — система аутентификации сообщений на основе вычисления хэш-функции с использованием секретного ключа, RFC2104) лежит способ аутентификации с использованием заранее распределенного секретного ключа. Если оба участника ПИНО знают общий секретный ключ, то тогда HMAC-система может использоваться для аутентификации любого произвольного сообщения. Он включает запросы случайных чисел (меток), что означает способность НМАС-системы адаптироваться для защиты от повторной передачи сообщений предыдущих сеансов связи.</p><p>К сожалению НМАС-система не приемлема для аутентификации соединений, так как секретный ключ должен быть известен в явном виде каждой из сторон ПИНО, что особенно нежелательно при использовании долговременных ключей.</p><p>Когда это приемлемо, НМАС-система должна использоваться как более предпочтительная по сравнению с более старыми способами безопасности, особенно это касается вычисления хэш-функций с использованием ключей. Простые хэш-функции с использованием ключей на основе алгоритма MD5 (RFC-1321), например, BGP-протокол (RFC-2385), специально исключаются из новых протоколов безопасности, что позволяет сделать вывод о низкой надежности таких хэш-функций.</p><p>НМАС-система может использоваться совместно с любой хэш-функцией, включая MD5-алгоритм и SHA-1-алгоритм (RFC-3174). SHA-1-алгоритм более предпочтителен для новых протоколов безопасности, так как он используется намного чаще в этих целях и может быть более надежен.</p><p>Очень важно понять, что НМАС-способ обеспечения безопасности необходимо использовать для защиты каждого протокольного сообщения (кадр канального уровня). Это будет весьма большой ошибкой, если НМАС-систему использовать только для аутентификации начальной фазы ТСР-сеанса связи, а последующие ТСР-сообщения транслировать без какой-либо защиты.</p><p>Существуют так называемые атакующие программные модули, которые позволяют скомпрометировать ТСР-сеанс связи. Для этого нарушителю необходимо только использовать такой программный модуль для компрометации ТСР-сеанса связи, причем сразу после заверешения процедуры НМАС-аутентификации.</p><h3>3.3. IPsec-архитектура</h3><p>Протоколы аутентификации и шифрования на IP-уровне (сетевом уровне), составляющие основу IPsec-архитектуры, представлены в стандартах RFC-2401, RFC-2402, RFC-2406, RFC-2407 и RFC-2411. По сути, данная архитектура безопасности защищает протоколы верхних уровней, включая ТСР- и UDP-протоколы. Она обеспечивает нормальное (однородное) распределение защиты, то есть «IP-узел ⇔ IP-узел», «IP-узел ⇔ шлюз безопасности» и «шлюз безопасности ⇔ шлюз безопасности». Функциональность IPsec-архитектуры позволяет пользователю самому распределять защиту, но это бывает сравнительно редко. По существу, применение IPsec-архитектуры теряет всякий смысл, если распределение защиты на самом IP-узле слишком неоднородно.</p><p>Так как программный IPsec-модуль встраивается в программное обеспечение сетевого уровня (IP-уровня), то тогда скорее всего оно будет внедряться непосредственно в листинг программы (код программы). Такое встраивание, как правило, требует либо замены аппаратной части или обновления архитектуры, связанной с заменой отдельных протоколов. С другой стороны, IPsec-архитектура совершенно прозрачна для прикладных служб. Прикладные службы, функционирующие над IPsec-протоколами, могут значительно повысить свою защищенность вообще без каких-либо изменений в собственных протоколах. Но сейчас, по крайней мере, пока IPsec-архитектура не нашла своего повсеместного применения в Internet-сети, большинство прикладных служб не должны «гадать», что они функционируют над IPsec-протоколами, которые выступают как альтернатива их собственным способам обеспечения ИБ. Большинство современных операционных систем способны функционировать совместно с программным IPsec-модулем, однако, большинство маршрутизаторов — нет, по крайней мере, с точки зрения управления. Прикладная служба, использующая TLS-протокол (Transport Level Security — TLS, RFC-2246), вероятнее всего имеет больше возможностей для учета собственных особенностей при проведении надежной процедуры аутентификации. Управление ключевой информацией в интересах IPsec-архитектуры может основываться на использовании электронных сертификатов или распределенных секретных ключей. Очевидно, что по многим причинам сертификаты более предпочтительнее, однако, они могут представлять большую «головную боль» для системного администратора.</p><p>В настоящее время существует серьезный конфликт между функционированием IPsec-протоколов и NAT-модулями (RFC-2993). Просто NAT-модуль не может сосуществовать с любым протоколом, сообщения которого содержат дополнительно размещаемые в них IP-адреса. Это касается IPsec-протоколов, каждого IP-пакета с сообщением любого протокола верхнего уровня, содержащего IP-адреса, если только они в заголовках. Этот конфликт иногда может быть преодолен за счет применения режима туннелирования (РТУ), но это не всегда приемлемо по различным причинам. В настоящее время идет работа по созданию стандарта, обеспечивающего более легкое преодоление NAT-модулей IPsec-пакетами.</p><p>Наиболее широко IPsec-протоколы используются в виртуальных корпоративных сетях (Virtual Private Network — VPN). Исходя из того, что встречаются и другие ограничения, IPsec-протоколы наиболее применимы в VPN-подобных ситуациях, включая вариант удаленного доступа, когда удаленный компьютер формирует обратный туннель (защищенное виртуальное соединение) в свою корпоративную сеть через Internet, используя для этого IPsec-протоколы.</p><h3>3.4. TLS-протокол</h3><p>Протокол безопасности транспортного уровня (Transport Level Security — TLS, RFC2246) обеспечивает шифрование и аутентификацию канала, который сформирован прикладным протоколом с использованием ТСР-протокола. Несмотря на то, что TLS-протокол был специально разработан для использование в WWW-серверах, это не означает ограничение сферы его применения. Тем не менее, каждый прикладной протокол, который желает использовать TLS-протокол, должен претерпеть индивидуальные корректировки.</p><p>Как правило, сервер (в структуре «клиент ⇔ сервер») всегда аутентифицируется на основе электронного сертификата. Пользователи также могут иметь сертификаты, с помощью которых можно проводить аутентификацию «в ручную», тем не менее такой способ не нашел широкого применения. К сожалению, на практике даже процедура аутентификации сервера не на столько защищена по сравнению с криптографическими способами, которые могли быть использованы, так как большинство прикладных протоколов (служб) позволяют пользователям игнорировать отрицательный результат аутентификации, а большинство пользователей обычно так и делает. Разработчики протоколов должны быть осторожны с точки зрения применения открытых паролей, даже когда соединения защищены с помощью TLS-протокола. (Это требование может быть немного ослаблено, если станет ясно, что прикладные службы способны верифицировать подлинность и проводить авторизацию сертификата сервера.)</p><p>Несмотря на необходимость внесения изменений в прикладную службу (протокол), требуется использовать TLS-протокол, и особенно там, где имеются в наличии необходимые средства (и бесплатные, и коммерческие), обеспечивающие такую услугу. Такие средства разработаны для встраивания в листинг программы прикладного протокола. Прикладная служба, использующая TLS-протокол, вероятнее всего будет способна устанавливать наиболее приемлемые стратегии обеспечения безопасности, исходя из собственной функциональной специфики, по сравнению с прикладной службой, использующей только IPsec-протоколы.</p><h3>3.5. SASL-интерфейс</h3><p>Интерфейс для прямой аутентификации и обеспечения безопасности (Simple Authentication and Security Layer — SASL, RFC-2222) представляет собой программное средство (способ) для согласования процедуры аутентификации и алгоритма шифрования, которые будут использоваться для защиты ТСР-трафика. По существу, это параметры уровня защищенности, которые определяются согласованным способом обеспечения ИБ. В частности, до тех пор, пока согласованный способ обеспечения ИБ не будет аутентифицировать все последующие сообщения или не будет использоваться, лежащий в его основе, протокол безопасности, такой как TLS-протокол, все ТСР-сеансы связи уязвимы к атакам типа «вторжение в сеанс связи».</p><p>Если возникает необходимость использования TLS-протокол (или IPsec-протоколов) совместно с SASL-интерфейсом, то тогда возникают вопросы: «Почему надо в первую очередь беспокоиться о SASL-интерфейсе?» и «Почему просто не попытаться использовать функциональные возможности TLS-протокола по осуществлению процедуры аутентификации и применить их на практике?».</p><p>Ответ весьма прост. TLS-протокол позволяет более широко использовать электронные сертификаты в интересах аутентификации. Но с другой стороны, проблемы распространения сертификатов, так как только серверы имеют такие сертификаты, в то время как пользователи функционируют не аутентифицированными (по крайней мере с помощью самого TLS-протокола).</p><p>SASL-интерфейс позволяет применять пользователю более традиционные способы аутентификации, например, парольные системы (одноразовые или другие). В таких случаях, было бы полезнее рассматривать комбинацию способов, которая весьма эффективна, то есть TLS-протокол обеспечивает основную защиту и аутентификацию сервера, а система аутентификации на основе SASL-интерфейс обеспечивает проверку пользователей. Самое серьезное внимание должно быть уделено снижению уязвимости к атакам типа «человек в середине соединения», особенно в тех случаях, когда в разных направлениях дуплексного соединения используются различные способы аутентификации.</p><h3>3.6. GSS-API-интерфейс</h3><p>Прикладной программный интерфейс единой службы безопасности (Generic Security Service Application Program Interface — GSS-API, RFC-2744) представляет собой программное средство в интересах прикладных служб, когда им понадобится использовать процедуры аутентификации, обеспечения целостности и/или конфиденциальности. В отличие от SASL-интерфейса, GSS-API-интерфейс может также легко использоваться прикладными службами, базирующимися на UDP-протоколе. GSS-API-интерфейс позволяет генерировать кодовые метки в интересах процедуры аутентификации, которые могут размещаться в протокольных сообщениях.</p><p class="note">Замечание. Уровень защищенности, обеспечиваемый протоколами безопасности, которые предоставляет GSS-API-интерфейс, зависит от базового способа обеспечения ИБ, причем последний должен оцениваться независимо. С таких же позиций должна рассматриваться и функциональная совместимость этих протоколов.</p><h3>3.7. DNSSEC-протокол</h3><p>Основное предназначение DNSSEC-протокола (RFC-2535) — защита DNS-записей с помощью электронной цифровой подписи (ЭЦП). ЭЦП защищает DNS-записи, хранящиеся в кэш-памяти DNS-сервера, от атак типа «загрязнение кэш-памяти». Эти записи, в свою очередь, могут использоваться для нарушения процедуры аутентификации на основе DNS-имени, а также для перенаправления трафика на или минуя нарушителя. Последнее делает DNS-систему очень критичным компонентом некоторых других способов обеспечения ИБ, особенно это касается IPsec-архитектуры.</p><p>DNSSEC-протокол, в принципе, позволяет обеспечить защиту данных при отображении DNS-имен в IP-адреса. Он также может использоваться для защиты и других DNS-данных, связанных с конкретным DNS-именем.</p><p>Такие данные могут быть просто служебными, которые необходимы для нормального функционирования DNS-сервера, хранящего их, или это может быть ключ, используемый протоколами безопасности IPsec-архитектуры при согласовании защищенного виртуального соединения.</p><p class="note">Замечание. Концепция хранения прикладных ключей общего назначения в DNS-системе была «опротестована» в стандарте RFC-3445, но, тем не менее, стандартизация процедур хранения ключей в интересах некоторых прикладных служб (и в частности для IPsec-архитектуры) продолжается.</p><h3>3.8. Безопасность многоблочных сообщений</h3><p>Стандарт RFC-1847 определяет способ защиты сообщений электронной почты, которые могут иметь многоблочную (многоэлементную) структуру (Security/Multiparts), определяемую MIME-протоколом (RFC-2045). Более точно, Security/Multiparts-способ дополняет MIME-протокол, так как определяет порядок и правила шифрования MIME-сообщений и/или размещение ЭЦП в них. Фактически два протокола S/MIME и OpenPGP используют Security/Multiparts-способ при защите своих сообщений. Зная структуру многоблочного почтового сообщения, получатель может легко определить и расшифровать зашифрованные элементы письма.</p><p>Security/Multiparts-способ представляет собой одну из форм обеспечения «персональной (абонентской) безопасности» («object security»), когда для конечного пользователя защита его персональных сообщений является основным требованием вне зависимости от способа доставки и промежуточного хранения этих сообщений и т.д. В настоящее время в Internet-сети нет единой формы обеспечения «персональной безопасности».</p><p>Хорошим примером использования S/MIME-протокола в совершенно иной области, отличной от электронной почты, является протокол инициирования сеанса связи (Session Initiation Protocol, RFC-3261).</p><h3>3.9. ЭЦП</h3><p>Применение ЭЦП в процедурах аутентификации в режиме «запрос/ответ» («challenge/response») обеспечивает высокую надежность аутентификации. Применение криптографии с открытыми ключами является наиболее предпочтительным в системах, в которых используются секретные ключи, так как серевер не нуждается в хранении копии секретного ключа пользователя. Предпочтительнее, чтобы пользователь имел секретный ключ, а серверы имели соответствующий ему открытый ключ.</p><p>Строго говоря, применение ЭЦП является делом сложным. Пользователь никогда не должен подписывать сообщение/запрос, переданное для него, так как известно несколько «хитрых» атак на основе теории чисел, которые могут быть предприняты в таких ситуациях.</p><p>Стандарт DSS-ЭЦП (Digital Signature Standard — DSS, федеральный стандарт США) и RSA-ЭЦП являются хорошими ЭЦП-алгоритмами, каждый из которых имеет свои достоинства. Применение DSS-ЭЦП требует использования генератора случайных чисел с хорошими вероятностными характеристиками (RFC-1750). Если нарушитель способен регенерировать случайное число для какой-либо ЭЦП, или если пользователь использует одно и то же случайное число в двух разных документах, то тогда может быть обнаружен секретный ключ пользователя. DSS-ЭЦП имеет гораздо лучшие параметры по сравнению с RSA-ЭЦП, с точки зрения генерации новых секретных ключей, и отчасти лучшие прараметры, с точки зрения вычисления ЭЦП, в то времы как RSA-ЭЦП имеет гораздо лучшие параметры, с точки зрения проверки ЭЦП.</p><h3>3.10. OpenPGP-протокол и S/MIME-протокол</h3><p>ЭЦП могут использоваться при построения прикладных служб, обеспечивающих «персональную безопасность», которые можно будет применять для защиты данных в протоколах хранения и доставки сообщений, таких как протокол электронной почты.</p><p>Как отмечалось ранее, два различных защищенных протокола электронной почты, OpenPGP (RFC-3156) и S/MIME (RFC-2633), предполагались для замены усовершентсвованного протокола защищенной электронной почты (Privacy Enhanced Mail — PEM). И совершенно не ясно какой из них, если не оба, будет иметь успех. Несмотря на то, что они оба разрабатывались для совместного функционирования с защищенной электронной почтой, они оба адаптированы для защиты данных, которые транспортируются другими протоколами. Оба используют электронные сертификаты для опознования пользователей, оба способны обеспечить конфиденциальность и аутентификацию почтовых сообщений. Однако, форматы сертификатов очень различны.</p><p>Исторически сложилось так, главное различие между почтовыми службами, OpenPGP и S/MIME, заключается в типе связности электронных сертификатов между собой. В S/MIME-службе пользователи обладают Х.509-сертификатами (Рекомендация ITU-T Х.509), а структура связности сертификатов (граф сертификации) представляет собой «дерево», содержащее очень небольшое число «корневых узлов». Совсем противоположная ситуация в PGP-службе, которая использует так называемую «сеть доверенных серверов», причем любой пользователь может подписать чей-нибудь еще сертификат. В такой ситуации граф сертификации представляет собой в действительности произвольный граф или совокупность графов.</p><p>В любой схеме сертификации надежность системы зависит от двух основных составляющих. Во-первых, сертификационная схема должна начинаться в известном достоверном «источнике», либо в корневом Х.509-узле, либо высоко надежном узле, которому доверяет лично проверяющий. Во-вторых, последовательность ЭЦП должна быть достоверной. То есть, каждый узел в графе сертификации является определяющим. Если какой-либо узел в графе сертификации «нечестен» или скомпрометирован, то тогда любые сертификаты, заверяемые таким узлом, не могут быть надежными. Все другие факторы надежности эквивалентны (или почти эквивалентны), в обеих службах короткие последовательности сертификатов являются наиболее предпочтительными.</p><p>Некоторые из отличий являются отражением противостояния между двумя идеологическими позициями, на которых стоят эти почтовые службы. Другие же отличия являются следствием отсутствия какого-либо взаимодействия групп разработчиков этих служб.</p><p>В S/MIME-службе основной акцент сделан на «защиту от дураков». То есть, она предусматривает (требует) очень незначительные дополнительные настройки в программном модуле пользователя. В частности, конечным пользователям не нужно знать ничего о надежности соединений и т.д. Идея состоит в том, что если S/MIME-пользователь говорит, что «… эта ЭЦП приемлема», то тогда пользователь должен «принимать» это состояние «за чистую монету», то есть доверять ему без каких-либо объяснений относительно происходящих прикладных процессов.</p><p>Для достижения этого S/MIME-служба, как правило, базируется на ограниченном числе корневых Центрах сертификации (ЦС). Целью этой службы является создание глобальной инфраструктуры доверенных сертификационных центров.</p><p>Слабая сторона этой S/MIME-службы заключается в том, что она требует развитой инфраструктуры открытых ключей, без которой эта служба не работает. Два оконечных пользователя просто не способны после загрузки программных S/MIME-модулей сразу начать устанавливать защищенное соединение. Однако, это не есть функциональное ограничение самого протокола, просто типовая настройка запрещает применение единого доступного программного обеспечения. Одному или обоим пользователям может понадобиться получение электронного сертификата в предварительно проверенном ЦС. Это означает, что ЦС уже должен быть проверен программным S/MIME-модулем в «ручном» режиме сразу после его загрузки. Этот процесс может повлечь за собой определенные финансовые затраты и принятие юридических обязательств. В конечном счете, последние условия затрудняют широкое внедрение этой почтовой системы, особенно в Internet-сети, в которой оконечные пользователи не стараются оценить результат, достигнутый без особых трудностей.</p><p>Применение в PGP-службе «сети доверенных серверов» имеет определенное преимущество, которое заключается в том, что два конечных пользователя могут только загрузить программный PGP-модуль и сразу начать формирование защищенного соединения. При этом не требуется инфраструктура и нет необходимости платить и подписывать юридические обязательства, чтобы в дальнейшем пользоваться PGP-службой. Точно также PGP-служба поступает с пользователями, которым необходимо сформировать специализированные защищенные виртуальные соединения.</p><p>Слабая сторона этой PGP-службы заключается в том, что она требует от конечных пользователей понимания базовых способов обеспечения ИБ, чтобы они могли эффективно применять эти способы. В действительности, эта система весьма доступна для «дураков» и «наивных пользователей», которые могут получить «подписанное» сообщение, которое на самом деле является фальшивкой.</p><p>К настоящему моменту PGP-служба нашла всеобщую поддержку среди пользователей, разбирающихся в вопросах ИБ, и которым необходима защищенная служба электронной почты в Internet-сети, не имеющей необходимой глобальной инфраструктуры.</p><p>Но с другой стороны, S/MIME-служба функционирует нормально корпоративных сетевых сегментах, в которых может быть развернута внутренняя защищенная система ЦС. И это не требует от пользователей больших и серьезных знаний в области ИБ. S/MIME-служба может использоваться между различными корпоративными сетями, если между ними обеспечивается сквозная защищенная сертификация, но реализовать это гораздо труднее, чем кажется на первый взгляд.</p><p>Как следует из предшествующих рассуждений, идея создания глобальной инфраструктуры ЦС продолжает «ускользать» от нас. Вопросы о приемлемой бизнес-модели, равно как и вопросы обеспечения ИБ, могут препятствовать появлению такой инфраструтуры.</p><h3>3.11. Сетевые экраны и топология</h3><p>Сетевые экраны («firewall») представляют собой топологические (заградительные) способы обеспечения ИБ. То есть, они зависят от четко определенной границы между «хорошим» сетевым сегментом (внутренняя часть корпоративной сети) и «плохой» внешней сетью, с которой соединен сегмент, а сам сетевой экран (СЭ) служит связующим звеном между ними, через которое транслируется информация. Несмотря на то, что СЭ могут быть весьма полезны, если, конечно же, они используются надлежащим образом, существуют определенные границы их возможностей по защите сетей.</p><p>Первое ограничение, естественно, заключается в том, что СЭ не могут быть защитой от атак, инициированных изнутри корпоративных сегментов, которые они защищают. Несмотря на всю актуальность последствий от таких атак, доля таких атак не известна (и вероятно никогда не станет известна), и не вызывает сомнений тот факт, что именно такие атаки являются причиной большинства проблем обеспечения ИБ. Если взглянуть на эту проблему более широко, то тогда, полагая, что СЭ требуют четко обозначенной границы и причем до такой степени, когда такая граница вообще исчезает, СЭ не помогают (вообще бесполезны). Любые внешние соединения, которые формируются протоколами, преднамеренно транслирующими сообщения через СЭ, любые каналы связи в режиме сквозного туннелирования, незащищенные беспроводные LAN-сети или прямые внешние соединения, инициируемые IP-узлами, номинально считающимися корпоративными, снижают уровень защищенности. СЭ становятся менее эффективными, если пользователи используют протоколы безопасности в режиме туннелирования для передачи трафика через эти СЭ и при этом они выбрали неадекватный уровень защищенности в конечных точках туннеля. Если туннелируемый трафик шифруется, то тогда СЭ не способен просматривать (контролировать) его. Часто цитируемое преимущество СЭ заключается в том, что они скрывают внутреннюю структуру корпоративной сети (состав корпоративных IP-узлов) от «внешних глаз». Полагая наличие «утечки» информации, очевидно, что вероятность успешного маскирования компьютеров довольно низка.</p><p>При более узком подходе, СЭ нарушают модель (принцип) сквозного соединения в Internet-сети и Internet-протоколах. Конечно, не все протоколы могут транслировать свои сообщения безопасно и легко через СЭ. Сетевые корпоративные сегменты, которые защищают себя с помощью СЭ могут оказаться «отрезанными» от новых и полезных истчников информации в Internet-сети.</p><p>СЭ функционируют лучше, если они используются в качестве одного из элементов общей структуры безопасности. Например, точно настроенный СЭ может использоваться для функционального разделения демонстрационного WWW-сервера и сервера с базой данных при условии, что между последними существует только открытый (без шифрования трафика) канал связи. То же самое касается и СЭ, который «пропускает через себя» только зашифрованный трафик в режиме туннелирования. Такой СЭ можно использовать для защиты одного сегмента VPN-сети. Но с другой стороны, в таком случае другой сегмент VPN-сети должен быть защищен таким же образом.</p><h3>3.12. Kerberos-протокол</h3><p>Этот протокол (RFC-1510) определяет способ обоюдной аутентификации двух взаимодействующих сторон и обмена ключевой информацией. Пользовательский программный Kerberos-модуль обладает специальными «билетом» и «верительным документом». Оба этих документа (которые должны храниться в зашифрованном виде) в дальнейшем используются для установления соединения между пользователем и сервером. Сервер может потом проверить подлинность этих документов. После этого сервер и пользователь могут запросить программный Kerberos-модуль выделить им сеансовый ключ, который будет использоваться для защиты целостности или шифрования данных.</p><p>Программный Kerberos-модуль может использоваться в рамках собственного протокола. Однако, он также используется как способ обеспечения ИБ с помощью SASL-интерфейса и GSSAPI-интерфейса. В настоящее время известны некоторые уязвимые места этого протокола, но тем не менее он может использоваться в защищенном варианте.</p><h3>3.13. SSH-протокол</h3><p>Этот протокол (Secure Shell — SSH), входящий в состав программного обеспечения UNIX-подобных систем, обеспечивает защиту соединения «клиент ⇔ сервер». Функционально он напоминает TLS-протокол, однако, он оптимизирован для обслуживания удаленных соединений с териминалами. Одно из наиболее рациональных свойств SSH-протокола заключается в том, что он обеспечивает туннельный режим доставки сообщений других прикладных протоколов, расположенных над ТСР-протоколом, защищенным SSH-протоколом. Это свойство позволило пользователям, хорошо осведомленным в области ИБ, выполнять различные функции, среди которых чтение и передача почтовых сообщений или новостей через незащищенные серверы и сети. Данный протокол не предназначен для замены VPN-протоколов, но он может часто использоваться вместо них.</p><h2>4. Ненадежные способы обеспечения ИБ</h2><p>Некоторые ненадежные способы обеспечения ИБ скорее всего создают больше проблем безопасности, чем их решают.</p><h3>4.1. Системы с открытыми паролями</h3><p>Сегодня, системы с открытыми паролями являются наиболее распространенными в Internet, по сравнению с другими известными способами обеспечения ИБ. К сожалению, они также являются и наиболее слабым способом обеспечения ИБ. А если они не защищены с помощью шифрования, то тогда они вообще не приемлемы. Но даже когда используется шифрование, все равно, системы с открытыми паролями остаются совсем ненадежными, так как открытые пароли должны транслироваться в удаленные системы. Если такая система была скомпрометирована или если криптомодуль не использует эффективную процедуру аутентификации сервера в интересах пользователя, то тогда нарушитель может подобрать пароли и возможно использовать их против други сетевых объектов.</p><p>Другая слабая сторона такой системы является следствием самих способов ее применения, которые наиболее распространены в настоящее время. Считается, что сервер должен хранить пароли пользователей в скрытой форме, для чего использовать однонаправленную хэш-функцию, а не в открытой форме. Однако, что может помешать переходу к более надежным способам аутентификации, такому как HMAC-система на основе «запрос/ответ». Самой сильной атакой на системы с открытыми паролями, кроме прямого прослушивания (перехвата), является «отгадывание» паролей. Если иметь хорошую программу проверки гипотез и словарь возможных паролей (а они в настоящее время доступны повсеместно), то тогда можно «угадать» до 20…30% паролей, используемых в большинстве сетевых сегментов.</p><h3>4.2. Аутентификация на основе адресов</h3><p>Другим наиболее распространенным в Internet способом обеспечения ИБ являются системы аутентифкации на основе адресов. В лучшем случае такая система может работать только в тех сетевых сегментах, в которых имеют место существенные функциональные и топологические ограничения. Если сетевой сегмент включает небольшое количество компьютеров, функционирование которых жестко администрируется, системы обеспечения безопасности функционируют под управлением надежных пользователей, и если сегмент «огражден» маршрутизатором, который блокирует маршрутизацию от источника сообщений и препятствует «прослушиванию» адресов источника сообщений, а также известно, что в сегменте нет никаких беспроводных мостов, и если для компьютеров другой сети запрещена аутентификация на основе адресов, то тогда такой сегмент, скорее всего, имеет высокий уровень защищенности. Но такие условия встречаются одновременно крайне редко.</p><p>К другим угрозам безопасности можно отнести атаки типа «маскарад» с использованием ARP-пакетов, DHCP-сообщений (Dynamic Host Configuration Protocol — протокол динамической настройки IP-узлов), IP-пакетов с «украденными» IP-адресами и маршрутами доставки, установленными нарушителем, атаки с целью нарушения нормального функционирования уполномоченных серверов, компрометации маршрутных таблиц, распознавания последовательного номера сообщения и последующего изменения нумерации. Все перечисленные атаки могут повлечь за собой очнь серьезные последствия.</p><h3>4.3. Аутентификация на основе DNS-имен</h3><p>Системы аутентифкации на основе DNS-имен имеют те же проблемы безопасности, как и системы аутентифкации на основе адресов, но к ним добавляются и новые: атаки на DNS-систему и проблемы при отображении IP-адресов в DNS-имена и наоборот. Как минимум, процесс, который по DNS-запросу возвращает DNS-имя IP-узла, должен возвращать соответствующие записи с адресами и осуществлять сравнение этих записей в разных источниках. Однако, атаки типа «загрязнение кэш-памяти» очень часто негативно сказываются не результатах такой сверки.</p><p>DNSSEC-протокол обеспечивает защиту от такого типа атак. Однако, он ничего не делает для обеспечния достоверности запрашиваемого адреса. Более того, атаки на DNS-серверы вызывают огромное количество ложных «тревог». Однако, поиски причин таких «тревог» не обеспечивают сервер надежной информацией, немотря на то, что могут быть полезны для DNS-администратора при устранении им неисправностей, а также могут быть полезны для контроля записей доступа к системе во время реконструкции атаки, то есть как проводилась атак и что было ее целью.</p><h2>5. Вопросы безопасности</h2><p>Не бывает идеальных (безупречных) способов обеспечения безопасности. Любой сетевой способ обеспечения ИБ может быть «разрушен» путем компрометации его конечных терминалов (пользователей), если, конечно, не выявлено каких-либо других причин. Как было сказано, каждый из представленных в этом документе способов обеспечения ИБ имеет свои собственные ограничения. Любой решение относительно применения конкретного способа должно основываться на оценке всех возможных причин отказа в работе системы. В свою очередь, эти возможные причины необходимо сопоставить с рисками конечного пользователя (терминала) в результате сбоя в системе безопасности (то есть к каким потерям приведет отказ в работе системы).</p><h2>Дополнительная литература</h2><table itemprop="references"><tr><td>[Bell95]</td><td>«Using the Domain Name System for System Break-Ins». Proc. Fifth Usenix Security Conference, 1995.</td></tr><tr><td>[Bell98]</td><td>"Cryptography and the Internet», S.M. Bellovin, in Proceedings of CRYPTO '98, Август 1998.</td></tr><tr><td>[DSS]</td><td>«Digital Signature Standard». NIST. May 1994. FIPS 186.</td></tr><tr><td>[Klein90]</td><td>«Foiling the Cracker: A Survey of, and Implications to, Password Security». D. Klein. Usenix UNIX Security Workshop, Август 1990.</td></tr><tr><td>[KRBATTACK]</td><td>«A Real-World Analysis of Kerberos Password Security». T. Wu. Network and Distributed System Security Symposium (NDSS '99). January 1999.</td></tr><tr><td>[KRBLIM]</td><td>«Limitations of the Kerberos Authentication System». Proceedings of the 1991 Winter USENIX Conference, 1991.</td></tr><tr><td>[KRB4WEAK]</td><td>«Misplaced trust: Kerberos 4 session keys». Proceedings of the Internet Society Network and Distributed Systems Security Symposium, Март 1997.</td></tr><tr><td>[MT79]</td><td>«UNIX Password Security», R.H. Morris and K. Thompson, Communications of the ACM. November 1979.</td></tr><tr><td>[NATIKE]</td><td>Kivinen, T., et al., «Negotiation of NAT-Traversal in the IKE», Work in Progress, Июнь 2002.</td></tr><tr><td>[RFC1321]</td><td>Rivest, R., <a href="../1321.rfc" title="RFC 1321 — Алгоритм цифровых подписей MD5">«Алгоритм цифровых подписей MD5», RFC 1321</a>, Апрель 1992.</td></tr><tr><td>[RFC1510]</td><td>Kohl, J. и C. Neuman, «The Kerberos Network Authentication Service (V5)», RFC 1510, Сентябрь 1993.</td></tr><tr><td>[RFC1750]</td><td>Eastlake, D., Crocker, S. и J. Schiller, «Randomness Recommendations for Security», RFC 1750, Декабрь 1994.</td></tr><tr><td>[RFC1847]</td><td>Galvin, J., Murphy, S., Crocker, S. и N. Freed, «Security Multiparts for MIME: Multipart/Signed and Multipart/Encrypted», RFC 1847, October 1995.</td></tr><tr><td>[RFC2104]</td><td>Krawczyk, H., Bellare, M. и R. Canetti, «HMAC: Keyed-Hashing for Message Authentication», RFC 2104, Февраль 1997.</td></tr><tr><td>[RFC2222]</td><td>Myers, J., «Simple Authentication and Security Layer (SASL)», RFC 2222, October 1997.</td></tr><tr><td>[RFC2246]</td><td>Dierks, T. и C. Allen, <a href="../2246.rfc" title="RFC 2246 — Протокол TLS 1.0">«Протокол TLS 1.0», RFC 2246</a>, Январь 1999.</td></tr><tr><td>[RFC2289]</td><td>Haller, N., Metz, C., Nesser, P. и M. Straw, «A One-Time Password System», STD 61, RFC 2289, Февраль 1998.</td></tr><tr><td>[RFC2316]</td><td>Bellovin, S., «Report of the IAB Security Architecture Workshop», RFC 2316, Апрель 1998.</td></tr><tr><td>[RFC2385]</td><td>Hefferman, A., «Protection of BGP Sessions via the TCP MD5 Signature Option», RFC 2385, Август 1998.</td></tr><tr><td>[RFC2401]</td><td>Kent, S. и R. Atkinson, «Security Architecture for the Internet Protocol», RFC 2401, Ноябрь 1998.</td></tr><tr><td>[RFC2402]</td><td>Kent, S. и R. Atkinson, «IP Authentication Header», RFC 2402, Ноябрь 1998.</td></tr><tr><td>[RFC2406]</td><td>Kent, S. и R. Atkinson, «IP Encapsulating Security Payload (ESP)», RFC 2406, Ноябрь 1998.</td></tr><tr><td>[RFC2407]</td><td>Piper, D., «The Internet IP Security Domain of Interpretation for ISAKMP», RFC 2407, Ноябрь 1998.</td></tr><tr><td>[RFC2411]</td><td>Thayer, R., Doraswamy, N. и R. Glenn, «IP Security Document Roadmap», RFC 2411, Ноябрь 1998.</td></tr><tr><td>[RFC2535]</td><td>Eastlake, D., «Domain Name System Security Extensions», RFC 2535, Март 1999.</td></tr><tr><td>[RFC2744]</td><td>Wray, J., «Generic Security Service API Version 2: C-bindings», RFC 2744, Январь 2000.</td></tr><tr><td>[RFC2993]</td><td>Hain, T., <a href="../2993.rfc" title="RFC 2993 — Транслятор сетевых IP-адресов (NAT) с точки зрения Internet-архитектуры">«NAT с точки зрения Internet-архитектуры», RFC 2993</a>, Ноябрь 2000.</td></tr><tr><td>[RFC3174]</td><td>Eastlake, D. и P. Jones, «US Secure Hash Algorithm 1 (SHA1)», RFC 3174, Сентябрь 2001.</td></tr><tr><td>[RFC3261]</td><td>Rosenberg, J., Schulzrinne, H., Camarillo, R., Johnston, A., Peterson, J., Sparks, R., Handley, M. и E. Schooler, «SIP: Session Initiation Protocol», RFC 3261, Июнь 2002.</td></tr><tr><td>[RFC3445]</td><td>Massey, D. и S. Rose, «Limiting the Scope of the KEY Resource Record (RR)», RFC 3445, Декабрь 2002.</td></tr><tr><td>[RSA]</td><td>Rivest, R., Shamir, A. и L. Adleman, «A Method for Obtaining Digital Signatures and Public-Key Cryptosystems», Communications of the ACM, Февраль 1978.</td></tr></table></div></div><div id="disqus_thread"></div><script type="text/javascript">var disqus_shortname="rfc2",disqus_title="RFC 3631 - Способы обеспечения информационной безопасности в Internet",disqus_identifier="3631.rfc",disqus_url="http://rfc2.ru/3631.rfc";(function(){var dsq=document.createElement("script");dsq.type="text/javascript";dsq.async=true;dsq.src = "//"+disqus_shortname+".disqus.com/embed.js";(document.getElementsByTagName("head")[0]||document.getElementsByTagName("body")[0]).appendChild(dsq);})();</script><div class="bubble">2007 - 2014 © <a href="../index.html" title="Русские переводы RFC">Русские переводы RFC</a>, IETF, ISOC.</div></div><div id="bottom" style="position:static !important;bottom:auto !important"><div class="bubble"><ul><li><!--723572853672--></li></ul></div></div><!-- Yandex.Metrika counter --><script type="text/javascript">(function (d, w, c) { (w[c] = w[c] || []).push(function() { try { w.yaCounter4680559 = new Ya.Metrika({id:4680559, webvisor:true, clickmap:true, accurateTrackBounce:true, trackHash:true, ut:"noindex"}); } catch(e) { } }); var n = d.getElementsByTagName("script")[0], s = d.createElement("script"), f = function () { n.parentNode.insertBefore(s, n); }; s.type = "text/javascript"; s.async = true; s.src = (d.location.protocol == "https:" ? "https:" : "http:") + "//mc.yandex.ru/metrika/watch.js"; if (w.opera == "[object Opera]") { d.addEventListener("DOMContentLoaded", f, false); } else { f(); } })(document, window, "yandex_metrika_callbacks");</script><noscript><div><img src="http://mc.yandex.ru/watch/4680559?ut=noindex" style="position:absolute; left:-9999px;" alt="" /></div></noscript><!-- /Yandex.Metrika counter --></body></html>