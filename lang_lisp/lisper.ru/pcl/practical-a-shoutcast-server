<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ru" xml:lang="ru"> <head> <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> <meta name="keywords" content="Common Lisp,lisp,лисп" /> <title>Практика. Сервер Shoutcast</title> <link href="../css/style.css" rel="stylesheet" type="text/css" /><link href="../css/colorize.css" rel="stylesheet" type="text/css" />  </head> <body> <div class="top"> <div id="login"> <a href="http://lisper.ru/register">Регистрация</a> | <a href="http://lisper.ru/login?done=/pcl/practical-a-shoutcast-server">Войти</a> </div> </div> <div id="caution"> <img alt="Lisp — программируемый язык программирования" src="../image/gecko.png" /> <a href="http://www.vkusnoserver.ru/" target="_blank" style="float: right;"> <img src="../vkusnoserver.png" /> </a> </div> <div id="mainmenu"> <ul> <li> <a href="http://lisper.ru/">Главная</a> </li><li> <a href="http://lisper.ru/articles/">Статьи</a> </li><li> <a href="http://lisper.ru/planet/">Планета</a> </li><li> <a href="http://lisper.ru/forum/">Форум</a> </li><li> <a href="http://lisper.ru/apps/">Сервисы</a> </li><li> <a href="index.html">Practical Common Lisp</a> </li><li> <a href="http://lisper.ru/wiki/">Wiki</a> </li><li> <a href="http://lisper.ru/files/">Файлы</a> </li><li> <a href="http://lisper.ru/search">Поиск</a> </li> </ul> </div> <div id="content"> <table width="100%"> <tbody> <tr> <td width="20%" align="left"> <a href="practical-an-mp3-database">Предыдущая</a> </td> <td width="60%" align="center"> <a href="index.html">Оглавление</a> </td> <td width="20%" align="right"> <a href="practical-an-mp3-browser">Следующая</a> </td> </tr> </tbody> </table> <div class="article"><div class="toc"><div class="toc-header">Содержание</div><div class="toc-body"><ul><li><div><a href="practical-a-shoutcast-server#28. &#x41F;&#x440;&#x430;&#x43A;&#x442;&#x438;&#x43A;&#x430;. &#x421;&#x435;&#x440;&#x432;&#x435;&#x440; Shoutcast">28. Практика. Сервер Shoutcast</a><ul><li><div><a href="practical-a-shoutcast-server#&#x41F;&#x440;&#x43E;&#x442;&#x43E;&#x43A;&#x43E;&#x43B; Shoutcast">Протокол Shoutcast</a></div></li><li><div><a href="practical-a-shoutcast-server#&#x418;&#x441;&#x442;&#x43E;&#x447;&#x43D;&#x438;&#x43A;&#x438; &#x43F;&#x435;&#x441;&#x435;&#x43D;">Источники песен</a></div></li><li><div><a href="practical-a-shoutcast-server#&#x420;&#x435;&#x430;&#x43B;&#x438;&#x437;&#x430;&#x446;&#x438;&#x44F; &#x441;&#x435;&#x440;&#x432;&#x435;&#x440;&#x430; Shoutcast">Реализация сервера Shoutcast</a></div></li></ul></div></li></ul></div></div>
<div class="chapter" id="28. &#x41F;&#x440;&#x430;&#x43A;&#x442;&#x438;&#x43A;&#x430;. &#x421;&#x435;&#x440;&#x432;&#x435;&#x440; Shoutcast"><h3>28. Практика. Сервер Shoutcast</h3>

<p>В этой главе вы разработаете еще одну важную часть Web-приложения для потокового вещания музыки в формате MP3, а именно – сервер, реализующий протокол Shoutcast, который выполняет потоковое вещание в формате MP3 пользовательским клиентам, таким как iTunes, XMMS<a class="fn_top" id="fnt__1" href="practical-a-shoutcast-server#fn__1">1)</a>, или Winamp.
</p>
<div class="chapter" id="&#x41F;&#x440;&#x43E;&#x442;&#x43E;&#x43A;&#x43E;&#x43B; Shoutcast"><h3>Протокол Shoutcast</h3>

<p>Протокол Shoutcast был создан сотрудниками компании Nullsoft, создателя программы Winamp. Он был спроектирован для поддержки потокового вещания в Internet – Shoutcast DJ отправляет аудио файлы с персональных компьютеров на центральный сервер Shoutcast, который затем отправляет эти данные в виде потока любому из подключенных слушателей.
</p>
<p>Сервер, который вы напишите, в действительности реализует только половину функциональности настоящего сервера Shoutcast – вы будете использовать протокол, который используют сервера Shoutcast для потокового вещания MP3 слушателям, но ваш сервер будет способен передавать только те песни, которые уже загружены на тот компьютер, на котором выполняется ваш сервер.
</p>
<p>Вам необходимо знать только две части протокола Shoutcast: формат запроса, который клиент делает для того, чтобы начать получать поток данных, и формат ответа, включая механизм, который используется для вставки данных о проигрываемой композиции в поток данных.
</p>
<p>Начальный запрос от клиента MP3 к серверу Shoutcast выглядит также как обычный запрос протокола HTTP.  В ответе сервер Shoutcast отправляет ответ ICY, который выглядит также как и ответ HTTP, за исключением строки <code>ICY</code><a class="fn_top" id="fnt__2" href="practical-a-shoutcast-server#fn__2">2)</a> вместо обычной строки версии <code>HTTP</code>, и немного отличающимися заголовками. После отправки заголовков и пустой строки, сервер начинает отправлять потенциально бесконечный поток данных в формате MP3.
</p>
<p>Единственной сложной (FIXME tricky) вещью в протоколе Shoutcast является способ вставки информации о песне в данные, отправляемые клиенту.  Проблемой, с которой столкнулись дизайнеры протокола Shoutcast, заключалась в нахождении возможности передачи клиенту новой информации о песне сервером Shoutcast при начале проигрывания новой песни, так что клиент мог бы отображать эту информацию в интерфейсе. (Возвращаясь к главе 25, вспоминаем что формат MP3 не обеспечивает механизмов для кодирования метаданных).  Хотя одной из целей создания ID3v2 было обеспечение лучшей совместимости с потоковой передачей файлов MP3, сотрудники Nullsoft решили идти своим путем и изобрели новую схему, которую проще реализовать и клиенту и серверу.   Это конечно было идеальным случаем, поскольку они сами были авторами клиента для проигрывания MP3.
</p>
<p>Их решение заключалось в простом игнорировании структуры данных MP3 и вставке метаданных каждые <code>n</code> байт.  И клиент принимал на себя ответственность за удаление метаданных из потока, так чтобы они не рассматривались как данные MP3.  Поскольку отправка метаданных клиенту, который не готов к их приему, может вызывать проблемы с воспроизведением звука, то сервер должен отправлять метаданные только если запрос содержит специальный заголовок <code>Icy-Metadata</code>.  И для того, чтобы клиент знал как часто метаданные будут передваться, сервер должен отправить клиенту заголовок <code>Icy-Metaint</code> чьим значением является число байт данных в формате MP3, которые будут переданы между двумя пакетами с метаданными.
</p>
<p>Основное содержание метаданных – строка вида <code>StreamTitle='title';</code> где  <code>title</code> является заголовком текущей песни, и не может содержать знак одинарной кавычки.  Это содержимое закодировано как массив байт разделенный указателями длины: сначала отправляет одиночный байт, показывающий сколько  16-байтовых блоков будет отправлено, за которым следуют эти блоки.  Они содержат саму строку в кодировке ASCII, и последний блок дополнен нулевыми байтами до 16-байтовой границы.
</p>
<p>Таким образом, наименьшим допустимым блоком метаданных является единственный байт, равный нулю, что означает что за ним не следует ни одного блока.  Если сервер не нуждается в обновлении метаданных, то он может отправить такой пустой блок, но он должен отправить как минимум один байт, так что клиент не будет отбрасывать данные MP3.
</p>
</div><div class="chapter" id="&#x418;&#x441;&#x442;&#x43E;&#x447;&#x43D;&#x438;&#x43A;&#x438; &#x43F;&#x435;&#x441;&#x435;&#x43D;"><h3>Источники песен</h3>

<p>Поскольку сервер Shoutcast должен продолжать передавать поток данных клиенту все время пока он подключен к нему, то вам необходимо обеспечить ваш сервер источником песен из которых он сможет брать данные.  В Web-приложении, каждый подключенный клиент будет иметь список песен, с которым он сможет работать через Web-интерфейс.  Но для того, чтобы избежать излишней зависимости между модулями, вы должны определить интерфейс, который сможет использовать сервер Shoutcast для получения списка проигрываемых песен. Вы можете сейчас написать простую реализацию этого интерфейса, и заменить ее на более сложную при написании Web-приложения, которое вы будете создавать в главе 29.
</p>
<p>FIXME this is embdedded table, will fixed in latex 
</p>
<p>Пакет
</p>
<p>Объявление разрабатываемого вами пакета будет выглядеть примерно так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpkg.htm" class="symbol"><i><span class="symbol">defpackage</span></i></a> <span class="keyword">:com.gigamonkeys.shoutcast</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:use</span> <span class="keyword">:common-lisp</span> <br/>        <span class="keyword">:net.aserve</span> <br/>        <span class="keyword">:com.gigamonkeys.id3v2</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:export</span> <span class="keyword">:song</span><br/>           <span class="keyword">:file</span><br/>           <span class="keyword">:title</span><br/>           <span class="keyword">:id3-size</span><br/>           <span class="keyword">:find-song-source</span><br/>           <span class="keyword">:current-song</span><br/>           <span class="keyword">:still-current-p</span><br/>           <span class="keyword">:maybe-move-to-next-song</span><br/>           <span class="keyword">:*song-source-type*</span></span>)</span></span>)</span><br/></pre>

<p>FIXME end of table
</p>
<p>Основной идеей для создания интерфейса является то, что сервер Shoutcast будет находить источник песен, основываясь на идентификаторе, выделенном из объекта AllegroServe, представляющего запрос.  Затем можно сделать следующие три действия над выделенным источником песен.
</p><ul><li> Получить текущую песню из источника песен</li><li> Сообщить источнику песен, что мы закончили работу над текущей песней</li><li> Запросить у источника песен о том, все еще является ли текущей та песня, которую мы запрашивали ранее.</li></ul>
<p>Последняя операция необходима, поскольку могут быть такие случаи, и мы увидим их в главе 29, когда мы работаем с источником песен вне сервера Shoutcast.  Вы можете выразить операции, необходимые серверу Shoutcast, с помощью следующих обобщенных фунций:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defgen.htm" class="symbol"><i><span class="symbol">defgeneric</span></i></a> current-song <span class="paren2">(<span class="">source</span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:documentation</span> <span class="string">"Return the currently playing song or NIL."</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defgen.htm" class="symbol"><i><span class="symbol">defgeneric</span></i></a> maybe-move-to-next-song <span class="paren2">(<span class="">song source</span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:documentation</span><br/>   <span class="string">"If the given song is still the current one update the value<br/>returned by current-song."</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defgen.htm" class="symbol"><i><span class="symbol">defgeneric</span></i></a> still-current-p <span class="paren2">(<span class="">song source</span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:documentation</span><br/>   <span class="string">"Return true if the song given is the same as the current-song."</span></span>)</span></span>)</span><br/></pre>

<p>Функция <code>maybe-move-to-next-song</code> определена таким способом, что за одну операцию проверяется – является ли данная песня текущей, и если это так, то источник песен перемещается к следующей песне.  Это будет важным в следующей главе, когда вам нужно будет реализовать источник песен, который будет доступен из двух потоков выполнения.<a class="fn_top" id="fnt__3" href="practical-a-shoutcast-server#fn__3">3)</a>
</p>
<p>Для представления информации о песне, которая необходима серверу Shoutcast, вы можете определить класс <code>song</code>, со слотами, которые будут хранить имя файла MP3, заголовок, который будет отправлен в качестве метаданных Shoutcast, и размер тага ID3, так что он может быть пропущен во время передачи файла.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defcla.htm" class="symbol"><i><span class="symbol">defclass</span></i></a> song <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">file     <span class="keyword">:reader</span> file     <span class="keyword">:initarg</span> <span class="keyword">:file</span></span>)</span><br/>   <span class="paren3">(<span class="">title    <span class="keyword">:reader</span> title    <span class="keyword">:initarg</span> <span class="keyword">:title</span></span>)</span><br/>   <span class="paren3">(<span class="">id3-size <span class="keyword">:reader</span> id3-size <span class="keyword">:initarg</span> <span class="keyword">:id3-size</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Значение, возвращенное <code>current-song</code> (оно же и является первым аргументом функций <code>still-current-p</code> и<code>maybe-move-to-next-song</code>) будет экземпляром класса <code>song</code>.
</p>
<p>В добавок к этому, вам необходимо определить обобщенную функцию, которую сервер сможет использовать для нахождения источника песен, основываясь на желательном типе источника и объекте, представляющем запрос.  Методы будут специализировать параметр  <code>type</code> для того, чтобы возвращать разные виды источников песен, и будут вытягивать различную информацию, в которой они нуждаются для определения какой источник песен необходимо возвращать, из объекта <code>request</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defgen.htm" class="symbol"><i><span class="symbol">defgeneric</span></i></a> find-song-source <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> request</span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:documentation</span> <span class="string">"Find the song-source of the given type for the given request."</span></span>)</span></span>)</span><br/></pre>

<p>Однако, в данной главе вы можете использовать самую простую реализацию этого интерфейса, которая будет всегда возвращать один и тот же объект – простую очередь объектов <code>song</code>, которой вы сможете управлять через строку ввода команд. Вы можете начать эту реализацию путем определения класса <code>simple-song-queue</code>, и глобальной переменной <code>*songs*</code>, которая содержит экземпляр данного класса.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defcla.htm" class="symbol"><i><span class="symbol">defclass</span></i></a> simple-song-queue <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">songs <span class="keyword">:accessor</span> songs <span class="keyword">:initform</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ar.htm" class="symbol">make-array</a> 10 <span class="keyword">:adjustable</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="keyword">:fill-pointer</span> 0</span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">index <span class="keyword">:accessor</span> index <span class="keyword">:initform</span> 0</span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*songs*</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ins.htm" class="symbol">make-instance</a> 'simple-song-queue</span>)</span></span>)</span><br/></pre>

<p>Затем вы можете определить метод <code>find-song-source</code> специализированный через <code>EQL</code> для символа <code>singleton</code>, который будет возвращать экземпляр объекта, хранимый в переменной <code>*songs*</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> find-song-source <span class="paren2">(<span class=""><span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> 'singleton</span>)</span></span>)</span> request</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_declar.htm" class="symbol">declare</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/d_ignore.htm" class="symbol">ignore</a> request</span>)</span></span>)</span><br/>  <span class="special">*songs*</span></span>)</span><br/></pre>

<p>Теперь вам всего-лишь надо реализовать методы для трех обобщенных функций, которые будут использоваться сервером Shoutcast.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> current-song <span class="paren2">(<span class=""><span class="paren3">(<span class="">source simple-song-queue</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_ar_in_.htm" class="symbol">array-in-bounds-p</a> <span class="paren4">(<span class="">songs source</span>)</span> <span class="paren4">(<span class="">index source</span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_aref.htm" class="symbol">aref</a> <span class="paren4">(<span class="">songs source</span>)</span> <span class="paren4">(<span class="">index source</span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> still-current-p <span class="paren2">(<span class="">song <span class="paren3">(<span class="">source simple-song-queue</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> song <span class="paren3">(<span class="">current-song source</span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> maybe-move-to-next-song <span class="paren2">(<span class="">song <span class="paren3">(<span class="">source simple-song-queue</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren3">(<span class="">still-current-p song source</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> <span class="paren4">(<span class="">index source</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>И в целях тестирования, вам необходимо обеспечить возможность добавления песен в очередь.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> add-file-to-songs <span class="paren2">(<span class="">file</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_vec_ps.htm" class="symbol">vector-push-extend</a> <span class="paren3">(<span class="">file-&gt;song file</span>)</span> <span class="paren3">(<span class="">songs <span class="special">*songs*</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> file-&gt;song <span class="paren2">(<span class="">file</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">id3 <span class="paren5">(<span class="">read-id3 file</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ins.htm" class="symbol">make-instance</a> <br/>     'song<br/>     <span class="keyword">:file</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_namest.htm" class="symbol">namestring</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_tn.htm" class="symbol">truename</a> file</span>)</span></span>)</span><br/>     <span class="keyword">:title</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a> <span class="string">"~a by ~a from ~a"</span> <span class="paren5">(<span class="">song id3</span>)</span> <span class="paren5">(<span class="">artist id3</span>)</span> <span class="paren5">(<span class="">album id3</span>)</span></span>)</span><br/>     <span class="keyword">:id3-size</span> <span class="paren4">(<span class="">size id3</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

</div><div class="chapter" id="&#x420;&#x435;&#x430;&#x43B;&#x438;&#x437;&#x430;&#x446;&#x438;&#x44F; &#x441;&#x435;&#x440;&#x432;&#x435;&#x440;&#x430; Shoutcast"><h3>Реализация сервера Shoutcast</h3>

<p>Теперь вы готовы к реализации сервера Shoutcast. Поскольку протокол Shoutcast практически основан на HTTP, вы можете реализовать сервер в виде функции внутри AllegroServe.  Однако, поскольку вам нужно будет взаимодействовать с некоторыми низкоуровневыми функциями AllegroServe, то вы не сможете использовать макрос <code>define-url-function</code> из главы 26. Вместо этого, вам нужно написать обычную функцию, которая будет выглядеть примерно так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> shoutcast <span class="paren2">(<span class="">request entity</span>)</span><br/>  <span class="paren2">(<span class=""><i><span class="symbol">with-http-response</span></i><br/>      <span class="paren3">(<span class="">request entity <span class="keyword">:content-type</span> <span class="string">"audio/MP3"</span> <span class="keyword">:timeout</span> <span class="special">*timeout-seconds*</span></span>)</span><br/>    <span class="paren3">(<span class="">prepare-icy-response request <span class="special">*metadata-interval*</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">wants-metadata-p <span class="paren6">(<span class="">header-slot-value request <span class="keyword">:icy-metadata</span></span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><i><span class="symbol">with-http-body</span></i> <span class="paren5">(<span class="">request entity</span>)</span><br/>        <span class="paren5">(<span class="">play-songs <br/>         <span class="paren6">(<span class="">request-socket request</span>)</span><br/>         <span class="paren6">(<span class="">find-song-source <span class="special">*song-source-type*</span> request</span>)</span><br/>         <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> wants-metadata-p <span class="special">*metadata-interval*</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Затем опубликуйте эту функцию для пути <code>/stream.mp3</code>, например вот так:<a class="fn_top" id="fnt__4" href="practical-a-shoutcast-server#fn__4">4)</a>
</p>
<pre class="code"><span class="paren1">(<span class="">publish <span class="keyword">:path</span> <span class="string">"/stream.mp3"</span> <span class="keyword">:function</span> 'shoutcast</span>)</span><br/></pre>

<p>В вызове <code>with-http-response</code>, в добавление к стандартным параметрам <code>request</code> и <code>entity</code>, вам необходимо передать аргументы <code>:content-type</code> и <code>:timeout</code>.  Аргумент <code>:content-type</code> сообщает AllegroServe как установить значение заголовка <code>Content-Type</code>.  А аргумент <code>:timeout</code> указывает количество времени (в секундах), которое дает AllegroServe функции для генерации ответа. По умолчанию AllegroServe отменяет каждый запрос через пять минут.  Поскольку вы собираетесь передавать поток практически бесконечно, то вам необходимо указать большее значение.  Не существует способа указать AllegroServe чтобы он не отменял запрос, так что вы должны установить подходящее большое значение в переменной <code>*timeout-seconds*</code>, например, 10 лет, переведенных в секунды.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*timeout-seconds*</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> 60 60 24 7 52 10</span>)</span></span>)</span><br/></pre>

<p>Затем, внутри тела <code>with-http-response</code> и до вызова <code>with-http-body</code>, который выполнит отправку заголовков ответа, вам необходимо напрямую поработать с ответом, который отправит AllegroServe.  Функция <code>prepare-icy-response</code> выполняет все необходимые действия: изменение строки протокола со значения по умолчанию – <code>"HTTP"</code> на <code>"ICY"</code>, и добавление заголовков, специфических для Shoutcast.<a class="fn_top" id="fnt__5" href="practical-a-shoutcast-server#fn__5">5)</a>  Вам также необходимо добавить код для обхода ошибки в iTunes, который заставит AllegroServe не использовать FIXME chunked transfer-encoding.<a class="fn_top" id="fnt__6" href="practical-a-shoutcast-server#fn__6">6)</a>  Функции <code>request-reply-protocol-string</code>, <code>request-uri</code> и <code>reply-header-slot-value</code> являются частью of AllegroServe.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> prepare-icy-response <span class="paren2">(<span class="">request metadata-interval</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren3">(<span class="">request-reply-protocol-string request</span>)</span> <span class="string">"ICY"</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for <span class="paren3">(<span class="">k v</span>)</span> in <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_revers.htm" class="symbol">reverse</a><br/>       `<span class="paren4">(<span class=""><span class="paren5">(<span class=""><span class="keyword">:|icy-metaint|</span> ,<span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_to_.htm" class="symbol">princ-to-string</a> metadata-interval</span>)</span></span>)</span><br/>         <span class="paren5">(<span class=""><span class="keyword">:|icy-notice1|</span> <span class="string">"&lt;BR&gt;This stream blah blah blah&lt;BR&gt;"</span></span>)</span><br/>         <span class="paren5">(<span class=""><span class="keyword">:|icy-notice2|</span> <span class="string">"More blah"</span></span>)</span><br/>         <span class="paren5">(<span class=""><span class="keyword">:|icy-name|</span>    <span class="string">"MyLispShoutcastServer"</span></span>)</span><br/>         <span class="paren5">(<span class=""><span class="keyword">:|icy-genre|</span>   <span class="string">"Unknown"</span></span>)</span><br/>         <span class="paren5">(<span class=""><span class="keyword">:|icy-url|</span>     ,<span class="paren6">(<span class="">request-uri request</span>)</span></span>)</span><br/>         <span class="paren5">(<span class=""><span class="keyword">:|icy-pub|</span>     <span class="string">"1"</span></span>)</span></span>)</span></span>)</span><br/>     <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren4">(<span class="">reply-header-slot-value request k</span>)</span> v</span>)</span></span>)</span><br/>  <span class="comment">;; iTunes, despite claiming to speak HTTP/1.1, doesn't understand<br/></span>  <span class="comment">;; chunked Transfer-encoding. Grrr. So we just turn it off.<br/></span>  <span class="paren2">(<span class="">turn-off-chunked-transfer-encoding request</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> turn-off-chunked-transfer-encoding <span class="paren2">(<span class="">request</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren3">(<span class="">request-reply-strategy request</span>)</span><br/>        <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rm_rm.htm" class="symbol">remove</a> <span class="keyword">:chunked</span> <span class="paren4">(<span class="">request-reply-strategy request</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Внутри выражения <code>with-http-body</code> функции <code>shoutcast</code>, вы выполняете потоковое вещание в формате MP3.  Функция <code>play-songs</code> берет поток, в который вы должны писать данные, источник песен и интервал передачи метаданных, или <code>NIL</code>, если клиент не хочет получать метаданные.  Поток – это сокет, полученный из объекта <code>request</code>, источник песен получается при помощи функции <code>find-song-source</code>, а интервал передачи метаданных берется из глобальной переменной <code>*metadata-interval*</code>.  Тип источника песен конктролируется переменной <code>*song-source-type*</code>, который сейчас должен быть установлен в значение <code>singleton</code> для того, чтобы использовать <code>simple-song-queue</code>, которую мы уже реализовали.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*metadata-interval*</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_exp_e.htm" class="symbol">expt</a> 2 12</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*song-source-type*</span> 'singleton</span>)</span><br/></pre>

<p>Сама функция <code>play-songs</code> не делает ничего сложного – она в цикле вызывает функцию  <code>play-current</code>, которая берет на себя  всю тяжесть задачи по отправке содержимого отдельного файла MP3, пропускания тагов ID3 и вставки метаданных ICY.  Единственной трудностью является отслеживание момента отправки метаданных.
</p>
<p>Поскольку вы должны отправлять блоки метаданных через фиксированные интервалы, независимо от того, когда вы переключаетесь с отправки одного файла на другой, то каждый раз когда вы вызываете <code>play-current</code>, то вам необходимо указать когда следующие метаданные должны быть переданы, и при возврате, эта функция должна вернуть аналогичное значение, так что вы сможете передать эти данные в следующем вызове <code>play-current</code>.  Если <code>play-current</code> получает <code>NIL</code> от источника песен, то она также вернет <code>NIL</code>, что позволяет завершить цикл <code>LOOP</code> внутри <code>play-songs</code>.
</p>
<p>В дополнение к выполнению цикла, <code>play-songs</code> также использует <code>HANDLER-CASE</code> для перехвата ошибок, которые будут выданы когда клиент MP3 отключится от сервера, и одна из процедуру записи в <code>play-current</code> приведет к выдаче ошибки. Поскольку <code>HANDLER-CASE</code> находится вне <code>LOOP</code>, то обработка ошибки приведет к прерыванию цикла, позволяет выполнить выход из <code>play-songs</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> play-songs <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/t_stream.htm" class="symbol">stream</a> song-source metadata-interval</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_hand_1.htm" class="symbol">handler-case</a> <br/>      <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a><br/>         for next-metadata = metadata-interval<br/>         then <span class="paren4">(<span class="">play-current <br/>               <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_stream.htm" class="symbol">stream</a> <br/>               song-source<br/>               next-metadata<br/>               metadata-interval</span>)</span><br/>         while next-metadata</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_error.htm" class="symbol">error</a> <span class="paren4">(<span class="">e</span>)</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/v_debug_.htm" class="symbol"><span class="special">*trace-output*</span></a> <span class="string">"Caught error in play-songs: ~a"</span> e</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>И теперь вы готовы к реализации функции <code>play-current</code>, которая выполняет отправку данных Shoutcast.  Основной идея заключается в том, что вы получаете текущую песню от источника песен, открываете файл, содержащий ее, и затем выполняете цикл в котором читаете данные из файла и записываете их в сокет, до тех пор, пока вы не достигните конца файла, или текущая песня не перестанет быть текущей.
</p>
<p>Имеется только две трудности: одна из них заключается в том, что вы должны быть уверены, что вы отправляете метаданные через заданный интервал.  Другой является то, что если файл начинается с тага ID3, то вам нужно пропустить его.  Если вы не особо беспокоитесь об эффективности ввода-вывода, то вы можете реализовать <code>play-current</code> вот так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> play-current <span class="paren2">(<span class="">out song-source next-metadata metadata-interval</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">song <span class="paren5">(<span class="">current-song song-source</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> song<br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren5">(<span class=""><span class="paren6">(<span class="">metadata <span class="paren1">(<span class="">make-icy-metadata <span class="paren2">(<span class="">title song</span>)</span></span>)</span></span>)</span></span>)</span><br/>        <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_open.htm" class="symbol"><i><span class="symbol">with-open-file</span></i></a> <span class="paren6">(<span class="">mp3 <span class="paren1">(<span class="">file song</span>)</span></span>)</span><br/>          <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">unless</a> <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_file_p.htm" class="symbol">file-position</a> mp3 <span class="paren2">(<span class="">id3-size song</span>)</span></span>)</span><br/>            <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_error.htm" class="symbol">error</a> <span class="string">"Can't skip to position ~d in ~a"</span> <span class="paren2">(<span class="">id3-size song</span>)</span> <span class="paren2">(<span class="">file song</span>)</span></span>)</span></span>)</span><br/>          <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_by_by.htm" class="symbol">byte</a> = <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rd_by.htm" class="symbol">read-byte</a> mp3 <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a></span>)</span><br/>             while <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_by_by.htm" class="symbol">byte</a> <span class="paren2">(<span class="">still-current-p song song-source</span>)</span></span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a><br/>               <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_by.htm" class="symbol">write-byte</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_by_by.htm" class="symbol">byte</a> out</span>)</span><br/>               <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">decf</a> next-metadata</span>)</span><br/>             <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_zerop.htm" class="symbol">zerop</a> next-metadata</span>)</span> metadata-interval</span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a><br/>               <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_seq.htm" class="symbol">write-sequence</a> metadata out</span>)</span><br/>               <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> next-metadata metadata-interval</span>)</span></span>)</span><br/><br/>          <span class="paren6">(<span class="">maybe-move-to-next-song song song-source</span>)</span></span>)</span></span>)</span><br/>      next-metadata</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Эта функция получает текущую песню из источника песен, и затем получает буфер, содержащий метаданные путем передачи названия песни функции <code>make-icy-metadata</code>.  Затем она открывает файл и пропускает таг ID3 используя функцию <code>FILE-POSITION</code> с двумя аргументами.  Затем она начинает читать байты из файла и записывать их в сокет.<a class="fn_top" id="fnt__7" href="practical-a-shoutcast-server#fn__7">7)</a>
</p>
<p>Эта функция прервет цикл когда достигнет конца файла, или когда источник песен изменит текущую песню.  Между тем, когда <code>next-metadata</code> будет равен нулю (если вы вообще будете отправлять метаданные), эта функция записывает метаданные в поток и сбрасывает <code>next-metadata</code> в начальное значение.  После завершения цикла, она проверяет – является ли песня все еще текущей в источнике песен, и если это так, то это значит что мы вышли из цикла из-за того, что прочитали весь файл, и в этом случае она сообщает источнику песен о необходимости перемещения к следующей песнь.  В противном случае, цикл прерван из-за того, что кто-то изменил текущую песню, и функция просто выполняет возврат без дополнительных действий.  В любом случае, она возвращает число байт, оставшихся до отправки следующей порции метаданных, так что это значение может быть использовано при следующем вызове <code>play-current</code>.<a class="fn_top" id="fnt__8" href="practical-a-shoutcast-server#fn__8">8)</a>
</p>
<p>Реализация функции <code>make-icy-metadata</code>, которая получает название текущей песни и формирует массив байт, содержащий правильно отформатированный блок метаданных ICY, также проста.<a class="fn_top" id="fnt__9" href="practical-a-shoutcast-server#fn__9">9)</a>
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> make-icy-metadata <span class="paren2">(<span class="">title</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let*</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">text <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a> <span class="string">"StreamTitle='~a';"</span> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_sbs_s.htm" class="symbol">substitute</a> <span class="character">#\Space</span> <span class="character">#\'</span> title</span>)</span></span>)</span></span>)</span><br/>         <span class="paren4">(<span class="">blocks <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_floorc.htm" class="symbol">ceiling</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> text</span>)</span> 16</span>)</span></span>)</span><br/>         <span class="paren4">(<span class="">buffer <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ar.htm" class="symbol">make-array</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> blocks 16</span>)</span></span>)</span><br/>                             <span class="keyword">:element-type</span> '<span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/t_unsgn_.htm" class="symbol">unsigned-byte</a> 8</span>)</span><br/>                             <span class="keyword">:initial-element</span> 0</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_aref.htm" class="symbol">aref</a> buffer 0</span>)</span> blocks</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> <br/>       for <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a> across text<br/>       for i from 1 <br/>       <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_aref.htm" class="symbol">aref</a> buffer i</span>)</span> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_c.htm" class="symbol">char-code</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a></span>)</span></span>)</span></span>)</span><br/>    buffer</span>)</span></span>)</span><br/></pre>

<p>В зависимости от того, как конкретная реализация Lisp работает с потоками, и от того, сколько клиентов MP3 вы хотите обрабатывать одновременно, простая версия <code>play-current</code> может быть достаточно эффективной или нет.
</p>
<p>Потенциальной проблемой простой реализации может быть то, что она использует <code>READ-BYTE</code> и <code>WRITE-BYTE</code> для передачи каждого байта. Возможно, что каждый вызов может приводить к относительно затратному системному вызову чтения или записи одного байта.  И даже если в вашем Lisp реализованы потоки с внутренней буферизацией, так что не каждый вызов <code>READ-BYTE</code> и <code>WRITE-BYTE</code> будет приводить к системному вызову, то все равно, вызов функции не является дешевой операцией.  В частности, в реализациях, которые предоставляют потоки, расширяемые пользователем, используя так называемые "серые потоки" (Gray Streams), вызовы <code>READ-BYTE</code> и <code>WRITE-BYTE</code> могут приводить к вызову обобщенных функций, которые будут приводить к неявной диспатчеризации вызова в зависимости от класса потока.  Хотя диспатчеризация обобщенной функции является достаточно быстрой операцией и вы можете сильно не волноваться об этом, но все равно ее вызов более затратен чем вызов обычной функции, и это не та вещь, которую вы захотите выполнять несколько миллионов раз за несколько минут, особенно если вы можете избежать этого.
</p>
<p>Более эффективный, но чуть более сложный способ реализации <code>play-current</code> – читать и записывать данные блоками используя функции <code>READ-SEQUENCE</code> и <code>WRITE-SEQUENCE</code>.  Это также дает вам шанс привести чтение данных в соответствие с размером блока данных файловой системы, что обеспечит вам лучшую производительность диска.  Конечно, вне зависимости от того, какой размер блока вы будете использовать, отслеживание точки отправки метаданных станет более сложной задачей.  Более эффективная версия <code>play-current</code> использующая функции <code>READ-SEQUENCE</code> и <code>WRITE-SEQUENCE</code> может выглядеть вот так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> play-current <span class="paren2">(<span class="">out song-source next-metadata metadata-interval</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">song <span class="paren5">(<span class="">current-song song-source</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> song<br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren5">(<span class=""><span class="paren6">(<span class="">metadata <span class="paren1">(<span class="">make-icy-metadata <span class="paren2">(<span class="">title song</span>)</span></span>)</span></span>)</span><br/>            <span class="paren6">(<span class="">buffer <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ar.htm" class="symbol">make-array</a> size <span class="keyword">:element-type</span> '<span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/t_unsgn_.htm" class="symbol">unsigned-byte</a> 8</span>)</span></span>)</span></span>)</span></span>)</span><br/>        <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_open.htm" class="symbol"><i><span class="symbol">with-open-file</span></i></a> <span class="paren6">(<span class="">mp3 <span class="paren1">(<span class="">file song</span>)</span></span>)</span><br/>          <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_flet_.htm" class="symbol"><i><span class="symbol">labels</span></i></a> <span class="paren1">(<span class=""><span class="paren2">(<span class="">write-buffer <span class="paren3">(<span class="">start end</span>)</span><br/>                     <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> metadata-interval<br/>                       <span class="paren4">(<span class="">write-buffer-with-metadata start end</span>)</span><br/>                       <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_seq.htm" class="symbol">write-sequence</a> buffer out <span class="keyword">:start</span> start <span class="keyword">:end</span> end</span>)</span></span>)</span></span>)</span><br/><br/>                   <span class="paren2">(<span class="">write-buffer-with-metadata <span class="paren3">(<span class="">start end</span>)</span><br/>                     <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_cond.htm" class="symbol"><i><span class="symbol">cond</span></i></a><br/>                       <span class="paren4">(<span class=""><span class="paren5">(<span class="">&gt; next-metadata <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a__.htm" class="symbol">-</a> end start</span>)</span></span>)</span><br/>                        <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_seq.htm" class="symbol">write-sequence</a> buffer out <span class="keyword">:start</span> start <span class="keyword">:end</span> end</span>)</span><br/>                        <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">decf</a> next-metadata <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a__.htm" class="symbol">-</a> end start</span>)</span></span>)</span></span>)</span><br/>                       <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <br/>                        <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren6">(<span class=""><span class="paren1">(<span class="">middle <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> start next-metadata</span>)</span></span>)</span></span>)</span><br/>                          <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_seq.htm" class="symbol">write-sequence</a> buffer out <span class="keyword">:start</span> start <span class="keyword">:end</span> middle</span>)</span><br/>                          <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_seq.htm" class="symbol">write-sequence</a> metadata out</span>)</span><br/>                          <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> next-metadata metadata-interval</span>)</span><br/>                          <span class="paren6">(<span class="">write-buffer-with-metadata middle end</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/><br/>            <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_multip.htm" class="symbol">multiple-value-bind</a> <span class="paren2">(<span class="">skip-blocks skip-bytes</span>)</span><br/>                <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_floorc.htm" class="symbol">floor</a> <span class="paren3">(<span class="">id3-size song</span>)</span> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> buffer</span>)</span></span>)</span><br/><br/>              <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">unless</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_file_p.htm" class="symbol">file-position</a> mp3 <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> skip-blocks <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> buffer</span>)</span></span>)</span></span>)</span><br/>                <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_error.htm" class="symbol">error</a> <span class="string">"Couldn't skip over ~d ~d byte blocks."</span><br/>                       skip-blocks <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> buffer</span>)</span></span>)</span></span>)</span><br/><br/>              <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for end = <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rd_seq.htm" class="symbol">read-sequence</a> buffer mp3</span>)</span> <br/>                 for start = skip-bytes then 0<br/>                 <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren3">(<span class="">write-buffer start end</span>)</span><br/>                 while <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <span class="paren4">(<span class="">= end <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> buffer</span>)</span></span>)</span><br/>                            <span class="paren4">(<span class="">still-current-p song song-source</span>)</span></span>)</span></span>)</span><br/><br/>              <span class="paren2">(<span class="">maybe-move-to-next-song song song-source</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/>      next-metadata</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь вы готовы собрать все части вместе.  В следующей главе вы напишите Web-интерфейс для сервера Shoutcast, разработанного в данной главе, и использующего базу данных MP3 из главы 27 в качестве источника песен.
</p>
</div></div><div class="footnotes"><div><a class="fn_bot" id="fn__1" href="practical-a-shoutcast-server#fnt__1">1)</a>Версия XMMS поставляемая с Red Hat 8.0, 9.0 и Fedora не понимает как проигрывать файлы в формате MP3, поскольку сотрудники Red Hat были озабочены лицензионными аспектами использования кодеков MP3.  Для того, чтобы XMMS поддерживал MP3 в этих версиях Linux, вам необходимо взять исходные тексты с <a href="http://www.xmms.org">http://www.xmms.org</a> и собрать их самостоятельно.  Или посетите <a href="http://www.fedorafaq.org/#xmms-mp3">http://www.fedorafaq.org/#xmms-mp3</a> для получения информации о других возможностях поддержки MP3.</div><div><a class="fn_bot" id="fn__2" href="practical-a-shoutcast-server#fnt__2">2)</a>Чтобы сделать вещи еще более запутанными, я упомяну, что есть еще один потоковый протокол, называемы Icecast. Но между заголовком <code>ICY</code>, используемым протоколом Shoutcast и протоколом Icecast не существуют никаких связей.</div><div><a class="fn_bot" id="fn__3" href="practical-a-shoutcast-server#fnt__3">3)</a>С технической точки зрения, реализация, представленная в данной главе, также вызывается из двух потоков выполнения – из потока AllegroServe, который выполняет сервер Shoutcast, а также из интерактивной консоли ввода команд.  Но пока вы можете допустить наличие гонки за ресурсами (race condition).  В следующей главе мы будем обсуждать вопрос использования блокировок для создания безопасного кода.</div><div><a class="fn_bot" id="fn__4" href="practical-a-shoutcast-server#fnt__4">4)</a>Еще одной вещью, которую вы можете захотеть сделать во время работы над этим кодом – выполнить выражение <code>(net.aserve::debug-on :notrap)</code>.  Оно заставляет  AllegroServe не перехватывать ошибки, выданные вашим кодом, что позволит вам использовать стандартный отладчик Lisp.  В  SLIME это приведет к показу буфера отладчика SLIME, также как и для обычной ошибки.</div><div><a class="fn_bot" id="fn__5" href="practical-a-shoutcast-server#fnt__5">5)</a>Заголовки Shoutcast обычно посылаются в виде строк с символами в нижнем регистре, так что вам необходимо замаскировать имена именованных параметров, используемых для заголовков в AllegroServe чтобы предотвратить их преобразование в верхний регистр при чтении исходного текста.  Так что вам нужно писать <code>:|icy-metaint|</code> вместо обычного <code>:icy-metaint</code>.  Вы также можете записать эту строку как <code>:\i\c\y-\m\e\t\a\i\n\t</code>, но это было бы глупо.</div><div><a class="fn_bot" id="fn__6" href="practical-a-shoutcast-server#fnt__6">6)</a>Функция <code>turn-off-chunked-transfer-encoding</code> является хаком.  Не существует способа отключить FIXME chunked transfer encoding используя официальный API AllegroServe и не указывая длину содержимого, поскольку подразумевается, что любой клиент, который объявляет себя поддерживающим HTTP 1.1 (что и делает iTunes), понимает этот способ кодирования.</div><div><a class="fn_bot" id="fn__7" href="practical-a-shoutcast-server#fnt__7">7)</a>Большинство проигрывателей MP3 будет отображать метаданные где-то в пользовательском интерфейсе.  Однако, программа XMMS в Linux по умолчанию не делает этого. Чтобы заставить XMMS отображать метаданные Shoutcast, нажмите <code>Ctrl+P</code> для открытия диалога "Preferences" (Настройки).  Затем во вкладке "Audio I/O Plugins" (крайняя левая в версии 1.2.10), выберите пункт "MPEG Layer 1/2/3 Player" (<code>libmpg123.so</code>) и нажмите кнопку "Configure".  Затем выберите вкладку "Streaming" и внизу, в разделе "SHOUTCAST/Icecast", отметьте "Enable SHOUTCAST/Icecast title streaming" кнопку.</div><div><a class="fn_bot" id="fn__8" href="practical-a-shoutcast-server#fnt__8">8)</a>Люди перешедшие на Common Lisp со Scheme могут удивляться почему  <code>play-current</code> не может просто вызывать себя рекурсивно.  В  Scheme это будет работать, поскольку в спецификации Scheme требуется чтобы реализации поддерживали "an unbounded number of active tail calls (неограниченное количество хвостовых вызовов)".  Для реализаций Common Lisp разрешено иметь такое своейство, но оно не требуется стандартом языка.  Так что в Common Lisp основным способом создания циклов является использование соответствующих конструкций, а не рекурсии.</div><div><a class="fn_bot" id="fn__9" href="practical-a-shoutcast-server#fnt__9">9)</a>Эта функция предполагает, также как и другой код, который вы пишете, что в вашей реализации Lisp внутренней кодировкой для знаков является ASCII или надмножество ASCII, так что вы можете использовать функцию <code>CHAR-CODE</code> для преобразования объеков типа <code>CHARACTER</code> в данные в кодировке ASCII. FIXME что делать с мультибайтовыми кодировками?</div></div></div> <table width="100%"> <tbody> <tr> <td width="20%" align="left"> <a href="practical-an-mp3-database">Предыдущая</a> </td> <td width="60%" align="center"> <a href="index.html">Оглавление</a> </td> <td width="20%" align="right"> <a href="practical-an-mp3-browser">Следующая</a> </td> </tr> </tbody> </table> </div> <div class="bottom">@2009-2013 lisper.ru</div> 
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-7734690-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
 </body> </html>