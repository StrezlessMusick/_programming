<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ru" xml:lang="ru"> <head> <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> <meta name="keywords" content="Common Lisp,lisp,лисп" /> <title>Практика: Библиотека для генерации HTML, Интерпретатор.</title> <link href="../css/style.css" rel="stylesheet" type="text/css" /><link href="../css/colorize.css" rel="stylesheet" type="text/css" />  </head> <body> <div class="top"> <div id="login"> <a href="http://lisper.ru/register">Регистрация</a> | <a href="http://lisper.ru/login?done=/pcl/practical-an-html-generation-library-the-interpreter">Войти</a> </div> </div> <div id="caution"> <img alt="Lisp — программируемый язык программирования" src="../image/gecko.png" /> <a href="http://www.vkusnoserver.ru/" target="_blank" style="float: right;"> <img src="../vkusnoserver.png" /> </a> </div> <div id="mainmenu"> <ul> <li> <a href="http://lisper.ru/">Главная</a> </li><li> <a href="http://lisper.ru/articles/">Статьи</a> </li><li> <a href="http://lisper.ru/planet/">Планета</a> </li><li> <a href="http://lisper.ru/forum/">Форум</a> </li><li> <a href="http://lisper.ru/apps/">Сервисы</a> </li><li> <a href="index.html">Practical Common Lisp</a> </li><li> <a href="http://lisper.ru/wiki/">Wiki</a> </li><li> <a href="http://lisper.ru/files/">Файлы</a> </li><li> <a href="http://lisper.ru/search">Поиск</a> </li> </ul> </div> <div id="content"> <table width="100%"> <tbody> <tr> <td width="20%" align="left"> <a href="practical-an-mp3-browser">Предыдущая</a> </td> <td width="60%" align="center"> <a href="index.html">Оглавление</a> </td> <td width="20%" align="right"> <a href="practical-an-html-generation-library-the-compiler">Следующая</a> </td> </tr> </tbody> </table> <div class="article"><div class="toc"><div class="toc-header">Содержание</div><div class="toc-body"><ul><li><div><a href="practical-an-html-generation-library-the-interpreter#30. &#x41F;&#x440;&#x430;&#x43A;&#x442;&#x438;&#x43A;&#x430;: &#x411;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x430; &#x434;&#x43B;&#x44F; &#x433;&#x435;&#x43D;&#x435;&#x440;&#x430;&#x446;&#x438;&#x438; HTML. &#x418;&#x43D;&#x442;&#x435;&#x440;&#x43F;&#x440;&#x435;&#x442;&#x430;&#x442;&#x43E;&#x440;.">30. Практика: Библиотека для генерации HTML. Интерпретатор.</a><ul><li><div><a href="practical-an-html-generation-library-the-interpreter#&#x41F;&#x440;&#x43E;&#x435;&#x43A;&#x442;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435; &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x441;&#x43F;&#x435;&#x446;&#x438;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x433;&#x43E; &#x43D;&#x430;&#x437;&#x43D;&#x430;&#x447;&#x435;&#x43D;&#x438;&#x44F;">Проектирование языка специального назначения</a></div></li><li><div><a href="practical-an-html-generation-library-the-interpreter#&#x42F;&#x437;&#x44B;&#x43A; FOO">Язык FOO</a></div></li><li><div><a href="practical-an-html-generation-library-the-interpreter#&#x42D;&#x43A;&#x440;&#x430;&#x43D;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435; &#x437;&#x43D;&#x430;&#x43A;&#x43E;&#x432;">Экранирование знаков</a></div></li><li><div><a href="practical-an-html-generation-library-the-interpreter#&#x412;&#x44B;&#x432;&#x43E;&#x434; &#x43E;&#x442;&#x441;&#x442;&#x443;&#x43F;&#x43E;&#x432;">Вывод отступов</a></div></li><li><div><a href="practical-an-html-generation-library-the-interpreter#&#x418;&#x43D;&#x442;&#x435;&#x440;&#x444;&#x435;&#x439;&#x441; HTML &#x43F;&#x440;&#x43E;&#x446;&#x435;&#x441;&#x441;&#x43E;&#x440;&#x430;">Интерфейс HTML процессора</a></div></li><li><div><a href="practical-an-html-generation-library-the-interpreter#FIXME backend &#x412;&#x43D;&#x443;&#x442;&#x440;&#x435;&#x43D;&#x43D;&#x44F;&#x44F; &#x440;&#x435;&#x430;&#x43B;&#x438;&#x437;&#x430;&#x446;&#x438;&#x44F; &#x444;&#x43E;&#x440;&#x43C;&#x430;&#x442;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x43E;&#x433;&#x43E; &#x432;&#x44B;&#x432;&#x43E;&#x434;&#x430;">FIXME backend Внутренняя реализация форматированного вывода</a></div></li><li><div><a href="practical-an-html-generation-library-the-interpreter#&#x411;&#x430;&#x437;&#x43E;&#x432;&#x43E;&#x435; &#x43F;&#x440;&#x430;&#x432;&#x438;&#x43B;&#x43E; &#x432;&#x44B;&#x447;&#x438;&#x441;&#x43B;&#x435;&#x43D;&#x438;&#x44F;">Базовое правило вычисления</a></div></li><li><div><a href="practical-an-html-generation-library-the-interpreter#&#x427;&#x442;&#x43E; &#x414;&#x430;&#x43B;&#x44C;&#x448;&#x435;?">Что Дальше?</a></div></li></ul></div></li></ul></div></div>
<div class="chapter" id="30. &#x41F;&#x440;&#x430;&#x43A;&#x442;&#x438;&#x43A;&#x430;: &#x411;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x430; &#x434;&#x43B;&#x44F; &#x433;&#x435;&#x43D;&#x435;&#x440;&#x430;&#x446;&#x438;&#x438; HTML. &#x418;&#x43D;&#x442;&#x435;&#x440;&#x43F;&#x440;&#x435;&#x442;&#x430;&#x442;&#x43E;&#x440;."><h3>30. Практика: Библиотека для генерации HTML. Интерпретатор.</h3>

<p>В этой и следующей главе вы загляните под капот FOO – генератора HTML, который вы использовали в нескольких предыдущих главах. FOO является примером подхода к программированию, вполне обычного для Common Lisp, но сравнительно редкого для не-Lisp языков, а именно – языкоориентированного программирования. Вместо того чтобы определять API, базирующиеся преимущественно на функциях, классах и макросах, FOO реализует обработчики для DSL <a class="fn_top" id="fnt__1" href="practical-an-html-generation-library-the-interpreter#fn__1">1)</a>, которые вы можете встроить в ваши программы на Common Lisp.
</p>
<p>FOO предоставляет два языковых обработчика для одного и того же языка s-выражений. Первый – это интерпретатор, который получает программу на "FOO" в качестве входных данных и интерпретирует ее, формируя HTML. Второй – это компилятор, который компилирует выражения FOO (возможно со вставками на Common Lisp) в выражения Common Lisp, которые генерируют HTML и запускает внедренный код. Интерпретатор представлен функцией <code>emit-html</code>, а компилятор – макросом <code>html</code>, который вы использовали в предыдущих главах.
</p>
<p>В этой главе мы рассмотрим составные части инфраструктуры, разделяемые интерпретатором и компилятором, а также реализацию интерпретатора. В следующей главе я покажу вам, как работает компилятор.
</p>
<div class="chapter" id="&#x41F;&#x440;&#x43E;&#x435;&#x43A;&#x442;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435; &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x441;&#x43F;&#x435;&#x446;&#x438;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x433;&#x43E; &#x43D;&#x430;&#x437;&#x43D;&#x430;&#x447;&#x435;&#x43D;&#x438;&#x44F;"><h3>Проектирование языка специального назначения</h3>

<p>Проектирование встраиваемого языка выполняется в два этапа: первый – это проектирование языка, который позволит вам выразить желаемые вещи, а второй – реализация обработчика, или обработчиков, которые принимают "программу" на этом языке и либо выполняют действия, указанные программой, либо переводят программу в код на Common Lisp, который выполнит эквивалентные действия.
</p>
<p>Итак, первым этапом является проектирование языка для формирования HTML. Ключом к проектированию хорошего языка специального назначения является нахождение
верного баланса между выразительностью и краткостью. Например, очень выразительный, но не достаточно краткий "язык" для формирования HTML – это язык литеральных строк HTML. Разрешенными "формами" этого языка являются строки, содержащие литералы HTML.  Языковые процессоры для этого "языка" могут обрабатывать такие формы путем их вывода без изменений.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defvar</span></i></a> <span class="special">*html-output*</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/v_debug_.htm" class="symbol"><span class="special">*standard-output*</span></a></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> emit-html <span class="paren2">(<span class="">html</span>)</span><br/>  <span class="string">"Интерпретатор для языка HTML."</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_seq.htm" class="symbol">write-sequence</a> html <span class="special">*html-output*</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmac.htm" class="symbol"><i><span class="symbol">defmacro</span></i></a> html <span class="paren2">(<span class="">html</span>)</span><br/>  <span class="string">"Компилятор для языка HTML."</span><br/>  `<span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_seq.htm" class="symbol">write-sequence</a> ,html <span class="special">*html-output*</span></span>)</span></span>)</span><br/></pre>

<p>Этот "язык" очень выразительный, поскольку он может сформировать любой HTML, который вы  захотите сгенерировать.<a class="fn_top" id="fnt__2" href="practical-an-html-generation-library-the-interpreter#fn__2">2)</a> С другой стороны, этот язык не является настолько кратким, насколько хотелось бы, потому что он дает вам нулевую компрессию – его выход FIXME (совпадает|равняется|еквивалентен) входу.
</p>
<p>Для проектирования языка, дающего вам некоторое полезное сжатие без ощутимих жертв выразительностью, вам необходимо определить детали вывода, которые являются  лишними или не представляют интереса. Вы можете сделать эти аспекты вывода неявными в семантике языка.
</p>
<p>Например, согласно структуре HTML, каждый открывающий тэг имеет соответствующую пару в виде закрывающего тэга.<a class="fn_top" id="fnt__3" href="practical-an-html-generation-library-the-interpreter#fn__3">3)</a> Когда вы формируете HTML вручную, то вам необходимо писать эти закрывающие тэги но вы можете улучшить краткость вашего языка формирующего HTML путем неявного включения закрывающего тэга.
</p>
<p>Другой способ, который поможет вам выиграть в краткости, не сильно влияя на выразительность, это возложить на обработчики языка ответственность за добавление необходимых разделителей между элементами - пустых строк и отступов. Когда вы генерируете HTML программно, то вы обычно не сильно заботитесь о том, какие элементы должны обрамляться переводами строк или о том, должны ли элементы быть выровнены относительно своих родительских элементов. Вам не придется беспокоиться о разделителях, если дать возможность обработчику языка самому вставлять их согласно некоторым правилам. Заметим здесь, что FOO в действительности поддерживает два режима – один, использующий минимальное количество разделителей, который позволяет генерировать очень эффективный код и компактный HTML, и другой, генерирующий аккуратный форматированный HTML с различными элементами, которые выровнены и отделены  друг от друга согласно своих ролей.
</p>
<p>Самая важная деталь, которую необходимо поместить в языковой обработчик – это экранирование определенных знаков, которые имеют специальное значение в HTML, таких как <code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>. Очевидно, что если вы генерируете HTML просто печатая строки в поток, то вы отвечаете за замену всех вхождений этих знаков на соответствующую экранирующую последовательность <code>&amp;lt;</code>, <code>&amp;gt</code>; и <code>&amp;amp;</code>. Но если обработчик языка знает, какие строки будут формироваться как данные элемента, тогда он может позаботиться об автоматическом экранировании этих знаков за вас.
</p>
</div><div class="chapter" id="&#x42F;&#x437;&#x44B;&#x43A; FOO"><h3>Язык FOO</h3>

<p>Итак, хватит теории. Я дам быстрый обзор языка, реализуемого FOO и затем вы посмотрите на реализацию двух его обработчиков – интерпретатора, который описан в этой главе и компилятора, который описан в следующей.
</p>
<p>Подобно самому Lisp, базовый синтаксис языка FOO определен в терминах выражений, созданных из Lisp объектов. Язык определяет то, как каждое выражение FOO переводится в HTML.
</p>
<p>Самые простые выражения FOO – это FIXME само-вычисляющиеся Lisp объекты, такие как строки, числа и ключевые символы.<a class="fn_top" id="fnt__4" href="practical-an-html-generation-library-the-interpreter#fn__4">4)</a> Вам понадобится функция <code>self-evaluating-p</code>, которая проверяет является ли данный объект FIXME само-вычисляющимся для целей FOO.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> self-evaluating-p <span class="paren2">(<span class="">form</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_atom.htm" class="symbol">atom</a> form</span>)</span> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_symbol.htm" class="symbol">symbolp</a> form</span>)</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_kwdp.htm" class="symbol">keywordp</a> form</span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Объекты, которые удовлетворяют этому предикату будут выведены путем формирования из них строк с помощью <code>PRINC-TO-STRING</code> и затем экранирования всех зарезервированных знаков, таких как <code>&lt;</code>, <code>&gt;</code>, или <code>&amp;</code>. При формировании атрибутов знаки <code>"</code>, и <code/>' также экранируются. Таким образом, вы можете применить макрос <code>html</code> к FIXME само-вычисляющемуся объекту для вывода его в <code>*html-output*</code> (которая изначально связанная с <code>*STANDARD-OUTPUT*</code>). Таблица 30-1 показывает как несколько различных само-вычисляющихся значений будут выведены.
</p>
<p>Таблица 30-1. Выход FOO для FIXME само-вычисляющихся объектов
</p><pre>FOO Form	Generated HTML<br/>"foo"	          foo<br/>10	           10<br/>:foo	          FOO<br/>"foo &amp; bar"	  foo &amp;amp; bar<br/></pre>
<p>Конечно, большая часть HTML состоит из элементов в тэгах. Каждый такой элемент имеет три составляющие: тэг, множество атрибутов, и тело, содержащее текст и/или другие HTML элементы. Поэтому вам нужен способ представлять эти три составляющие в виде Lisp объектов, желательно таких, которые понимает считываетель Lisp.<a class="fn_top" id="fnt__5" href="practical-an-html-generation-library-the-interpreter#fn__5">5)</a> Если на время забыть об атрибутах, можно заметить, что существует очевидное соответствие между списками Lisp и элементами HTML: каждый HTML элемент может быть представлен как список, чей первый элемент (<code>FIRST</code>) – это символ, имя которого это название тэга элемента, а остальные (<code>REST</code>) – это список FIXME само-вычисляющихся объектов или списков, представляющих другие HTML элементы. Тогда:
</p><pre>&lt;p&gt;Foo&lt;/p&gt; &lt;==&gt; (:p "Foo")<br/>&lt;p&gt;&lt;i&gt;Now&lt;/i&gt; is the time&lt;/p&gt; &lt;==&gt; (:p (:i "Now") " is the time")<br/></pre>
<p>Теперь остается придумать, как повысить краткость записи атрибутов. Так как у многих элементов нет атрибутов, было бы здорово иметь возможность использовать для них упомянутый выше синтаксис. FOO предоставят два способа нотации элементов с атрибутами. Первое, что приходит в голову, это просто включать атрибуты в список сразу же за символом, чередуя ключевые символы, именующие атрибуты, и объекты, представляющие значения атрибутов. Тело элемента начинается с первого объекта в списке, который находится в позиции имени атрибута и не является ключевым символом. Таким образом:
</p><pre>HTML&gt; (html (:p "foo"))<br/>&lt;p&gt;foo&lt;/p&gt;<br/>NIL<br/>HTML&gt; (html (:p "foo " (:i "bar") " baz"))<br/>&lt;p&gt;foo &lt;i&gt;bar&lt;/i&gt; baz&lt;/p&gt;<br/>NIL<br/>HTML&gt; (html (:p :style "foo" "Foo"))<br/>&lt;p style='foo'&gt;Foo&lt;/p&gt;<br/>NIL<br/>HTML&gt; (html (:p :id "x" :style "foo" "Foo"))<br/>&lt;p id='x' style='foo'&gt;Foo&lt;/p&gt;<br/>NIL<br/></pre>

<p>Для тех, кто предпочитает более очевидное разграничение между телом элемента и его атрибутами, FOO поддерживает альтернативный синтаксис: если первый элемент списка сам является списком с ключевым словом в качестве первого элемента, тогда внешний список представляет элемент HTML с этим ключевым словом в качестве тэга, с остатком (<code>REST</code>) вложенного списка в качестве атрибутов и с остатком (<code>REST</code>) внешнего списка в качестве тела. То есть вы можете написать два предыдущих выражения вот так:
</p><pre>HTML&gt; (html ((:p :style "foo") "Foo"))<br/>&lt;p style='foo'&gt;Foo&lt;/p&gt;<br/>NIL<br/>HTML&gt; (html ((:p :id "x" :style "foo") "Foo"))<br/>&lt;p id='x' style='foo'&gt;Foo&lt;/p&gt;<br/>NIL<br/></pre>
<p>Следующая функция проверяет, соответствует ли данный объект одному из этих синтаксисов:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> cons-form-p <span class="paren2">(<span class="">form &amp;optional <span class="paren3">(<span class="">test #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_kwdp.htm" class="symbol">keywordp</a></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_consp.htm" class="symbol">consp</a> form</span>)</span><br/>       <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_funcal.htm" class="symbol">funcall</a> test <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_car_c.htm" class="symbol">car</a> form</span>)</span></span>)</span><br/>           <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_consp.htm" class="symbol">consp</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_car_c.htm" class="symbol">car</a> form</span>)</span></span>)</span> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_funcal.htm" class="symbol">funcall</a> test <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_car_c.htm" class="symbol">caar</a> form</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Функцию <code>test</code> следует сделать параметром, потому что позже вам потребуется проверять те же самые два синтаксиса с немного отличающимся именем предиката.
</p>
<p>Чтобы полностью абстрагироваться от различий между двумя вариантами синтаксиса, вы можете определить функцию <code>parse-cons-form</code>, которая принимает форму и разбивает ее на три элемента: тэг, список свойств атрибутов и список тела, возвращая их как множественные значения (multiple values). Код, который непосредственно вычисляет формы, будет использовать эту функцию, и ему не придется беспокоиться о том, какой синтаксис был использован.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> parse-cons-form <span class="paren2">(<span class="">sexp</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_consp.htm" class="symbol">consp</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_firstc.htm" class="symbol">first</a> sexp</span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">parse-explicit-attributes-sexp sexp</span>)</span><br/>    <span class="paren3">(<span class="">parse-implicit-attributes-sexp sexp</span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> parse-explicit-attributes-sexp <span class="paren2">(<span class="">sexp</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_destru.htm" class="symbol">destructuring-bind</a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">tag &amp;rest attributes</span>)</span> &amp;body body</span>)</span> sexp<br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a> tag attributes body</span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> parse-implicit-attributes-sexp <span class="paren2">(<span class="">sexp</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> with tag = <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_firstc.htm" class="symbol">first</a> sexp</span>)</span><br/>     for <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rest.htm" class="symbol">rest</a> on <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rest.htm" class="symbol">rest</a> sexp</span>)</span> by #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_car_c.htm" class="symbol">cddr</a><br/>     while <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_kwdp.htm" class="symbol">keywordp</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_firstc.htm" class="symbol">first</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rest.htm" class="symbol">rest</a></span>)</span></span>)</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_firstc.htm" class="symbol">second</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rest.htm" class="symbol">rest</a></span>)</span></span>)</span><br/>     <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_firstc.htm" class="symbol">second</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rest.htm" class="symbol">rest</a></span>)</span><br/>       collect <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_firstc.htm" class="symbol">first</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rest.htm" class="symbol">rest</a></span>)</span> into attributes <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a><br/>       collect <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_firstc.htm" class="symbol">second</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rest.htm" class="symbol">rest</a></span>)</span> into attributes<br/>     end<br/>     finally <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_return.htm" class="symbol">return</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a> tag attributes <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rest.htm" class="symbol">rest</a></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь, когда у вас есть базовая спецификация языка, вы можете подумать о том, как вы собираетесь реализовать обработчики языка. Как вы получите желаемый HTML из последовательности выражений FOO? Как я упоминал ранее, вы реализуете два языковых обработчика для FOO: интерпретатор, который проходит по дереву выражений FOO и формирует соответствующий HTML непосредственно, и компилятор, который проходит по дереву выражений и транслирует его в Common Lisp код, который будет формировать такой же HTML. И интерпретатор и компилятор будут построены поверх общего фундамента кода, предоставляющего поддержку для таких вещей, как экранирование зарезервированных знаков и формирование аккуратного, выровненного вывода, так что с этого мы и начнем.
</p>
</div><div class="chapter" id="&#x42D;&#x43A;&#x440;&#x430;&#x43D;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435; &#x437;&#x43D;&#x430;&#x43A;&#x43E;&#x432;"><h3>Экранирование знаков</h3>

<p>Базой, которую вам необходимо заложить, будет код, который знает, как экранировать знаки специального назначения в HTML. Существует три таких знака, и они не должны появляться в тексте элемента или в значении атрибута; вот они: <code>&lt;</code>, <code>&gt;</code> и <code>&amp;</code>. В тексте значения элемента или атрибута эти знаки должны быть заменены на знаки ссылок на сущность (character reference entities) <code>&amp;lt;</code>, <code>&amp;gt;</code> и <code>&amp;amp;</code>. Также, в значениях атрибутов знаки кавычек, используемые для разделения значения, должны быть экранированы, <code/>' в <code>&amp;apos</code>; и <code>"</code> в <code>&amp;quot;</code>. Вдобавок, любой знак может быть представлен в виде числовой ссылки на символ, состоящей из амперсанда, за которым следует знак "диез" (<code>#</code>, он же sharp), за которым следует числовой код в десятичной системе счисления, за которым следует точка с запятой. Эти числовые экранирования иногда используются для формирования не-ASCII знаков в HTML.
</p>
<p>FIXME это таблица в тексте
</p>
<p> Пакет 
</p>
<p>Так как FOO это низкоуровневая библиотека, пакет, в котором вы ее разрабатываете, не зависит от внешнего кода, за исключением стандартных имен из пакета <code>COMMON-LISP</code> и, почти стандартных, имен вспомогательных макросов из пакета <code>COM.GIGAMONKEYS.MACRO-UTILITIES</code>. С другой стороны, пакет нуждается в экспорте всех имен, необходимых коду, который использует FOO. Вот <code>DEFPACKAGE</code> из исходных текстов, которые вы можете скачать с Web-сайта книги:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpkg.htm" class="symbol"><i><span class="symbol">defpackage</span></i></a> <span class="keyword">:com.gigamonkeys.html</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:use</span> <span class="keyword">:common-lisp</span> <span class="keyword">:com.gigamonkeys.macro-utilities</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:export</span> <span class="keyword">:with-html-output</span><br/>           <span class="keyword">:in-html-style</span><br/>           <span class="keyword">:define-html-macro</span><br/>           <span class="keyword">:html</span><br/>           <span class="keyword">:emit-html</span><br/>           <span class="keyword">:&amp;attributes</span></span>)</span></span>)</span><br/></pre>

<p>FIXME конец таблицы
</p>
<p>Следующая функция принимает один знак и возвращает строку, которая содержит соответствующую данному знаку символьную сущность:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> escape-char <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">case</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a><br/>    <span class="paren3">(<span class=""><span class="character">#\&amp;</span> <span class="string">"&amp;amp;"</span></span>)</span><br/>    <span class="paren3">(<span class=""><span class="character">#\&lt;</span> <span class="string">"&amp;lt;"</span></span>)</span><br/>    <span class="paren3">(<span class=""><span class="character">#\&gt;</span> <span class="string">"&amp;gt;"</span></span>)</span><br/>    <span class="paren3">(<span class=""><span class="character">#\'</span> <span class="string">"&amp;apos;"</span></span>)</span><br/>    <span class="paren3">(<span class=""><span class="character">#\"</span> <span class="string">"&amp;quot;"</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a> <span class="string">"&amp;#~d;"</span> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_c.htm" class="symbol">char-code</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Вы можете использовать эту функцию как основу для функции <code>escape</code>, которая принимает строку и последовательность знаков и возвращает копию первого аргумента, в которой все вхождения знаков из второго аргумента, заменены соответствующими символьными сущностями, возвращенными функцией <code>escape-char</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> escape <span class="paren2">(<span class="">in to-escape</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_flet_.htm" class="symbol"><i><span class="symbol">flet</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">needs-escape-p <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a></span>)</span> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_find_.htm" class="symbol">find</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a> to-escape</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_out_.htm" class="symbol"><i><span class="symbol">with-output-to-string</span></i></a> <span class="paren4">(<span class="">out</span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for start = 0 then <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> pos</span>)</span><br/>            for pos = <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_pos_p.htm" class="symbol">position-if</a> #'needs-escape-p in <span class="keyword">:start</span> start</span>)</span><br/>            <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_seq.htm" class="symbol">write-sequence</a> in out <span class="keyword">:start</span> start <span class="keyword">:end</span> pos</span>)</span><br/>            <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> pos <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_seq.htm" class="symbol">write-sequence</a> <span class="paren6">(<span class="">escape-char <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a> in pos</span>)</span></span>)</span> out</span>)</span><br/>            while pos</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Вы также можете определить два параметра: <code>*element-escapes*</code>, который содержит знаки, которые вам нужно экранировать в данных элемента, и <code>*attribute-escapes*</code>, который содержит множество знаков, которые необходимо экранировать в значениях атрибутов.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*element-escapes*</span> <span class="string">"&lt;&gt;&amp;"</span></span>)</span><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*attribute-escapes*</span> <span class="string">"&lt;&gt;&amp;</span><span class="string">\"</span><span class="string">'"</span></span>)</span><br/></pre>

<p>Вот несколько примеров:
</p><pre>HTML&gt; (escape "foo &amp; bar" *element-escapes*)<br/>"foo &amp;amp; bar"<br/>HTML&gt; (escape "foo &amp; 'bar'" *element-escapes*)<br/>"foo &amp;amp; 'bar'"<br/>HTML&gt; (escape "foo &amp; 'bar'" *attribute-escapes*)<br/>"foo &amp;amp; &amp;apos;bar&amp;apos;"<br/></pre>
<p>Наконец, вам нужна переменная <code>*escapes*</code>, которая будет связана с множеством знаков, которые должны быть экранированы. Изначально она установлена в значение <code>*element-escapes*</code>, но, как вы увидите, при формировании атрибутов, она будет установлена в значение <code>*attribute-escapes*</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defvar</span></i></a> <span class="special">*escapes*</span> <span class="special">*element-escapes*</span></span>)</span><br/></pre>

</div><div class="chapter" id="&#x412;&#x44B;&#x432;&#x43E;&#x434; &#x43E;&#x442;&#x441;&#x442;&#x443;&#x43F;&#x43E;&#x432;"><h3>Вывод отступов</h3>

<p>Для формирования аккуратно выровненного вывода, вы можете определить класс <code>indenting-printer</code>, который является оберткой вокруг потока вывода, и функции, которые используют экземпляр этого класса для вывода строк в поток и имеют возможность отслеживать начала новых строк. Класс выглядит примерно вот так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defcla.htm" class="symbol"><i><span class="symbol">defclass</span></i></a> indenting-printer <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">out                 <span class="keyword">:accessor</span> out                 <span class="keyword">:initarg</span> <span class="keyword">:out</span></span>)</span><br/>   <span class="paren3">(<span class="">beginning-of-line-p <span class="keyword">:accessor</span> beginning-of-line-p <span class="keyword">:initform</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a></span>)</span><br/>   <span class="paren3">(<span class="">indentation         <span class="keyword">:accessor</span> indentation         <span class="keyword">:initform</span> 0</span>)</span><br/>   <span class="paren3">(<span class="">indenting-p         <span class="keyword">:accessor</span> indenting-p         <span class="keyword">:initform</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Главная функция, работающая с <code>indenting-printer</code> это <code>emit</code>, которая принимает принтер и строку и выводит строку в поток вывода принтера, отслеживая переходы на новую строку, что позволяет ей управлять значением слота <code>beginning-of-line-p</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> emit <span class="paren2">(<span class="">ip <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for start = 0 then <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> pos</span>)</span><br/>     for pos = <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_pos_p.htm" class="symbol">position</a> <span class="character">#\Newline</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a> <span class="keyword">:start</span> start</span>)</span><br/>     <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren3">(<span class="">emit/no-newlines ip <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a> <span class="keyword">:start</span> start <span class="keyword">:end</span> pos</span>)</span><br/>     <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> pos <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren3">(<span class="">emit-newline ip</span>)</span><br/>     while pos</span>)</span></span>)</span><br/></pre>

<p>Для непосредственного вывода строки она использует функцию <code>emit/no-newlines</code>, которая формирует необходимое количество отступов посредством вспомогательной функции <code>indent-if-necessary</code> и затем записывает строку в поток.  Эта функция может также быть вызвана из любого другого кода для вывода строки, которая заведомо не содержит переводов строк.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> emit/no-newlines <span class="paren2">(<span class="">ip <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a> &amp;key <span class="paren3">(<span class="">start 0</span>)</span> end</span>)</span><br/>  <span class="paren2">(<span class="">indent-if-necessary ip</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_seq.htm" class="symbol">write-sequence</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a> <span class="paren3">(<span class="">out ip</span>)</span> <span class="keyword">:start</span> start <span class="keyword">:end</span> end</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">unless</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_zerop.htm" class="symbol">zerop</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a__.htm" class="symbol">-</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> end <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span></span>)</span> start</span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren4">(<span class="">beginning-of-line-p ip</span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Вспомогательная функция <code>indent-if-necessary</code> проверяет значения <code>beginning-of-line-p</code> и <code>indenting-p</code>, чтобы определить, нужно ли выводить отступ, и если они оба имеют истинное значение, выводит столько пробелов, сколько указывается значением <code>indentation</code>. Код, использующий <code>indenting-printer</code>, может управлять выравниванием, изменяя значения слотов <code>indentation</code> и <code>indenting-p</code>. Увеличивая или уменьшая значение <code>indentation</code>, можно изменять количество ведущих пробелов, в то время как установка <code>indenting-p</code> в <code>NIL</code> может временно выключить выравнивание.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> indent-if-necessary <span class="paren2">(<span class="">ip</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <span class="paren4">(<span class="">beginning-of-line-p ip</span>)</span> <span class="paren4">(<span class="">indenting-p ip</span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> repeat <span class="paren4">(<span class="">indentation ip</span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_cha.htm" class="symbol">write-char</a> <span class="character">#\Space</span> <span class="paren5">(<span class="">out ip</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren4">(<span class="">beginning-of-line-p ip</span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Последние две функции в API <code>indenting-printer</code> это <code>emit-newline</code> и <code>emit-freshline</code>, которые используются для вывода знака новой строки и похожи на <code>~%</code> и <code>~&amp;</code> директивы функции <code>FORMAT</code>. Единственное различие в том, что <code>emit-newline</code> всегда выводит перевод строки, в то время как <code>emit-freshline</code> делает это только тогда, когда <code>beginning-of-line-p</code> установлено в ложное значение. Таким образом, множественные вызовы <code>emit-freshline</code> без промежуточных вызовов <code>emit</code> не отразятся на количестве пустых линии. Это удобно, когда один кусок кода хочет сгенерировать некоторый вывод, который должен заканчиваться переводом строки, в то время как другой кусок кода хочет сгенерировать некоторый выход, который должен начаться с перевода строки, но вы не хотите избыточных пустых линий между двумя частями вывода.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> emit-newline <span class="paren2">(<span class="">ip</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_cha.htm" class="symbol">write-char</a> <span class="character">#\Newline</span> <span class="paren3">(<span class="">out ip</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren3">(<span class="">beginning-of-line-p ip</span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> emit-freshline <span class="paren2">(<span class="">ip</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">unless</a> <span class="paren3">(<span class="">beginning-of-line-p ip</span>)</span> <span class="paren3">(<span class="">emit-newline ip</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь вы готовы перейти к внутреннему устройству FOO процессора. 
</p>
</div><div class="chapter" id="&#x418;&#x43D;&#x442;&#x435;&#x440;&#x444;&#x435;&#x439;&#x441; HTML &#x43F;&#x440;&#x43E;&#x446;&#x435;&#x441;&#x441;&#x43E;&#x440;&#x430;"><h3>Интерфейс HTML процессора</h3>

<p>Теперь вы готовы к тому, чтобы определить интерфейс, с помощью которого вы будете использовать процессор языка FOO для формирования HTML. Вы можете определить этот интерфейс как множество обобщенных функций, потому что вам потребуются две реализации –- одна, которая непосредственно формирует HTML, и другая, которую макрос <code>html</code> может использовать как список инструкций для выполнения, которые затем могут быть оптимизированы и скомпилированы в код, формирующий такой же вывод более эффективно. Я буду называть это множество обобщенных функций интерфейсом выходного буфера. Он состоит из следующих восьми обобщенных функций:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defgen.htm" class="symbol"><i><span class="symbol">defgeneric</span></i></a> raw-string <span class="paren2">(<span class="">processor <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a> &amp;optional newlines-p</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defgen.htm" class="symbol"><i><span class="symbol">defgeneric</span></i></a> newline <span class="paren2">(<span class="">processor</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defgen.htm" class="symbol"><i><span class="symbol">defgeneric</span></i></a> freshline <span class="paren2">(<span class="">processor</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defgen.htm" class="symbol"><i><span class="symbol">defgeneric</span></i></a> indent <span class="paren2">(<span class="">processor</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defgen.htm" class="symbol"><i><span class="symbol">defgeneric</span></i></a> unindent <span class="paren2">(<span class="">processor</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defgen.htm" class="symbol"><i><span class="symbol">defgeneric</span></i></a> toggle-indenting <span class="paren2">(<span class="">processor</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defgen.htm" class="symbol"><i><span class="symbol">defgeneric</span></i></a> embed-value <span class="paren2">(<span class="">processor value</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defgen.htm" class="symbol"><i><span class="symbol">defgeneric</span></i></a> embed-code <span class="paren2">(<span class="">processor code</span>)</span></span>)</span><br/></pre>

<p>В то время как некоторые из этих функций имеют очевидное соответствие функциям <code>indenting-printer</code>, очень важно понять, что эти обобщенные функции определяют абстрактные операции, которые используются обработчиками языка FOO и не всегда будут реализованы в терминах вызовов функций <code>indenting-printer</code>.
</p>
<p>Возможно, самый легкий способ понять семантику этих абстрактных операций, это взглянуть на конкретные реализации специализированных методов в <code>html-pretty-printer</code>, классе, используемом для генерации удобочитаемого HTML.
</p>
</div><div class="chapter" id="FIXME backend &#x412;&#x43D;&#x443;&#x442;&#x440;&#x435;&#x43D;&#x43D;&#x44F;&#x44F; &#x440;&#x435;&#x430;&#x43B;&#x438;&#x437;&#x430;&#x446;&#x438;&#x44F; &#x444;&#x43E;&#x440;&#x43C;&#x430;&#x442;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x43E;&#x433;&#x43E; &#x432;&#x44B;&#x432;&#x43E;&#x434;&#x430;"><h3>FIXME backend Внутренняя реализация форматированного вывода</h3>

<p>Вы можете начать реализацию, определив класс с двумя слотами, – одним для хранения экземпляра <code>indenting-printer</code> и одним – для хранения размера табуляции – количества пробелов, на которое вы хотите увеличить отступ для каждого вложенного уровня HTML элементов.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defcla.htm" class="symbol"><i><span class="symbol">defclass</span></i></a> html-pretty-printer <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">printer   <span class="keyword">:accessor</span> printer   <span class="keyword">:initarg</span> <span class="keyword">:printer</span></span>)</span><br/>   <span class="paren3">(<span class="">tab-width <span class="keyword">:accessor</span> tab-width <span class="keyword">:initarg</span> <span class="keyword">:tab-width</span> <span class="keyword">:initform</span> 2</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь вы можете реализовать методы, специализированные для <code>html-pretty-printer</code>, в виде 8 обобщенных функций, которые составляют интерфейс выходного буфера.
</p>
<p>Обработчики FOO используют функцию <code>raw-string</code> для вывода строк, которые не нуждаются в экранировании знаков, либо потому, что вы действительно хотите вывести зарезервированные знаки как есть, либо потому, что все зарезервированные знаки уже были экранированы. Обычно <code>raw-string</code> вызывается для строк, которые не содержат переводов строки, таким образом поведение по умолчанию заключается в использовании <code>emit/no-newlines</code> до тех пор, пока клиент не передаст не-<code>NIL</code> значение в качестве аргумента <code>newlines-p</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> raw-string <span class="paren2">(<span class=""><span class="paren3">(<span class="">pp html-pretty-printer</span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a> &amp;optional newlines-p</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> newlines-p<br/>    <span class="paren3">(<span class="">emit <span class="paren4">(<span class="">printer pp</span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span><br/>    <span class="paren3">(<span class="">emit/no-newlines <span class="paren4">(<span class="">printer pp</span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Функции <code>newline</code>, <code>freshline</code>, <code>indent</code>, <code>unindent</code> и <code>toggle-indenting</code> реализуют достаточно простые манипуляции нижележащего <code>indenting-printer</code>. Единственная загвоздка заключается в том, что принтер HTML формирует аккуратный вывод только когда динамическая переменная <code>*pretty*</code> имеет истинное значение. Когда она равна <code>NIL</code>, то формируется компактный HTML, без лишних пробелов. Поэтому все эти методы, за исключением <code>newline</code>, проверяют значение переменной <code>*pretty*</code> перед тем, как что-то сделать:<a class="fn_top" id="fnt__6" href="practical-an-html-generation-library-the-interpreter#fn__6">6)</a>
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> newline <span class="paren2">(<span class=""><span class="paren3">(<span class="">pp html-pretty-printer</span>)</span></span>)</span><br/>  <span class="paren2">(<span class="">emit-newline <span class="paren3">(<span class="">printer pp</span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> freshline <span class="paren2">(<span class=""><span class="paren3">(<span class="">pp html-pretty-printer</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="special">*pretty*</span> <span class="paren3">(<span class="">emit-freshline <span class="paren4">(<span class="">printer pp</span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> indent <span class="paren2">(<span class=""><span class="paren3">(<span class="">pp html-pretty-printer</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="special">*pretty*</span> <br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> <span class="paren4">(<span class="">indentation <span class="paren5">(<span class="">printer pp</span>)</span></span>)</span> <span class="paren4">(<span class="">tab-width pp</span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> unindent <span class="paren2">(<span class=""><span class="paren3">(<span class="">pp html-pretty-printer</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="special">*pretty*</span> <br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">decf</a> <span class="paren4">(<span class="">indentation <span class="paren5">(<span class="">printer pp</span>)</span></span>)</span> <span class="paren4">(<span class="">tab-width pp</span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> toggle-indenting <span class="paren2">(<span class=""><span class="paren3">(<span class="">pp html-pretty-printer</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="special">*pretty*</span> <br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_slts.htm" class="symbol"><i><span class="symbol">with-slots</span></i></a> <span class="paren4">(<span class="">indenting-p</span>)</span> <span class="paren4">(<span class="">printer pp</span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> indenting-p <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_not.htm" class="symbol">not</a> indenting-p</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>В результате, функции <code>embed-value</code> и <code>embed-code</code> используются только компилятором FOO: <code>embed-value</code> используется для генерации кода, который будет формировать значение выражений Common Lisp, а <code>embed-code</code> используется для внедрения фрагментов кода для запуска и ее результат исключается FIXME. В интерпретаторе вы не можете полностью вычислять внедренный Lisp код, поэтому вызов этих функций всегда будет сигнализировать об ошибке.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> embed-value <span class="paren2">(<span class=""><span class="paren3">(<span class="">pp html-pretty-printer</span>)</span> value</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_error.htm" class="symbol">error</a> <span class="string">"Can't embed values when  interpreting. Value: ~s"</span> value</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> embed-code <span class="paren2">(<span class=""><span class="paren3">(<span class="">pp html-pretty-printer</span>)</span> code</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_error.htm" class="symbol">error</a> <span class="string">"Can't embed code when interpreting. Code: ~s"</span> code</span>)</span></span>)</span><br/></pre>

<p>FIXME окно в тексте
</p>
<p>Использование Условий. И невинность соблюсти, и капитал приобрести. 
</p><blockquote>В оригинале – To have your cake and eat it too – известная английская пословица, смысл который в том, что нельзя одновременно делать две взаимоисключающие вещи. Почти дословный русский аналог – Один пирог два раза не съешь. Видимо автор хотел подчеркнуть гибкость механизма условий Common Lisp – прим. перев.</blockquote>
<p>Альтернативным подходом является использование <code>EVAL</code> для вычисления Lisp выражений в интерпретаторе. Проблема, связанная с данным подходом заключается в том, что <code>EVAL</code> не имеет доступа к лексическому окружению. Таким образом, не существует способа выполнить что-то, подобное следующему:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren2">(<span class=""><span class="paren3">(<span class="">x 10</span>)</span></span>)</span> <span class="paren2">(<span class="">emit-html '<span class="paren3">(<span class=""><span class="keyword">:p</span> x</span>)</span></span>)</span></span>)</span><br/></pre>

<p>если <code>х</code> это лексическая переменная. Символ <code>х</code>, который передается <code>emit-html</code> во время выполнения, не связан с лексической переменной, названной этим же символом. Компилятор Lisp создает ссылки на <code>х</code> в коде для обращения к переменной, но после того, как код скомпилирован, больше нет необходимости в связи между именем <code>х</code> и этой переменной. Это главная причина, по которой когда вы думаете, что <code>EVAL</code> – это решение вашей проблемы, вы вероятно ошибаетесь.
</p>
<p>Как бы то ни было, если бы <code>х</code> был динамической переменной, объявленной с помощью <code>DEFFVAR</code> или <code>DEFPARAMETER</code> (и назван <code>*х*</code> вместо <code>х</code>), то <code>EVAL</code> могла бы получить доступ к ее значению.  То есть, в некоторых ситуациях имеет смысл позволить интерпретатору FOO использовать <code>EVAL</code>. Но использовать <code>EVAL</code> всегда – это плохая идея. Вы можете взять лучшее из каждого подхода, комбинируя идеи использования <code>EVAL</code> и системы условий.
</p>
<p>Сначала определим некоторые классы ошибок, которые вы можете просигнализировать, когда<code>embed-value</code> и <code>embed-code</code> вызываются в интерпретаторе.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defi_5.htm" class="symbol"><i><span class="symbol">define-condition</span></i></a> embedded-lisp-in-interpreter <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_error.htm" class="symbol">error</a></span>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">form <span class="keyword">:initarg</span> <span class="keyword">:form</span> <span class="keyword">:reader</span> form</span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defi_5.htm" class="symbol"><i><span class="symbol">define-condition</span></i></a> value-in-interpreter <span class="paren2">(<span class="">embedded-lisp-in-interpreter</span>)</span> <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:report</span><br/>   <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_lambda.htm" class="symbol"><i><span class="symbol">lambda</span></i></a> <span class="paren4">(<span class="">c s</span>)</span> <br/>     <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> s <span class="string">"Can't embed values when interpreting. Value: ~s"</span> <span class="paren5">(<span class="">form c</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defi_5.htm" class="symbol"><i><span class="symbol">define-condition</span></i></a> code-in-interpreter <span class="paren2">(<span class="">embedded-lisp-in-interpreter</span>)</span> <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:report</span><br/>   <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_lambda.htm" class="symbol"><i><span class="symbol">lambda</span></i></a> <span class="paren4">(<span class="">c s</span>)</span> <br/>     <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> s <span class="string">"Can't embed code when interpreting. Code: ~s"</span> <span class="paren5">(<span class="">form c</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Потом вы можете реализовать <code>embed-value</code> и <code>embed-code</code>, используя сигнализирование этих ошибок и предоставление перезапуска, который вычислит форму с помощью <code>EVAL</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> embed-value <span class="paren2">(<span class=""><span class="paren3">(<span class="">pp html-pretty-printer</span>)</span> value</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_rst_ca.htm" class="symbol">restart-case</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_error.htm" class="symbol">error</a> 'value-in-interpreter <span class="keyword">:form</span> value</span>)</span><br/>    <span class="paren3">(<span class="">evaluate <span class="paren4">(<span class=""/>)</span><br/>      <span class="keyword">:report</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_lambda.htm" class="symbol"><i><span class="symbol">lambda</span></i></a> <span class="paren5">(<span class="">s</span>)</span> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> s <span class="string">"EVAL ~s in null lexical environment."</span> value</span>)</span></span>)</span><br/>      <span class="paren4">(<span class="">raw-string pp <span class="paren5">(<span class="">escape <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_to_.htm" class="symbol">princ-to-string</a> <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_eval.htm" class="symbol">eval</a> value</span>)</span></span>)</span> <span class="special">*escapes*</span></span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a></span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> embed-code <span class="paren2">(<span class=""><span class="paren3">(<span class="">pp html-pretty-printer</span>)</span> code</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_rst_ca.htm" class="symbol">restart-case</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_error.htm" class="symbol">error</a> 'code-in-interpreter <span class="keyword">:form</span> code</span>)</span><br/>    <span class="paren3">(<span class="">evaluate <span class="paren4">(<span class=""/>)</span><br/>      <span class="keyword">:report</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_lambda.htm" class="symbol"><i><span class="symbol">lambda</span></i></a> <span class="paren5">(<span class="">s</span>)</span> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> s <span class="string">"EVAL ~s in null lexical environment."</span> code</span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_eval.htm" class="symbol">eval</a> code</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь вы можете делать что-то подобное этому:
</p><pre>HTML&gt; (defvar *x* 10)<br/>*X*<br/>HTML&gt; (emit-html '(:p *x*))<br/></pre>
<p>и вас выкинет в отладчик с таким сообщением:
</p><pre>Can't embed values when interpreting. Value: *X*<br/>   [Condition of type VALUE-IN-INTERPRETER]<br/>Restarts:<br/>  0: [EVALUATE] EVAL *X* in null lexical environment.<br/>  1: [ABORT] Abort handling SLIME request.<br/>  2: [ABORT] Abort entirely from this process.<br/></pre>
<p>Если вы вызовите перезапуск <code>evaluate</code>, то <code>embed-value</code> вызовет <code>EVAL *x*</code>, получит значение <code>10</code> и сгенерирует следующий HTML:
</p><pre>&lt;p&gt;10&lt;/p&gt;<br/></pre>
<p>Для удобства, вы можете предоставить функции перезапуска – функции, которые вызывают <code>evaluate</code> перезапуск в определенных ситуациях. Функция <code>evaluate</code> перезапуска безусловно вызывает перезапуск, в то время как <code>eval-dynamic-variables</code> и <code>eval-code</code> вызывают ее только если форма в условии является динамической переменной или потенциальный код.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> evaluate <span class="paren2">(<span class="">&amp;optional <a href="http://www.lispworks.com/reference/HyperSpec/Body/e_cnd.htm" class="symbol">condition</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_declar.htm" class="symbol">declare</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/d_ignore.htm" class="symbol">ignore</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/e_cnd.htm" class="symbol">condition</a></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_invo_1.htm" class="symbol">invoke-restart</a> 'evaluate</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> eval-dynamic-variables <span class="paren2">(<span class="">&amp;optional <a href="http://www.lispworks.com/reference/HyperSpec/Body/e_cnd.htm" class="symbol">condition</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_symbol.htm" class="symbol">symbolp</a> <span class="paren5">(<span class="">form <a href="http://www.lispworks.com/reference/HyperSpec/Body/e_cnd.htm" class="symbol">condition</a></span>)</span></span>)</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_boundp.htm" class="symbol">boundp</a> <span class="paren5">(<span class="">form <a href="http://www.lispworks.com/reference/HyperSpec/Body/e_cnd.htm" class="symbol">condition</a></span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">evaluate</span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> eval-code <span class="paren2">(<span class="">&amp;optional <a href="http://www.lispworks.com/reference/HyperSpec/Body/e_cnd.htm" class="symbol">condition</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_consp.htm" class="symbol">consp</a> <span class="paren4">(<span class="">form <a href="http://www.lispworks.com/reference/HyperSpec/Body/e_cnd.htm" class="symbol">condition</a></span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">evaluate</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь вы можете использовать <code>HANDLER-BIND</code> для установки обработчика для автоматического вызова <code>evaluate</code> перезапуска для вас.
</p>
<pre class="code"><p>HTML&gt; <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_handle.htm" class="symbol">handler-bind</a> <span class="paren2">(<span class=""><span class="paren3">(<span class="">value-in-interpreter #'evaluate</span>)</span></span>)</span> <span class="paren2">(<span class="">emit-html '<span class="paren3">(<span class=""><span class="keyword">:p</span> <span class="special">*x*</span></span>)</span></span>)</span></span>)</span><br/>
&lt;p&gt;10&lt;/p&gt;<br/>
T<br/></p></pre>

<p>И наконец, вы можете определить макрос, чтобы предоставить более приятный синтаксис для связывания обработчиков для двух видов ошибок.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmac.htm" class="symbol"><i><span class="symbol">defmacro</span></i></a> <i><span class="symbol">with-dynamic-evaluation</span></i> <span class="paren2">(<span class=""><span class="paren3">(<span class="">&amp;key <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a> code</span>)</span> &amp;body body</span>)</span><br/>  `<span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_handle.htm" class="symbol">handler-bind</a> <span class="paren3">(<span class=""><br/>       ,@<span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a> `<span class="paren5">(<span class=""><span class="paren6">(<span class="">value-in-interpreter #'evaluate</span>)</span></span>)</span></span>)</span><br/>       ,@<span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> code `<span class="paren5">(<span class=""><span class="paren6">(<span class="">code-in-interpreter #'evaluate</span>)</span></span>)</span></span>)</span></span>)</span><br/>     ,@body</span>)</span></span>)</span><br/></pre>

<p>Этот макрос позволяет вам писать следующим образом: 
</p>
<pre class="code"><p>HTML&gt; <span class="paren1">(<span class=""><i><span class="symbol">with-dynamic-evaluation</span></i> <span class="paren2">(<span class=""><span class="keyword">:values</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a></span>)</span> <span class="paren2">(<span class="">emit-html '<span class="paren3">(<span class=""><span class="keyword">:p</span> <span class="special">*x*</span></span>)</span></span>)</span></span>)</span><br/>
&lt;p&gt;10&lt;/p&gt;<br/>
T<br/></p></pre>

<p>FIXME конец таблицы в тексте
</p>
</div><div class="chapter" id="&#x411;&#x430;&#x437;&#x43E;&#x432;&#x43E;&#x435; &#x43F;&#x440;&#x430;&#x432;&#x438;&#x43B;&#x43E; &#x432;&#x44B;&#x447;&#x438;&#x441;&#x43B;&#x435;&#x43D;&#x438;&#x44F;"><h3>Базовое правило вычисления</h3>

<p>Теперь для того, чтобы соединить язык FOO с интерфейсом обработчика, все, что вам нужно, это функция, которая принимает объект и обрабатывает его, вызывая подходящие функции обработчика для генерации HTML. Например, когда дано простое выражение, наподобие такого:
</p><pre>(:p "Foo")<br/></pre>
<p>эта функция может выполнить эту последовательность вызовов обработчика:
</p>
<pre class="code"><span class="paren1">(<span class="">freshline processor</span>)</span><br/><span class="paren1">(<span class="">raw-string processor <span class="string">"&lt;p"</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a></span>)</span><br/><span class="paren1">(<span class="">raw-string processor <span class="string">"&gt;"</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a></span>)</span><br/><span class="paren1">(<span class="">raw-string processor <span class="string">"Foo"</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a></span>)</span><br/><span class="paren1">(<span class="">raw-string processor <span class="string">"&lt;/p&gt;"</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a></span>)</span><br/><span class="paren1">(<span class="">freshline processor</span>)</span><br/></pre>

<p>Теперь вы можете определить простую функцию, которая просто проверяет, является данное выражение разрешенным выражением FOO, и если это так, передать ее функции <code>process-sexp-html</code> для обработки. В следующей главе вы добавите некоторые расширения в эту функцию, чтобы позволить ей обрабатывать макросы и специальные операторы. Но для текущих целей она выглядит так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> process <span class="paren2">(<span class="">processor form</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren3">(<span class="">sexp-html-p form</span>)</span><br/>    <span class="paren3">(<span class="">process-sexp-html processor form</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_error.htm" class="symbol">error</a> <span class="string">"Malformed FOO form: ~s"</span> form</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Функция <code>sexp-html-p</code> определяет, является ли данный объект разрешенным выражением FOO, само-вычисляющимся выражением или корректно сформатированной ячейкой.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> sexp-html-p <span class="paren2">(<span class="">form</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> <span class="paren3">(<span class="">self-evaluating-p form</span>)</span> <span class="paren3">(<span class="">cons-form-p form</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Само-вычисляющиеся выражения обрабатываются просто: преобразуются в строку с помощью <code>PRINC-TO-STRING</code>, а затем экранируются знаки, указанные в переменной <code>*escapes*</code>, которая, как вы помните, изначально связана со значением <code>*element-escapes*</code>. Формы ячеек вы передаете в <code>process-cons-sexp-html</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> process-sexp-html <span class="paren2">(<span class="">processor form</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren3">(<span class="">self-evaluating-p form</span>)</span><br/>    <span class="paren3">(<span class="">raw-string processor <span class="paren4">(<span class="">escape <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_to_.htm" class="symbol">princ-to-string</a> form</span>)</span> <span class="special">*escapes*</span></span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a></span>)</span><br/>    <span class="paren3">(<span class="">process-cons-sexp-html processor form</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Функция <code>process-cons-sexp-html</code> отвечает за вывод открывающего тэга, всех атрибутов, тела и закрывающего тэга. Главная трудность здесь в том, что для генерирования аккуратного HTML, вам нужно выводить дополнительные линии и регулировать отступы согласно типу выводимого элемента. Вы можете разделить все элементы, определенные в HTML, на три категории: блок, параграф, и встроенные. Элементы блоки – такие как тело и <code>ul</code> – выводятся с дополнительными линиями (переводами строк) перед и после открывающих и закрывающих тэгов, и с содержимым, выровненным по одному уровню. Элементы параграфы – такие как <code>p</code>, <code>li</code> и <code>blockquote</code> – выводятся с переводом строки перед открывающим тэгом и после закрывающего тэга. Встроенные элементы просто выводятся в линию. Три следующих параметра являются списками элементов каждого типа:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*block-elements*</span><br/>  '<span class="paren2">(<span class=""><span class="keyword">:body</span> <span class="keyword">:colgroup</span> <span class="keyword">:dl</span> <span class="keyword">:fieldset</span> <span class="keyword">:form</span> <span class="keyword">:head</span> <span class="keyword">:html</span> <span class="keyword">:map</span> <span class="keyword">:noscript</span> <span class="keyword">:object</span><br/>    <span class="keyword">:ol</span> <span class="keyword">:optgroup</span> <span class="keyword">:pre</span> <span class="keyword">:script</span> <span class="keyword">:select</span> <span class="keyword">:style</span> <span class="keyword">:table</span> <span class="keyword">:tbody</span> <span class="keyword">:tfoot</span> <span class="keyword">:thead</span><br/>    <span class="keyword">:tr</span> <span class="keyword">:ul</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*paragraph-elements*</span><br/>  '<span class="paren2">(<span class=""><span class="keyword">:area</span> <span class="keyword">:base</span> <span class="keyword">:blockquote</span> <span class="keyword">:br</span> <span class="keyword">:button</span> <span class="keyword">:caption</span> <span class="keyword">:col</span> <span class="keyword">:dd</span> <span class="keyword">:div</span> <span class="keyword">:dt</span> <span class="keyword">:h1</span><br/>    <span class="keyword">:h2</span> <span class="keyword">:h3</span> <span class="keyword">:h4</span> <span class="keyword">:h5</span> <span class="keyword">:h6</span> <span class="keyword">:hr</span> <span class="keyword">:input</span> <span class="keyword">:li</span> <span class="keyword">:link</span> <span class="keyword">:meta</span> <span class="keyword">:option</span> <span class="keyword">:p</span> <span class="keyword">:param</span><br/>    <span class="keyword">:td</span> <span class="keyword">:textarea</span> <span class="keyword">:th</span> <span class="keyword">:title</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*inline-elements*</span><br/>  '<span class="paren2">(<span class=""><span class="keyword">:a</span> <span class="keyword">:abbr</span> <span class="keyword">:acronym</span> <span class="keyword">:address</span> <span class="keyword">:b</span> <span class="keyword">:bdo</span> <span class="keyword">:big</span> <span class="keyword">:cite</span> <span class="keyword">:code</span> <span class="keyword">:del</span> <span class="keyword">:dfn</span> <span class="keyword">:em</span><br/>    <span class="keyword">:i</span> <span class="keyword">:img</span> <span class="keyword">:ins</span> <span class="keyword">:kbd</span> <span class="keyword">:label</span> <span class="keyword">:legend</span> <span class="keyword">:q</span> <span class="keyword">:samp</span> <span class="keyword">:small</span> <span class="keyword">:span</span> <span class="keyword">:strong</span> <span class="keyword">:sub</span><br/>    <span class="keyword">:sup</span> <span class="keyword">:tt</span> <span class="keyword">:var</span></span>)</span></span>)</span><br/></pre>

<p>Функции <code>block-element-p</code> и <code>paragraph-element-p</code> проверяют, является ли данный тэг членом соответствующего списка.<a class="fn_top" id="fnt__7" href="practical-an-html-generation-library-the-interpreter#fn__7">7)</a>
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> block-element-p <span class="paren2">(<span class="">tag</span>)</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_find_.htm" class="symbol">find</a> tag <span class="special">*block-elements*</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> paragraph-element-p <span class="paren2">(<span class="">tag</span>)</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_find_.htm" class="symbol">find</a> tag <span class="special">*paragraph-elements*</span></span>)</span></span>)</span><br/></pre>

<p>К двум другим категориям со своими собственными предикатами относятся элементы, которые всегда пусты, такие как <code>br</code> и <code>hr</code> и три элемента <code>pre</code>, <code>style</code> и <code>script</code>, в которых положено сохранение разделителей. Формы обрабатываются особо при формировании регулярного HTML (другими словами, не XHTML), так как в них не предполагаются закрывающие тэги. И при выводе трех тэгов, в которых пробелы сохраняются, вы можете временно выключить выравнивание, и тогда <code>pretty printer</code> не добавит каких-либо разделителей, которые не являются частью действительного содержимого элементов.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*empty-elements*</span><br/>  '<span class="paren2">(<span class=""><span class="keyword">:area</span> <span class="keyword">:base</span> <span class="keyword">:br</span> <span class="keyword">:col</span> <span class="keyword">:hr</span> <span class="keyword">:img</span> <span class="keyword">:input</span> <span class="keyword">:link</span> <span class="keyword">:meta</span> <span class="keyword">:param</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*preserve-whitespace-elements*</span> '<span class="paren2">(<span class=""><span class="keyword">:pre</span> <span class="keyword">:script</span> <span class="keyword">:style</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> empty-element-p <span class="paren2">(<span class="">tag</span>)</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_find_.htm" class="symbol">find</a> tag <span class="special">*empty-elements*</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> preserve-whitespace-p <span class="paren2">(<span class="">tag</span>)</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_find_.htm" class="symbol">find</a> tag <span class="special">*preserve-whitespace-elements*</span></span>)</span></span>)</span><br/></pre>

<p>Последнее, что вам понадобится при генерации HTML, это параметр, указывающий, генерируете ли вы XHTML, так как это влияет на то, как вам нужно выводить пустые элементы.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*xhtml*</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a></span>)</span><br/></pre>

<p>Со всей этой информацией, вы готовы к обработке ячеек FOO формы. Вы используете <code>parse-cons-form</code>, чтобы разбить список на три части, символ тэга, возможно пустой список свойств пар ключ/значение атрибутов, и, возможно пустой, список форм тела. Затем вы формируете открывающий тэг, тело и закрывающий тэг с помощью вспомогательных функций <code>emit-open-tag</code>, <code>emit-element-body</code> и <code>emit-close-tag</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> process-cons-sexp-html <span class="paren2">(<span class="">processor form</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm" class="symbol">string=</a> <span class="special">*escapes*</span> <span class="special">*attribute-escapes*</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_error.htm" class="symbol">error</a> <span class="string">"Can't use cons forms in attributes: ~a"</span> form</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_multip.htm" class="symbol">multiple-value-bind</a> <span class="paren3">(<span class="">tag attributes body</span>)</span> <span class="paren3">(<span class="">parse-cons-form form</span>)</span><br/>    <span class="paren3">(<span class="">emit-open-tag     processor tag body attributes</span>)</span><br/>    <span class="paren3">(<span class="">emit-element-body processor tag body</span>)</span><br/>    <span class="paren3">(<span class="">emit-close-tag    processor tag body</span>)</span></span>)</span></span>)</span><br/></pre>

<p>В <code>emit-open-tag</code> вам нужно вызвать <code>freshline</code>, когда это необходимо, и затем вывести атрибуты с помощью <code>emit-attributes</code>. Вам нужно передать тело элемента в функцию <code>emit-open-tag</code>, тогда в случае формирования XHTML, она определит, закончить тэг с <code>/&gt;</code> или <code>&gt;</code>. 
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> emit-open-tag <span class="paren2">(<span class="">processor tag body-p attributes</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> <span class="paren4">(<span class="">paragraph-element-p tag</span>)</span> <span class="paren4">(<span class="">block-element-p tag</span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">freshline processor</span>)</span></span>)</span><br/>  <span class="paren2">(<span class="">raw-string processor <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a> <span class="string">"&lt;~(~a~)"</span> tag</span>)</span></span>)</span><br/>  <span class="paren2">(<span class="">emit-attributes processor attributes</span>)</span><br/>  <span class="paren2">(<span class="">raw-string processor <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <span class="special">*xhtml*</span> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_not.htm" class="symbol">not</a> body-p</span>)</span></span>)</span> <span class="string">"/&gt;"</span> <span class="string">"&gt;"</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>В <code>emit-attributes</code> имена атрибутов не вычисляются, так как они являются ключевыми символами, но вам следует вызывать функцию <code>process</code> верхнего уровня для вычисления значений атрибутов, связывая <code>*escapes*</code> с <code>*attribute-escapes*</code>. Для удобства при спецификации булевских атрибутов, чьи значения должны быть именем атрибута, если это значение равно <code>Т</code> (не любое истинное значение, а именно <code>Т</code>), то тогда вы заменяете значение именем атрибута.<a class="fn_top" id="fnt__8" href="practical-an-html-generation-library-the-interpreter#fn__8">8)</a>
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> emit-attributes <span class="paren2">(<span class="">processor attributes</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for <span class="paren3">(<span class="">k v</span>)</span> on attributes by #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_car_c.htm" class="symbol">cddr</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a><br/>       <span class="paren3">(<span class="">raw-string processor <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a> <span class="string">" ~(~a~)='"</span> k</span>)</span></span>)</span><br/>       <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class=""><span class="special">*escapes*</span> <span class="special">*attribute-escapes*</span></span>)</span></span>)</span><br/>         <span class="paren4">(<span class="">process processor <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> v <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a></span>)</span> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stg_up.htm" class="symbol">string-downcase</a> k</span>)</span> v</span>)</span></span>)</span></span>)</span><br/>       <span class="paren3">(<span class="">raw-string processor <span class="string">"'"</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Формирование тела элемента похоже на формирование значений атрибута: вы можете циклически проходить по телу, вызывая <code>process</code> для вычисления каждого выражения. Основа кода заключена в выводе переводов строк и регулирования отступов подходящим образом в соответствии с типом элемента.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> emit-element-body <span class="paren2">(<span class="">processor tag body</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren3">(<span class="">block-element-p tag</span>)</span><br/>    <span class="paren3">(<span class="">freshline processor</span>)</span><br/>    <span class="paren3">(<span class="">indent processor</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren3">(<span class="">preserve-whitespace-p tag</span>)</span> <span class="paren3">(<span class="">toggle-indenting processor</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_dolist.htm" class="symbol">dolist</a> <span class="paren3">(<span class="">item body</span>)</span>  <span class="paren3">(<span class="">process processor item</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren3">(<span class="">preserve-whitespace-p tag</span>)</span> <span class="paren3">(<span class="">toggle-indenting processor</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren3">(<span class="">block-element-p tag</span>)</span><br/>    <span class="paren3">(<span class="">unindent processor</span>)</span><br/>    <span class="paren3">(<span class="">freshline processor</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Наконец <code>emit-close-tag</code>, как вы вероятно ожидаете, выводит закрывающий тэг (до тех пор, пока в нем нет необходимости, например когда тело пустое и вы либо формируете XHTML, либо элемент является одним из специальных пустых элементов). Независимо от того, выводите ли вы закрывающий тэг, вам нужно вывести завершающий перевод строки для элементов блока и параграфа.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> emit-close-tag <span class="paren2">(<span class="">processor tag body-p</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">unless</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> <span class="special">*xhtml*</span> <span class="paren5">(<span class="">empty-element-p tag</span>)</span></span>)</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_not.htm" class="symbol">not</a> body-p</span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">raw-string processor <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a> <span class="string">"&lt;/~(~a~)&gt;"</span> tag</span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> <span class="paren4">(<span class="">paragraph-element-p tag</span>)</span> <span class="paren4">(<span class="">block-element-p tag</span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">freshline processor</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Функция <code>process</code> – это основа интерпретатора FOO. Чтобы сделать ее немного проще в использовании, вы можете определить функцию <code>emit-html</code>, которая вызывает <code>process</code>, передавая ей <code>html-pretty-printer</code> и форму для вычисления. Вы можете определить и использовать вспомогательную функцию <code>get-pretty-printer</code> для получения <code>pretty printer</code>, которая возвращает текущее значение <code>*html-pretty-printer*</code>, если оно связано; в ином случае, она создает новый экземпляр <code>html-pretty-printer</code> с <code>*html-output*</code> в качестве выходного потока.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> emit-html <span class="paren2">(<span class="">sexp</span>)</span> <span class="paren2">(<span class="">process <span class="paren3">(<span class="">get-pretty-printer</span>)</span> sexp</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> get-pretty-printer <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> <span class="special">*html-pretty-printer*</span><br/>      <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ins.htm" class="symbol">make-instance</a> <br/>       'html-pretty-printer<br/>       <span class="keyword">:printer</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ins.htm" class="symbol">make-instance</a> 'indenting-printer <span class="keyword">:out</span> <span class="special">*html-output*</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>С этой функцией вы можете выводить HTML в <code>*html-output*</code>. Вместо того, чтобы предоставлять переменную <code>*html-output*</code> как часть открытого API FOO, вам следует определить макрос <code>with-html-output</code>, который берет на себя заботу о связывании потока для вас. Он также позволяет вам определить, хотите ли вы использовать аккуратный HTML вывод, выставляя по умолчанию значение переменной <code>*pretty*</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmac.htm" class="symbol"><i><span class="symbol">defmacro</span></i></a> <i><span class="symbol">with-html-output</span></i> <span class="paren2">(<span class=""><span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/t_stream.htm" class="symbol">stream</a> &amp;key <span class="paren4">(<span class="">pretty <span class="special">*pretty*</span></span>)</span></span>)</span> &amp;body body</span>)</span><br/>  `<span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let*</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class=""><span class="special">*html-output*</span> ,<a href="http://www.lispworks.com/reference/HyperSpec/Body/t_stream.htm" class="symbol">stream</a></span>)</span><br/>          <span class="paren4">(<span class=""><span class="special">*pretty*</span> ,pretty</span>)</span></span>)</span><br/>    ,@body</span>)</span></span>)</span><br/></pre>

<p>Итак, если вы хотите использовать <code>emit-html</code> для вывода HTML в файл, вы можете написать следующее:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_open.htm" class="symbol"><i><span class="symbol">with-open-file</span></i></a> <span class="paren2">(<span class="">out <span class="string">"foo.html"</span> <span class="keyword">:direction</span> output</span>)</span><br/>  <span class="paren2">(<span class=""><i><span class="symbol">with-html-output</span></i> <span class="paren3">(<span class="">out <span class="keyword">:pretty</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a></span>)</span><br/>    <span class="paren3">(<span class="">emit-html <span class="special">*some-foo-expression*</span></span>)</span></span>)</span></span>)</span><br/></pre>

</div><div class="chapter" id="&#x427;&#x442;&#x43E; &#x414;&#x430;&#x43B;&#x44C;&#x448;&#x435;?"><h3>Что Дальше?</h3>

<p>В следующей главе вы увидите, как реализовать макрос, который компилирует выражения FOO в Common Lisp, что позволит вам внедрить код генерации HTML прямо в ваши Lisp программы. Вы также расширите язык FOO, чтобы сделать его немного более выразительным, путем добавления специальных операторов и макросов.
</p></div></div><div class="footnotes"><div><a class="fn_bot" id="fn__1" href="practical-an-html-generation-library-the-interpreter#fnt__1">1)</a>Domain specific language - предметно-ориентированный язык программирования, мини-язык созданный специально для некоторых задач - прим. переводчика</div><div><a class="fn_bot" id="fn__2" href="practical-an-html-generation-library-the-interpreter#fnt__2">2)</a>Фактически, он, наверное, слишком выразителен, так как он может также генерировать все виды выходных данных, а не только разрешенные HTML. Конечно, это может быть фичей если вам нужно генерировать HTML который не является абсолютно корректным, для совместимости с легкими Web-браузерами. Кроме того, это обычная практика для обработчиков языков принимать программы, которые синтаксически корректны, но с другой стороны понятно, что это вызовет неопределенное поведение при выполнении.</div><div><a class="fn_bot" id="fn__3" href="practical-an-html-generation-library-the-interpreter#fnt__3">3)</a>Хорошо, почти каждый тэг. Определенные тэги, такие как <code>IMG</code> и <code>BR</code> не имеют закрывающих тегов.  Вы встретитесь с ними в разделе "Базовое правило вычисления".</div><div><a class="fn_bot" id="fn__4" href="practical-an-html-generation-library-the-interpreter#fnt__4">4)</a>По строгому (strict) стандарту языка Common Lisp, ключевые символы не FIXME само-вычисляющиеся, хотя, фактически, они делают вычисление в самих себя. Смотри раздел 3.1.2.1.3 стандарта языка или HyperSpec для подробностей.</div><div><a class="fn_bot" id="fn__5" href="practical-an-html-generation-library-the-interpreter#fnt__5">5)</a>Требование использовать объекты, которые умеет интерпретировать считываетель Lisp не является жёстким. Так как считыватель Lisp сам по себе настраиваемый, вы можете также определить новый синтаксис на уровне считывателя для нового вида объекта. Но в таком подход принесет больше проблем, чем пользы.</div><div><a class="fn_bot" id="fn__6" href="practical-an-html-generation-library-the-interpreter#fnt__6">6)</a>С другой стороны, применяя более чистый объектно-ориентированный подход, мы могли бы определить два класса, скажем <code>'html-pretty-printer</code>' и <code>'html-raw-printer</code>', а затем определить на основе <code>'html-raw-printer</code>' холостую реализацию для методов, которые должны делать что-то, только если *pretty* истинно. Однако, в таком случае, после определения всех холостых методов, вы, в конце концов получите большее количество кода, и вскоре вам надоест проверять, создали ли вы экземпляр нужного класса в нужное время. Но, в общем, замена условных выражений полиморфизмом это оптимальная стратегия.</div><div><a class="fn_bot" id="fn__7" href="practical-an-html-generation-library-the-interpreter#fnt__7">7)</a>Вам не нужен предикат для <code>*inline-elements*</code>, так как вы проверяете всегда только для блока и параграфа элементов. Я включил этот параметр здесь для завершенности.</div><div><a class="fn_bot" id="fn__8" href="practical-an-html-generation-library-the-interpreter#fnt__8">8)</a>В то время как в нотации XHTML требуется, чтобы в логических атрибутах имя совпадало со значением для указания значения true, в HTML также разрешено просто включить имя атрибута без значения, например, <code>&lt;option selected&gt;</code> также как и <code>&lt;option selected='selected'&gt;</code>. Все HTML-4.0 совместимые браузеры должны понимать обе формы, но некоторые легкие браузеры понимают только форму без значения для определенных атрибутов. Если вам нужно генерировать HTML для таких браузеров, вам потребуется исправить <code>emit-attributes</code>, чтобы формировать эти атрибуты немного по-другому.</div></div></div> <table width="100%"> <tbody> <tr> <td width="20%" align="left"> <a href="practical-an-mp3-browser">Предыдущая</a> </td> <td width="60%" align="center"> <a href="index.html">Оглавление</a> </td> <td width="20%" align="right"> <a href="practical-an-html-generation-library-the-compiler">Следующая</a> </td> </tr> </tbody> </table> </div> <div class="bottom">@2009-2013 lisper.ru</div> 
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-7734690-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
 </body> </html>