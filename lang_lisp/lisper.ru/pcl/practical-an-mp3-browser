<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ru" xml:lang="ru"> <head> <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> <meta name="keywords" content="Common Lisp,lisp,лисп" /> <title>Практика. Браузер MP3 файлов</title> <link href="../css/style.css" rel="stylesheet" type="text/css" /><link href="../css/colorize.css" rel="stylesheet" type="text/css" />  </head> <body> <div class="top"> <div id="login"> <a href="http://lisper.ru/register">Регистрация</a> | <a href="http://lisper.ru/login?done=/pcl/practical-an-mp3-browser">Войти</a> </div> </div> <div id="caution"> <img alt="Lisp — программируемый язык программирования" src="../image/gecko.png" /> <a href="http://www.vkusnoserver.ru/" target="_blank" style="float: right;"> <img src="../vkusnoserver.png" /> </a> </div> <div id="mainmenu"> <ul> <li> <a href="http://lisper.ru/">Главная</a> </li><li> <a href="http://lisper.ru/articles/">Статьи</a> </li><li> <a href="http://lisper.ru/planet/">Планета</a> </li><li> <a href="http://lisper.ru/forum/">Форум</a> </li><li> <a href="http://lisper.ru/apps/">Сервисы</a> </li><li> <a href="index.html">Practical Common Lisp</a> </li><li> <a href="http://lisper.ru/wiki/">Wiki</a> </li><li> <a href="http://lisper.ru/files/">Файлы</a> </li><li> <a href="http://lisper.ru/search">Поиск</a> </li> </ul> </div> <div id="content"> <table width="100%"> <tbody> <tr> <td width="20%" align="left"> <a href="practical-a-shoutcast-server">Предыдущая</a> </td> <td width="60%" align="center"> <a href="index.html">Оглавление</a> </td> <td width="20%" align="right"> <a href="practical-an-html-generation-library-the-interpreter">Следующая</a> </td> </tr> </tbody> </table> <div class="article"><div class="toc"><div class="toc-header">Содержание</div><div class="toc-body"><ul><li><div><a href="practical-an-mp3-browser#29. &#x41F;&#x440;&#x430;&#x43A;&#x442;&#x438;&#x43A;&#x430;. &#x411;&#x440;&#x430;&#x443;&#x437;&#x435;&#x440; MP3 &#x444;&#x430;&#x439;&#x43B;&#x43E;&#x432;">29. Практика. Браузер MP3 файлов</a><ul><li><div><a href="practical-an-mp3-browser#&#x421;&#x43F;&#x438;&#x441;&#x43A;&#x438; &#x43F;&#x435;&#x441;&#x435;&#x43D;">Списки песен</a></div></li><li><div><a href="practical-an-mp3-browser#&#x421;&#x43F;&#x438;&#x441;&#x43A;&#x438; &#x43F;&#x435;&#x441;&#x435;&#x43D; &#x43A;&#x430;&#x43A; &#x438;&#x441;&#x442;&#x43E;&#x447;&#x43D;&#x438;&#x43A;&#x438; &#x43F;&#x435;&#x441;&#x435;&#x43D;">Списки песен как источники песен</a></div></li><li><div><a href="practical-an-mp3-browser#&#x418;&#x437;&#x43C;&#x435;&#x43D;&#x435;&#x43D;&#x438;&#x435; &#x441;&#x43F;&#x438;&#x441;&#x43A;&#x430; &#x43F;&#x435;&#x441;&#x435;&#x43D;">Изменение списка песен</a></div></li><li><div><a href="practical-an-mp3-browser#Query Parameter Types">Query Parameter Types</a></div></li><li><div><a href="practical-an-mp3-browser#Boilerplate HTML">Boilerplate HTML</a></div></li><li><div><a href="practical-an-mp3-browser#The Browse Page">The Browse Page</a></div></li><li><div><a href="practical-an-mp3-browser#The Playlist">The Playlist</a></div></li><li><div><a href="practical-an-mp3-browser#Finding a Playlist">Finding a Playlist</a></div></li><li><div><a href="practical-an-mp3-browser#Running the App">Running the App</a></div></li></ul></div></li></ul></div></div>
<div class="chapter" id="29. &#x41F;&#x440;&#x430;&#x43A;&#x442;&#x438;&#x43A;&#x430;. &#x411;&#x440;&#x430;&#x443;&#x437;&#x435;&#x440; MP3 &#x444;&#x430;&#x439;&#x43B;&#x43E;&#x432;"><h3>29. Практика. Браузер MP3 файлов</h3>

<p>Заключительным шагом в построении приложения для потокового вещания MP3 является разработка  Web-интерфейса, который позволит пользователям найти песни, которые они хотят слушать, и добавлять их в списки песен которые будут использоваться сервером Shoutcast при получении запроса от  MP3-клиента пользователя.  Для этого компонента приложения вы соберете вместе несколько компонентов, разработанных в предыдущих главах: базу данных MP3, макрос <code>define-url-function</code> из главы Chapter 26 и, конечно, сам сервер Shoutcast.
</p>
<div class="chapter" id="&#x421;&#x43F;&#x438;&#x441;&#x43A;&#x438; &#x43F;&#x435;&#x441;&#x435;&#x43D;"><h3>Списки песен</h3>

<p>Основная идея интерфейса заключается в том, что каждый MP3-клиент, который подключается к серверу Shoutcast, получает отдельный список песен, который служит источником песен для сервера  Shoutcast.  Список песен также реализует дополнительные функции, не нужные серверу Shoutcast: используя Web-интерфейс, пользователь сможет добавлять песни в список, удалять песни из него, или изменять порядок проигрывания путем сортировки и перемешивания.
</p>
<p>Вы можете определить класс для представления списка песен следующим образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defcla.htm" class="symbol"><i><span class="symbol">defclass</span></i></a> playlist <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">id           <span class="keyword">:accessor</span> id           <span class="keyword">:initarg</span> <span class="keyword">:id</span></span>)</span><br/>   <span class="paren3">(<span class="">songs-table  <span class="keyword">:accessor</span> songs-table  <span class="keyword">:initform</span> <span class="paren4">(<span class="">make-playlist-table</span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">current-song <span class="keyword">:accessor</span> current-song <span class="keyword">:initform</span> <span class="special">*empty-playlist-song*</span></span>)</span><br/>   <span class="paren3">(<span class="">current-idx  <span class="keyword">:accessor</span> current-idx  <span class="keyword">:initform</span> 0</span>)</span><br/>   <span class="paren3">(<span class="">ordering     <span class="keyword">:accessor</span> ordering     <span class="keyword">:initform</span> <span class="keyword">:album</span></span>)</span><br/>   <span class="paren3">(<span class="">shuffle      <span class="keyword">:accessor</span> shuffle      <span class="keyword">:initform</span> <span class="keyword">:none</span></span>)</span><br/>   <span class="paren3">(<span class="">repeat       <span class="keyword">:accessor</span> repeat       <span class="keyword">:initform</span> <span class="keyword">:none</span></span>)</span><br/>   <span class="paren3">(<span class="">user-agent   <span class="keyword">:accessor</span> user-agent   <span class="keyword">:initform</span> <span class="string">"Unknown"</span></span>)</span><br/>   <span class="paren3">(<span class="">lock         <span class="keyword">:reader</span>   lock         <span class="keyword">:initform</span> <span class="paren4">(<span class="">make-process-lock</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Идентификатор списка песен (<code>id</code>) является ключем, который вы извлекаете из объекта <code>request</code>, переданного <code>find-song-source</code> когда происходит поиск списка песен.  Вам не нужно сохранять его в объекте <code>playlist</code>, но это сделает отладку более простой, если вы сможете для произвольного объекта <code>playlist</code> определить его идентификатор.
</p>
<p>Самым главным объектом <code>playlist</code> является слот <code>songs-table</code>, который будет хранить объект  <code>table</code>.  Схема этого объекта будет той же самой, что и схема для основной базы данных MP3.  Функция <code>make-playlist-table</code>, которую вы используете для инициализации <code>songs-table</code>, очень проста:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> make-playlist-table <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ins.htm" class="symbol">make-instance</a> 'table <span class="keyword">:schema</span> <span class="special">*mp3-schema*</span></span>)</span></span>)</span><br/></pre>

<p>FIXME Start of block
</p>
<p>The Package
</p>
<p>Вы можете определить пакет для кода данной главы с помощью следующего определения <code>DEFPACKAGE</code>:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpkg.htm" class="symbol"><i><span class="symbol">defpackage</span></i></a> <span class="keyword">:com.gigamonkeys.mp3-browser</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:use</span> <span class="keyword">:common-lisp</span><br/>        <span class="keyword">:net.aserve</span><br/>        <span class="keyword">:com.gigamonkeys.html</span><br/>        <span class="keyword">:com.gigamonkeys.shoutcast</span><br/>        <span class="keyword">:com.gigamonkeys.url-function</span><br/>        <span class="keyword">:com.gigamonkeys.mp3-database</span><br/>        <span class="keyword">:com.gigamonkeys.id3v2</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:import-from</span> <span class="keyword">:acl-socket</span><br/>                <span class="keyword">:ipaddr-to-dotted</span><br/>                <span class="keyword">:remote-host</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:import-from</span> <span class="keyword">:multiprocessing</span><br/>                <span class="keyword">:make-process-lock</span><br/>                <span class="keyword">:with-process-lock</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:export</span> <span class="keyword">:start-mp3-browser</span></span>)</span></span>)</span><br/></pre>

<p>FIXME End of block
</p>
<p>Поскольку это высокоуровневое приложение, оно использует очень много низкоуровневых пакетов.  Оно также импортирует три символа из пакета <code>ACL-SOCKET</code> и два из пакета <code>MULTIPROCESSING</code>, поскольку нам необходимы только эти пять символов, и не нужны остальные 139 символово, экспортируемые из этих пакетов.
</p>
<p>Из-за сохранения списка песен в виде таблицы, вы можете использовать функции работы с базами данных из главы 27 для работы со списком песен: вы можете добавлять данные в список песен с помощью <code>insert-row</code>, удалять песни с помощью <code>delete-rows</code>, и изменять порядок проигрывания с помощью <code>sort-rows</code> и <code>shuffle-table</code>.
</p>
<p>Слоты <code>current-song</code> и <code>current-idx</code> используются для хранения информации о том, какая песня сейчас проигрывается: <code>current-song</code> – это объект  <code>song</code>,  в то время как  <code>current-idx</code> является индексом строки в <code>songs-table</code>, относящейся к текущей песне. В разделе "Изменение списка песен" вы увидите как сделать так, чтобы <code>current-song</code> обновлялась когда изменяется <code>current-idx</code>.
</p>
<p>Слоты <code>ordering</code> и <code>shuffle</code> хранят информацию о том, как песни в <code>songs-table</code> должны быть упорядочены.  Слот <code>ordering</code> хранит ключевое слово, которое описывает то, как таблица <code>songs-table</code> должна быть отсортирована, когда она не перемешана. Допустимыми значениями являются <code>:genre</code>, <code>:artist</code>, <code>:album</code> и <code>:song</code>.  Слот <code>shuffle</code> содержит одно из ключевых слов <code>:none</code>, <code>:song</code> или <code>:album</code>, которые определяют как песни в <code>songs-table</code> будут перемешаны, если это нужно.
</p>
<p>Слот <code>repeat</code> также содержит одно ключевых слов <code>:none</code>, <code>:song</code> или <code>:all</code>, которые указывают режим повторения песен в списке проигрывания.  Если <code>repeat</code> равно <code>:none</code>, то после проигрывания последней песни из списка <code>songs-table</code>, <code>current-song</code> переключается на значение по умолчанию. Когда <code>repeat</code> равно <code>:song</code>, то все время проигрывается одна и та же песня из <code>current-song</code>.  И если установлено значение <code>:all</code>, то после проигрывания последней песни, сервер начинает играть с начала списка.
</p>
<p>Слот <code>user-agent</code> хранит значение заголовка <code>User-Agent</code>, который отправлен MP3-клиентом при запросе потока.  Вам нужно его держать исключительно для использования в Web-интерфейсе – заголовок <code>User-Agent</code> идентифицирует программу, которая выполнила запрос, так что вы можете отображать это значение на странице, на который перечислены все списки песен, так что вам будет легче видеть какой из списков песен используется с каким соединением, если к серверу подключено несколько клиентов.
</p>
<p>И в заключение, слот <code>lock</code> хранит блокировку процесса (FIXME lock) созданную с помощью функции <code>make-process-lock</code>, которая является частью пакета <code>MULTIPROCESSING</code> из состава  Allegro.  Вы будете использовать эту блокировку в некоторых функциях, которые изменяют список песен, так что вы будете уверены в том, что только один поток выполнения выполняет изменения списка.  Вы можете определить следующий макрос, созданный на основе макроса <code>with-process-lock</code> из пакета <code>MULTIPROCESSING</code>, чтобы облегчить написание кода, который должен быть выполнен при захвате блокировки данного списка песен:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmac.htm" class="symbol"><i><span class="symbol">defmacro</span></i></a> <i><span class="symbol">with-playlist-locked</span></i> <span class="paren2">(<span class=""><span class="paren3">(<span class="">playlist</span>)</span> &amp;body body</span>)</span><br/>  `<span class="paren2">(<span class=""><i><span class="symbol">with-process-lock</span></i> <span class="paren3">(<span class=""><span class="paren4">(<span class="">lock ,playlist</span>)</span></span>)</span><br/>     ,@body</span>)</span></span>)</span><br/></pre>

<p>Макрос <code>with-process-lock</code> получает эксклюзивный доступ к блокировке процесса, и затем выполняет переданные выражения, освобождая блокировку после их выполнения.  По умолчанию,  <code>with-process-lock</code> разрешает выполнять рекурсивные блокировки, что значит, что один и тот же поток выполнения может захватывать одну и ту же блокировку несколько раз.
</p>
</div><div class="chapter" id="&#x421;&#x43F;&#x438;&#x441;&#x43A;&#x438; &#x43F;&#x435;&#x441;&#x435;&#x43D; &#x43A;&#x430;&#x43A; &#x438;&#x441;&#x442;&#x43E;&#x447;&#x43D;&#x438;&#x43A;&#x438; &#x43F;&#x435;&#x441;&#x435;&#x43D;"><h3>Списки песен как источники песен</h3>

<p>Для того, чтобы использовать списки песен в качестве источника песен для сервера Shoutcast, вам нужно реализовать метод для обобщенной функции <code>find-song-source</code> из главы  28.  Поскольку у вас будет множество списков песен, то вам необходим способ нахождения нужного списка для конкретного клиента, подключенного к серверу.  Первая часть работы  достаточно легка – вы можете определить переменную, которая будет хранить хэш-таблицу (с операцией сравнения <code>EQUAL</code>), которую вы сможете использовать для отображения из некоторого идентификатора в список песен.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defvar</span></i></a> <span class="special">*playlists*</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_has.htm" class="symbol">make-hash-table</a> <span class="keyword">:test</span> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_equal.htm" class="symbol">equal</a></span>)</span></span>)</span><br/></pre>

<p>Вы также можете определить блокировку процесса для защиты доступа к этой хэш-таблице, например, вот так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*playlists-lock*</span> <span class="paren2">(<span class="">make-process-lock <span class="keyword">:name</span> <span class="string">"playlists-lock"</span></span>)</span></span>)</span><br/></pre>

<p>Затем определим функцию, которая производит поиск списка песен по заданному идентификатору, создавая новый список песен, если это необходимо, и используя <code>with-process-lock</code> для обеспечения доступа к хэш-таблице только из одного потока выполнения.<a class="fn_top" id="fnt__1" href="practical-an-mp3-browser#fn__1">1)</a>
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> lookup-playlist <span class="paren2">(<span class="">id</span>)</span><br/>  <span class="paren2">(<span class=""><i><span class="symbol">with-process-lock</span></i> <span class="paren3">(<span class=""><span class="special">*playlists-lock*</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_gethas.htm" class="symbol">gethash</a> id <span class="special">*playlists*</span></span>)</span><br/>        <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_gethas.htm" class="symbol">gethash</a> id <span class="special">*playlists*</span></span>)</span> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ins.htm" class="symbol">make-instance</a> 'playlist <span class="keyword">:id</span> id</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Затем вы можете реализовать <code>find-song-source</code> на основе этой функции, а также функцию <code>playlist-id</code>, которая получает объект <code>request</code> от AllegroServe и возвращает соответствующий идентификатор списка песен.  В функции <code>find-song-source</code> вы также получаете строку <code>User-Agent</code> из объекта <code>request</code>, и сохраняете ее в объекте <code>playlist</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> find-song-source <span class="paren2">(<span class=""><span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> 'playlist</span>)</span></span>)</span> request</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">playlist <span class="paren5">(<span class="">lookup-playlist <span class="paren6">(<span class="">playlist-id request</span>)</span></span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><i><span class="symbol">with-playlist-locked</span></i> <span class="paren4">(<span class="">playlist</span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren5">(<span class=""><span class="paren6">(<span class="">user-agent <span class="paren1">(<span class="">header-slot-value request <span class="keyword">:user-agent</span></span>)</span></span>)</span></span>)</span><br/>        <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> user-agent <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren1">(<span class="">user-agent playlist</span>)</span> user-agent</span>)</span></span>)</span></span>)</span></span>)</span><br/>    playlist</span>)</span></span>)</span><br/></pre>

<p>Хитрость заключается в том, как вы реализуете функцию <code>playlist-id</code>, которая извлекает идентификатор из объекта <code>request</code>.  У вас имеется несколько возможностей, каждая из которых по разному влияет на интерфейс пользователя.  Вы можете извлечь нужную информацию из объекта <code>request</code>, но поскольку вы решили идентифицировать клиента, то вам нужен какой-то способ связывания пользователя веб-интерфейса с соответствующим списком песен.
</p>
<p>В данный момент вы можете выбрать тот подход, который "просто работает", поскольку мы подразумеваем, что есть только один MP3-клиент на компьютере, подключающемся к серверу, также как и пользователь, работающий с веб-интерфейсом с компьютера, на котором запущен MP3-клиент: вы будете использовать IP-адрес компьютера пользователя в качестве идентификатор.  Таким образом вы можете найти соответствующий список песен для запроса, вне зависимости от того, пришел запрос от MP3-клиента или от веб-браузера.  Однако, вы обеспечите в веб-интерфейсе возможность выбора другого списка песен, так что единственным ограничением будет то, что только один MP3-клиент может быть доступен на компьютере пользователя.<a class="fn_top" id="fnt__2" href="practical-an-mp3-browser#fn__2">2)</a>  Реализация <code>playlist-id</code> выглядит примерно так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> playlist-id <span class="paren2">(<span class="">request</span>)</span><br/>  <span class="paren2">(<span class="">ipaddr-to-dotted <span class="paren3">(<span class="">remote-host <span class="paren4">(<span class="">request-socket request</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Функция <code>request-socket</code> является частью AllegroServe, а <code>remote-host</code> и <code>ipaddr-to-dotted</code> являются частью библиотеки Allegro для работы с сокетами.
</p>
<p>Чтобы позволить использовать списки песен в качестве источников песен для сервера Shoutcast, вам необходимо определить методы <code>current-song</code>, <code>still-current-p</code> и <code>maybe-move-to-next-song</code>, которые специализируют параметр <code>source</code> для списка песен. Метод <code>current-song</code> уже имеет эту функциональность: путем определения процедуры доступа <code>current-song</code> для слота <code>eponymous</code>, вы автоматически получите метод <code>current-song</code> специализированный для списков песен, который будет возвращать значение этого слота. Однако, для того, чтобы сделать доступ к спискам песен безопасным, вам необходимо блокировать доступ к списку песен до доступа к слоту <code>current-song</code>.  В этом случае, самым простым способом будет определение метода <code>:around</code>, например, вот так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> current-song <span class="keyword">:around</span> <span class="paren2">(<span class=""><span class="paren3">(<span class="">playlist playlist</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><i><span class="symbol">with-playlist-locked</span></i> <span class="paren3">(<span class="">playlist</span>)</span> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_call_n.htm" class="symbol">call-next-method</a></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Реализация <code>still-current-p</code> также достаточно простая, предполагая, что мы можем быть уверены, что <code>current-song</code> будет обновлен на новый объект <code>song</code> только тогда, когда текущая песня действительно сменится.  Вам снова нужно захватить блокировку процесса для того, чтобы быть уверенным в консистентности состояния списка песен.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> still-current-p <span class="paren2">(<span class="">song <span class="paren3">(<span class="">playlist playlist</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><i><span class="symbol">with-playlist-locked</span></i> <span class="paren3">(<span class="">playlist</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> song <span class="paren4">(<span class="">current-song playlist</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Прием заключается в том, чтобы быть уверенным, что поле <code>current-song</code> будет обновлено в нужное время.  Однако, текущая песня может быть изменена несколькими способами.  Наиболее очевидным является вызов <code>maybe-move-to-next-song</code> сервером  Shoutcast.  Но текущая песня также может быть изменена в том случае, когда песни добавляются к списку проигрывания; когда сервер  Shoutcast исчерпывает список доступных песен или когда изменяется режим повторения в списке проигрывания.
</p>
<p>Rather than trying to write code specific to every situation to determine whether to update <code>current-song</code>, you can define a function, <code>update-current-if-necessary</code>, that updates <code>current-song</code> if the song object in <code>current-song</code> no longer matches the file that the <code>current-idx</code> slot says should be playing. Then, if you call this function after any manipulation of the playlist that could possibly put those two slots out of sync, you're sure to keep <code>current-song</code> set properly. Here are <code>update-current-if-necessary</code> and its helper functions:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> update-current-if-necessary <span class="paren2">(<span class="">playlist</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">unless</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_equal.htm" class="symbol">equal</a> <span class="paren4">(<span class="">file <span class="paren5">(<span class="">current-song playlist</span>)</span></span>)</span><br/>                 <span class="paren4">(<span class="">file-for-current-idx playlist</span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">reset-current-song playlist</span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> file-for-current-idx <span class="paren2">(<span class="">playlist</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren3">(<span class="">at-end-p playlist</span>)</span><br/>    <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a><br/>    <span class="paren3">(<span class="">column-value <span class="paren4">(<span class="">nth-row <span class="paren5">(<span class="">current-idx playlist</span>)</span> <span class="paren5">(<span class="">songs-table playlist</span>)</span></span>)</span> <span class="keyword">:file</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> at-end-p <span class="paren2">(<span class="">playlist</span>)</span><br/>  <span class="paren2">(<span class="">&gt;= <span class="paren3">(<span class="">current-idx playlist</span>)</span> <span class="paren3">(<span class="">table-size <span class="paren4">(<span class="">songs-table playlist</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>You don't need to add locking to these functions since they'll be called only from functions that will take care of locking the playlist first.
</p>
<p>The function <code>reset-current-song</code> introduces one more wrinkle: because you want the playlist to provide an endless stream of MP3s to the client, you don't want to ever set <code>current-song</code> to <code>NIL</code>. Instead, when a playlist runs out of songs to play–when <code>songs-table</code> is empty or after the last song has been played and repeat is set to <code>:none</code>–then you need to set current-song to a special song whose file is an MP3 of silence<a class="fn_top" id="fnt__3" href="practical-an-mp3-browser#fn__3">3)</a> and whose title explains why no music is playing. Here's some code to define two parameters, <code>*empty-playlist-song*</code> and <code>*end-of-playlist-song*</code>, each set to a song with the file named by <code>*silence-mp3*</code> as their file and an appropriate title:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*silence-mp3*</span> ...</span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> make-silent-song <span class="paren2">(<span class="">title &amp;optional <span class="paren3">(<span class="">file <span class="special">*silence-mp3*</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ins.htm" class="symbol">make-instance</a><br/>   'song <br/>   <span class="keyword">:file</span> file<br/>   <span class="keyword">:title</span> title<br/>   <span class="keyword">:id3-size</span> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren4">(<span class="">id3-p file</span>)</span> <span class="paren4">(<span class="">size <span class="paren5">(<span class="">read-id3 file</span>)</span></span>)</span> 0</span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*empty-playlist-song*</span> <span class="paren2">(<span class="">make-silent-song <span class="string">"Playlist empty."</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*end-of-playlist-song*</span> <span class="paren2">(<span class="">make-silent-song <span class="string">"At end of playlist."</span></span>)</span></span>)</span><br/></pre>

<p><code>reset-current-song</code> uses these parameters when the <code>current-idx</code> doesn't point to a row in <code>songs-table</code>. Otherwise, it sets <code>current-song</code> to a song object representing the current row.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> reset-current-song <span class="paren2">(<span class="">playlist</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a><br/>   <span class="paren3">(<span class="">current-song playlist</span>)</span> <br/>   <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_cond.htm" class="symbol"><i><span class="symbol">cond</span></i></a><br/>     <span class="paren4">(<span class=""><span class="paren5">(<span class="">empty-p playlist</span>)</span> <span class="special">*empty-playlist-song*</span></span>)</span><br/>     <span class="paren4">(<span class=""><span class="paren5">(<span class="">at-end-p playlist</span>)</span> <span class="special">*end-of-playlist-song*</span></span>)</span><br/>     <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="paren5">(<span class="">row-&gt;song <span class="paren6">(<span class="">nth-row <span class="paren1">(<span class="">current-idx playlist</span>)</span> <span class="paren1">(<span class="">songs-table playlist</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> row-&gt;song <span class="paren2">(<span class="">song-db-entry</span>)</span><br/>  <span class="paren2">(<span class=""><i><span class="symbol">with-column-values</span></i> <span class="paren3">(<span class="">file song artist album id3-size</span>)</span> song-db-entry<br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ins.htm" class="symbol">make-instance</a><br/>     'song<br/>     <span class="keyword">:file</span> file<br/>     <span class="keyword">:title</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a> <span class="string">"~a by ~a from ~a"</span> song artist album</span>)</span><br/>     <span class="keyword">:id3-size</span> id3-size</span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> empty-p <span class="paren2">(<span class="">playlist</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_zerop.htm" class="symbol">zerop</a> <span class="paren3">(<span class="">table-size <span class="paren4">(<span class="">songs-table playlist</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Now, at last, you can implement the method on <code>maybe-move-to-next-song</code> that moves <code>current-idx</code> to its next value, based on the playlist's repeat mode, and then calls <code>update-current-if-necessary</code>. You don't change <code>current-idx</code> when it's already at the end of the playlist because you want it to keep its current value, so it'll point at the next song you add to the playlist. This function must lock the playlist before manipulating it since it's called by the Shoutcast server code, which doesn't do any locking.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> maybe-move-to-next-song <span class="paren2">(<span class="">song <span class="paren3">(<span class="">playlist playlist</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><i><span class="symbol">with-playlist-locked</span></i> <span class="paren3">(<span class="">playlist</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren4">(<span class="">still-current-p song playlist</span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">unless</a> <span class="paren5">(<span class="">at-end-p playlist</span>)</span><br/>        <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> <span class="paren6">(<span class="">repeat playlist</span>)</span><br/>          <span class="paren6">(<span class=""><span class="keyword">:song</span></span>)</span> <span class="comment">; nothing changes<br/></span>          <span class="paren6">(<span class=""><span class="keyword">:none</span> <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> <span class="paren2">(<span class="">current-idx playlist</span>)</span></span>)</span></span>)</span><br/>          <span class="paren6">(<span class=""><span class="keyword">:all</span>  <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren2">(<span class="">current-idx playlist</span>)</span><br/>                       <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_mod.htm" class="symbol">mod</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> <span class="paren4">(<span class="">current-idx playlist</span>)</span></span>)</span><br/>                            <span class="paren3">(<span class="">table-size <span class="paren4">(<span class="">songs-table playlist</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class="">update-current-if-necessary playlist</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

</div><div class="chapter" id="&#x418;&#x437;&#x43C;&#x435;&#x43D;&#x435;&#x43D;&#x438;&#x435; &#x441;&#x43F;&#x438;&#x441;&#x43A;&#x430; &#x43F;&#x435;&#x441;&#x435;&#x43D;"><h3>Изменение списка песен</h3>

<p>The rest of the playlist code is functions used by the Web interface to manipulate playlist objects, including adding and deleting songs, sorting and shuffling, and setting the repeat mode. As in the helper functions in the previous section, you don't need to worry about locking in these functions because, as you'll see, the lock will be acquired in the Web interface function that calls these.
</p>
<p>Adding and deleting is mostly a question of manipulating the songs-table. The only extra work you have to do is to keep the current-song and current-idx in sync. For instance, whenever the playlist is empty, its current-idx will be zero, and the current-song will be the *empty-playlist-song*. If you add a song to an empty playlist, then the index of zero is now in bounds, and you should change the current-song to the newly added song. By the same token, when you've played all the songs in a playlist and current-song is *end-of-playlist-song*, adding a song should cause current-song to be reset. All this really means, though, is that you need to call update-current-if-necessary at the appropriate points.
</p>
<p>Adding songs to a playlist is a bit involved because of the way the Web interface communicates which songs to add. For reasons I'll discuss in the next section, the Web interface code can't just give you a simple set of criteria to use in selecting songs from the database. Instead, it gives you the name of a column and a list of values, and you're supposed to add all the songs from the main database where the given column has a value in the list of values. Thus, to add the right songs, you need to first build a table object containing the desired values, which you can then use with an in query against the song database. So, add-songs looks like this:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> add-songs <span class="paren2">(<span class="">playlist column-name <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">table <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ins.htm" class="symbol">make-instance</a><br/>                'table <br/>                <span class="keyword">:schema</span> <span class="paren6">(<span class="">extract-schema <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> column-name</span>)</span> <span class="paren1">(<span class="">schema <span class="special">*mp3s*</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_dolist.htm" class="symbol">dolist</a> <span class="paren4">(<span class="">v <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a></span>)</span> <span class="paren4">(<span class="">insert-row <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> column-name v</span>)</span> table</span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">do-rows <span class="paren4">(<span class="">row <span class="paren5">(<span class="">select <span class="keyword">:from</span> <span class="special">*mp3s*</span> <span class="keyword">:where</span> <span class="paren6">(<span class="">in column-name table</span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class="">insert-row row <span class="paren5">(<span class="">songs-table playlist</span>)</span></span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class="">update-current-if-necessary playlist</span>)</span></span>)</span><br/></pre>

<p>Deleting songs is a bit simpler; you just need to be able to delete songs from the songs-table that match particular criteria–either a particular song or all songs in a particular genre, by a particular artist, or from a particular album. So, you can provide a delete-songs function that takes keyword/value pairs, which are used to construct a matching :where clause you can pass to the delete-rows database function.
</p>
<p>Another complication that arises when deleting songs is that current-idx may need to change. Assuming the current song isn't one of the ones just deleted, you'd like it to remain the current song. But if songs before it in songs-table are deleted, it'll be in a different position in the table after the delete. So after a call to delete-rows, you need to look for the row containing the current song and reset current-idx. If the current song has itself been deleted, then, for lack of anything better to do, you can reset current-idx to zero. After updating current-idx, calling update-current-if-necessary will take care of updating current-song. And if current-idx changed but still points at the same song, current-song will be left alone.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> delete-songs <span class="paren2">(<span class="">playlist &amp;rest names-and-values</span>)</span><br/>  <span class="paren2">(<span class="">delete-rows<br/>   <span class="keyword">:from</span> <span class="paren3">(<span class="">songs-table playlist</span>)</span><br/>   <span class="keyword">:where</span> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_apply.htm" class="symbol">apply</a> #'matching <span class="paren4">(<span class="">songs-table playlist</span>)</span> names-and-values</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren3">(<span class="">current-idx playlist</span>)</span> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> <span class="paren4">(<span class="">position-of-current playlist</span>)</span> 0</span>)</span></span>)</span><br/>  <span class="paren2">(<span class="">update-current-if-necessary playlist</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> position-of-current <span class="paren2">(<span class="">playlist</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let*</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">table <span class="paren5">(<span class="">songs-table playlist</span>)</span></span>)</span><br/>         <span class="paren4">(<span class="">matcher <span class="paren5">(<span class="">matching table <span class="keyword">:file</span> <span class="paren6">(<span class="">file <span class="paren1">(<span class="">current-song playlist</span>)</span></span>)</span></span>)</span></span>)</span><br/>         <span class="paren4">(<span class="">pos 0</span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">do-rows <span class="paren4">(<span class="">row table</span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_funcal.htm" class="symbol">funcall</a> matcher row</span>)</span><br/>        <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_ret_fr.htm" class="symbol"><i><span class="symbol">return-from</span></i></a> position-of-current pos</span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> pos</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>You can also provide a function to completely clear the playlist, which uses delete-all-rows and doesn't have to worry about finding the current song since it has obviously been deleted. The call to update-current-if-necessary will take care of setting current-song to NIL.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> clear-playlist <span class="paren2">(<span class="">playlist</span>)</span><br/>  <span class="paren2">(<span class="">delete-all-rows <span class="paren3">(<span class="">songs-table playlist</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren3">(<span class="">current-idx playlist</span>)</span> 0</span>)</span><br/>  <span class="paren2">(<span class="">update-current-if-necessary playlist</span>)</span></span>)</span><br/></pre>

<p>Sorting and shuffling the playlist are related in that the playlist is always either sorted or shuffled. The shuffle slot says whether the playlist should be shuffled and if so how. If it's set to :none, then the playlist is ordered according to the value in the ordering slot. When shuffle is :song, the playlist will be randomly permuted. And when it's set to :album, the list of albums is randomly permuted, but the songs within each album are listed in track order. Thus, the sort-playlist function, which will be called by the Web interface code whenever the user selects a new ordering, needs to set ordering to the desired ordering and set shuffle to :none before calling order-playlist, which actually does the sort. As in delete-songs, you need to use position-of-current to reset current-idx to the new location of the current song. However, this time you don't need to call update-current-if-necessary since you know the current song is still in the table.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> sort-playlist <span class="paren2">(<span class="">playlist ordering</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren3">(<span class="">ordering playlist</span>)</span> ordering</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren3">(<span class="">shuffle playlist</span>)</span> <span class="keyword">:none</span></span>)</span><br/>  <span class="paren2">(<span class="">order-playlist playlist</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren3">(<span class="">current-idx playlist</span>)</span> <span class="paren3">(<span class="">position-of-current playlist</span>)</span></span>)</span></span>)</span><br/></pre>

<p>In order-playlist, you can use the database function sort-rows to actually perform the sort, passing a list of columns to sort by based on the value of ordering.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> order-playlist <span class="paren2">(<span class="">playlist</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_apply.htm" class="symbol">apply</a> #'sort-rows <span class="paren3">(<span class="">songs-table playlist</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">case</a> <span class="paren4">(<span class="">ordering playlist</span>)</span><br/>      <span class="paren4">(<span class=""><span class="keyword">:genre</span>  '<span class="paren5">(<span class=""><span class="keyword">:genre</span> <span class="keyword">:album</span> <span class="keyword">:track</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><span class="keyword">:artist</span> '<span class="paren5">(<span class=""><span class="keyword">:artist</span> <span class="keyword">:album</span> <span class="keyword">:track</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><span class="keyword">:album</span>  '<span class="paren5">(<span class=""><span class="keyword">:album</span> <span class="keyword">:track</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><span class="keyword">:song</span>   '<span class="paren5">(<span class=""><span class="keyword">:song</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>The function shuffle-playlist, called by the Web interface code when the user selects a new shuffle mode, works in a similar fashion except it doesn't need to change the value of ordering. Thus, when shuffle-playlist is called with a shuffle of :none, the playlist goes back to being sorted according to the most recent ordering. Shuffling by songs is simple–just call shuffle-table on songs-table. Shuffling by albums is a bit more involved but still not rocket science.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> shuffle-playlist <span class="paren2">(<span class="">playlist shuffle</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren3">(<span class="">shuffle playlist</span>)</span> shuffle</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">case</a> shuffle<br/>    <span class="paren3">(<span class=""><span class="keyword">:none</span> <span class="paren4">(<span class="">order-playlist playlist</span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><span class="keyword">:song</span> <span class="paren4">(<span class="">shuffle-by-song playlist</span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><span class="keyword">:album</span> <span class="paren4">(<span class="">shuffle-by-album playlist</span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren3">(<span class="">current-idx playlist</span>)</span> <span class="paren3">(<span class="">position-of-current playlist</span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> shuffle-by-song <span class="paren2">(<span class="">playlist</span>)</span><br/>  <span class="paren2">(<span class="">shuffle-table <span class="paren3">(<span class="">songs-table playlist</span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> shuffle-by-album <span class="paren2">(<span class="">playlist</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">new-table <span class="paren5">(<span class="">make-playlist-table</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">do-rows <span class="paren4">(<span class="">album-row <span class="paren5">(<span class="">shuffled-album-names playlist</span>)</span></span>)</span><br/>      <span class="paren4">(<span class="">do-rows <span class="paren5">(<span class="">song <span class="paren6">(<span class="">songs-for-album playlist <span class="paren1">(<span class="">column-value album-row <span class="keyword">:album</span></span>)</span></span>)</span></span>)</span><br/>        <span class="paren5">(<span class="">insert-row song new-table</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren4">(<span class="">songs-table playlist</span>)</span> new-table</span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> shuffled-album-names <span class="paren2">(<span class="">playlist</span>)</span><br/>  <span class="paren2">(<span class="">shuffle-table <br/>   <span class="paren3">(<span class="">select<br/>    <span class="keyword">:columns</span> <span class="keyword">:album</span><br/>    <span class="keyword">:from</span> <span class="paren4">(<span class="">songs-table playlist</span>)</span><br/>    <span class="keyword">:distinct</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> songs-for-album <span class="paren2">(<span class="">playlist album</span>)</span><br/>  <span class="paren2">(<span class="">select<br/>   <span class="keyword">:from</span> <span class="paren3">(<span class="">songs-table playlist</span>)</span> <br/>   <span class="keyword">:where</span> <span class="paren3">(<span class="">matching <span class="paren4">(<span class="">songs-table playlist</span>)</span> <span class="keyword">:album</span> album</span>)</span><br/>   <span class="keyword">:order-by</span> <span class="keyword">:track</span></span>)</span></span>)</span><br/></pre>

<p>The last manipulation you need to support is setting the playlist's repeat mode. Most of the time you don't need to take any extra action when setting repeat–its value comes into play only in maybe-move-to-next-song. However, you need to update the current-song as a result of changing repeat in one situation, namely, if current-idx is at the end of a nonempty playlist and repeat is being changed to :song or :all. In that case, you want to continue playing, either repeating the last song or starting at the beginning of the playlist. So, you should define an :after method on the generic function (setf repeat).
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> repeat</span>)</span> <span class="keyword">:after</span> <span class="paren2">(<span class="">value <span class="paren3">(<span class="">playlist playlist</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <span class="paren4">(<span class="">at-end-p playlist</span>)</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_not.htm" class="symbol">not</a> <span class="paren5">(<span class="">empty-p playlist</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> value<br/>      <span class="paren4">(<span class=""><span class="keyword">:song</span> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren6">(<span class="">current-idx playlist</span>)</span> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1-</a> <span class="paren1">(<span class="">table-size <span class="paren2">(<span class="">songs-table playlist</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><span class="keyword">:none</span></span>)</span><br/>      <span class="paren4">(<span class=""><span class="keyword">:all</span>  <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren6">(<span class="">current-idx playlist</span>)</span> 0</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">update-current-if-necessary playlist</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Now you have all the underlying bits you need. All that remains is the code that will provide a Web-based user interface for browsing the MP3 database and manipulating playlists. The interface will consist of three main functions defined with define-url-function: one for browsing the song database, one for viewing and manipulating a single playlist, and one for listing all the available playlists.
</p>
<p>But before you get to writing these three functions, you need to start with some helper functions and HTML macros that they'll use.
</p>
</div><div class="chapter" id="Query Parameter Types"><h3>Query Parameter Types</h3>

<p>Since you'll be using define-url-function, you need to define a few methods on the string-&gt;type generic function from Chapter 28 that define-url-function uses to convert string query parameters into Lisp objects. In this application, you'll need methods to convert strings to integers, keyword symbols, and a list of values.
</p>
<p>The first two are quite simple.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> string-&gt;type <span class="paren2">(<span class=""><span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> '<a href="http://www.lispworks.com/reference/HyperSpec/Body/t_intege.htm" class="symbol">integer</a></span>)</span></span>)</span> value</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_parse_.htm" class="symbol">parse-integer</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> value <span class="string">""</span></span>)</span> <span class="keyword">:junk-allowed</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> string-&gt;type <span class="paren2">(<span class=""><span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> '<a href="http://www.lispworks.com/reference/HyperSpec/Body/t_kwd.htm" class="symbol">keyword</a></span>)</span></span>)</span> value</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_minusp.htm" class="symbol">plusp</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> value</span>)</span></span>)</span> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_intern.htm" class="symbol">intern</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stg_up.htm" class="symbol">string-upcase</a> value</span>)</span> <span class="keyword">:keyword</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>The last string-&gt;type method is slightly more complex. For reasons I'll get to in a moment, you'll need to generate pages that display a form that contains a hidden field whose value is a list of strings. Since you're responsible for generating the value in the hidden field and for parsing it when it comes back, you can use whatever encoding is convenient. You could use the functions WRITE-TO-STRING and READ-FROM-STRING, which use the Lisp printer and reader to write and read data to and from strings, except the printed representation of strings can contain quotation marks and other characters that may cause problems when embedded in the value attribute of an INPUT element. So, you'll need to escape those characters somehow. Rather than trying to come up with your own escaping scheme, you can just use base 64, an encoding commonly used to protect binary data sent through e-mail. AllegroServe comes with two functions, base64-encode and base64-decode, that do the encoding and decoding for you, so all you have to do is write a pair of functions: one that encodes a Lisp object by converting it to a readable string with WRITE-TO-STRING and then base 64 encoding it and, conversely, another to decode such a string by base 64 decoding it and passing the result to READ-FROM-STRING. You'll want to wrap the calls to WRITE-TO-STRING and READ-FROM-STRING in WITH-STANDARD-IO-SYNTAX to make sure all the variables that affect the printer and reader are set to their standard values. However, because you're going to be reading data that's coming in from the network, you'll definitely want to turn off one feature of the reader–the ability to evaluate arbitrary Lisp code while reading!<a class="fn_top" id="fnt__4" href="practical-an-mp3-browser#fn__4">4)</a> You can define your own macro with-safe-io-syntax, which wraps its body forms in WITH-STANDARD-IO-SYNTAX wrapped around a LET that binds *READ-EVAL* to NIL.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmac.htm" class="symbol"><i><span class="symbol">defmacro</span></i></a> <i><span class="symbol">with-safe-io-syntax</span></i> <span class="paren2">(<span class="">&amp;body body</span>)</span><br/>  `<span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_std_.htm" class="symbol"><i><span class="symbol">with-standard-io-syntax</span></i></a><br/>     <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/v_rd_eva.htm" class="symbol"><span class="special">*read-eval*</span></a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a></span>)</span></span>)</span><br/>       ,@body</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Then the encoding and decoding functions are trivial.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> obj-&gt;base64 <span class="paren2">(<span class="">obj</span>)</span><br/>  <span class="paren2">(<span class="">base64-encode <span class="paren3">(<span class=""><i><span class="symbol">with-safe-io-syntax</span></i> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_to_.htm" class="symbol">write-to-string</a> obj</span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> base64-&gt;obj <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_ignore.htm" class="symbol">ignore-errors</a><br/>    <span class="paren3">(<span class=""><i><span class="symbol">with-safe-io-syntax</span></i> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rd_fro.htm" class="symbol">read-from-string</a> <span class="paren5">(<span class="">base64-decode <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Finally, you can use these functions to define a method on string-&gt;type that defines the conversion for the query parameter type base64-list.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> string-&gt;type <span class="paren2">(<span class=""><span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> 'base-64-list</span>)</span></span>)</span> value</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">obj <span class="paren5">(<span class="">base64-&gt;obj value</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_listp.htm" class="symbol">listp</a> obj</span>)</span> obj <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a></span>)</span></span>)</span></span>)</span><br/></pre>

</div><div class="chapter" id="Boilerplate HTML"><h3>Boilerplate HTML</h3>

<p>Next you need to define some HTML macros and helper functions to make it easy to give the different pages in the application a consistent look and feel. You can start with an HTML macro that defines the basic structure of a page in the application.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-html-macro</span></i> <span class="keyword">:mp3-browser-page</span> <span class="paren2">(<span class=""><span class="paren3">(<span class="">&amp;key title <span class="paren4">(<span class="">header title</span>)</span></span>)</span> &amp;body body</span>)</span><br/>  `<span class="paren2">(<span class=""><span class="keyword">:html</span><br/>     <span class="paren3">(<span class=""><span class="keyword">:head</span><br/>      <span class="paren4">(<span class=""><span class="keyword">:title</span> ,title</span>)</span><br/>      <span class="paren4">(<span class=""><span class="keyword">:link</span> <span class="keyword">:rel</span> <span class="string">"stylesheet"</span> <span class="keyword">:type</span> <span class="string">"text/css"</span> <span class="keyword">:href</span> <span class="string">"mp3-browser.css"</span></span>)</span></span>)</span><br/>     <span class="paren3">(<span class=""><span class="keyword">:body</span><br/>      <span class="paren4">(<span class="">standard-header</span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> ,header <span class="paren5">(<span class="">html <span class="paren6">(<span class=""><span class="keyword">:h1</span> <span class="keyword">:class</span> <span class="string">"title"</span> ,header</span>)</span></span>)</span></span>)</span><br/>      ,@body<br/>      <span class="paren4">(<span class="">standard-footer</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>You should define standard-header and standard-footer as separate functions for two reasons. First, during development you can redefine those functions and see the effect immediately without having to recompile functions that use the :mp3-browser-page macro. Second, it turns out that one of the pages you'll write later won't be defined with :mp3-browser-page but will still need the standard header and footers. They look like this:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*r*</span> 25</span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> standard-header <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class="">html<br/>   <span class="paren3">(<span class=""><span class="paren4">(<span class=""><span class="keyword">:p</span> <span class="keyword">:class</span> <span class="string">"toolbar"</span></span>)</span><br/>    <span class="string">"["</span> <span class="paren4">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren5">(<span class="">link <span class="string">"/browse"</span> <span class="keyword">:what</span> <span class="string">"genre"</span></span>)</span> <span class="string">"All genres"</span></span>)</span> <span class="string">"] "</span><br/>    <span class="string">"["</span> <span class="paren4">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren5">(<span class="">link <span class="string">"/browse"</span> <span class="keyword">:what</span> <span class="string">"genre"</span> <span class="keyword">:random</span> <span class="special">*r*</span></span>)</span> <span class="string">"Random genres"</span></span>)</span> <span class="string">"] "</span><br/>    <span class="string">"["</span> <span class="paren4">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren5">(<span class="">link <span class="string">"/browse"</span> <span class="keyword">:what</span> <span class="string">"artist"</span></span>)</span> <span class="string">"All artists"</span></span>)</span> <span class="string">"] "</span><br/>    <span class="string">"["</span> <span class="paren4">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren5">(<span class="">link <span class="string">"/browse"</span> <span class="keyword">:what</span> <span class="string">"artist"</span> <span class="keyword">:random</span> <span class="special">*r*</span></span>)</span> <span class="string">"Random artists"</span></span>)</span> <span class="string">"] "</span><br/>    <span class="string">"["</span> <span class="paren4">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren5">(<span class="">link <span class="string">"/browse"</span> <span class="keyword">:what</span> <span class="string">"album"</span></span>)</span> <span class="string">"All albums"</span></span>)</span> <span class="string">"] "</span><br/>    <span class="string">"["</span> <span class="paren4">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren5">(<span class="">link <span class="string">"/browse"</span> <span class="keyword">:what</span> <span class="string">"album"</span> <span class="keyword">:random</span> <span class="special">*r*</span></span>)</span> <span class="string">"Random albums"</span></span>)</span> <span class="string">"] "</span><br/>    <span class="string">"["</span> <span class="paren4">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren5">(<span class="">link <span class="string">"/browse"</span> <span class="keyword">:what</span> <span class="string">"song"</span> <span class="keyword">:random</span> <span class="special">*r*</span></span>)</span> <span class="string">"Random songs"</span></span>)</span> <span class="string">"] "</span><br/>    <span class="string">"["</span> <span class="paren4">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren5">(<span class="">link <span class="string">"/playlist"</span></span>)</span> <span class="string">"Playlist"</span></span>)</span> <span class="string">"] "</span><br/>    <span class="string">"["</span> <span class="paren4">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren5">(<span class="">link <span class="string">"/all-playlists"</span></span>)</span> <span class="string">"All playlists"</span></span>)</span> <span class="string">"]"</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> standard-footer <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class="">html <span class="paren3">(<span class=""><span class="keyword">:hr</span></span>)</span> <span class="paren3">(<span class=""><span class="paren4">(<span class=""><span class="keyword">:p</span> <span class="keyword">:class</span> <span class="string">"footer"</span></span>)</span> <span class="string">"MP3 Browser v"</span> <span class="special">*major-version*</span> <span class="string">"."</span> <span class="special">*minor-version*</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>A couple of smaller HTML macros and helper functions automate other common patterns. The :table-row HTML macro makes it easier to generate the HTML for a single row of a table. It uses a feature of FOO that I'll discuss in Chapter 31, an &amp;attributes parameter, which causes uses of the macro to be parsed just like normal s-expression HTML forms, with any attributes gathered into a list that will be bound to the &amp;attributes parameter. It looks like this:
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-html-macro</span></i> <span class="keyword">:table-row</span> <span class="paren2">(<span class="">&amp;attributes attrs &amp;rest <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a></span>)</span><br/>  `<span class="paren2">(<span class=""><span class="keyword">:tr</span> ,@attrs ,@<span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for v in <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a> collect `<span class="paren4">(<span class=""><span class="keyword">:td</span> ,v</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>And the link function generates a URL back into the application to be used as the HREF attribute with an A element, building a query string out of a set of keyword/value pairs and making sure all special characters are properly escaped. For instance, instead of writing this:
</p>
<pre class="code"><span class="paren1">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="string">"browse?what=artist&amp;genre=Rhythm+%26+Blues"</span> <span class="string">"Artists"</span></span>)</span><br/></pre>

<p>you can write the following:
</p>
<pre class="code"><span class="paren1">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren2">(<span class="">link <span class="string">"browse"</span> <span class="keyword">:what</span> <span class="string">"artist"</span> <span class="keyword">:genre</span> <span class="string">"Rhythm &amp; Blues"</span></span>)</span> <span class="string">"Artists"</span></span>)</span><br/></pre>

<p>It looks like this:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> link <span class="paren2">(<span class="">target &amp;rest attributes</span>)</span><br/>  <span class="paren2">(<span class="">html <br/>    <span class="paren3">(<span class=""><span class="keyword">:attribute</span><br/>     <span class="paren4">(<span class=""><span class="keyword">:format</span> <span class="string">"~a~@[?~{~(~a~)=~a~^&amp;~}~]"</span> target <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mapc_.htm" class="symbol">mapcar</a> #'urlencode attributes</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>To URL encode the keys and values, you use the helper function urlencode, which is a wrapper around the function encode-form-urlencoded, which is a nonpublic function from AllegroServe. This is–on one hand–bad form; since the name encode-form-urlencoded isn't exported from NET.ASERVE, it's possible that encode-form-urlencoded may go away or get renamed out from under you. On the other hand, using this unexported symbol for the time being lets you get work done for the moment; by wrapping encode-form-urlencoded in your own function, you isolate the crufty code to one function, which you could rewrite if you had to.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> urlencode <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span><br/>  <span class="paren2">(<span class="">net.aserve::encode-form-urlencoded <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span></span>)</span><br/></pre>

<p>Finally, you need the CSS style sheet mp3-browser.css used by :mp3-browser-page. Since there's nothing dynamic about it, it's probably easiest to just publish a static file with publish-file.
</p>
<pre class="code"><span class="paren1">(<span class="">publish-file <span class="keyword">:path</span> <span class="string">"/mp3-browser.css"</span>  <span class="keyword">:file</span> filename <span class="keyword">:content-type</span> <span class="string">"text/css"</span></span>)</span><br/></pre>

<p>A sample style sheet is included with the source code for this chapter on the book's Web site. You'll define a function, at the end of this chapter, that starts the MP3 browser application. It'll take care of, among other things, publishing this file.
</p>
</div><div class="chapter" id="The Browse Page"><h3>The Browse Page</h3>

<p>The first URL function will generate a page for browsing the MP3 database. Its query parameters will tell it what kind of thing the user is browsing and provide the criteria of what elements of the database they're interested in. It'll give them a way to select database entries that match a specific genre, artist, or album. In the interest of serendipity, you can also provide a way to select a random subset of matching items. When the user is browsing at the level of individual songs, the title of the song will be a link that causes that song to be added to the playlist. Otherwise, each item will be presented with links that let the user browse the listed item by some other category. For example, if the user is browsing genres, the entry "Blues" will contain links to browse all albums, artists, and songs in the genre Blues. Additionally, the browse page will feature an "Add all" button that adds every song matching the page's criteria to the user's playlist. The function looks like this:
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-url-function</span></i> browse<br/>    <span class="paren2">(<span class="">request <span class="paren3">(<span class="">what <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_kwd.htm" class="symbol">keyword</a> <span class="keyword">:genre</span></span>)</span> genre artist album <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_random.htm" class="symbol">random</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_intege.htm" class="symbol">integer</a></span>)</span></span>)</span><br/><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let*</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a> <span class="paren5">(<span class="">values-for-page what genre artist album <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_random.htm" class="symbol">random</a></span>)</span></span>)</span><br/>         <span class="paren4">(<span class="">title <span class="paren5">(<span class="">browse-page-title what <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_random.htm" class="symbol">random</a> genre artist album</span>)</span></span>)</span><br/>         <span class="paren4">(<span class="">single-column <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> what <span class="keyword">:song</span></span>)</span> <span class="keyword">:file</span> what</span>)</span></span>)</span><br/>         <span class="paren4">(<span class="">values-string <span class="paren5">(<span class="">values-&gt;base-64 single-column <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a></span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">html<br/>     <span class="paren4">(<span class=""><span class="keyword">:mp3-browser-page</span><br/>      <span class="paren5">(<span class=""><span class="keyword">:title</span> title</span>)</span><br/>      <span class="paren5">(<span class=""><span class="paren6">(<span class=""><span class="keyword">:form</span> <span class="keyword">:method</span> <span class="string">"POST"</span> <span class="keyword">:action</span> <span class="string">"playlist"</span></span>)</span><br/>       <span class="paren6">(<span class=""><span class="keyword">:input</span> <span class="keyword">:name</span> <span class="string">"values"</span> <span class="keyword">:type</span> <span class="string">"hidden"</span> <span class="keyword">:value</span> values-string</span>)</span><br/>       <span class="paren6">(<span class=""><span class="keyword">:input</span> <span class="keyword">:name</span> <span class="string">"what"</span> <span class="keyword">:type</span> <span class="string">"hidden"</span> <span class="keyword">:value</span> single-column</span>)</span><br/>       <span class="paren6">(<span class=""><span class="keyword">:input</span> <span class="keyword">:name</span> <span class="string">"action"</span> <span class="keyword">:type</span> <span class="string">"hidden"</span> <span class="keyword">:value</span> <span class="keyword">:add-songs</span></span>)</span><br/>       <span class="paren6">(<span class=""><span class="keyword">:input</span> <span class="keyword">:name</span> <span class="string">"submit"</span> <span class="keyword">:type</span> <span class="string">"submit"</span> <span class="keyword">:value</span> <span class="string">"Add all"</span></span>)</span></span>)</span><br/>      <span class="paren5">(<span class=""><span class="keyword">:ul</span> <span class="paren6">(<span class="">do-rows <span class="paren1">(<span class="">row <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a></span>)</span> <span class="paren1">(<span class="">list-item-for-page what row</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>This function starts by using the function values-for-page to get a table containing the values it needs to present. When the user is browsing by song–when the what parameter is :song–you want to select complete rows from the database. But when they're browsing by genre, artist, or album, you want to select only the distinct values for the given category. The database function select does most of the heavy lifting, with values-for-page mostly responsible for passing the right arguments depending on the value of what. This is also where you select a random subset of the matching rows if necessary.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> values-for-page <span class="paren2">(<span class="">what genre artist album <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_random.htm" class="symbol">random</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a><br/>         <span class="paren5">(<span class="">select <br/>          <span class="keyword">:from</span> <span class="special">*mp3s*</span><br/>          <span class="keyword">:columns</span> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> what <span class="keyword">:song</span></span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> what</span>)</span><br/>          <span class="keyword">:where</span> <span class="paren6">(<span class="">matching <span class="special">*mp3s*</span> <span class="keyword">:genre</span> genre <span class="keyword">:artist</span> artist <span class="keyword">:album</span> album</span>)</span><br/>          <span class="keyword">:distinct</span> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_not.htm" class="symbol">not</a> <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> what <span class="keyword">:song</span></span>)</span></span>)</span><br/>          <span class="keyword">:order-by</span> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> what <span class="keyword">:song</span></span>)</span> '<span class="paren1">(<span class=""><span class="keyword">:album</span> <span class="keyword">:track</span></span>)</span> what</span>)</span></span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_random.htm" class="symbol">random</a> <span class="paren4">(<span class="">random-selection <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_random.htm" class="symbol">random</a></span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a></span>)</span></span>)</span></span>)</span><br/></pre>

<p>To generate the title for the browse page, you pass the browsing criteria to the following function, browse-page-title:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> browse-page-title <span class="paren2">(<span class="">what <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_random.htm" class="symbol">random</a> genre artist album</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_out_.htm" class="symbol"><i><span class="symbol">with-output-to-string</span></i></a> <span class="paren3">(<span class="">s</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_random.htm" class="symbol">random</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> s <span class="string">"~:(~r~) Random "</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_random.htm" class="symbol">random</a></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> s <span class="string">"~:(~a~p~)"</span> what <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_random.htm" class="symbol">random</a></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> genre artist album</span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_not.htm" class="symbol">not</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> what <span class="keyword">:song</span></span>)</span></span>)</span> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_pr.htm" class="symbol">princ</a> <span class="string">" with songs"</span> s</span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> genre  <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> s <span class="string">" in genre ~a"</span> genre</span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> artist <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> s <span class="string">" by artist ~a "</span> artist</span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> album  <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> s <span class="string">" on album ~a"</span> album</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Once you have the values you want to present, you need to do two things with them. The main task, of course, is to present them, which happens in the do-rows loop, leaving the rendering of each row to the function list-item-for-page. That function renders :song rows one way and all other kinds another way.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> list-item-for-page <span class="paren2">(<span class="">what row</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> what <span class="keyword">:song</span></span>)</span><br/>    <span class="paren3">(<span class=""><i><span class="symbol">with-column-values</span></i> <span class="paren4">(<span class="">song file album artist genre</span>)</span> row<br/>      <span class="paren4">(<span class="">html<br/>        <span class="paren5">(<span class=""><span class="keyword">:li</span><br/>         <span class="paren6">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren1">(<span class="">link <span class="string">"playlist"</span> <span class="keyword">:file</span> file <span class="keyword">:action</span> <span class="string">"add-songs"</span></span>)</span> <span class="paren1">(<span class=""><span class="keyword">:b</span> song</span>)</span></span>)</span> <span class="string">" from "</span><br/>         <span class="paren6">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren1">(<span class="">link <span class="string">"browse"</span>  <span class="keyword">:what</span> <span class="keyword">:song</span> <span class="keyword">:album</span>  album</span>)</span> album</span>)</span> <span class="string">" by "</span><br/>         <span class="paren6">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren1">(<span class="">link <span class="string">"browse"</span> <span class="keyword">:what</span> <span class="keyword">:song</span> <span class="keyword">:artist</span> artist</span>)</span> artist</span>)</span> <span class="string">" in genre "</span><br/>         <span class="paren6">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren1">(<span class="">link <span class="string">"browse"</span>  <span class="keyword">:what</span> <span class="keyword">:song</span> <span class="keyword">:genre</span>  genre</span>)</span> genre</span>)</span></span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">value <span class="paren6">(<span class="">column-value row what</span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class="">html<br/>       <span class="paren5">(<span class=""><span class="keyword">:li</span> value <span class="string">" - "</span><br/>            <span class="paren6">(<span class="">browse-link <span class="keyword">:genre</span>  what value</span>)</span><br/>            <span class="paren6">(<span class="">browse-link <span class="keyword">:artist</span> what value</span>)</span><br/>            <span class="paren6">(<span class="">browse-link <span class="keyword">:album</span>  what value</span>)</span><br/>            <span class="paren6">(<span class="">browse-link <span class="keyword">:song</span>   what value</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> browse-link <span class="paren2">(<span class="">new-what what value</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">unless</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> new-what what</span>)</span><br/>    <span class="paren3">(<span class="">html<br/>     <span class="string">"["</span> <br/>     <span class="paren4">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren5">(<span class="">link <span class="string">"browse"</span> <span class="keyword">:what</span> new-what what value</span>)</span> <span class="paren5">(<span class=""><span class="keyword">:format</span> <span class="string">"~(~as~)"</span> new-what</span>)</span></span>)</span><br/>     <span class="string">"] "</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>The other thing on the browse page is a form with several hidden INPUT fields and an "Add all" submit button. You need to use an HTML form instead of a regular link to keep the application stateless–to make sure all the information needed to respond to a request comes in the request itself. Because the browse page results can be partially random, you need to submit a fair bit of data for the server to be able to reconstitute the list of songs to add to the playlist. If you didn't allow the browse page to return randomly generated results, you wouldn't need much data–you could just submit a request to add songs with whatever search criteria the browse page used. But if you added songs that way, with criteria that included a random argument, then you'd end up adding a different set of random songs than the user was looking at on the page when they hit the "Add all" button.
</p>
<p>The solution you'll use is to send back a form that has enough information stashed away in a hidden INPUT element to allow the server to reconstitute the list of songs matching the browse page criteria. That information is the list of values returned by values-for-page and the value of the what parameter. This is where you use the base64-list parameter type; the function values-&gt;base64 extracts the values of a specified column from the table returned by values-for-page into a list and then makes a base 64-encoded string out of that list to embed in the form.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> values-&gt;base-64 <span class="paren2">(<span class="">column values-table</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_flet_.htm" class="symbol"><i><span class="symbol">flet</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">value <span class="paren5">(<span class="">r</span>)</span> <span class="paren5">(<span class="">column-value r column</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">obj-&gt;base64 <span class="paren4">(<span class="">map-rows #'value values-table</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>When that parameter comes back as the value of the values query parameter to a URL function that declares values to be of type base-64-list, it'll be automatically converted back to a list. As you'll see in a moment, that list can then be used to construct a query that'll return the correct list of songs.<a class="fn_top" id="fnt__5" href="practical-an-mp3-browser#fn__5">5)</a> When you're browsing by :song, you use the values from the :file column since they uniquely identify the actual songs while the song names may not.
</p>
</div><div class="chapter" id="The Playlist"><h3>The Playlist</h3>

<p>This brings me to the next URL function, playlist. This is the most complex page of the three–it's responsible for displaying the current contents of the user's playlist as well as for providing the interface to manipulate the playlist. But with most of the tedious bookkeeping handled by define-url-function, it's not too hard to see how playlist works. Here's the beginning of the definition, with just the parameter list:
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-url-function</span></i> playlist <br/>    <span class="paren2">(<span class="">request<br/>     <span class="paren3">(<span class="">playlist-id <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a> <span class="paren4">(<span class="">playlist-id request</span>)</span> <span class="keyword">:package</span></span>)</span><br/>     <span class="paren3">(<span class="">action <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_kwd.htm" class="symbol">keyword</a></span>)</span>      <span class="comment">; Playlist manipulation action<br/></span>     <span class="paren3">(<span class="">what <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_kwd.htm" class="symbol">keyword</a> <span class="keyword">:file</span></span>)</span>  <span class="comment">; for :add-songs action<br/></span>     <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a> base-64-list</span>)</span> <span class="comment">;             "<br/></span>     file                  <span class="comment">; for :add-songs and :delete-songs actions<br/></span>     genre                 <span class="comment">; for :delete-songs action<br/></span>     artist                <span class="comment">;             "<br/></span>     album                 <span class="comment">;             "<br/></span>     <span class="paren3">(<span class="">order-by <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_kwd.htm" class="symbol">keyword</a></span>)</span>    <span class="comment">; for :sort action<br/></span>     <span class="paren3">(<span class="">shuffle <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_kwd.htm" class="symbol">keyword</a></span>)</span>     <span class="comment">; for :shuffle action<br/></span>     <span class="paren3">(<span class="">repeat <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_kwd.htm" class="symbol">keyword</a></span>)</span></span>)</span>     <span class="comment">; for :set-repeat action<br/></span></span></span></pre>

<p>In addition to the obligatory request parameter, playlist takes a number of query parameters. The most important in some ways is playlist-id, which identifies which playlist object the page should display and manipulate. For this parameter, you can take advantage of define-url-function's "sticky parameter" feature. Normally, the playlist-id won't be supplied explicitly, defaulting to the value returned by the playlist-id function, namely, the IP address of the client machine on which the browser is running. However, users can also manipulate their playlists from different machines than the ones running their MP3 clients by allowing this value to be explicitly specified. And if it's specified once, define-url-function will arrange for it to "stick" by setting a cookie in the browser. Later you'll define a URL function that generates a list of all existing playlists, which users can use to pick a playlist other than the one for the machines they're browsing from.
</p>
<p>The action parameter specifies some action to take on the user's playlist object. The value of this parameter, which will be converted to a keyword symbol for you, can be :add-songs, :delete-songs, :clear, :sort, :shuffle, or :set-repeat. The :add-songs action is used by the "Add all" button in the browse page and also by the links used to add individual songs. The other actions are used by the links on the playlist page itself.
</p>
<p>The file, what, and values parameters are used with the :add-songs action. By declaring values to be of type base-64-list, the define-url-function infrastructure will take care of decoding the value submitted by the "Add all" form. The other parameters are used with other actions as noted in the comments.
</p>
<p>Now let's look at the body of playlist. The first thing you need to do is use the playlist-id to look up the queue object and then acquire the playlist's lock with the following two lines:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren2">(<span class=""><span class="paren3">(<span class="">playlist <span class="paren4">(<span class="">lookup-playlist playlist-id</span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><i><span class="symbol">with-playlist-locked</span></i> <span class="paren3">(<span class="">playlist</span>)</span><br/></span></span></span></span></pre>

<p>Since lookup-playlist will create a new playlist if necessary, this will always return a playlist object. Then you take care of any necessary queue manipulation, dispatching on the value of the action parameter in order to call one of the playlist functions.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">case</a> action<br/>  <span class="paren2">(<span class=""><span class="keyword">:add-songs</span>      <span class="paren3">(<span class="">add-songs playlist what <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> file</span>)</span></span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:delete-songs</span>   <span class="paren3">(<span class="">delete-songs <br/>                    playlist <br/>                    <span class="keyword">:file</span> file <span class="keyword">:genre</span> genre<br/>                    <span class="keyword">:artist</span> artist <span class="keyword">:album</span> album</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:clear</span>          <span class="paren3">(<span class="">clear-playlist playlist</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:sort</span>           <span class="paren3">(<span class="">sort-playlist playlist order-by</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:shuffle</span>        <span class="paren3">(<span class="">shuffle-playlist playlist shuffle</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:set-repeat</span>     <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren4">(<span class="">repeat playlist</span>)</span> repeat</span>)</span></span>)</span></span>)</span><br/></pre>

<p>All that's left of the playlist function is the actual HTML generation. Again, you can use the :mp3-browser-page HTML macro to make sure the basic form of the page matches the other pages in the application, though this time you pass NIL to the :header argument in order to leave out the H1 header. Here's the rest of the function:
</p>
<pre class="code"><span class="paren1">(<span class="">html<br/> <span class="paren2">(<span class=""><span class="keyword">:mp3-browser-page</span><br/>  <span class="paren3">(<span class=""><span class="keyword">:title</span> <span class="paren4">(<span class=""><span class="keyword">:format</span> <span class="string">"Playlist - ~a"</span> <span class="paren5">(<span class="">id playlist</span>)</span></span>)</span> <span class="keyword">:header</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a></span>)</span><br/>  <span class="paren3">(<span class="">playlist-toolbar playlist</span>)</span><br/>  <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren4">(<span class="">empty-p playlist</span>)</span><br/>    <span class="paren4">(<span class="">html <span class="paren5">(<span class=""><span class="keyword">:p</span> <span class="paren6">(<span class=""><span class="keyword">:i</span> <span class="string">"Empty."</span></span>)</span></span>)</span></span>)</span><br/>    <span class="paren4">(<span class="">html <br/>      <span class="paren5">(<span class=""><span class="paren6">(<span class=""><span class="keyword">:table</span> <span class="keyword">:class</span> <span class="string">"playlist"</span></span>)</span><br/>       <span class="paren6">(<span class=""><span class="keyword">:table-row</span> <span class="string">"#"</span> <span class="string">"Song"</span> <span class="string">"Album"</span> <span class="string">"Artist"</span> <span class="string">"Genre"</span></span>)</span><br/>       <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren1">(<span class=""><span class="paren2">(<span class="">idx 0</span>)</span><br/>             <span class="paren2">(<span class="">current-idx <span class="paren3">(<span class="">current-idx playlist</span>)</span></span>)</span></span>)</span><br/>         <span class="paren1">(<span class="">do-rows <span class="paren2">(<span class="">row <span class="paren3">(<span class="">songs-table playlist</span>)</span></span>)</span><br/>           <span class="paren2">(<span class=""><i><span class="symbol">with-column-values</span></i> <span class="paren3">(<span class="">track file song album artist genre</span>)</span> row<br/>             <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">row-style <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren1">(<span class="">= idx current-idx</span>)</span> <span class="string">"now-playing"</span> <span class="string">"normal"</span></span>)</span></span>)</span></span>)</span><br/>               <span class="paren4">(<span class="">html<br/>                 <span class="paren5">(<span class=""><span class="paren6">(<span class=""><span class="keyword">:table-row</span> <span class="keyword">:class</span> row-style</span>)</span><br/>                  track<br/>                  <span class="paren6">(<span class=""><span class="keyword">:progn</span> song   <span class="paren1">(<span class="">delete-songs-link <span class="keyword">:file</span> file</span>)</span></span>)</span><br/>                  <span class="paren6">(<span class=""><span class="keyword">:progn</span> album  <span class="paren1">(<span class="">delete-songs-link <span class="keyword">:album</span> album</span>)</span></span>)</span><br/>                  <span class="paren6">(<span class=""><span class="keyword">:progn</span> artist <span class="paren1">(<span class="">delete-songs-link <span class="keyword">:artist</span> artist</span>)</span></span>)</span><br/>                  <span class="paren6">(<span class=""><span class="keyword">:progn</span> genre  <span class="paren1">(<span class="">delete-songs-link <span class="keyword">:genre</span> genre</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/>             <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> idx</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span>)))<br/></pre>

<p>The function playlist-toolbar generates a toolbar containing links to playlist to perform the various :action manipulations. And delete-songs-link generates a link to playlist with the :action parameter set to :delete-songs and the appropriate arguments to delete an individual file, or all files on an album, by a particular artist or in a specific genre.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> playlist-toolbar <span class="paren2">(<span class="">playlist</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">current-repeat <span class="paren5">(<span class="">repeat playlist</span>)</span></span>)</span><br/>        <span class="paren4">(<span class="">current-sort <span class="paren5">(<span class="">ordering playlist</span>)</span></span>)</span><br/>        <span class="paren4">(<span class="">current-shuffle <span class="paren5">(<span class="">shuffle playlist</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">html<br/>     <span class="paren4">(<span class=""><span class="keyword">:p</span> <span class="keyword">:class</span> <span class="string">"playlist-toolbar"</span><br/>         <span class="paren5">(<span class=""><span class="keyword">:i</span> <span class="string">"Sort by:"</span></span>)</span><br/>         <span class="string">" [ "</span><br/>         <span class="paren5">(<span class="">sort-playlist-button <span class="string">"genre"</span> current-sort</span>)</span> <span class="string">" | "</span> <br/>         <span class="paren5">(<span class="">sort-playlist-button <span class="string">"artist"</span> current-sort</span>)</span> <span class="string">" | "</span> <br/>         <span class="paren5">(<span class="">sort-playlist-button <span class="string">"album"</span> current-sort</span>)</span> <span class="string">" | "</span> <br/>         <span class="paren5">(<span class="">sort-playlist-button <span class="string">"song"</span> current-sort</span>)</span> <span class="string">" ] "</span><br/>         <span class="paren5">(<span class=""><span class="keyword">:i</span> <span class="string">"Shuffle by:"</span></span>)</span><br/>         <span class="string">" [ "</span><br/>         <span class="paren5">(<span class="">playlist-shuffle-button <span class="string">"none"</span> current-shuffle</span>)</span> <span class="string">" | "</span><br/>         <span class="paren5">(<span class="">playlist-shuffle-button <span class="string">"song"</span> current-shuffle</span>)</span> <span class="string">" | "</span><br/>         <span class="paren5">(<span class="">playlist-shuffle-button <span class="string">"album"</span> current-shuffle</span>)</span> <span class="string">" ] "</span><br/>         <span class="paren5">(<span class=""><span class="keyword">:i</span> <span class="string">"Repeat:"</span></span>)</span><br/>         <span class="string">" [ "</span><br/>         <span class="paren5">(<span class="">playlist-repeat-button <span class="string">"none"</span> current-repeat</span>)</span> <span class="string">" | "</span><br/>         <span class="paren5">(<span class="">playlist-repeat-button <span class="string">"song"</span> current-repeat</span>)</span> <span class="string">" | "</span><br/>         <span class="paren5">(<span class="">playlist-repeat-button <span class="string">"all"</span> current-repeat</span>)</span> <span class="string">" ] "</span><br/>         <span class="string">"[ "</span> <span class="paren5">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren6">(<span class="">link <span class="string">"playlist"</span> <span class="keyword">:action</span> <span class="string">"clear"</span></span>)</span> <span class="string">"Clear"</span></span>)</span> <span class="string">" ] "</span></span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> playlist-button <span class="paren2">(<span class="">action argument new-value current-value</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">label <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stg_up.htm" class="symbol">string-capitalize</a> new-value</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm" class="symbol">string-equal</a> new-value current-value</span>)</span><br/>      <span class="paren4">(<span class="">html <span class="paren5">(<span class=""><span class="keyword">:b</span> label</span>)</span></span>)</span><br/>      <span class="paren4">(<span class="">html <span class="paren5">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren6">(<span class="">link <span class="string">"playlist"</span> <span class="keyword">:action</span> action argument new-value</span>)</span> label</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> sort-playlist-button <span class="paren2">(<span class="">order-by current-sort</span>)</span><br/>  <span class="paren2">(<span class="">playlist-button <span class="keyword">:sort</span> <span class="keyword">:order-by</span> order-by current-sort</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> playlist-shuffle-button <span class="paren2">(<span class="">shuffle current-shuffle</span>)</span><br/>  <span class="paren2">(<span class="">playlist-button <span class="keyword">:shuffle</span> <span class="keyword">:shuffle</span> shuffle current-shuffle</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> playlist-repeat-button <span class="paren2">(<span class="">repeat current-repeat</span>)</span><br/>  <span class="paren2">(<span class="">playlist-button <span class="keyword">:set-repeat</span> <span class="keyword">:repeat</span> repeat current-repeat</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> delete-songs-link <span class="paren2">(<span class="">what value</span>)</span><br/>  <span class="paren2">(<span class="">html <span class="string">" ["</span> <span class="paren3">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren4">(<span class="">link <span class="string">"playlist"</span> <span class="keyword">:action</span> <span class="keyword">:delete-songs</span> what value</span>)</span> <span class="string">"x"</span></span>)</span> <span class="string">"]"</span></span>)</span></span>)</span><br/></pre>

</div><div class="chapter" id="Finding a Playlist"><h3>Finding a Playlist</h3>

<p>The last of the three URL functions is the simplest. It presents a table listing all the playlists that have been created. Ordinarily users won't need to use this page, but during development it gives you a useful view into the state of the system. It also provides the mechanism to choose a different playlist–each playlist ID is a link to the playlist page with an explicit playlist-id query parameter, which will then be made sticky by the playlist URL function. Note that you need to acquire the *playlists-lock* to make sure the *playlists* hash table doesn't change out from under you while you're iterating over it.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-url-function</span></i> all-playlists <span class="paren2">(<span class="">request</span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:mp3-browser-page</span><br/>   <span class="paren3">(<span class=""><span class="keyword">:title</span> <span class="string">"All Playlists"</span></span>)</span><br/>   <span class="paren3">(<span class=""><span class="paren4">(<span class=""><span class="keyword">:table</span> <span class="keyword">:class</span> <span class="string">"all-playlists"</span></span>)</span><br/>    <span class="paren4">(<span class=""><span class="keyword">:table-row</span> <span class="string">"Playlist"</span> <span class="string">"# Songs"</span> <span class="string">"Most recent user agent"</span></span>)</span><br/>    <span class="paren4">(<span class=""><i><span class="symbol">with-process-lock</span></i> <span class="paren5">(<span class=""><span class="special">*playlists-lock*</span></span>)</span><br/>      <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for playlist being <a href="http://www.lispworks.com/reference/HyperSpec/Body/s_the.htm" class="symbol"><i><span class="symbol">the</span></i></a> hash-values of <span class="special">*playlists*</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a><br/>           <span class="paren6">(<span class="">html<br/>             <span class="paren1">(<span class=""><span class="keyword">:table-row</span><br/>              <span class="paren2">(<span class=""><span class="keyword">:a</span> <span class="keyword">:href</span> <span class="paren3">(<span class="">link <span class="string">"playlist"</span> <span class="keyword">:playlist-id</span> <span class="paren4">(<span class="">id playlist</span>)</span></span>)</span> <span class="paren3">(<span class=""><span class="keyword">:print</span> <span class="paren4">(<span class="">id playlist</span>)</span></span>)</span></span>)</span><br/>              <span class="paren2">(<span class=""><span class="keyword">:print</span> <span class="paren3">(<span class="">table-size <span class="paren4">(<span class="">songs-table playlist</span>)</span></span>)</span></span>)</span><br/>              <span class="paren2">(<span class=""><span class="keyword">:print</span> <span class="paren3">(<span class="">user-agent playlist</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

</div><div class="chapter" id="Running the App"><h3>Running the App</h3>

<p>And that's it. To use this app, you just need to load the MP3 database with the load-database function from Chapter 27, publish the CSS style sheet, set *song-source-type* to playlist so find-song-source uses playlists instead of the singleton song source defined in the previous chapter, and start AllegroServe. The following function takes care of all these steps for you, after you fill in appropriate values for the two parameters *mp3-dir*, which is the root directory of your MP3 collection, and *mp3-css*, the filename of the CSS style sheet:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*mp3-dir*</span> ...</span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*mp3-css*</span> ...</span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> start-mp3-browser <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class="">load-database <span class="special">*mp3-dir*</span> <span class="special">*mp3s*</span></span>)</span><br/>  <span class="paren2">(<span class="">publish-file <span class="keyword">:path</span> <span class="string">"/mp3-browser.css"</span>  <span class="keyword">:file</span> <span class="special">*mp3-css*</span> <span class="keyword">:content-type</span> <span class="string">"text/css"</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="special">*song-source-type*</span> 'playlist</span>)</span><br/>  <span class="paren2">(<span class="">net.aserve::debug-on <span class="keyword">:notrap</span></span>)</span><br/>  <span class="paren2">(<span class="">net.aserve:start <span class="keyword">:port</span> 2001</span>)</span></span>)</span><br/></pre>

<p>When you invoke this function, it will print dots while it loads the ID3 information from your ID3 files. Then you can point your MP3 client at this URL:
</p><pre>http://localhost:2001/stream.mp3<br/></pre>
<p>and point your browser at some good starting place, such as this:
</p><pre>http://localhost:2001/browse<br/></pre>
<p>which will let you start browsing by the default category, Genre. After you've added some songs to the playlist, you can press Play on the MP3 client, and it should start playing the first song.
</p>
<p>Obviously, you could improve the user interface in any of a number of ways–for instance, if you have a lot of MP3s in your library, it might be useful to be able to browse artists or albums by the first letter of their names. Or maybe you could add a "Play whole album" button to the playlist page that causes the playlist to immediately put all the songs from the same album as the currently playing song at the top of the playlist. Or you could change the playlist class, so instead of playing silence when there are no songs queued up, it picks a random song from the database. But all those ideas fall in the realm of application design, which isn't really the topic of this book. Instead, the next two chapters will drop back to the level of software infrastructure to cover how the FOO HTML generation library works. 
</p></div></div><div class="footnotes"><div><a class="fn_bot" id="fn__1" href="practical-an-mp3-browser#fnt__1">1)</a>Описание проблем многопоточного программирования не является темой этой книги. Основная идея заключается в том, что если у вас есть несколько потоков выполнения (как в нашем случае, когда некоторые потоки выполняют функцию <code>shoutcast</code>, а другие обрабатывают запросы браузера), то вам нужно быть уверенным, что только один поток выполнения работает с конкретным объектом в конкретный момент времени.  Это делается чтобы другие потоки выполнения не видели не полностью изменённое состояние объекта в то время как конкретный поток работает с данным объектом.  В этой функции, например, если два новых MP3-клиента подключаются одновременно, то они оба будут пытаться добавить записи в таблицу <code>*playlists*</code>, и могут возникнуть накладки в работе.  Функция <code>with-process-lock</code> обеспечивает, что каждый поток выполнения получает эксклюзивный доступ к хэш-таблице на достаточно долгое время для выполнения нужной задачи.</div><div><a class="fn_bot" id="fn__2" href="practical-an-mp3-browser#fnt__2">2)</a>Этот подход также подразумевает, что каждый компьютер пользователя имеет уникальный IP-адрес.  Этот подход будет работать до тех пор, пока пользователи находятся в одной сети, но он не будет работать, если клиенты подключаются из-за межсетевого экрана, который выполняет преобразование адресов.  Развертывание этого приложения вне локальной сети потребует внесения некоторых изменений, но если вы захотите развернуть это приложение в глобальной сети, то лучше узнать больше о сетевых технологиях, чтобы выбрать соответствующую схему отображения пользователей на списки песен.</div><div><a class="fn_bot" id="fn__3" href="practical-an-mp3-browser#fnt__3">3)</a>Unfortunately, because of licensing issues around the MP3 format, it's not clear that it's legal for me to provide you with such an MP3 without paying licensing fees to Fraunhofer IIS. I got mine as part of the software that came with my Slimp3 from Slim Devices. You can grab it from their Subversion repository via the Web at <a href="http://svn.slimdevices.com/*checkout*/trunk/server/">http://svn.slimdevices.com/*checkout*/trunk/server/</a> HTML/EN/html/silentpacket.mp3?rev=2. Or buy a Squeezebox, the new, wireless version of Slimp3, and you'll get <code>silentpacket.mp3</code> as part of the software that comes with it. Or find an MP3 of John Cage's piece 4'33".</div><div><a class="fn_bot" id="fn__4" href="practical-an-mp3-browser#fnt__4">4)</a>The reader supports a bit of syntax, #., that causes the following s-expression to be evaluated at read time. This is occasionally useful in source code but obviously opens a big security hole when you read untrusted data. However, you can turn off this syntax by setting *READ-EVAL* to NIL, which will cause the reader to signal an error if it encounters #..</div><div><a class="fn_bot" id="fn__5" href="practical-an-mp3-browser#fnt__5">5)</a>This solution has its drawbacks–if a browse page returns a lot of results, a fair bit of data is going back and forth under the covers. Also, the database queries aren't necessarily the most efficient. But it does keep the application stateless. An alternative approach is to squirrel away, on the server side, information about the results returned by browse and then, when a request to add songs come in, find the appropriate bit of information in order to re-create the correct set of songs. For instance, you could just save the values list instead of sending it back in the form. Or you could copy the RANDOM-STATE object before you generate the browse results so you can later re-create the same "random" results. But this approach causes its own problems. For instance, you'd then need to worry about when you can get rid of the squirreled-away information; you never know when the user might hit the Back button on their browser to return to an old browse page and then hit the "Add all" button. Welcome to the wonderful world of Web programming.</div></div></div> <table width="100%"> <tbody> <tr> <td width="20%" align="left"> <a href="practical-a-shoutcast-server">Предыдущая</a> </td> <td width="60%" align="center"> <a href="index.html">Оглавление</a> </td> <td width="20%" align="right"> <a href="practical-an-html-generation-library-the-interpreter">Следующая</a> </td> </tr> </tbody> </table> </div> <div class="bottom">@2009-2013 lisper.ru</div> 
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-7734690-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
 </body> </html>