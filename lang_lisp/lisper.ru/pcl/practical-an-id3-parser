<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ru" xml:lang="ru"> <head> <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> <meta name="keywords" content="Common Lisp,lisp,лисп" /> <title>Практика. Разбор ID3</title> <link href="../css/style.css" rel="stylesheet" type="text/css" /><link href="../css/colorize.css" rel="stylesheet" type="text/css" />  </head> <body> <div class="top"> <div id="login"> <a href="http://lisper.ru/register">Регистрация</a> | <a href="http://lisper.ru/login?done=/pcl/practical-an-id3-parser">Войти</a> </div> </div> <div id="caution"> <img alt="Lisp — программируемый язык программирования" src="../image/gecko.png" /> <a href="http://www.vkusnoserver.ru/" target="_blank" style="float: right;"> <img src="../vkusnoserver.png" /> </a> </div> <div id="mainmenu"> <ul> <li> <a href="http://lisper.ru/">Главная</a> </li><li> <a href="http://lisper.ru/articles/">Статьи</a> </li><li> <a href="http://lisper.ru/planet/">Планета</a> </li><li> <a href="http://lisper.ru/forum/">Форум</a> </li><li> <a href="http://lisper.ru/apps/">Сервисы</a> </li><li> <a href="index.html">Practical Common Lisp</a> </li><li> <a href="http://lisper.ru/wiki/">Wiki</a> </li><li> <a href="http://lisper.ru/files/">Файлы</a> </li><li> <a href="http://lisper.ru/search">Поиск</a> </li> </ul> </div> <div id="content"> <table width="100%"> <tbody> <tr> <td width="20%" align="left"> <a href="practical-parsing-binary-files">Предыдущая</a> </td> <td width="60%" align="center"> <a href="index.html">Оглавление</a> </td> <td width="20%" align="right"> <a href="practical-web-programming-with-allegroserve">Следующая</a> </td> </tr> </tbody> </table> <div class="article"><div class="toc"><div class="toc-header">Содержание</div><div class="toc-body"><ul><li><div><a href="practical-an-id3-parser#24. &#x41F;&#x440;&#x430;&#x43A;&#x442;&#x438;&#x43A;&#x430;: &#x440;&#x430;&#x437;&#x431;&#x43E;&#x440; ID3">24. Практика: разбор ID3</a><ul><li><div><a href="practical-an-id3-parser#&#x421;&#x442;&#x440;&#x443;&#x43A;&#x442;&#x443;&#x440;&#x430; &#x442;&#x44D;&#x433;&#x430; ID3v2.">Структура тэга ID3v2.</a></div></li><li><div><a href="practical-an-id3-parser#Defining a Package">Defining a Package</a></div></li><li><div><a href="practical-an-id3-parser#Integer Types">Integer Types</a></div></li><li><div><a href="practical-an-id3-parser#String Types">String Types</a></div></li><li><div><a href="practical-an-id3-parser#ID3 Tag Header">ID3 Tag Header</a></div></li><li><div><a href="practical-an-id3-parser#ID3 Frames">ID3 Frames</a></div></li><li><div><a href="practical-an-id3-parser#&#x41E;&#x431;&#x43D;&#x430;&#x440;&#x443;&#x436;&#x435;&#x43D;&#x438;&#x435; &#x437;&#x430;&#x43F;&#x43E;&#x43B;&#x43D;&#x438;&#x442;&#x435;&#x43B;&#x44F; &#x442;&#x435;&#x433;&#x430;">Обнаружение заполнителя тега</a></div></li><li><div><a href="practical-an-id3-parser#&#x41F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x43A;&#x430; &#x43D;&#x435;&#x441;&#x43A;&#x43E;&#x43B;&#x44C;&#x43A;&#x438;&#x445; &#x432;&#x435;&#x440;&#x441;&#x438;&#x439; ID3">Поддержка нескольких версий ID3</a></div></li><li><div><a href="practical-an-id3-parser#Versioned Frame Base Classes">Versioned Frame Base Classes</a></div></li><li><div><a href="practical-an-id3-parser#Versioned Concrete Frame Classes">Versioned Concrete Frame Classes</a></div></li><li><div><a href="practical-an-id3-parser#&#x41A;&#x430;&#x43A;&#x438;&#x435; &#x444;&#x440;&#x435;&#x439;&#x43C;&#x44B; &#x43D;&#x430; &#x441;&#x430;&#x43C;&#x43E;&#x43C; &#x434;&#x435;&#x43B;&#x435; &#x43D;&#x443;&#x436;&#x43D;&#x44B;?">Какие фреймы на самом деле нужны?</a></div></li><li><div><a href="practical-an-id3-parser#&#x424;&#x440;&#x435;&#x439;&#x43C;&#x44B; &#x442;&#x435;&#x43A;&#x441;&#x442;&#x43E;&#x432;&#x43E;&#x439; &#x438;&#x43D;&#x444;&#x43E;&#x440;&#x43C;&#x430;&#x446;&#x438;&#x438;">Фреймы текстовой информации</a></div></li><li><div><a href="practical-an-id3-parser#&#x424;&#x440;&#x435;&#x439;&#x43C;&#x44B; &#x43A;&#x43E;&#x43C;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x440;&#x438;&#x435;&#x432;">Фреймы комментариев</a></div></li><li><div><a href="practical-an-id3-parser#&#x418;&#x437;&#x432;&#x43B;&#x435;&#x447;&#x435;&#x43D;&#x438;&#x435; &#x438;&#x43D;&#x444;&#x43E;&#x440;&#x43C;&#x430;&#x446;&#x438;&#x438; &#x438;&#x437; &#x442;&#x435;&#x433;&#x430; ID3">Извлечение информации из тега ID3</a></div></li></ul></div></li></ul></div></div>
<div class="chapter" id="24. &#x41F;&#x440;&#x430;&#x43A;&#x442;&#x438;&#x43A;&#x430;: &#x440;&#x430;&#x437;&#x431;&#x43E;&#x440; ID3"><h3>24. Практика: разбор ID3</h3>

<p>Имея библиотеку для разбора двоичных данных, вы уже готовы к созданию кода для чтения и записи в каком-то реальном двоичном формате, например, формате тэгов ID3. Тэги ID3 используются для хранения дополнительной информации в звуковых файлах MP3. Работа с тэгами ID3 будет хорошей проверкой для библиотеки для работы с двоичными данными, потому что формат ID3 – это настоящий, используемый на практике, формат – смесь инженерных компромиссов и характерных решений, которые, тем не менее, выполняют своё назначение. На тот случай, если вы случайно пропустили революцию свободного обмена данными, вот краткий обзор того, что представляют собой тэги ID3, и как они относятся к файлам MP3.
</p>
<p>MP3, или звуковой слой 3 для MPEG<a class="fn_top" id="fnt__1" href="practical-an-id3-parser#fn__1">1)</a>, – это формат для хранения сжатых звуковых данных, разработанный исследователями из Фраунгоферовского института интегральных схем и стандартизованный "Группой экспертов кино"<a class="fn_top" id="fnt__2" href="practical-an-id3-parser#fn__2">2)</a>, объединённым комитетом организаций ISO<a class="fn_top" id="fnt__3" href="practical-an-id3-parser#fn__3">3)</a> и IEC<a class="fn_top" id="fnt__4" href="practical-an-id3-parser#fn__4">4)</a>. Однако, формат MP3 сам по себе определяет только то, как хранить звуковые данные. Это не страшно до тех пор, пока все ваши звуковые файлы обрабатываются каким-то одним приложением, которое может хранить эти метаданные вне звуковых файлов, сохраняя их связь со звуковыми файлами. Однако, как только люди стали обмениваться файлами MP3 через Интернет через такие файлообменные системы, как Napster, они быстро обнаружили, что нужно как-то вставлять метаданные внутрь самих файлов MP3.
</p>
<p>Поскольку стандарт MP3 уже был оформлен, и значительная часть программного обеспечения и оборудования уже была написана и спроектирована, причём так, что они знали, как декодировать существующий формат файлов MP3, то любая схема внедрения информации в файл MP3 была бы такой, что эта информация вынуждено была бы невидима декодерам файлов MP3. Вот тут и появился ID3.
</p>
<p>Первоначально формат ID3, изобретённый программистом Эриком Кэмпом<a class="fn_top" id="fnt__5" href="practical-an-id3-parser#fn__5">5)</a>, представлял собой 128 байт, прилепленных в конце файла MP3, где их не замечало бы большинство программ, работающих с MP3. Эта информация состояла из четырёх тридцатибуквенных полей, являвшихся названием песни, названием альбома, именем исполнителя и комментарием, одного четырёхбайтового поля года и одного однобайтового поля кода жанра произведения. Кэмп придумал стандартные значения первых 80-ти кодов жанров. Nullsoft, производитель программы Winamp, очень популярного MP3-плеера, позже добавили в этот список ещё что-то около 60 жанров.
</p>
<p>Этот формат было легко разбирать, но он был достаточно ограничен. Не было способа сохранить названия более чем в 30 символов, было ограничение в 256 жанров, и значения кодов жанров должны были одинаково восприниматься всеми пользователями, использующими ID3. Не было даже способа сохранить номер дорожки на исходном диске до тех пор, пока другой программист, Микаэль Мутшлер<a class="fn_top" id="fnt__6" href="practical-an-id3-parser#fn__6">6)</a>, не предложил вставлять номер дорожки в поле комментария, отделяя его от остального комментария нулевым байтом, так, чтобы существующее ПО, использующее ID3, которое предположительно читало бы до первого нулевого символа в каждом текстовом поле, игнорировало бы его. Версия Кэмпа теперь называется "ID3 версия 1" (ID3v1), а версия Мутшлера - "ID3 версия 1.1" (ID3v1.1)
</p>
<p>Предложения первой версии, как бы ни ограничены они были, являлись хотя бы частичным решением проблемы хранения метаданных, так что они были  применены многими программами копирования музыки<a class="fn_top" id="fnt__7" href="practical-an-id3-parser#fn__7">7)</a>, сохранявшими тэги ID3 в файлах MP3, и MP3-плеерами, вытаскивавшими эту информацию из тэгов ID3 и показывавшими их пользователю.
</p>
<p>Однако, к 1998 году все эти ограничения стали совсем уже раздражающими, и новая группа разработчиков, возглавляемая Мартином Нильсоном<a class="fn_top" id="fnt__8" href="practical-an-id3-parser#fn__8">8)</a>, начала работу над совершенно новой схемой хранения метаданных, которую ID3v2. Формат ID3v2 крайне гибок, разрешает включать много видов
информации практически без ограничения длины. Также он берёт на вооружение некоторые особенности формата MP3 файла для того, чтобы разместить тэги 
ID3v2 в начале файла MP3.
</p>
<p>Однако, разбирать тэги в формате ID3v2 – задача значительно более сложная, чем тэги в формате версии 1. В этой главе мы будем использовать библиотеку разбора бинарных данных из предыдущей главы для того, чтобы разработать код, который сможет читать и писать тэги в формате ID3v2. Ну или по крайней мере сделаем какое-то приемлимое начало, поскольку если ID3v1 достаточно прост, то ID3v2 порой причудлив до невозможности. Реализация всех закоулков и потаённых уголков спецификации была бы порядочно сложной работой, особенно если бы вы хотели поддержать все три версии, которые были документированы. На самом деле вы можете игнорировать многие возможности в этих спецификациях, поскольку они очень редко используются в "дикой природе".
В качестве закуски вы можете опустить поддержку всей версии 2.4, поскольку она не была широко воспринята и в основном всего лишь добавляла некую вовсе
не нужную гибкость по сравнению с версией 2.3. Я сконцентрируюсь на версии 2.2 и 2.3, потому что обе они широко используются и достаточно сильно отличаются друг от друга, чтобы сделать нашу работу интересной.
</p>


<div class="chapter" id="&#x421;&#x442;&#x440;&#x443;&#x43A;&#x442;&#x443;&#x440;&#x430; &#x442;&#x44D;&#x433;&#x430; ID3v2."><h3>Структура тэга ID3v2.</h3>

<p>До того, как начать кодировать, вам нужно познакомиться с общей структурой тэгов ID3v2. Каждый тэг начинается с заголовка, содержащего информацию о тэге в общем. Первые три байта заголовка содержат строку "ID3" в кодировке ISO-8859-1. То есть это байты с кодами 73, 68 и 51. Затем идут два байта, которые кодирую "старшую версию" и ревизию спецификации ID3, которой тэг намеревается соответствовать. Далее идёт один байт, биты которого интерпретируются как различные флаги. Значение каждого из флагов зависит от версии спецификации. Некоторые из флагов могут влиять на то, как обрабатывается весь тэг целиком.
Байты "старшей версии" на самом деле используются для записи младшей версии спецификации, в то время как ревизия используется для хранения подверсии спецификации. Таким образом поле "старшая версия" тэга, соответствующего спецификации версии 2.3.0, будет 3. Поле ревизии всегда равно нулю, поскольку каждая новая спецификация ID3v2 увеличивала младшую версию, оставляя подверсию нулём. Значение, хранимое в поле старшей версии тэга, как вы увидите, имеет сильное влияние на то, как надо разбирать всю оставшуюся часть тэга.
</p>
<p>Последнее поле в заголовке тэга – это число, закодированное в четырех байтах, в каждом из которых используется лишь по семь бит, содержащее размер всего тэга без учета заголовка.
В тэгах версии 2.3 в заголовке может быть еще несколько дополнительных полей; все остальное – это данные, разделенные на фреймы.
Разные типы фреймов хранят разные виды информации: от простого текста вроде названия песни до встроенного изображения.
Каждый фрейм начинается с заголовка, содержащего строковой идентификатор и размер. В версии 2.3 заголовок фрейма также содержит два байта флагов и – при выставленном флаге – дополнительный однобайтовый код, указывающий, как закодирован остаток фрейма.
</p>
<p>Фреймы – идеальный пример тэгированных структур данных: чтобы разобрать текст тела фрейма, надо прочитать заголовок и использовать идентификатор, чтобы определить, какой вид данных ты читаешь.
</p>
<p>Заголовок ID3 не указывает прямо, сколько фреймов в тэге – он говорит, насколько тот большой, но раз фреймы могут быть разной длины, единственным способом узнать количество фреймов будет прочитать их данные.
К тому же размер, записанный в заголовке, может быть больше, чем реальное количество байтов в данных фреймов; после фреймов могут идти нули для выравнивания под указанный размер. 
Это позволяет программам изменять тэг без переписывания всего MP3-файла<a class="fn_top" id="fnt__9" href="practical-an-id3-parser#fn__9">9)</a>.
</p>
<p>Итак, наши главные задачи: чтение заголовка ID3; определение версии, 2.2 или 2.3; чтение данных всех фреймов до конца тэга или до блока выравнивания.
</p>
</div><div class="chapter" id="Defining a Package"><h3>Defining a Package</h3>

<p>Как и с другими библиотеками, которые мы разработали ранее, тот код, который мы напишем в этой главе, FIXME worth putting в отдельный пакет.
Нам надо будет обращаться к функциям из библиотек binary и pathname из глав 15 и 24, и надо экспортировать имена функций, которые составляют API этого пакета.
Определим его так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpkg.htm" class="symbol"><i><span class="symbol">defpackage</span></i></a> <span class="keyword">:com.gigamonkeys.id3v2</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:use</span> <span class="keyword">:common-lisp</span><br/>        <span class="keyword">:com.gigamonkeys.binary-data</span><br/>        <span class="keyword">:com.gigamonkeys.pathnames</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:export</span><br/>   <span class="keyword">:read-id3</span><br/>   <span class="keyword">:mp3-p</span><br/>   <span class="keyword">:id3-p</span><br/>   <span class="keyword">:album</span><br/>   <span class="keyword">:composer</span><br/>   <span class="keyword">:genre</span><br/>   <span class="keyword">:encoding-program</span><br/>   <span class="keyword">:artist</span><br/>   <span class="keyword">:part-of-set</span><br/>   <span class="keyword">:track</span><br/>   <span class="keyword">:song</span><br/>   <span class="keyword">:year</span><br/>   <span class="keyword">:size</span><br/>   <span class="keyword">:translated-genre</span></span>)</span></span>)</span><br/></pre>

<p>Как обычно, вы можете, и наверное, вам даже следует заменить "com.gigamonkeys" в имени пакета на ваш собственный домен.
</p>
</div><div class="chapter" id="Integer Types"><h3>Integer Types</h3>

<p>Можно начать с определения бинарных типов для чтения и записи некоторых типов примитивов, использующихся в формате ID3, 
несколько целочисленных типов разного размера и четыре вида строк.
</p>
<p>ID3 использует беззнаковые целые, закодированные в одном, двух, трех или четырех байтах.
</p>
<p>Если вы впервые пишете общий двоичный тип для беззнакового целого числа, получающий количество байт для чтения в качестве аргумента, тогда вы можете использовать краткую запись define-binary-type для определения особых типов. Общий тип для беззнаковых целых чисел может выглядеть следующим образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> unsigned-integer <span class="paren2">(<span class="">bytes</span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:reader</span> <span class="paren3">(<span class="">in</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> with value = 0<br/>       for low-bit downfrom <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> 8 <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1-</a> bytes</span>)</span></span>)</span> to 0 by 8 <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a><br/>         <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_ldb.htm" class="symbol">ldb</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_by_by.htm" class="symbol">byte</a> 8 low-bit</span>)</span> value</span>)</span> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rd_by.htm" class="symbol">read-byte</a> in</span>)</span></span>)</span><br/>       finally <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_return.htm" class="symbol">return</a> value</span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:writer</span> <span class="paren3">(<span class="">out value</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for low-bit downfrom <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> 8 <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1-</a> bytes</span>)</span></span>)</span> to 0 by 8<br/>       <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_by.htm" class="symbol">write-byte</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_ldb.htm" class="symbol">ldb</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_by_by.htm" class="symbol">byte</a> 8 low-bit</span>)</span> value</span>)</span> out</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь можно пользоваться короткой формой define-binary-type для определения типов для каждого размера целого из формата ID3:
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> u1 <span class="paren2">(<span class=""/>)</span> <span class="paren2">(<span class="">unsigned-integer <span class="keyword">:bytes</span> 1</span>)</span></span>)</span><br/><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> u2 <span class="paren2">(<span class=""/>)</span> <span class="paren2">(<span class="">unsigned-integer <span class="keyword">:bytes</span> 2</span>)</span></span>)</span><br/><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> u3 <span class="paren2">(<span class=""/>)</span> <span class="paren2">(<span class="">unsigned-integer <span class="keyword">:bytes</span> 3</span>)</span></span>)</span><br/><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> u4 <span class="paren2">(<span class=""/>)</span> <span class="paren2">(<span class="">unsigned-integer <span class="keyword">:bytes</span> 4</span>)</span></span>)</span><br/></pre>

<p>Еще один тип, который надо уметь читать и писать, - это 28-ми битное значение из заголовка.
Целые числа такого размера кодируются особым образом и поэтому их размер не кратен 8 битам. Используется 28 бит, а не 32, потому что тэг ID3 не может содержать байт #xff, за которым идут три включенных бита – такой битовый шаблон имеет особое значение для MP3-декодеров.
В принципе, ни одно поле в заголовке ID3 не может содержать такую последовательность байтов, но если бы размер тэга был закодирован обычным беззнаковым целым, то были бы проблемы.
Чтобы исключить такую возможность, размер кодируется в семи младших битах каждого байта, все старшие всегда нули<a class="fn_top" id="fnt__10" href="practical-an-id3-parser#fn__10">10)</a>.
</p>
<p>Таким образом, оно может быть считано и записано во многом как беззнаковое целое, только размер байта, который передается в LDB, должен быть 7, а не 8.
Это сходство наводит на мысль, что если добавить параметр bits-per-byte к существующему бинарному типу unsigned-integer, тогда можно определить новый тип id3-tag-size, используя короткую форму define-binary-type.
Новая версия unsigned-integer такая же, как старая, только bits-per-byte заменяет прописанную везде в старой 8-ку.
Выглядит так:
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> unsigned-integer <span class="paren2">(<span class="">bytes bits-per-byte</span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:reader</span> <span class="paren3">(<span class="">in</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> with value = 0<br/>       for low-bit downfrom <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> bits-per-byte <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1-</a> bytes</span>)</span></span>)</span> to 0 by bits-per-byte <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a><br/>         <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_ldb.htm" class="symbol">ldb</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_by_by.htm" class="symbol">byte</a> bits-per-byte low-bit</span>)</span> value</span>)</span> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rd_by.htm" class="symbol">read-byte</a> in</span>)</span></span>)</span><br/>       finally <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_return.htm" class="symbol">return</a> value</span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:writer</span> <span class="paren3">(<span class="">out value</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for low-bit downfrom <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> bits-per-byte <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1-</a> bytes</span>)</span></span>)</span> to 0 by bits-per-byte<br/>       <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_by.htm" class="symbol">write-byte</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_ldb.htm" class="symbol">ldb</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_by_by.htm" class="symbol">byte</a> bits-per-byte low-bit</span>)</span> value</span>)</span> out</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь определение id3-tag-size становится тривиальным:
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> id3-tag-size <span class="paren2">(<span class=""/>)</span> <span class="paren2">(<span class="">unsigned-integer <span class="keyword">:bytes</span> 4 <span class="keyword">:bits-per-byte</span> 7</span>)</span></span>)</span><br/></pre>

<p>Также надо изменить определения u1–u4 для указания, что там 8 бит в байте:
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> u1 <span class="paren2">(<span class=""/>)</span> <span class="paren2">(<span class="">unsigned-integer <span class="keyword">:bytes</span> 1 <span class="keyword">:bits-per-byte</span> 8</span>)</span></span>)</span><br/><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> u2 <span class="paren2">(<span class=""/>)</span> <span class="paren2">(<span class="">unsigned-integer <span class="keyword">:bytes</span> 2 <span class="keyword">:bits-per-byte</span> 8</span>)</span></span>)</span><br/><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> u3 <span class="paren2">(<span class=""/>)</span> <span class="paren2">(<span class="">unsigned-integer <span class="keyword">:bytes</span> 3 <span class="keyword">:bits-per-byte</span> 8</span>)</span></span>)</span><br/><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> u4 <span class="paren2">(<span class=""/>)</span> <span class="paren2">(<span class="">unsigned-integer <span class="keyword">:bytes</span> 4 <span class="keyword">:bits-per-byte</span> 8</span>)</span></span>)</span><br/></pre>

</div><div class="chapter" id="String Types"><h3>String Types</h3>

<p>Еще один из примитивных типов, который повсеместно используется в тэге ID3, – это строковый тип.  
В предыдущей главе мы обсудили некоторые вещи, на которые надо обратить внимание, когда имеешь дело со строками в бинарных файлах, такие как разница между кодом знака и кодировкой.
</p>
<p>ID3 использует две разные кодировки: ISO 8859-1 и Unicode. ISO 8859-1, также известный как Latin-1, – это 8-ми битная кодировка, которая дополняет ASCII буквами из языков Восточной Европы.
Другими словами, одни и те же коды от 0 до 127 указывают на одни и те же знаки ASCII и ISO 8859-1, но ISO 8859-1 также позволяет хранить символы с кодами до 255. 
Unicode – это кодировка, созданная для того, чтобы обеспечить кодом практически каждый знак всех на свете языков.
Unicode – надмножество ISO 8859-1 так же, как ISO 8859-1 – надмножество ASCII: коды 0-255 отображаются на одни и те же знаки ISO 8859-1 и Unicode. (Таким образом, Unicode является также и надмножестном ASCII.)
</p>
<p>Поскольку ISO 8859-1 является 8-ми битной кодировкой, она использует один байт на знак. Для Unicode-строк ID3 использует кодировку UCS-2 с меткой порядка байтов<a class="fn_top" id="fnt__11" href="practical-an-id3-parser#fn__11">11)</a>. Через пару мгновений я расскажу, что это такое.
</p>
<p>Чтение и запись этих двух кодировок не является проблемой – это всего лишь вопрос чтения и записи беззнаковых чисел в разных форматах, и мы только что написали код для этого.
Трюк в том, чтобы перевести эти числовые значения в объекты знаков языка Lisp.
</p>
<p>Ваша реализация Lisp возможно использует или Unicode, или ISO 8859-1 в качестве внутренней кодировки.
И раз все значения от 0 до 255 отображаются на одни и те же знаки в ISO 8859-1 и Unicode, то можно использовать функции CODE-CHAR и СHAR-CODE для их транслирования в обе кодировки.
Однако, если ваш Lisp поддерживает только ISO 8859-1, тогда в виде символов Lisp можно будет представить только первые 255 символов Unicode. 
Другими словами, в такой реализации Lisp при попытке обработать ID3-тэг со строкой Unicode, содержащей символ с кодом больше 255, произойдёт ошибка при переводе этого символа с этим кодом в символ Lisp. 
Пока будем считать, что мы или используем Lisp, поддерживающий Unicode, или не будем работать с файлами, содержащими знаки вне досягаемости ISO 8859-1.
</p>
<p>Другая проблема при кодировании строк заключаются в том, что нужно определить, какое количество байт интерпретировать в качестве данных одного символа.
ID3 использует две стратегии, рассмотренные в предыдущей главе: некоторые строки заканчиваются нулевым символом, тогда как другие встречаются на позициях, по которым можно определить количество байт для считывания: или когда строка в том расположении всегда одной длины, или когда она в конце составной структуры, чей размер известен.
Тем не менее обратите внимание, что количество байт не обязательно совпадает с количеством знаков в строке.
</p>
<p>Складывая все эти варианты вместе, получим, что формат ID3 использует четыре способа чтения и записи строк: два вида знаков на два вида разграничения строковых данных.
</p>
<p>Очевидно, значительная часть логики чтения и записи строк будет полностью совпадать.
Так что, можно начать с определения двух бинарных типов: один для чтения строк заданной длины (в знаках) FIXME(не понял, почему в знаках, а не в байтах) и другой для чтения строк с символом окончания строки.
Оба пользуются тем, что тип, передаваемый в read-value и write-value, это такие же данные;
Вы можете указать тип символа в качестве параметра при чтении этих типов.
Этой техникой мы будем пользоваться довольно часто в этой главе.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> generic-string <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> character-type</span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:reader</span> <span class="paren3">(<span class="">in</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_stg.htm" class="symbol">make-string</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a></span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_dotime.htm" class="symbol">dotimes</a> <span class="paren5">(<span class="">i <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a></span>)</span><br/>        <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a> i</span>)</span> <span class="paren6">(<span class="">read-value character-type in</span>)</span></span>)</span></span>)</span><br/>      <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:writer</span> <span class="paren3">(<span class="">out <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_dotime.htm" class="symbol">dotimes</a> <span class="paren4">(<span class="">i <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a></span>)</span><br/>      <span class="paren4">(<span class="">write-value character-type out <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a> i</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> generic-terminated-string <span class="paren2">(<span class="">terminator character-type</span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:reader</span> <span class="paren3">(<span class="">in</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_out_.htm" class="symbol"><i><span class="symbol">with-output-to-string</span></i></a> <span class="paren4">(<span class="">s</span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a> = <span class="paren5">(<span class="">read-value character-type in</span>)</span><br/>            until <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_chareq.htm" class="symbol">char=</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a> terminator</span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_cha.htm" class="symbol">write-char</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a> s</span>)</span></span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:writer</span> <span class="paren3">(<span class="">out <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a> across <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a><br/>          <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren4">(<span class="">write-value character-type out <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a></span>)</span><br/>          finally <span class="paren4">(<span class="">write-value character-type out terminator</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>С этими типами несложно будет прочитать строки ISO 8859-1.
Поскольку character-type, который передается в read-value и write-value должен быть именем бинарного типа, то надо определить iso-8859-1-char.
Здесь же неплохо разместить немного дополнительных проверок допустимости кода читаемого или записываемого символа.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> iso-8859-1-char <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:reader</span> <span class="paren3">(<span class="">in</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">code <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rd_by.htm" class="symbol">read-byte</a> in</span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_code_c.htm" class="symbol">code-char</a> code</span>)</span><br/>          <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_error.htm" class="symbol">error</a> <span class="string">"Character code ~d not supported"</span> code</span>)</span></span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:writer</span> <span class="paren3">(<span class="">out <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">code <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_c.htm" class="symbol">char-code</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a></span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren5">(<span class="">&lt;= 0 code #xff</span>)</span><br/>          <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_by.htm" class="symbol">write-byte</a> code out</span>)</span><br/>          <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_error.htm" class="symbol">error</a> <span class="string">"Illegal character for iso-8859-1 encoding: character: ~c with code: ~d"</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a> code</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь определение строк ISO 8859-1 становится тривиальным:
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> iso-8859-1-string <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a></span>)</span><br/>  <span class="paren2">(<span class="">generic-string <span class="keyword">:length</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> <span class="keyword">:character-type</span> 'iso-8859-1-char</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> iso-8859-1-terminated-string <span class="paren2">(<span class="">terminator</span>)</span><br/>  <span class="paren2">(<span class="">generic-terminated-string <span class="keyword">:terminator</span> terminator <span class="keyword">:character-type</span> 'iso-8859-1-char</span>)</span></span>)</span><br/></pre>

<p>Чтение строк UCS-2 лишь немногим сложнее. 
Трудности возникают из-за того, что можно кодировать UCS-2 двумя способами: 
в порядке байтов от старшего к младшему (big-endian) или от младшего к старшему (little-endian).
Поэтому строки UCS-2 начинаются с двух дополнительных байтов, которые называются меткой порядка байтов, состоящих из числового значения #xfeff, закодированных или в порядке big-endian, или в little-endian.
При чтении строки UCS-2, надо прочитать метку порядка байтов, а потом, в зависимости от ее значения,
читать знаки в порядке big-endian или в little-endian.
Так что понадобится два разных типа знаков UCS-2.
Но нужна только одна версия проверки допустимости кода.
Значит можно определить параметризованный бинарный тип:
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> ucs-2-char <span class="paren2">(<span class="">swap</span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:reader</span> <span class="paren3">(<span class="">in</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">code <span class="paren6">(<span class="">read-value 'u2 in</span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> swap <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> code <span class="paren6">(<span class="">swap-bytes code</span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_code_c.htm" class="symbol">code-char</a> code</span>)</span> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_error.htm" class="symbol">error</a> <span class="string">"Character code ~d not supported"</span> code</span>)</span></span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:writer</span> <span class="paren3">(<span class="">out <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">code <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_c.htm" class="symbol">char-code</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a></span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">unless</a> <span class="paren5">(<span class="">&lt;= 0 code #xffff</span>)</span><br/>        <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_error.htm" class="symbol">error</a> <span class="string">"Illegal character for ucs-2 encoding: ~c with char-code: ~d"</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a> code</span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> swap <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> code <span class="paren6">(<span class="">swap-bytes code</span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class="">write-value 'u2 out code</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>где функция swap-bytes может быть определена следующим образом, позволяющим получить преимущества от использования LDB SETF и ROTATEF:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> swap-bytes <span class="paren2">(<span class="">code</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_assert.htm" class="symbol">assert</a> <span class="paren3">(<span class="">&lt;= code #xffff</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_rotate.htm" class="symbol">rotatef</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_ldb.htm" class="symbol">ldb</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_by_by.htm" class="symbol">byte</a> 8 0</span>)</span> code</span>)</span> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_ldb.htm" class="symbol">ldb</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_by_by.htm" class="symbol">byte</a> 8 8</span>)</span> code</span>)</span></span>)</span><br/>  code</span>)</span><br/></pre>

<p>Используя ucs-2-char, определим два типа знаков, которые будут использоваться в качестве аргумента character-type функций обобщенных строк.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> ucs-2-char-big-endian <span class="paren2">(<span class=""/>)</span> <span class="paren2">(<span class="">ucs-2-char <span class="keyword">:swap</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> ucs-2-char-little-endian <span class="paren2">(<span class=""/>)</span> <span class="paren2">(<span class="">ucs-2-char <span class="keyword">:swap</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a></span>)</span></span>)</span><br/></pre>

<p>Затем нужна функция, которая возвращает тип знаков, которые будут использоваться в зависимости от метки порядка байтов.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> ucs-2-char-type <span class="paren2">(<span class="">byte-order-mark</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> byte-order-mark<br/>    <span class="paren3">(<span class="">#xfeff 'ucs-2-char-big-endian</span>)</span><br/>    <span class="paren3">(<span class="">#xfffe 'ucs-2-char-little-endian</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь вы можете определить для строк кодированных по методу UCS-2 строковые типы с заранее заданной длиной или завершающим символом строки,
которые читают метку порядка байтов и определяют, какой вариант знаков UCS-2 передавать в качестве аргумента character-type в read-value и write-value.
Единственная сложность заключается в том,
что надо пересчитать аргумент length из количества байт в количество знаков, которые нужно прочитать с учётом метки порядка байтов.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> ucs-2-string <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:reader</span> <span class="paren3">(<span class="">in</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">byte-order-mark <span class="paren6">(<span class="">read-value 'u2 in</span>)</span></span>)</span><br/>          <span class="paren5">(<span class="">characters <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1-</a> <span class="paren1">(<span class="">/ <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> 2</span>)</span></span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class="">read-value<br/>       'generic-string in<br/>       <span class="keyword">:length</span> characters<br/>       <span class="keyword">:character-type</span> <span class="paren5">(<span class="">ucs-2-char-type byte-order-mark</span>)</span></span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:writer</span> <span class="paren3">(<span class="">out <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span><br/>    <span class="paren3">(<span class="">write-value 'u2 out #xfeff</span>)</span><br/>    <span class="paren3">(<span class="">write-value<br/>     'generic-string out <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a><br/>     <span class="keyword">:length</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span><br/>     <span class="keyword">:character-type</span> <span class="paren4">(<span class="">ucs-2-char-type #xfeff</span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> ucs-2-terminated-string <span class="paren2">(<span class="">terminator</span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:reader</span> <span class="paren3">(<span class="">in</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">byte-order-mark <span class="paren6">(<span class="">read-value 'u2 in</span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class="">read-value<br/>       'generic-terminated-string in<br/>       <span class="keyword">:terminator</span> terminator<br/>       <span class="keyword">:character-type</span> <span class="paren5">(<span class="">ucs-2-char-type byte-order-mark</span>)</span></span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:writer</span> <span class="paren3">(<span class="">out <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span><br/>    <span class="paren3">(<span class="">write-value 'u2 out #xfeff</span>)</span><br/>    <span class="paren3">(<span class="">write-value <br/>     'generic-terminated-string out <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a><br/>     <span class="keyword">:terminator</span> terminator<br/>     <span class="keyword">:character-type</span> <span class="paren4">(<span class="">ucs-2-char-type #xfeff</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

</div><div class="chapter" id="ID3 Tag Header"><h3>ID3 Tag Header</h3>

<p>Закончив с основными примитивными типами, мы готовы перейти к более общей картине и начать определять бинарные классы для представления сначала тэга ID3 в целом, а потом и отдельных фреймов.
</p>
<p>Если заглянуть в спецификацию ID3v2.2, то мы увидим, что в основе структуры тэга такой заголовок:
</p>
<pre class="code"><p>ID3/file identifier      "ID3"<br/>
ID3 version              $02 00<br/>
ID3 flags                %xx000000<br/>
ID3 size             4 * %0xxxxxxx<br/></p></pre>

<p>за которым идут данные фреймов и выравнивание.
Поскольку мы уже определили типы для чтения и записи всех полей в этом заголовке, определение класса, который сможет читать заголовок ID3, это всего лишь вопрос их объединения.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-class</span></i> id3-tag <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">identifier     <span class="paren4">(<span class="">iso-8859-1-string <span class="keyword">:length</span> 3</span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">major-version  u1</span>)</span><br/>   <span class="paren3">(<span class="">revision       u1</span>)</span><br/>   <span class="paren3">(<span class="">flags          u1</span>)</span><br/>   <span class="paren3">(<span class="">size           id3-tag-size</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Если у вас под рукой есть какой-нибудь MP3-файл, вы можете проверить всю эту кучу кода и заодно посмотреть, какую версию тэга ID3 он содержит. Для начала напишем функцию, которая считывает только что определенный id3-tag из начала файла. Надо понимать, тем не менее, что тэг ID3 не обязан находиться в начале файла, хотя в наши дни он почти всегда там.
Чтобы найти тэг ID3 где-то еще в файле, последний можно просканировать в поисках последовательности байтов 73, 68, 51 (другими словами, это строка "ID3")<a class="fn_top" id="fnt__12" href="practical-an-id3-parser#fn__12">12)</a>. Правда, сейчас уже, наверное, можно считать, что файлы начинаются с тэгов.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> read-id3 <span class="paren2">(<span class="">file</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_open.htm" class="symbol"><i><span class="symbol">with-open-file</span></i></a> <span class="paren3">(<span class="">in file <span class="keyword">:element-type</span> '<span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/t_unsgn_.htm" class="symbol">unsigned-byte</a> 8</span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">read-value 'id3-tag in</span>)</span></span>)</span></span>)</span><br/></pre>

<p>На основе этой функции можно написать другую, которая получает имя файла и печатает информацию из заголовка тэга вместе с именем файла.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> show-tag-header <span class="paren2">(<span class="">file</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_slts.htm" class="symbol"><i><span class="symbol">with-slots</span></i></a> <span class="paren3">(<span class="">identifier major-version revision flags size</span>)</span> <span class="paren3">(<span class="">read-id3 file</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"~a ~d.~d ~8,'0b ~d bytes -- ~a~%"</span><br/>            identifier major-version revision flags size <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_namest.htm" class="symbol">enough-namestring</a> file</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Она выдаст примерно следующее:
</p>
<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class="">show-tag-header <span class="string">"/usr2/mp3/Kitka/Wintersongs/02 Byla Cesta.mp3"</span></span>)</span><br/>
ID3 2.0 00000000 2165 bytes -- Kitka/Wintersongs/02 Byla Cesta.mp3<br/>
NIL<br/></p></pre>

<p>Конечно, чтобы определить, какая версия ID3 встречается чаще всего в вашей библиотеке, лучше бы иметь функцию, которая выдает сводку по всем MP3-файлам в директории. Такую легко реализовать с помощью функции walk-directory из главы 15. Для начала определим вспомогательную функцию, которая проверяет, что у файла расширение MP3.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> mp3-p <span class="paren2">(<span class="">file</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a><br/>   <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_not.htm" class="symbol">not</a> <span class="paren4">(<span class="">directory-pathname-p file</span>)</span></span>)</span><br/>   <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm" class="symbol">string-equal</a> <span class="string">"mp3"</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_pn_hos.htm" class="symbol">pathname-type</a> file</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Затем соединим show-tag-header, mp3-p с walk-directory, чтобы печатать сводку по заголовкам ID3 в файлах в заданной директории.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> show-tag-headers <span class="paren2">(<span class="">dir</span>)</span> <br/>  <span class="paren2">(<span class="">walk-directory dir #'show-tag-header <span class="keyword">:test</span> #'mp3-p</span>)</span></span>)</span><br/></pre>

<p>Однако, если у вас много MP3-файлов, вы можете пожелать просто посчитать, сколько тэгов ID3 каждой версии у вас в MP3 коллекции.
Для получения этой информации, можно было бы написать такую функцию:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> count-versions <span class="paren2">(<span class="">dir</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">versions <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mapc_.htm" class="symbol">mapcar</a> #'<span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_lambda.htm" class="symbol"><i><span class="symbol">lambda</span></i></a> <span class="paren1">(<span class="">x</span>)</span> <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_cons.htm" class="symbol">cons</a> x 0</span>)</span></span>)</span> '<span class="paren6">(<span class="">2 3 4</span>)</span></span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_flet_.htm" class="symbol"><i><span class="symbol">flet</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">count-version <span class="paren6">(<span class="">file</span>)</span><br/>             <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_car_c.htm" class="symbol">cdr</a> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_assocc.htm" class="symbol">assoc</a> <span class="paren3">(<span class="">major-version <span class="paren4">(<span class="">read-id3 file</span>)</span></span>)</span> versions</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class="">walk-directory dir #'count-version <span class="keyword">:test</span> #'mp3-p</span>)</span></span>)</span><br/>    versions</span>)</span></span>)</span><br/></pre>

<p>Другая функция, которая понадобится в главе 29, для проверки, что файл действительно начинается с тэга ID3, которую можно определить вот так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> id3-p <span class="paren2">(<span class="">file</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_open.htm" class="symbol"><i><span class="symbol">with-open-file</span></i></a> <span class="paren3">(<span class="">in file <span class="keyword">:element-type</span> '<span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/t_unsgn_.htm" class="symbol">unsigned-byte</a> 8</span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm" class="symbol">string=</a> <span class="string">"ID3"</span> <span class="paren4">(<span class="">read-value 'iso-8859-1-string in <span class="keyword">:length</span> 3</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

</div><div class="chapter" id="ID3 Frames"><h3>ID3 Frames</h3>

<p>Как я объяснял ранее, основная часть тэга ID3 разделена на фреймы.
Каждый фрейм имеет структуру, похожую на структуру всего тэга.
Каждый фрейм начинается с заголовка, указывающего вид фрейма и размер фрейма в байтах.
Структура заголовка фрейма немного разная у версий 2.2 и 2.3 формата ID3, и так получилось, что нам придется работать с обеими формами. Для начала обратим внимание на разбор версии 2.2.
</p>
<p>Заголовок в версии 2.2 состоит из трех байт, которые кодируют трехбуквенную ISO 8859-1 строку, за которой идет трехбайтовое беззнаковое число, указывающее размер фрейма в байтах без шестибайтового заголовка.
Строка указывает тип фрейма, что определяет, как мы будем разбирать данные.
Это как раз та ситуация, для которой мы определили макрос define-tagged-binary-class.
Мы можем определить класс тэга, который читает заголовок фрейма и затем подбирает подходящий конкретный класс, используя функцию, которая отображает ID на имя класса.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-tagged-binary-class</span></i> id3-frame <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">id <span class="paren4">(<span class="">iso-8859-1-string <span class="keyword">:length</span> 3</span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">size u3</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:dispatch</span> <span class="paren3">(<span class="">find-frame-class id</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь мы готовы начать реализацию конкретных классов фреймов.
Однако, спецификация определяет очень мало – 63 в версии 2.2 и несколько больше в более поздних версиях.
Даже считая типы фреймов, которые имеют общую структуру, эквивалентными, мы все еще получим 24 уникальных типа в версии 2.2. 
Но только несколько из них используется на практике.
Так что, вместо того, чтобы сразу приступить 
Прежде чем приступить к немедленной работе по определению классов для каждого типа фреймов, сначала нужно написать общий класс фрейма, который позволить вам читать фреймы с тегом, без реальной обработки данных внутри самих фреймов. Это позволить вам определить, какие фреймы действительно присутствуют в обрабатываемом MP3-файле. Вам в любом случае нужен этот класс, поскольку спецификация допускает использование экспериментальных фреймов, которые вам потребуется прочитать без обработки.
</p>
<p>Так как поле размера из заголовка фрейма точно говорит вам, какова длинна фрейма в байтах, вы можете определить класс generic-frame (обобщённый фрейм), который расширяет id3-frame и добавляет единственное поле, data, которое будет содержать массив байт.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-class</span></i> generic-frame <span class="paren2">(<span class="">id3-frame</span>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">data <span class="paren4">(<span class="">raw-bytes <span class="keyword">:size</span> size</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Тип поля data, raw-bytes, должен просто содержать массив байт. Вы можете определить его вот так:
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> raw-bytes <span class="paren2">(<span class="">size</span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:reader</span> <span class="paren3">(<span class="">in</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">buf <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ar.htm" class="symbol">make-array</a> size <span class="keyword">:element-type</span> '<span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/t_unsgn_.htm" class="symbol">unsigned-byte</a> 8</span>)</span></span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rd_seq.htm" class="symbol">read-sequence</a> buf in</span>)</span><br/>      buf</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:writer</span> <span class="paren3">(<span class="">out buf</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_seq.htm" class="symbol">write-sequence</a> buf out</span>)</span></span>)</span></span>)</span><br/></pre>

<p>На данный момент, нам нужно, чтобы все фреймы читались как greneric-frame, так что можно определить функцию find-frame-class, которая используется в выражении :dispatch в классе id3-frame так, чтобы она всегда возвращала generic-frame, не обращая внимания на индентификатор фрейма.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> find-frame-class <span class="paren2">(<span class="">id</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_declar.htm" class="symbol">declare</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/d_ignore.htm" class="symbol">ignore</a> id</span>)</span></span>)</span><br/>  'generic-frame</span>)</span><br/></pre>

<p>Вам придётся модифицицировать id3-tag так, что он будет читать фреймы после полей заголовка. Есть только одна малеькая трудность в чтении данных фреймов: несмотря на то, что заголовок тега указывает, каков размер тега, в это числов включен и заполнитель, который может идти за данными фреймов. Так как заголовок тега не говорит вам, сколько фреймов содержит тег, единственный способ определить, что вы натолкнулись на заполнитель - найти нулевой байт там, где вы ожидали идентификатор фрейма.
</p>
<p>Чтобы управится с этим, можно определить бинарный тип id3-frames, который будет ответственен за чтение остатка тега, создание объектов фреймов для представления всех найденных фреймов и пропуск заполнителя. Этот тип будет принимать как параметр размер тега, который он сможет использовать, чтобы избежать чтения за концом тега. Но читающему коду ещё и придётся определять начало заполнителя, который может следовать за данными фрейма в теге. Вместо того, чтобы вызывать read-value прямо в форме :reader типа id3-frames, лучше использовать функцию read-frame, определив её так, чтобы она возвращала NIL, когда обнаружит заполнитель, иначе возвращая объект id3-frame, прочитанный через read-value. Предпологая, что read-frame определена так, что она читает только один байт после конца предыдущего фрейма для обнаружения заполнителя, можно определить бинарный тип id3-frames так:
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> id3-frames <span class="paren2">(<span class="">tag-size</span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:reader</span> <span class="paren3">(<span class="">in</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> with to-read = tag-size<br/>          while <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_minusp.htm" class="symbol">plusp</a> to-read</span>)</span><br/>          for frame = <span class="paren4">(<span class="">read-frame in</span>)</span><br/>          while frame<br/>          <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">decf</a> to-read <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> 6 <span class="paren6">(<span class="">size frame</span>)</span></span>)</span></span>)</span><br/>          collect frame<br/>          finally <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> repeat <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1-</a> to-read</span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rd_by.htm" class="symbol">read-byte</a> in</span>)</span></span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:writer</span> <span class="paren3">(<span class="">out frames</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> with to-write = tag-size<br/>          for frame in frames<br/>          <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren4">(<span class="">write-value 'id3-frame out frame</span>)</span><br/>          <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">decf</a> to-write <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> 6 <span class="paren6">(<span class="">size frame</span>)</span></span>)</span></span>)</span><br/>          finally <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> repeat to-write <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_by.htm" class="symbol">write-byte</a> 0 out</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Следующим кодом мы добавим слот frames в id3-tag.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-class</span></i> id3-tag <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">identifier     <span class="paren4">(<span class="">iso-8859-1-string <span class="keyword">:length</span> 3</span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">major-version  u1</span>)</span><br/>   <span class="paren3">(<span class="">revision       u1</span>)</span><br/>   <span class="paren3">(<span class="">flags          u1</span>)</span><br/>   <span class="paren3">(<span class="">size           id3-tag-size</span>)</span><br/>   <span class="paren3">(<span class="">frames         <span class="paren4">(<span class="">id3-frames <span class="keyword">:tag-size</span> size</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

</div><div class="chapter" id="&#x41E;&#x431;&#x43D;&#x430;&#x440;&#x443;&#x436;&#x435;&#x43D;&#x438;&#x435; &#x437;&#x430;&#x43F;&#x43E;&#x43B;&#x43D;&#x438;&#x442;&#x435;&#x43B;&#x44F; &#x442;&#x435;&#x433;&#x430;"><h3>Обнаружение заполнителя тега</h3>

<p>Теперь всё, что осталось доделать - реализовать <code>read-frame</code>. Это потребует немного сноровки, так как код, который на самом деле читает байты из потока, лежит на несколько уровней ниже <code>read-frame</code>.
</p>
<p>То, что вам бы действительно хотелось делать в <code>read-frame</code> - прочитать один байт и, если он нулевой, вернуть <code>NIL</code>, в противном случае прочитать фрейм при помощи <code>read-value</code>. К несчастью, если вы прочитаете байт в <code>read-frame</code>, то он не сможет быть заново прочитан <code>read-value</code>.(примечание 6)
</p>
<p>Выходит, это прекрасная возможность использовать систему условий – вы можете устроить проверку на нулевые байты в коде нижнего уровня, читающем поток, и сигнализировать условие, когда прочитан ноль; <code>read-frame</code> сможет затем обработать условие, размотав стек до того, как будут прочитаны следующие байты. В дополнение к тому, что это аккуратное решение проблемы обнаружения начала заполнителя тега, это также и пример, как можно использовать условия для целей, отличных от обработки ошибок.
</p>
<p>Можно начать с определения типа условия, который будет сигнализирован кодом нижнего уровня и обработан кодом верхнего уровня. Этому условию не нужны слоты - вам просто нужен отдельный класс условия, чтобы знать, что другой код не будет сигнализировать или обрабатывать его.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defi_5.htm" class="symbol"><i><span class="symbol">define-condition</span></i></a> in-padding <span class="paren2">(<span class=""/>)</span> <span class="paren2">(<span class=""/>)</span></span>)</span><br/></pre>

<p>Затем, вам нужно определить бинарный тип, чей <code>:reader</code> читает данное число байт, сначала читая один байт и сигнализируя условие <code>in-padding</code>, если он нулевой и, иначе, читая оставшиеся байты как <code>iso-8859-1-string</code> и
соединяя их с первым прочитанным.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> frame-id <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:reader</span> <span class="paren3">(<span class="">in</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">first-byte <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rd_by.htm" class="symbol">read-byte</a> in</span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren5">(<span class="">= first-byte 0</span>)</span> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_signal.htm" class="symbol">signal</a> 'in-padding</span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren5">(<span class=""><span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rest.htm" class="symbol">rest</a> <span class="paren1">(<span class="">read-value 'iso-8859-1-string in <span class="keyword">:length</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1-</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a></span>)</span></span>)</span></span>)</span></span>)</span><br/>        <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_concat.htm" class="symbol">concatenate</a><br/>         '<a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a> <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_code_c.htm" class="symbol">code-char</a> first-byte</span>)</span></span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rest.htm" class="symbol">rest</a></span>)</span></span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:writer</span> <span class="paren3">(<span class="">out id</span>)</span><br/>    <span class="paren3">(<span class="">write-value 'iso-8859-1-string out id <span class="keyword">:length</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Если переопределить <code>id3-frame</code> так, чтобы тип его слота <code>id</code> был <code>frame-id</code>, а не <code>iso-8859-1-string</code>, условие будет сигнализировано, когда метод <code>read-value</code> класса <code>id3-frame</code> прочтёт нулевой байт вместо начала фрейма.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-tagged-binary-class</span></i> id3-frame <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">id <span class="paren4">(<span class="">frame-id <span class="keyword">:length</span> 3</span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">size u3</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:dispatch</span> <span class="paren3">(<span class="">find-frame-class id</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь все, что нужно сделать <code>read-frame</code> - это обернуть вызов <code>read-value</code> в <code>HANDLER-CASE</code>, который обработает условие <code>in-padding</code>, просто вернув <code>NIL</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> read-frame <span class="paren2">(<span class="">in</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_hand_1.htm" class="symbol">handler-case</a> <span class="paren3">(<span class="">read-value 'id3-frame in</span>)</span><br/>    <span class="paren3">(<span class="">in-padding <span class="paren4">(<span class=""/>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Определив <code>read-frame</code>, вы можете прочитать ID3 тег версии 2.2 целиком, представляя фреймы экземплярами <code>generic-frame</code>. В секции "Какие фреймы вам на самом деле нужны?", вы проведёте несколько экспериментов в REPL, чтобы определить, какие классы фреймов вам нужно реализовать. Но сначала давайте добавим поддержку для тегов ID3 версии 2.3.
</p>

</div><div class="chapter" id="&#x41F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x43A;&#x430; &#x43D;&#x435;&#x441;&#x43A;&#x43E;&#x43B;&#x44C;&#x43A;&#x438;&#x445; &#x432;&#x435;&#x440;&#x441;&#x438;&#x439; ID3"><h3>Поддержка нескольких версий ID3</h3>

<p>На данный момент, <code>id3-tag</code> определён с помощью <code>define-binary-class</code>, но, если вы хотите поддерживать различные версии ID3, больше смысла в использовании <code>define-tagged-binary-class</code>, который диспетчеризует значение <code>major-version</code>. Как выясняется, всё версии ID3v2 имеют одну и ту же структуру вплоть до поля <code>size</code>. Итак, вы можете определить помеченный бинарный класс, как в следующем коде, который определяет базовую структуру и потом передаёт управление подходящему подклассу, специфичному для данной версии:
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-tagged-binary-class</span></i> id3-tag <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">identifier     <span class="paren4">(<span class="">iso-8859-1-string <span class="keyword">:length</span> 3</span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">major-version  u1</span>)</span><br/>   <span class="paren3">(<span class="">revision       u1</span>)</span><br/>   <span class="paren3">(<span class="">flags          u1</span>)</span><br/>   <span class="paren3">(<span class="">size           id3-tag-size</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:dispatch</span> <br/>   <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> major-version<br/>     <span class="paren4">(<span class="">2 'id3v2.2-tag</span>)</span><br/>     <span class="paren4">(<span class="">3 'id3v2.3-tag</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теги версий 2.2 и 2.3 различаются в двух местах. Во-первых, заголовок тега версии 2.3 может быть содержать вплоть до четырёх необязательных дополнительных полей заголовка, что определяется значениями в поле <code>flags</code>. Во-вторых, формат фрейма сменился между версией 2.2 и версией 2.3, что означает, что вам придётся использовать различные классы для представления фреймов версии 2.2 и фреймов, соответствующих версии 2.3.
</p>
<p>Так как новый класс <code>id3-tag</code> основан на том классе, который вы первоначально написали для представления тега версии 2.2, не удивительно, что новый класс <code>id3v2.2-tag</code> тривиален, наследуя большую часть слотов от нового класса <code>id3-tag</code> и добавляя один недостающий слот, <code>frames</code>. Так как теги версиий 2.2 и 2.3 используют различные форматы фреймов, вам придётся изменить тип <code>id3-frames так</code>, чтобы он параметризовался типом фрейма для чтения. Но сейчас предположим, что вы это сделаете, и добавим аргумент <code>:frame-type</code> к дескриптору типов <code>id3-frames</code> так:
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-class</span></i> id3v2.2-tag <span class="paren2">(<span class="">id3-tag</span>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">frames <span class="paren4">(<span class="">id3-frames <span class="keyword">:tag-size</span> size <span class="keyword">:frame-type</span> 'id3v2.2-frame</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Класс <code>id3v2.3-tag</code> немого более сложен из-за необязательных полей. Первые три из четырёх необязательных полей добавляются, когда установлен шестой бит в поле <code>flags</code>. Они представляют собой четырёхбайтовое целое, указывающее размер расширенного заголовка, два байта флагов и ещё одно четырёхбайтовое целое, указывающее, сколько байт заполнителя включено в тег<a class="fn_top" id="fnt__13" href="practical-an-id3-parser#fn__13">13)</a>. Четвёртое необязательное поле добавляется, когда установлен пятнадцатый бит дополнительных флагов заголовка - четырёхбайтовая циклическая избыточностная проверка (CRC) оставшейся части тега.
</p>
<p>Библиотека двоичных данных не предоставляет никакой специальной поддержки для необязательных полей в двоичном классе, но выходит так, что хватает обычных параметризованных двоичных типов. Вы можете определить тип, параметризованный именем типа и значением, которые указывает, должно ли быть значение этого типа быть действительно прочитано или записано.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> optional <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:reader</span> <span class="paren3">(<span class="">in</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren4">(<span class="">read-value <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> in</span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:writer</span> <span class="paren3">(<span class="">out value</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren4">(<span class="">write-value <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> out value</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Использование <code>if</code> как имени параметра кажется немного странным в этом коде, но оно делает дескрипторы необязательных типов волне читаемыми. 
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-class</span></i> id3v2.3-tag <span class="paren2">(<span class="">id3-tag</span>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">extended-header-size <span class="paren4">(<span class="">optional <span class="keyword">:type</span> 'u4 <span class="keyword">:if</span> <span class="paren5">(<span class="">extended-p flags</span>)</span></span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">extra-flags          <span class="paren4">(<span class="">optional <span class="keyword">:type</span> 'u2 <span class="keyword">:if</span> <span class="paren5">(<span class="">extended-p flags</span>)</span></span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">padding-size         <span class="paren4">(<span class="">optional <span class="keyword">:type</span> 'u4 <span class="keyword">:if</span> <span class="paren5">(<span class="">extended-p flags</span>)</span></span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">crc                  <span class="paren4">(<span class="">optional <span class="keyword">:type</span> 'u4 <span class="keyword">:if</span> <span class="paren5">(<span class="">crc-p flags extra-flags</span>)</span></span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">frames               <span class="paren4">(<span class="">id3-frames <span class="keyword">:tag-size</span> size <span class="keyword">:frame-type</span> 'id3v2.3-frame</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>где <code>extended-p</code> и <code>crc-p</code> - вспомогательные функции, которые проверяют соответствующий бит флагов, переданных им. Чтобы определить, выставлен отдельный бит в целом числе или нет, можно использовать <code>LOGBITP</code>, ещё одну жонглирующую битами функцию. Она принимает индекс и целое и возвращает истину, если указанный бит установлен в числе.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> extended-p <span class="paren2">(<span class="">flags</span>)</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_logbtp.htm" class="symbol">logbitp</a> 6 flags</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> crc-p <span class="paren2">(<span class="">flags extra-flags</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <span class="paren3">(<span class="">extended-p flags</span>)</span> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_logbtp.htm" class="symbol">logbitp</a> 15 extra-flags</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Как и в классе тега версии 2.2, слот <code>frames</code> определяется с типом <code>id3-frames</code>, передавая имя типа фрейма как параметр. Вам, однако, придётся сделать незначительные изменения в <code>id3-frames</code> и <code>read-frame</code> для поддержки дополнительного параметра <code>frame-type</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> id3-frames <span class="paren2">(<span class="">tag-size frame-type</span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:reader</span> <span class="paren3">(<span class="">in</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> with to-read = tag-size<br/>          while <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_minusp.htm" class="symbol">plusp</a> to-read</span>)</span><br/>          for frame = <span class="paren4">(<span class="">read-frame frame-type in</span>)</span><br/>          while frame<br/>          <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">decf</a> to-read <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> <span class="paren6">(<span class="">frame-header-size frame</span>)</span> <span class="paren6">(<span class="">size frame</span>)</span></span>)</span></span>)</span><br/>          collect frame<br/>          finally <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> repeat <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1-</a> to-read</span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rd_by.htm" class="symbol">read-byte</a> in</span>)</span></span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:writer</span> <span class="paren3">(<span class="">out frames</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> with to-write = tag-size<br/>          for frame in frames<br/>          <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren4">(<span class="">write-value frame-type out frame</span>)</span><br/>          <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">decf</a> to-write <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> <span class="paren6">(<span class="">frame-header-size frame</span>)</span> <span class="paren6">(<span class="">size frame</span>)</span></span>)</span></span>)</span><br/>          finally <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> repeat to-write <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_by.htm" class="symbol">write-byte</a> 0 out</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> read-frame <span class="paren2">(<span class="">frame-type in</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_hand_1.htm" class="symbol">handler-case</a> <span class="paren3">(<span class="">read-value frame-type in</span>)</span><br/>    <span class="paren3">(<span class="">in-padding <span class="paren4">(<span class=""/>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Изменения заключены в вызовах <code>read-frame</code> и <code>write-value</code>, где вам нужно передать аргумент <code>frame-type</code>, и в вычислении размера фрейма, где нужно использовать функцию <code>frame-header-size</code>, а не прописать значение 6, так как размер заголовка изменился между версиями 2.2 и 2.3. Так как различие в результате этой функции основано на классе фрейма, имеет смысл определить обобщённую функцию так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defgen.htm" class="symbol"><i><span class="symbol">defgeneric</span></i></a> frame-header-size <span class="paren2">(<span class="">frame</span>)</span></span>)</span><br/></pre>

<p>Вы определите необходимые методы для этой обобщённой функции в следующей секции, после того, как определите новые классы фреймов.
</p>
</div><div class="chapter" id="Versioned Frame Base Classes"><h3>Versioned Frame Base Classes</h3>

<p>Раньше вы определили один базовый класс для всех фреймов, но теперь у вас два класса, <code>id3v2.2-frame</code> и <code>id3v2.3-frame</code>. Класс <code>id3v2.2-frame</code> будет по сути таким же, как и первоначальный класс <code>id3-frame</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-tagged-binary-class</span></i> id3v2.2-frame <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">id <span class="paren4">(<span class="">frame-id <span class="keyword">:length</span> 3</span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">size u3</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:dispatch</span> <span class="paren3">(<span class="">find-frame-class id</span>)</span></span>)</span></span>)</span><br/></pre>

<p><code>id3v2.3-frame</code>, с другой стороны, требует больших изменений. Идентификатор фрейма и поле размера были расширены в версии 2.3 с трёх до четырёх байт каждое, и были добавлены два байта с флагами. Дополнительно, фрейм, как и тег версии 2.3, может содержать необязательные поля, управляемые значениями трёх флагов фрейма<a class="fn_top" id="fnt__14" href="practical-an-id3-parser#fn__14">14)</a>. Держа эти изменения в уме, вы можете определить базовый класс фрейма версии 2.3, вместе с несколькими вспомогательными функциями, например так:
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-tagged-binary-class</span></i> id3v2.3-frame <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">id                <span class="paren4">(<span class="">frame-id <span class="keyword">:length</span> 4</span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">size              u4</span>)</span><br/>   <span class="paren3">(<span class="">flags             u2</span>)</span><br/>   <span class="paren3">(<span class="">decompressed-size <span class="paren4">(<span class="">optional <span class="keyword">:type</span> 'u4 <span class="keyword">:if</span> <span class="paren5">(<span class="">frame-compressed-p flags</span>)</span></span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">encryption-scheme <span class="paren4">(<span class="">optional <span class="keyword">:type</span> 'u1 <span class="keyword">:if</span> <span class="paren5">(<span class="">frame-encrypted-p flags</span>)</span></span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">grouping-identity <span class="paren4">(<span class="">optional <span class="keyword">:type</span> 'u1 <span class="keyword">:if</span> <span class="paren5">(<span class="">frame-grouped-p flags</span>)</span></span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:dispatch</span> <span class="paren3">(<span class="">find-frame-class id</span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> frame-compressed-p <span class="paren2">(<span class="">flags</span>)</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_logbtp.htm" class="symbol">logbitp</a> 7 flags</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> frame-encrypted-p <span class="paren2">(<span class="">flags</span>)</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_logbtp.htm" class="symbol">logbitp</a> 6 flags</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> frame-grouped-p <span class="paren2">(<span class="">flags</span>)</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_logbtp.htm" class="symbol">logbitp</a> 5 flags</span>)</span></span>)</span><br/></pre>

<p>Определив эти два класса, вы можете реализовать методы обобщённой функции <code>frame-header-size</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> frame-header-size <span class="paren2">(<span class=""><span class="paren3">(<span class="">frame id3v2.2-frame</span>)</span></span>)</span> 6</span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> frame-header-size <span class="paren2">(<span class=""><span class="paren3">(<span class="">frame id3v2.3-frame</span>)</span></span>)</span> 10</span>)</span><br/></pre>

<p>Необязательные поля в фрейме версии 2.3 в этом вычислении не считаются частью заголовка, так как они уже включены в значение размера фрейма.
</p>
</div><div class="chapter" id="Versioned Concrete Frame Classes"><h3>Versioned Concrete Frame Classes</h3>

<p>При первоначальном определении класс <code>generic-frame</code> наследовал <code>id3-frame</code>. Но сейчас <code>id3-frame</code> заменён двумя специфичными для версий базовыми классами, <code>id3v2.2-frame</code> и <code>id3v2.3-frame</code>. Так что, вам надо определить две новые версии <code>generic-frame</code>, по каждой для своего базового класса. Один из способов определить эти классы таков:
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-class</span></i> generic-frame-v2.2 <span class="paren2">(<span class="">id3v2.2-frame</span>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">data <span class="paren4">(<span class="">raw-bytes <span class="keyword">:size</span> size</span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><i><span class="symbol">define-binary-class</span></i> generic-frame-v2.3 <span class="paren2">(<span class="">id3v2.3-frame</span>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">data <span class="paren4">(<span class="">raw-bytes <span class="keyword">:size</span> size</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Однако, немного раздражает то, что эти два класса одинаковы, за исключением их суперклассов. Это не очень плохо в данном случае, так как здесь только одно дополнительное поле. Но если вы выберете этот подход для других конкретных классов фреймов, таких, которые имеют более сложную внутреннюю структуру, идентичную для двух версий ID3, дублирование будет более раздражающим.
</p>
<p>Другой подход, тот, который вам на самом деле следует использовать - определить класс <code>generic-frame</code> как "примесь" (mixin): класс, который предполагается для использования как суперкласс с одним из специфичных для версии базовых классов для получения конкретного, специфичного для версии класса фрейма. В этом способе только один хитрый момент: <code>generic-frame</code> не расширяет любой из базовых классов фрейма, так что вы не сможете обращаться к слоту <code>size</code> в определении. Вместо этого, вы должны использовать функцию <code>current-binary-object</code>, которая обсуждалась в конце предыдущей части, для доступа к объекту, в процессе чтения или записи которого находитесь, и передать его в <code>size</code>. И вам нужно учесть разницу в числе байт полного размера фрейма, которые будут отложены, если любое из необязательных полей будет включено во фрейм. Так что, вы должны определить обобщённую функцию <code>data-bytes</code> и методамы, которые делают правильные действия и для фреймов версии 2.2, и для версии 2.3.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-class</span></i> generic-frame <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">data <span class="paren4">(<span class="">raw-bytes <span class="keyword">:size</span> <span class="paren5">(<span class="">data-bytes <span class="paren6">(<span class="">current-binary-object</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defgen.htm" class="symbol"><i><span class="symbol">defgeneric</span></i></a> data-bytes <span class="paren2">(<span class="">frame</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> data-bytes <span class="paren2">(<span class=""><span class="paren3">(<span class="">frame id3v2.2-frame</span>)</span></span>)</span><br/>  <span class="paren2">(<span class="">size frame</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> data-bytes <span class="paren2">(<span class=""><span class="paren3">(<span class="">frame id3v2.3-frame</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">flags <span class="paren5">(<span class="">flags frame</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a__.htm" class="symbol">-</a> <span class="paren4">(<span class="">size frame</span>)</span><br/>       <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren5">(<span class="">frame-compressed-p flags</span>)</span> 4 0</span>)</span><br/>       <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren5">(<span class="">frame-encrypted-p flags</span>)</span> 1 0</span>)</span><br/>       <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren5">(<span class="">frame-grouped-p flags</span>)</span> 1 0</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>После этого вы можете определить конкретные классы, которые расширяют один из специфичных для версий классов и класс generic-frame для определения специфичного для версии класса фрейма.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-class</span></i> generic-frame-v2.2 <span class="paren2">(<span class="">id3v2.2-frame generic-frame</span>)</span> <span class="paren2">(<span class=""/>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><i><span class="symbol">define-binary-class</span></i> generic-frame-v2.3 <span class="paren2">(<span class="">id3v2.3-frame generic-frame</span>)</span> <span class="paren2">(<span class=""/>)</span></span>)</span><br/></pre>

<p>Определив эти классы, вы можете переопределить функцию <code>find-frame-class</code> так, чтобы она возвращала правильный класс для версии, основываясь на длине идентификатора.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> find-frame-class <span class="paren2">(<span class="">id</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> id</span>)</span><br/>    <span class="paren3">(<span class="">3 'generic-frame-v2.2</span>)</span><br/>    <span class="paren3">(<span class="">4 'generic-frame-v2.3</span>)</span></span>)</span></span>)</span><br/></pre>


</div><div class="chapter" id="&#x41A;&#x430;&#x43A;&#x438;&#x435; &#x444;&#x440;&#x435;&#x439;&#x43C;&#x44B; &#x43D;&#x430; &#x441;&#x430;&#x43C;&#x43E;&#x43C; &#x434;&#x435;&#x43B;&#x435; &#x43D;&#x443;&#x436;&#x43D;&#x44B;?"><h3>Какие фреймы на самом деле нужны?</h3>

<p>Имея возможность читать теги и версии 2.2, и версии 2.3, используя обобщённые фреймы, вы готовы начать реализацию классов для представления специфичных фреймов, которые вам нужны. Однако, перед тем как нырнуть в это, вам следует набрать воздуха и выяснить, какие фреймы вам на самом деле нужны, так как я уже упомянул ранее, что спецификация ID3 содержит множество фреймов, которые почти никогда не используются. Конечно, то, какие фреймы вас заботят, зависит от того, какие приложения вы хотите написать. Если вы более заинтересованы в извлечении информации из существующих ID3 тегов, тогда вам надо реализовать только классы, представляющие информацию, до которой вам есть дело. С другой стороны, если вы хотите написать редактор тегов ID3, вам может понадобится поддержка всех фреймов.
</p>
<p>Чем угадывать, какие фреймы будут наиболее полезными, вы можете использовать код, который вы уже написали, чтобы немного поковыряться в REPL и узнать, какие фреймы действительно используютcя в ваших MP3. Для начала, вам понадобится экземпляр <code>id3-tag</code>, который вы можете получить с помощью функции <code>read-id3</code>.
</p>
<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class="">read-id3 <span class="string">"/usr2/mp3/Kitka/Wintersongs/02 Byla Cesta.mp3"</span></span>)</span><br/>
#&lt;ID3V2.2-TAG @ #x727b2912&gt;<br/></p></pre>

<p>Так нам захочется немного поиграть с этим объектом, вам нужно сохранить его в переменную.
</p>
<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*id3*</span> <span class="paren2">(<span class="">read-id3 <span class="string">"/usr2/mp3/Kitka/Wintersongs/02 Byla Cesta.mp3"</span></span>)</span></span>)</span><br/>
*ID3*<br/></p></pre>

<p>Теперь вы можете узнать, например, сколько в нем фреймов:
</p>
<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> <span class="paren2">(<span class="">frames <span class="special">*id3*</span></span>)</span></span>)</span><br/>
11<br/></p></pre>

<p>Не слишком много – давайте посмотрим, что они из себя представляют.
</p>
<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class="">frames <span class="special">*id3*</span></span>)</span><br/><span class="paren1">(<span class="">#&lt;GENERIC-FRAME-V2.2 @ #x72dabdda&gt; #&lt;GENERIC-FRAME-V2.2 @ #x72dabec2&gt;<br/> #&lt;GENERIC-FRAME-V2.2 @ #x72dabfa2&gt; #&lt;GENERIC-FRAME-V2.2 @ #x72dac08a&gt;<br/> #&lt;GENERIC-FRAME-V2.2 @ #x72dac16a&gt; #&lt;GENERIC-FRAME-V2.2 @ #x72dac24a&gt;<br/> #&lt;GENERIC-FRAME-V2.2 @ #x72dac32a&gt; #&lt;GENERIC-FRAME-V2.2 @ #x72dac40a&gt;<br/> #&lt;GENERIC-FRAME-V2.2 @ #x72dac4f2&gt; #&lt;GENERIC-FRAME-V2.2 @ #x72dac632&gt;<br/> #&lt;GENERIC-FRAME-V2.2 @ #x72dac7b2&gt;</span>)</span><br/></p></pre>

<p>Ладно, это не очень информативно. То, что вы действительно хотите знать – это какие типы фреймов там содержатся. Другими словами, вам нужны идентификаторы этих фреймов, которые вы можете получить простым <code>MAPCAR</code>, например так:
</p>
<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mapc_.htm" class="symbol">mapcar</a> #'id <span class="paren2">(<span class="">frames <span class="special">*id3*</span></span>)</span></span>)</span><br/><span class="paren1">(<span class=""><span class="string">"TT2"</span> <span class="string">"TP1"</span> <span class="string">"TAL"</span> <span class="string">"TRK"</span> <span class="string">"TPA"</span> <span class="string">"TYE"</span> <span class="string">"TCO"</span> <span class="string">"TEN"</span> <span class="string">"COM"</span> <span class="string">"COM"</span> <span class="string">"COM"</span></span>)</span><br/></p></pre>

<p>Если вы посмотрите эти идентификаторы в спецификации ID3v2.2, вы обнаружите, что все фреймы с идентификаторами, начинающимися с T являются текстовой информацией и имеют похожую структуру. А COM – это идентификатор для фреймов с комментариями, структура которых схожа со структурой текстовых. В частности, фреймы с текстовой информацией здесь, оказывается, представляют название песни, исполнителя, альбом, дорожку, часть набора, год, жанр, и кодировавшую программу.
</p>
<p>Конечно, это только один MP3 файл. Возможно, в других файлах используются другие фреймы. Это достаточно просто определить. Для начала, определим функцию, которая комбинирует выражение <code>MAPCAR</code>  с вызовом <code>read-id3</code> и заворачивает всё это в <code>DELETE-DUPLICATES</code>, чтобы поддерживать чистоту. Вам придётся использовать <code>#'string=</code> как аргумент <code>:test</code> у <code>DELETE-DUPLICATES</code>, чтобы указать, что два элемента считаются одинаковыми, если это одна и та же строка.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> frame-types <span class="paren2">(<span class="">file</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rm_dup.htm" class="symbol">delete-duplicates</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mapc_.htm" class="symbol">mapcar</a> #'id <span class="paren4">(<span class="">frames <span class="paren5">(<span class="">read-id3 file</span>)</span></span>)</span></span>)</span> <span class="keyword">:test</span> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm" class="symbol">string=</a></span>)</span></span>)</span><br/></pre>

<p>Это должно давать тот же результат для такого же имени файла, за исключением того, что каждый идентификатор встречается один раз.
</p>
<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class="">frame-types <span class="string">"/usr2/mp3/Kitka/Wintersongs/02 Byla Cesta.mp3"</span></span>)</span><br/><span class="paren1">(<span class=""><span class="string">"TT2"</span> <span class="string">"TP1"</span> <span class="string">"TAL"</span> <span class="string">"TRK"</span> <span class="string">"TPA"</span> <span class="string">"TYE"</span> <span class="string">"TCO"</span> <span class="string">"TEN"</span> <span class="string">"COM"</span></span>)</span><br/></p></pre>

<p>Теперь вы можете использовать функцию walk-directory из главы 15 для нахождения всех MP3 файлов в директории и комбинирования результатов вызова frame-types на каждом файле. Вспомните, что NUNION - это деструктивная версия функции UNION, но, так как frame-types делает новый список для каждого файла, она безопасна.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> frame-types-in-dir <span class="paren2">(<span class="">dir</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">ids <span class="paren5">(<span class=""/>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_flet_.htm" class="symbol"><i><span class="symbol">flet</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">collect <span class="paren6">(<span class="">file</span>)</span><br/>             <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> ids <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_unionc.htm" class="symbol">nunion</a> ids <span class="paren2">(<span class="">frame-types file</span>)</span> <span class="keyword">:test</span> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm" class="symbol">string=</a></span>)</span></span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class="">walk-directory dir #'collect <span class="keyword">:test</span> #'mp3-p</span>)</span></span>)</span><br/>    ids</span>)</span></span>)</span><br/></pre>

<p>Теперь передайте ей имя директории, и она выдаст вам набор идентификаторов, используемых во всех MP3 файлах этой директории и её поддиректорий. Это может занять несколько секунд, в зависимости от количества ваших MP3 файлов, но вы, вероятно, получите что-то вроде следующего:
</p>
<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class="">frame-types-in-dir <span class="string">"/usr2/mp3/"</span></span>)</span><br/><span class="paren1">(<span class=""><span class="string">"TCON"</span> <span class="string">"COMM"</span> <span class="string">"TRCK"</span> <span class="string">"TIT2"</span> <span class="string">"TPE1"</span> <span class="string">"TALB"</span> <span class="string">"TCP"</span> <span class="string">"TT2"</span> <span class="string">"TP1"</span> <span class="string">"TCM"</span><br/> <span class="string">"TAL"</span> <span class="string">"TRK"</span> <span class="string">"TPA"</span> <span class="string">"TYE"</span> <span class="string">"TCO"</span> <span class="string">"TEN"</span> <span class="string">"COM"</span></span>)</span><br/></p></pre>

<p>Четырёхбуквенные идентификаторы версии 2.3 - эквиваленты идентификаторов версии 2.2, которые я обсуждал ранее. Так как информация, хранимая в этих фреймах в точности та, которая понадобится вам в главе 27, имеет смысл реализовать классы только для тех фреймов, которые на самом деле используются, а именно, фреймов текстовой информации и комментариев, что вы и сделаете в следующих двух секциях. Если позже вы решите, что вы хотите поддерживать другие типы фреймов, то это больше вопрос преобразования спецификаций ID3 в подходящие определения бинарных классов.
</p>
</div><div class="chapter" id="&#x424;&#x440;&#x435;&#x439;&#x43C;&#x44B; &#x442;&#x435;&#x43A;&#x441;&#x442;&#x43E;&#x432;&#x43E;&#x439; &#x438;&#x43D;&#x444;&#x43E;&#x440;&#x43C;&#x430;&#x446;&#x438;&#x438;"><h3>Фреймы текстовой информации</h3>

<p>Все фреймы с текстовой информацией состоят из двух полей: одного байта, указывающего, какая кодировка строк используется во фрейме, и строки, закодированной в оставшихся байтах строки. Если кодирующий байт равен нулю, строка закодирована в ISO 8859-1; если он равен единице, строка в кодировке UCS-2.
</p>
<p>Вы уже определили бинарные типы для представления двух типов строк – двух типов кодировок, каждую с двумя различными методами определения границ строки. Однако, <code>define-binary-class</code> не предоставляет прямую возможность для определить тип значения для чтения, основываясь на других значениях в объекте. Вместо этого, вы можете определить бинарный тип, которому вы передадите значение байта кодировки, и после этого он будет читать или писать подходящий вид строки.
</p>
<p>Когда вы будете определять этот тип, вы можете определить его так, чтобы он принимал два параметра, <code>:length</code> и <code>:terminator</code>, и выбирал правильный тип строки, основанный на том, какой аргумент подан. Для реализации этого нового типа, вы должны для начала определить некоторые вспомогательные функции. Первая из двух возвращает имя подходящего строкового типа, основываясь на байте кодировки.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> non-terminated-type <span class="paren2">(<span class="">encoding</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> encoding<br/>    <span class="paren3">(<span class="">0 'iso-8859-1-string</span>)</span><br/>    <span class="paren3">(<span class="">1 'ucs-2-string</span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> terminated-type <span class="paren2">(<span class="">encoding</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> encoding<br/>    <span class="paren3">(<span class="">0 'iso-8859-1-terminated-string</span>)</span><br/>    <span class="paren3">(<span class="">1 'ucs-2-terminated-string</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Затем <code>string-args</code> использует этот байт кодировки, длину и <code>terminator</code> для определения нескольких аргументов для передачи их read-value и write-value с помощью :reader и :writer в id3-encoded-string. Один из аргументов string-args – либо length, либо terminator – всегда дожен быть NIL.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> string-args <span class="paren2">(<span class="">encoding <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> terminator</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_cond.htm" class="symbol"><i><span class="symbol">cond</span></i></a> <br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a><br/>     <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a> <span class="paren5">(<span class="">non-terminated-type encoding</span>)</span> <span class="keyword">:length</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a></span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">terminator<br/>     <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a> <span class="paren5">(<span class="">terminated-type encoding</span>)</span> <span class="keyword">:terminator</span> terminator</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>С этими помощниками, определить <code>id3-encoded-string</code> просто. Одна деталь, которую нужно отметить, это то, что ключ – или <code>:length</code>, или <code>:terminator</code> – используемый в вызове <code>read-value</code> и <code>write-value</code>, является просто ещё одной частью данных, возвращённых <code>string-arts</code>. Даже если ключевые символы в списке аргументов практически всегда вписаны в текст программы, они не обязаны быть вписаны туда всегда.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-type</span></i> id3-encoded-string <span class="paren2">(<span class="">encoding <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> terminator</span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:reader</span> <span class="paren3">(<span class="">in</span>)</span> <br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_multip.htm" class="symbol">multiple-value-bind</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_kwd.htm" class="symbol">keyword</a> arg</span>)</span><br/>        <span class="paren4">(<span class="">string-args encoding <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> terminator</span>)</span><br/>      <span class="paren4">(<span class="">read-value <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> in <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_kwd.htm" class="symbol">keyword</a> arg</span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:writer</span> <span class="paren3">(<span class="">out <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_multip.htm" class="symbol">multiple-value-bind</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_kwd.htm" class="symbol">keyword</a> arg</span>)</span><br/>        <span class="paren4">(<span class="">string-args encoding <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> terminator</span>)</span><br/>      <span class="paren4">(<span class="">write-value <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> out <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_kwd.htm" class="symbol">keyword</a> arg</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь можно определить примесный класс text-info, точно так же, как был определён generic-frame ранее.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-class</span></i> text-info-frame <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">encoding u1</span>)</span><br/>   <span class="paren3">(<span class="">information <span class="paren4">(<span class="">id3-encoded-string <span class="keyword">:encoding</span> encoding <span class="keyword">:length</span> <span class="paren5">(<span class="">bytes-left 1</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Как и при определении <code>generic-frame</code>, вам нужно получить доступ к размеру фрейма, в данном случае, для того, чтобы вычислить аргумент :length для передачи id3-encoded-string. Так как вам понадобится похожее вычисление в следующем определяемом вами классе, вы можете пойти дальше и определить вспомогательную функцию bytes-left, которая использует current-binary-object для получения размера фрейма.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> bytes-left <span class="paren2">(<span class="">bytes-read</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a__.htm" class="symbol">-</a> <span class="paren3">(<span class="">size <span class="paren4">(<span class="">current-binary-object</span>)</span></span>)</span> bytes-read</span>)</span></span>)</span><br/></pre>

<p>Теперь, вы можете определить два индивидуальных для каждой версии конкретных класса с примесью дублируемого кода, так же, как вы сделали это с примесью generic-frame.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-class</span></i> text-info-frame-v2.2 <span class="paren2">(<span class="">id3v2.2-frame text-info-frame</span>)</span> <span class="paren2">(<span class=""/>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><i><span class="symbol">define-binary-class</span></i> text-info-frame-v2.3 <span class="paren2">(<span class="">id3v2.3-frame text-info-frame</span>)</span> <span class="paren2">(<span class=""/>)</span></span>)</span><br/></pre>

<p>Чтобы запрячь эти классы за работу, вам нужно подравить find-frame-class, чтобы он возвращал правильное имя класса, когда ID указывает, что фрейм является текстовым, а именно, всегда, когда ID начинается с T и не является TXX или TXXX.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> find-frame-class <span class="paren2">(<span class="">name</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_cond.htm" class="symbol"><i><span class="symbol">cond</span></i></a><br/>    <span class="paren3">(<span class=""><span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_chareq.htm" class="symbol">char=</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a> name 0</span>)</span> <span class="character">#\T</span></span>)</span><br/>          <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_not.htm" class="symbol">not</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_member.htm" class="symbol">member</a> name '<span class="paren1">(<span class=""><span class="string">"TXX"</span> <span class="string">"TXXX"</span></span>)</span> <span class="keyword">:test</span> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm" class="symbol">string=</a></span>)</span></span>)</span></span>)</span><br/>     <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> name</span>)</span><br/>       <span class="paren5">(<span class="">3 'text-info-frame-v2.2</span>)</span><br/>       <span class="paren5">(<span class="">4 'text-info-frame-v2.3</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a><br/>     <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> name</span>)</span><br/>       <span class="paren5">(<span class="">3 'generic-frame-v2.2</span>)</span><br/>       <span class="paren5">(<span class="">4 'generic-frame-v2.3</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

</div><div class="chapter" id="&#x424;&#x440;&#x435;&#x439;&#x43C;&#x44B; &#x43A;&#x43E;&#x43C;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x440;&#x438;&#x435;&#x432;"><h3>Фреймы комментариев</h3>

<p>Другим часто используемым фреймом является фрейм с комментариями, который похож на фрейм текстовой информации с несколькими дополнительными полями. Как и фрейм текстовой информации, он начинается с единственного байта, означающего кодировку строки, используемую во фрейме. За этим байтом следует трёхбуквенная строка ISO 8859-1 (вне зависимости от значения байта кодировки), которая указывает, каков язык комментария, используя код ISO-639-2, например "eng" для английского или "jpn" для японского. За ним следует две строки, закодированные, как указано в первом байте. Первая завершаемая нулём строка содержит описание комментария в кодировке, указанной первым байтом. Вторая строка, занимающая остаток фрейма – сам комментарий.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-class</span></i> comment-frame <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">encoding u1</span>)</span><br/>   <span class="paren3">(<span class="">language <span class="paren4">(<span class="">iso-8859-1-string <span class="keyword">:length</span> 3</span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">description <span class="paren4">(<span class="">id3-encoded-string <span class="keyword">:encoding</span> encoding <span class="keyword">:terminator</span> +null+</span>)</span></span>)</span><br/>   <span class="paren3">(<span class="">text <span class="paren4">(<span class="">id3-encoded-string<br/>          <span class="keyword">:encoding</span> encoding<br/>          <span class="keyword">:length</span> <span class="paren5">(<span class="">bytes-left<br/>                   <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> 1 <span class="comment">; encoding<br/></span>                      3 <span class="comment">; language<br/></span>                      <span class="paren1">(<span class="">encoded-string-length description encoding <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Как и в определении примеси text-inf, вы можете использовать bytes-left для вычисления размера последней строки. Однако, так так поле описания – строка переменной длины, число байт, прочитанных до начала текста не является постоянным. Чтобы запутать всё ещё больше, число байт, используемых для кодирования описания, зависит от кодировки. Итак, вам нужно определить вспомогательную функцию, которая возвращает число байт, использованных для кодирования строки, принимающая строку, код кодировки, и логический индикатор того, завершается строка дополнительным знаком или нет.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> encoded-string-length <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a> encoding terminated</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">characters <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> terminated 1 0</span>)</span></span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> characters <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> encoding <span class="paren5">(<span class="">0 1</span>)</span> <span class="paren5">(<span class="">1 2</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>И, как и раньше, вы можете определить индивидуальные для каждой версии классы фреймов и включить их в <code>find-frame-class</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><i><span class="symbol">define-binary-class</span></i> comment-frame-v2.2 <span class="paren2">(<span class="">id3v2.2-frame comment-frame</span>)</span> <span class="paren2">(<span class=""/>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><i><span class="symbol">define-binary-class</span></i> comment-frame-v2.3 <span class="paren2">(<span class="">id3v2.3-frame comment-frame</span>)</span> <span class="paren2">(<span class=""/>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> find-frame-class <span class="paren2">(<span class="">name</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_cond.htm" class="symbol"><i><span class="symbol">cond</span></i></a><br/>    <span class="paren3">(<span class=""><span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_chareq.htm" class="symbol">char=</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a> name 0</span>)</span> <span class="character">#\T</span></span>)</span><br/>          <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_not.htm" class="symbol">not</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_member.htm" class="symbol">member</a> name '<span class="paren1">(<span class=""><span class="string">"TXX"</span> <span class="string">"TXXX"</span></span>)</span> <span class="keyword">:test</span> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm" class="symbol">string=</a></span>)</span></span>)</span></span>)</span><br/>     <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> name</span>)</span><br/>       <span class="paren5">(<span class="">3 'text-info-frame-v2.2</span>)</span><br/>       <span class="paren5">(<span class="">4 'text-info-frame-v2.3</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm" class="symbol">string=</a> name <span class="string">"COM"</span></span>)</span>  'comment-frame-v2.2</span>)</span><br/>    <span class="paren3">(<span class=""><span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm" class="symbol">string=</a> name <span class="string">"COMM"</span></span>)</span> 'comment-frame-v2.3</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a><br/>     <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> name</span>)</span><br/>       <span class="paren5">(<span class="">3 'generic-frame-v2.2</span>)</span><br/>       <span class="paren5">(<span class="">4 'generic-frame-v2.3</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

</div><div class="chapter" id="&#x418;&#x437;&#x432;&#x43B;&#x435;&#x447;&#x435;&#x43D;&#x438;&#x435; &#x438;&#x43D;&#x444;&#x43E;&#x440;&#x43C;&#x430;&#x446;&#x438;&#x438; &#x438;&#x437; &#x442;&#x435;&#x433;&#x430; ID3"><h3>Извлечение информации из тега ID3</h3>

<p>Теперь у вас есть базовая возможность для чтения и записи тегов ID3, и есть много путей, по который можно развивать ваш код. Если вы хотите разработать полный редактор ID3 тегов, вам нужно реализовать индивидуальные классы для всех типов фреймов. Вам также необходимо будет определить методы для манипулирования объектами тегов и фреймов согласованным образом (например, если вы измените значение строки в text-info-frame, вам вероятнее всего придётся поменять и размер); при нынешнем состоянии кода, нельзя быть уверенным в том, что это произойдёт. <a class="fn_top" id="fnt__15" href="practical-an-id3-parser#fn__15">15)</a>.
</p>
<p>Или, если вам нужна только определённая часть информации о MP3 файле из его ID3 тега – например, как вам, когда вы будете разрабатывать потоковый сервер MP3 в частях 27, 28 и 29 – то нужно написать функции, которые находят подходящие фреймы и извлекают из них желаемую информацию.
</p>
<p>Наконец, чтобы сделать ваш код готовым к внедрению в реальные приложения, вам придётся покорпеть над спецификациями ID3 и иметь дело с деталями, которые я опустил ради экономии места. В частности, некоторые флаги как в теге, так и во фрейме могут влиять на способ чтения содержимого тега; если вы не напишете некоторый код, который выполняет правильные действия, когда установлены эти флаги, могут существовать ID3 теги, которые ваш код не будет способен прочитать правильно. Но код из этой главы должен быть способен разобрать почти все MP3 которые вы можете встретить в действительности.
</p>
<p>На данный момент вы можете закончить, написав несколько функций для извлечения отдельных частей информации из тега ID3. Эти функции вам понадобятся в главе 26 и, возможно, в другом коде, который использует эту библиотеку. Они входят в эту библиотеку потому, что зависят от деталей формата ID3, о которых пользователям этой библиотеке не следует волноваться.
</p>
<p>Чтобы получить, скажем, имя песни для MP3, из которого извлечен id3-tag, вам надо найти ID3 фрейм со специальным идентификатором и потом извлечь поле информации. А некоторые части информации, такие как жанр, могут потребовать дальнейшего декодирования. К счастью, все фреймы, содержащие информацию, до которой вам есть дело- это фреймы текстовой информации, так что извлечение конкретного кусочка информации сводится к использованию правильного идентификатора для поиска подходящего фрейма. Конечно, авторы ID3 решили сменить все идентификаторы при переходе от ID3v2.2 к ID3v2.3, так что вам придётся принять это в расчёт.
</p>
<p>Ничего слишком сложного – вам просто надо разыскать правильный путь для получения различных частей информации. Это прекрасный кусок кода для интерактивной разработки, очень похожей на тот способ, которым вы выяснили, какие классы фреймов вам нужно реализовать. Для начала, вам нужен объект класса id3-tag для экспериментов. Предполагая, что где-то рядом с вами лежит какой-нибудь MP3 файл, вы можете воспользоваться read-id3 вот так:
</p>
<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*id3*</span> <span class="paren2">(<span class="">read-id3 <span class="string">"Kitka/Wintersongs/02 Byla Cesta.mp3"</span></span>)</span></span>)</span><br/>
*ID3*<br/>
ID3V2&gt; *id3*<br/>
#&lt;ID3V2.2-TAG @ #x73d04c1a&gt;<br/></p></pre>

<p>Замените Kitka/Wintersongs/02 Byla Cesta.mp3 на имя вашего MP3 файла. Как только у вас появится объект id3-tag, вы сможете начать копаться в нём. Например, вы можете проверить список объектов фреймов с функцией frames.
</p>
<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class="">frames <span class="special">*id3*</span></span>)</span><br/><span class="paren1">(<span class="">#&lt;TEXT-INFO-FRAME-V2.2 @ #x73d04cca&gt;<br/> #&lt;TEXT-INFO-FRAME-V2.2 @ #x73d04dba&gt;<br/> #&lt;TEXT-INFO-FRAME-V2.2 @ #x73d04ea2&gt;<br/> #&lt;TEXT-INFO-FRAME-V2.2 @ #x73d04f9a&gt;<br/> #&lt;TEXT-INFO-FRAME-V2.2 @ #x73d05082&gt;<br/> #&lt;TEXT-INFO-FRAME-V2.2 @ #x73d0516a&gt;<br/> #&lt;TEXT-INFO-FRAME-V2.2 @ #x73d05252&gt;<br/> #&lt;TEXT-INFO-FRAME-V2.2 @ #x73d0533a&gt;<br/> #&lt;COMMENT-FRAME-V2.2 @ #x73d0543a&gt;<br/> #&lt;COMMENT-FRAME-V2.2 @ #x73d05612&gt;<br/> #&lt;COMMENT-FRAME-V2.2 @ #x73d0586a&gt;</span>)</span><br/></p></pre>

<p>Теперь предположим, что вы хотите извлечь название песни. Возможно, оно в одном из этих фреймов, но для того, чтобы найти его, вам нужно найти фрейм с идентификатором "TT2". Итак, вы можете достаточно легко проверить, содержит ли тег такой фрейм, вытащив все идентификаторы наружу, например так:
</p>
<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mapc_.htm" class="symbol">mapcar</a> #'id <span class="paren2">(<span class="">frames <span class="special">*id3*</span></span>)</span></span>)</span><br/><span class="paren1">(<span class=""><span class="string">"TT2"</span> <span class="string">"TP1"</span> <span class="string">"TAL"</span> <span class="string">"TRK"</span> <span class="string">"TPA"</span> <span class="string">"TYE"</span> <span class="string">"TCO"</span> <span class="string">"TEN"</span> <span class="string">"COM"</span> <span class="string">"COM"</span> <span class="string">"COM"</span></span>)</span><br/></p></pre>

<p>Ага, вот он, первый фрейм. Однако, нет гарантии, что он всегда будет первым, так возможно вам следует искать его не по позиции, а по идентификатору. Это тоже просто, используйте функцию FIND.
</p>
<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_find_.htm" class="symbol">find</a> <span class="string">"TT2"</span> <span class="paren2">(<span class="">frames <span class="special">*id3*</span></span>)</span> <span class="keyword">:test</span> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm" class="symbol">string=</a> <span class="keyword">:key</span> #'id</span>)</span><br/>
#&lt;TEXT-INFO-FRAME-V2.2 @ #x73d04cca&gt;<br/></p></pre>

<p>Теперь, чтобы получить саму информацию из фрейма, сделайте следующее:
</p>
<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class="">information <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_find_.htm" class="symbol">find</a> <span class="string">"TT2"</span> <span class="paren3">(<span class="">frames <span class="special">*id3*</span></span>)</span> <span class="keyword">:test</span> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm" class="symbol">string=</a> <span class="keyword">:key</span> #'id</span>)</span></span>)</span><br/>
"Byla Cesta^@"<br/></p></pre>

<p>Опаньки. Этот ^@ - то, как емакс печатает нулевой символ. В ходе манёвра, напоминающего клудж, который превратил спецификацию ID3v1 в ID3v1.1, информационная ячейка фрейма текстовой информации, которая официально не является обрываемой нулём строкой, может содержать нуль, и предпологается, что считыватели ID3 будут игнорировать любой знак после нуля. Так что, вам нужна функция, которая принимает строку и возвращает её содержимое, вплоть до первого 
нулевого знака, если он есть. Используя константу +null+ из библиотеки бинарный данных, сделать это достаточно просто.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> upto-null <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_subseq.htm" class="symbol">subseq</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a> 0 <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_pos_p.htm" class="symbol">position</a> +null+ <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Now you can get just the title.
</p>
<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class="">upto-null <span class="paren2">(<span class="">information <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_find_.htm" class="symbol">find</a> <span class="string">"TT2"</span> <span class="paren4">(<span class="">frames <span class="special">*id3*</span></span>)</span> <span class="keyword">:test</span> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm" class="symbol">string=</a> <span class="keyword">:key</span> #'id</span>)</span></span>)</span></span>)</span><br/>
"Byla Cesta"<br/></p></pre>

<p>Вы могли бы просто обернуть этот код в функцию с именем song, принимающую экземпляр id3-tag как аргумент, и дело с концом. Однако, единственная разница между этим кодом и кодом, который бы вы использовали для извлечения других кусочков информации, которые вам нужны (таких как название альбома, исполнитель и жанр), в идентификаторе. Так что, лучше немного разделить этот код. Для начала, вы можете написать функцию, которая просто находит фрейм для данных экземпляра id3-tag и идентификатора, вроде этой:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> find-frame <span class="paren2">(<span class="">id3 id</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_find_.htm" class="symbol">find</a> id <span class="paren3">(<span class="">frames id3</span>)</span> <span class="keyword">:test</span> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm" class="symbol">string=</a> <span class="keyword">:key</span> #'id</span>)</span></span>)</span><br/></pre>

<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class="">find-frame <span class="special">*id3*</span> <span class="string">"TT2"</span></span>)</span><br/>
#&lt;TEXT-INFO-FRAME-V2.2 @ #x73d04cca&gt;<br/></p></pre>

<p>Тогда другой кусочек кода, часть, извлекающая информацию из text-info-frame, может отойти в другую функцию.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> get-text-info <span class="paren2">(<span class="">id3 id</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">frame <span class="paren5">(<span class="">find-frame id3 id</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> frame <span class="paren4">(<span class="">upto-null <span class="paren5">(<span class="">information frame</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class="">get-text-info <span class="special">*id3*</span> <span class="string">"TT2"</span></span>)</span><br/>
"Byla Cesta"<br/></p></pre>

<p>Теперь определение song – просто дело передачи правильного идентификатора.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> song <span class="paren2">(<span class="">id3</span>)</span> <span class="paren2">(<span class="">get-text-info id3 <span class="string">"TT2"</span></span>)</span></span>)</span><br/></pre>

<pre class="code"><p>ID3V2&gt; <span class="paren1">(<span class="">song <span class="special">*id3*</span></span>)</span><br/>
"Byla Cesta"<br/></p></pre>

<p>Однако, это определение song работает только с тегами версии 2.2, так как идентификатор поменялся с "TT2" в версии 2.2 на "TIT2" в версии 2.3. И все остальные теги поменялись тоже. Так как пользователь этой библиотеки не не должен обязательно знать о различных версиях формата ID3 для того, чтобы сделать такую простую вещь, как получение названия песни, вам наверное лучше иметь дело с этими деталями за него. Простой способ состоит в таком изменении find-frame, что она не просто принимает один идентификатор, а список идентификаторов, вроде этой:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> find-frame <span class="paren2">(<span class="">id3 ids</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_find_.htm" class="symbol">find-if</a> #'<span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_lambda.htm" class="symbol"><i><span class="symbol">lambda</span></i></a> <span class="paren4">(<span class="">x</span>)</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_find_.htm" class="symbol">find</a> <span class="paren5">(<span class="">id x</span>)</span> ids <span class="keyword">:test</span> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm" class="symbol">string=</a></span>)</span></span>)</span> <span class="paren3">(<span class="">frames id3</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь слегка поменяем get-text-info, чтобы она могла принимать один идентификатор и более, используя параметр &amp;rest.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> get-text-info <span class="paren2">(<span class="">id3 &amp;rest ids</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">frame <span class="paren5">(<span class="">find-frame id3 ids</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> frame <span class="paren4">(<span class="">upto-null <span class="paren5">(<span class="">information frame</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь изменение, позволяющее song поддерживать и теги версии 2.2, и версии 2.3 – просто вопрос добавления идентификатора из версии 2.3.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> song <span class="paren2">(<span class="">id3</span>)</span> <span class="paren2">(<span class="">get-text-info id3 <span class="string">"TT2"</span> <span class="string">"TIT2"</span></span>)</span></span>)</span><br/></pre>

<p>После этого вам просто нужно найти подходящие идентификаторы версий 2.2 и 2.3 для каждого поля, к которому вы хотите предоставить функцию доступа. Вот те функции, которые вам понадобятся в главе 27:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> album <span class="paren2">(<span class="">id3</span>)</span> <span class="paren2">(<span class="">get-text-info id3 <span class="string">"TAL"</span> <span class="string">"TALB"</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> artist <span class="paren2">(<span class="">id3</span>)</span> <span class="paren2">(<span class="">get-text-info id3 <span class="string">"TP1"</span> <span class="string">"TPE1"</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> track <span class="paren2">(<span class="">id3</span>)</span> <span class="paren2">(<span class="">get-text-info id3 <span class="string">"TRK"</span> <span class="string">"TRCK"</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> year <span class="paren2">(<span class="">id3</span>)</span> <span class="paren2">(<span class="">get-text-info id3 <span class="string">"TYE"</span> <span class="string">"TYER"</span> <span class="string">"TDRC"</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> genre <span class="paren2">(<span class="">id3</span>)</span> <span class="paren2">(<span class="">get-text-info id3 <span class="string">"TCO"</span> <span class="string">"TCON"</span></span>)</span></span>)</span><br/></pre>

<p>Последняя трудность в том, что жанр хранится в фреймах TCO и TCON нечитаемым человеком способом. Вспомните, что в ID3v1, жанры хранились как один байт, который кодировал определённых жанр из фиксированного списка. К несчастью, эти коды продолжают жить и в ID3v2: если текст жанрового фрейма – число в круглых скобках, это число обязано быть интерпретировано как код жанра из ID3v1. Но, опять, пользователи этой библиотеки вероятно не будут заботиться об этой древней истории. Так что вам следует предоставить им функцию, которая автоматически перекодирует жанр. Следующая функция использует функцию genre, определённую лишь для того, чтобы извлекать сам жанр как текст, затем проверять, начинается ли он с левой круглой скобки, и если это так, то раскодировать код жанра версии 1 при помощи функции, которую мы определим через пару мнгновений.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> translated-genre <span class="paren2">(<span class="">id3</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">genre <span class="paren5">(<span class="">genre id3</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> genre <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_chareq.htm" class="symbol">char=</a> <span class="character">#\(</span> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_char_.htm" class="symbol">char</a> genre 0</span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class="">translate-v1-genre genre</span>)</span><br/>      genre</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Так как код жанра версии 1 в сущности – просто индекс в массиве стандартных имён, самый простой способ реализовать translate-v1-genre – извлечь число из строки жанра и воспользоваться им как индексом в настоящем массиве.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> translate-v1-genre <span class="paren2">(<span class="">genre</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_aref.htm" class="symbol">aref</a> <span class="special">*id3-v1-genres*</span> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_parse_.htm" class="symbol">parse-integer</a> genre <span class="keyword">:start</span> 1 <span class="keyword">:junk-allowed</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь, всё, что вам нужно – это определить массив имён. Следующий массив имён включает 80 официальных жанров версии 1 плюс жанры, созданные авторами Winamp:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*id3-v1-genres*</span><br/>  #<span class="paren2">(<span class=""><br/>    <span class="comment">;; These are the official ID3v1 genres.<br/></span>    <span class="string">"Blues"</span> <span class="string">"Classic Rock"</span> <span class="string">"Country"</span> <span class="string">"Dance"</span> <span class="string">"Disco"</span> <span class="string">"Funk"</span> <span class="string">"Grunge"</span><br/>    <span class="string">"Hip-Hop"</span> <span class="string">"Jazz"</span> <span class="string">"Metal"</span> <span class="string">"New Age"</span> <span class="string">"Oldies"</span> <span class="string">"Other"</span> <span class="string">"Pop"</span> <span class="string">"R&amp;B"</span> <span class="string">"Rap"</span><br/>    <span class="string">"Reggae"</span> <span class="string">"Rock"</span> <span class="string">"Techno"</span> <span class="string">"Industrial"</span> <span class="string">"Alternative"</span> <span class="string">"Ska"</span><br/>    <span class="string">"Death Metal"</span> <span class="string">"Pranks"</span> <span class="string">"Soundtrack"</span> <span class="string">"Euro-Techno"</span> <span class="string">"Ambient"</span><br/>    <span class="string">"Trip-Hop"</span> <span class="string">"Vocal"</span> <span class="string">"Jazz+Funk"</span> <span class="string">"Fusion"</span> <span class="string">"Trance"</span> <span class="string">"Classical"</span><br/>    <span class="string">"Instrumental"</span> <span class="string">"Acid"</span> <span class="string">"House"</span> <span class="string">"Game"</span> <span class="string">"Sound Clip"</span> <span class="string">"Gospel"</span> <span class="string">"Noise"</span><br/>    <span class="string">"AlternRock"</span> <span class="string">"Bass"</span> <span class="string">"Soul"</span> <span class="string">"Punk"</span> <span class="string">"Space"</span> <span class="string">"Meditative"</span><br/>    <span class="string">"Instrumental Pop"</span> <span class="string">"Instrumental Rock"</span> <span class="string">"Ethnic"</span> <span class="string">"Gothic"</span> <span class="string">"Darkwave"</span><br/>    <span class="string">"Techno-Industrial"</span> <span class="string">"Electronic"</span> <span class="string">"Pop-Folk"</span> <span class="string">"Eurodance"</span> <span class="string">"Dream"</span><br/>    <span class="string">"Southern Rock"</span> <span class="string">"Comedy"</span> <span class="string">"Cult"</span> <span class="string">"Gangsta"</span> <span class="string">"Top 40"</span> <span class="string">"Christian Rap"</span><br/>    <span class="string">"Pop/Funk"</span> <span class="string">"Jungle"</span> <span class="string">"Native American"</span> <span class="string">"Cabaret"</span> <span class="string">"New Wave"</span><br/>    <span class="string">"Psychadelic"</span> <span class="string">"Rave"</span> <span class="string">"Showtunes"</span> <span class="string">"Trailer"</span> <span class="string">"Lo-Fi"</span> <span class="string">"Tribal"</span><br/>    <span class="string">"Acid Punk"</span> <span class="string">"Acid Jazz"</span> <span class="string">"Polka"</span> <span class="string">"Retro"</span> <span class="string">"Musical"</span> <span class="string">"Rock &amp; Roll"</span><br/>    <span class="string">"Hard Rock"</span><br/><br/>    <span class="comment">;; These were made up by the authors of Winamp but backported into<br/></span>    <span class="comment">;; the ID3 spec.<br/></span>    <span class="string">"Folk"</span> <span class="string">"Folk-Rock"</span> <span class="string">"National Folk"</span> <span class="string">"Swing"</span> <span class="string">"Fast Fusion"</span><br/>    <span class="string">"Bebob"</span> <span class="string">"Latin"</span> <span class="string">"Revival"</span> <span class="string">"Celtic"</span> <span class="string">"Bluegrass"</span> <span class="string">"Avantgarde"</span><br/>    <span class="string">"Gothic Rock"</span> <span class="string">"Progressive Rock"</span> <span class="string">"Psychedelic Rock"</span> <span class="string">"Symphonic Rock"</span><br/>    <span class="string">"Slow Rock"</span> <span class="string">"Big Band"</span> <span class="string">"Chorus"</span> <span class="string">"Easy Listening"</span> <span class="string">"Acoustic"</span> <span class="string">"Humour"</span><br/>    <span class="string">"Speech"</span> <span class="string">"Chanson"</span> <span class="string">"Opera"</span> <span class="string">"Chamber Music"</span> <span class="string">"Sonata"</span> <span class="string">"Symphony"</span><br/>    <span class="string">"Booty Bass"</span> <span class="string">"Primus"</span> <span class="string">"Porn Groove"</span> <span class="string">"Satire"</span> <span class="string">"Slow Jam"</span> <span class="string">"Club"</span><br/>    <span class="string">"Tango"</span> <span class="string">"Samba"</span> <span class="string">"Folklore"</span> <span class="string">"Ballad"</span> <span class="string">"Power Ballad"</span> <span class="string">"Rhythmic Soul"</span><br/>    <span class="string">"Freestyle"</span> <span class="string">"Duet"</span> <span class="string">"Punk Rock"</span> <span class="string">"Drum Solo"</span> <span class="string">"A capella"</span> <span class="string">"Euro-House"</span><br/>    <span class="string">"Dance Hall"</span><br/><br/>    <span class="comment">;; These were also invented by the Winamp folks but ignored by the<br/></span>    <span class="comment">;; ID3 authors.<br/></span>    <span class="string">"Goa"</span> <span class="string">"Drum &amp; Bass"</span> <span class="string">"Club-House"</span> <span class="string">"Hardcore"</span> <span class="string">"Terror"</span> <span class="string">"Indie"</span><br/>    <span class="string">"BritPop"</span> <span class="string">"Negerpunk"</span> <span class="string">"Polsk Punk"</span> <span class="string">"Beat"</span> <span class="string">"Christian Gangsta Rap"</span><br/>    <span class="string">"Heavy Metal"</span> <span class="string">"Black Metal"</span> <span class="string">"Crossover"</span> <span class="string">"Contemporary Christian"</span><br/>    <span class="string">"Christian Rock"</span> <span class="string">"Merengue"</span> <span class="string">"Salsa"</span> <span class="string">"Thrash Metal"</span> <span class="string">"Anime"</span> <span class="string">"Jpop"</span><br/>    <span class="string">"Synthpop"</span></span>)</span></span>)</span><br/></pre>

<p>Ещё раз, возможно вы чувствуете, что написали в этой главе тонну кода. Но если вы положите его в один файл или если скачаете его версию с сайта этой книги, вы увидите, что строк там не настолько много – большая часть проблем с написанием этой библиотеки происходят от необходимости понять сложности самого формата ID3. В любом случае, теперь у вас есть существенная часть того, что вы превратите в потоковый MP3 сервер в главах  27, 28 и 29. Другая крупная часть инфраструктуры, которая вам понадобится – способ написания Web-программ со стороны сервера, является темой следующей главы.
</p>
</div></div><div class="footnotes"><div><a class="fn_bot" id="fn__1" href="practical-an-id3-parser#fnt__1">1)</a>MPEG Audio Layer 3</div><div><a class="fn_bot" id="fn__2" href="practical-an-id3-parser#fnt__2">2)</a>Moving Picture Experts Group</div><div><a class="fn_bot" id="fn__3" href="practical-an-id3-parser#fnt__3">3)</a>International Organization for Standardization</div><div><a class="fn_bot" id="fn__4" href="practical-an-id3-parser#fnt__4">4)</a>International Electrotechnical Commission</div><div><a class="fn_bot" id="fn__5" href="practical-an-id3-parser#fnt__5">5)</a>Eric Kemp</div><div><a class="fn_bot" id="fn__6" href="practical-an-id3-parser#fnt__6">6)</a>Michael Mutschler</div><div><a class="fn_bot" id="fn__7" href="practical-an-id3-parser#fnt__7">7)</a>Выдирание(ripping) - процесс, при помощи которого аудио CD преобразуется в MP3 файл на вашем жёстком диске. В наши дни большинство таких программ ещё и автоматически получают информацию о песнях, которые они выдирают, из онлайновых баз данных, таких так Gracenote (n�e the Compact Disc Database [CDDB]) или FreeDB, которую они затем встраивают в MP3 файлы и ID3 теги.</div><div><a class="fn_bot" id="fn__8" href="practical-an-id3-parser#fnt__8">8)</a>Martin Nilsson</div><div><a class="fn_bot" id="fn__9" href="practical-an-id3-parser#fnt__9">9)</a>Почти все файловые системы предоставляют возможность перезаписывать существующие байты файла, но немногие – если вообще такие есть – дают возможность добавлять или удалять данные в начало или середину файла без необходимости перезаписать остаток файла. Так как теги ID3 обычно хранятся в начале файла, чтобы перезаписать тег ID3, не трогая оставшуюся часть файла, вы должны заменить старый тег новым точно такой же длины. Записывая теги ID3 с некоторым количеством заполнения, вы получаете лучшие шансы сделать так – если в новом теге будет больше данных, чем первоначальный, вы используете меньше заполнителя, а если короче – больше.</div><div><a class="fn_bot" id="fn__10" href="practical-an-id3-parser#fnt__10">10)</a>Данные фреймов, идущих за заголовком ID3, также потенциально могут содержать эту незаконную последовательность. Это предотвращается использованием специальной схемы, которая включается при помощи одного из флагов в заголовке тега. Код из этой главы не принимает в расчёт возможность установки этого флага, он редко используется на практике.</div><div><a class="fn_bot" id="fn__11" href="practical-an-id3-parser#fnt__11">11)</a>В ID3v2.4 UCS-2 заменили на почти идентичную ей UTF-16 и добавили дополнительные кодировки UTF-16BE и UTF-8</div><div><a class="fn_bot" id="fn__12" href="practical-an-id3-parser#fnt__12">12)</a>Версия 2.4 формата ID3 также поддерживает размещение похожего окончания в конце тега, что позволяет проще находить тег, присоединённый к концу файла.</div><div><a class="fn_bot" id="fn__13" href="practical-an-id3-parser#fnt__13">13)</a>Если в теге есть расширенный заголовок, вы можете использовать это значение, чтобы определить, где должны кончаться данные. Однако, если расширенный заголовок не используется, вам всё равно придётся использовать старый алгоритм, так что не стоит добавлять код, делающий это по-другому.</div><div><a class="fn_bot" id="fn__14" href="practical-an-id3-parser#fnt__14">14)</a>Эти флаги не только контролируют, включены ли необязательные поля, но и могут влиять на оставшуюся часть тега. В частности, если установлен седьмой бит флага, данные шифруются. На практике эти возможности применяются редко, если вообще где-нибудь применяются, так что пока вы можете просто проигнорировать их. Но к этой задаче вам пришлось бы обратиться, чтобы качество вашего кода соответствовало промышленным стандартам. Одним простым половинчатым решением было бы поменять find-frame-class так, чтобы он принимал второй аргумент, и передавать ему флаги; если фрейм зашифрован, вы могли бы создать экземпляр обобщённого фрейма и положить в него данные фрейма.</div><div><a class="fn_bot" id="fn__15" href="practical-an-id3-parser#fnt__15">15)</a>Гарантия таких согласований между полями – отличное применение для методов :after обобщённой функции доступа. Например, вы могли бы определить этот метод :after, чтобы держать размер синхронизированными со строкой информации:

<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> information</span>)</span> <span class="keyword">:after</span> <span class="paren2">(<span class="">value <span class="paren3">(<span class="">frame text-info-frame</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_declar.htm" class="symbol">declare</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/d_ignore.htm" class="symbol">ignore</a> value</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_slts.htm" class="symbol"><i><span class="symbol">with-slots</span></i></a> <span class="paren3">(<span class="">encoding size information</span>)</span> frame<br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> size <span class="paren4">(<span class="">encoded-string-length information encoding <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_nil.htm" class="symbol">nil</a></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>
</div></div></div> <table width="100%"> <tbody> <tr> <td width="20%" align="left"> <a href="practical-parsing-binary-files">Предыдущая</a> </td> <td width="60%" align="center"> <a href="index.html">Оглавление</a> </td> <td width="20%" align="right"> <a href="practical-web-programming-with-allegroserve">Следующая</a> </td> </tr> </tbody> </table> </div> <div class="bottom">@2009-2013 lisper.ru</div> 
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-7734690-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
 </body> </html>