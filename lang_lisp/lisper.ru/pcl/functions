<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ru" xml:lang="ru"> <head> <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> <meta name="keywords" content="Common Lisp,lisp,лисп" /> <title>Функции</title> <link href="../css/style.css" rel="stylesheet" type="text/css" /><link href="../css/colorize.css" rel="stylesheet" type="text/css" />  </head> <body> <div class="top"> <div id="login"> <a href="http://lisper.ru/register">Регистрация</a> | <a href="http://lisper.ru/login?done=/pcl/functions">Войти</a> </div> </div> <div id="caution"> <img alt="Lisp — программируемый язык программирования" src="../image/gecko.png" /> <a href="http://www.vkusnoserver.ru/" target="_blank" style="float: right;"> <img src="../vkusnoserver.png" /> </a> </div> <div id="mainmenu"> <ul> <li> <a href="http://lisper.ru/">Главная</a> </li><li> <a href="http://lisper.ru/articles/">Статьи</a> </li><li> <a href="http://lisper.ru/planet/">Планета</a> </li><li> <a href="http://lisper.ru/forum/">Форум</a> </li><li> <a href="http://lisper.ru/apps/">Сервисы</a> </li><li> <a href="index.html">Practical Common Lisp</a> </li><li> <a href="http://lisper.ru/wiki/">Wiki</a> </li><li> <a href="http://lisper.ru/files/">Файлы</a> </li><li> <a href="http://lisper.ru/search">Поиск</a> </li> </ul> </div> <div id="content"> <table width="100%"> <tbody> <tr> <td width="20%" align="left"> <a href="syntax-and-semantics">Предыдущая</a> </td> <td width="60%" align="center"> <a href="index.html">Оглавление</a> </td> <td width="20%" align="right"> <a href="variables">Следующая</a> </td> </tr> </tbody> </table> <div class="article"><div class="toc"><div class="toc-header">Содержание</div><div class="toc-body"><ul><li><div><a href="functions#5. &#x424;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438;">5. Функции</a><ul><li><div><a href="functions#&#x41E;&#x43F;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x435;&#x43D;&#x438;&#x435; &#x43D;&#x43E;&#x432;&#x44B;&#x445; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x439;">Определение новых функций</a></div></li><li><div><a href="functions#&#x421;&#x43F;&#x438;&#x441;&#x43A;&#x438; &#x43F;&#x430;&#x440;&#x430;&#x43C;&#x435;&#x442;&#x440;&#x43E;&#x432; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x439;">Списки параметров функций</a></div></li><li><div><a href="functions#&#x41D;&#x435;&#x43E;&#x431;&#x44F;&#x437;&#x430;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x44B;&#x435; &#x43F;&#x430;&#x440;&#x430;&#x43C;&#x435;&#x442;&#x440;&#x44B;">Необязательные параметры</a></div></li><li><div><a href="functions#&#x41E;&#x441;&#x442;&#x430;&#x442;&#x43E;&#x447;&#x43D;&#x44B;&#x435; (Rest) &#x43F;&#x430;&#x440;&#x430;&#x43C;&#x435;&#x442;&#x440;&#x44B;">Остаточные (Rest) параметры</a></div></li><li><div><a href="functions#&#x418;&#x43C;&#x435;&#x43D;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x44B;&#x435; &#x43F;&#x430;&#x440;&#x430;&#x43C;&#x435;&#x442;&#x440;&#x44B;">Именованные параметры</a></div></li><li><div><a href="functions#&#x421;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x43D;&#x43E;&#x435; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435; &#x440;&#x430;&#x437;&#x43D;&#x44B;&#x445; &#x442;&#x438;&#x43F;&#x43E;&#x432; &#x43F;&#x430;&#x440;&#x430;&#x43C;&#x435;&#x442;&#x440;&#x43E;&#x432;">Совместное использование разных типов параметров</a></div></li><li><div><a href="functions#&#x412;&#x43E;&#x437;&#x432;&#x440;&#x430;&#x442; &#x437;&#x43D;&#x430;&#x447;&#x435;&#x43D;&#x438;&#x439; &#x438;&#x437; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438;">Возврат значений из функции</a></div></li><li><div><a href="functions#&#x424;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438; &#x43A;&#x430;&#x43A; &#x434;&#x430;&#x43D;&#x43D;&#x44B;&#x435;, &#x438;&#x43B;&#x438; &#x424;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438; &#x432;&#x44B;&#x441;&#x448;&#x435;&#x433;&#x43E; &#x43F;&#x43E;&#x440;&#x44F;&#x434;&#x43A;&#x430;">Функции как данные, или Функции высшего порядка</a></div></li><li><div><a href="functions#&#x410;&#x43D;&#x43E;&#x43D;&#x438;&#x43C;&#x43D;&#x44B;&#x435; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438;">Анонимные функции</a></div></li></ul></div></li></ul></div></div>
<div class="chapter" id="5. &#x424;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438;"><h3>5. Функции</h3>

<p>Кроме правил синтаксиса и семантики основу всех программ на Lisp составляют следующие три компонента – функции, переменные и макросы.  Вы использовали их во время создания базы данных в главе 3, но я опустил много подробностей о том, как они работают, и как их лучше всего использовать.  Я посвящу следующие главы этим вопросам, начав с функций, которые, также как и их аналоги в других языках программирования, обеспечивают основные возможности абстракции.
</p>
<p>Большая часть самого Lisp состоит из функций.  Более трех четвертей имен, указанных в стандарте, являются именами функций.  Все базовые типы данных полностью определены в терминах функций, работающих с ними. Даже мощная объектная система языка Lisp построена на концептуальном развитии понятий функции и обобщенной функции, которые будут описаны в главе 16.
</p>
<p>В конце концов, несмотря на важность макросов ( The Lisp Way! ),  вся реальная функциональность обеспечивается функциями.  Макросы выполняются во время компиляции и создают код программы. После того, как все макросы будут раскрыты, этот код полностью будет состоять из обращения к функциям и специальным операторам.  Я не упоминаю, что макросы сами являются функциями, которые используются для генерации кода, а не для выполнения действий в программе.<a class="fn_top" id="fnt__1" href="functions#fn__1">1)</a>
</p>
<div class="chapter" id="&#x41E;&#x43F;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x435;&#x43D;&#x438;&#x435; &#x43D;&#x43E;&#x432;&#x44B;&#x445; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x439;"><h3>Определение новых функций</h3>

<p>Обычно функции определяются при помощи макроса <code>DEFUN</code>.  Типовое использование <code>DEFUN</code> выглядит вот так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> name <span class="paren2">(<span class="">parameter*</span>)</span><br/>  <span class="string">"Optional documentation string."</span><br/>  тело-функции*</span>)</span><br/></pre>

<p>В качестве имени может использоваться любой символ.<a class="fn_top" id="fnt__2" href="functions#fn__2">2)</a>  Как правило, имена функций содержат только буквы, цифры и знак минус, но, кроме
того, разрешено использование других символов, и они используются в определенных случаях.
Например, функции, которые преобразуют значения из одного типа в другой, иногда используют
символ <code>-&gt;</code> в имени. Или функция, которая преобразует строку в виджет, может быть
названа <code>string-&gt;widget</code>.  Наиболее важное соглашение по именованию, затронутое в главе
2, заключается в том, что лучше создавать составные имена, используя знак минус вместо
подчеркивания или использования заглавных букв внутри имени.  Так что <code>frob-widget</code>
лучше соответствует стилю Lisp, чем <code>frob_widget</code> или <code>frobWidget</code>.
</p>
<p>Список параметров функции определяет переменные, которые будут использоваться для хранения
аргументов, переданных при вызове функции.<a class="fn_top" id="fnt__3" href="functions#fn__3">3)</a>  Если функция не принимает аргументов, то список пуст и записывается
как <code>()</code>. Различают обязательные, необязательные, 
множественные, и именованные (keyword) параметры.  Эти вопросы будут обсуждаться
подробнее в следующем разделе.
</p>
<p>За списком параметров может находиться строка, которая описывает назначение функции.  После того, как функция определена, эта строка ( строка документации ) будет ассоциирована с именем функции и может быть позже получена с помощью функции <code>DOCUMENTATION</code>.<a class="fn_top" id="fnt__4" href="functions#fn__4">4)</a>
</p>
<p>Тело <code>DEFUN</code> состоит из любого числа выражений Lisp.  При вызове функции они вычисляются
по порядку, и результат вычисления последнего выражения возвращается, как значение функции.
Для возврата из любой точки функции может использоваться специальный оператор
<code>RETURN-FROM</code>, что я продемонстрирую через некоторое время.
</p>
<p>В главе 2 мы написали функцию <code>hello-world</code>, которая выглядела вот так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> hello-world <span class="paren2">(<span class=""/>)</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"hello, world"</span></span>)</span></span>)</span><br/></pre>

<p>Теперь вы можете проанализировать части этой функции.  Она называется <code>hello-world</code>,
список параметров пуст, потому что она не принимает аргументов, в ней нет строки
документации, и ее тело состоит из одного выражения:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"hello, world"</span></span>)</span><br/></pre>

<p>Вот пример немного более сложной функции:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> verbose-sum <span class="paren2">(<span class="">x y</span>)</span><br/>  <span class="string">"Sum any two numbers after printing a message."</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"Summing ~d and ~d.~%"</span> x y</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> x y</span>)</span></span>)</span><br/></pre>

<p>Эта функция называется <code>verbose-sum</code>, получает два аргумента, которые связываются с
параметрами <code>x</code> и <code>y</code>, имеет строку документации, и ее тело состоит из двух выражений.
Значение, возвращенное вызовом функции <code>+</code>, становится значением функции
<code>verbose-sum</code>.
</p>

</div><div class="chapter" id="&#x421;&#x43F;&#x438;&#x441;&#x43A;&#x438; &#x43F;&#x430;&#x440;&#x430;&#x43C;&#x435;&#x442;&#x440;&#x43E;&#x432; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x439;"><h3>Списки параметров функций</h3>

<p>Это всё, больше нечего сказать об именах функций или о строках документации. Оставшуюся часть
книги мы будем описывать то, что можно написать в теле функции, поэтому мы остаемся
наедине со списками параметров функций.
</p>
<p>Основное назначение списков параметров – объявление переменных, которые будут
использоваться для хранения аргументов, переданных функции.  Когда список параметров
является простым списком имен переменных, как в <code>verbose-sum</code>, то параметры называются
<em>обязательными</em>.  Когда функция вызывается, она должна получить ровно по одному
аргументу для каждого из обязательных параметров.  Каждый параметр связывается с
соответствующим аргументом.  Если функция вызывается с меньшим или большим количеством
аргументов, чем требуется, то Lisp сообщит об ошибке.
</p>
<p>Однако, списки параметров в Common Lisp предоставляют более удобные способы отображения
аргументов функции в параметры функции.  В дополнение к обязательным параметрам функция
может иметь <em>необязательные</em> параметры.  Или функция может иметь один параметр, который
будет связан со списком, содержащим все дополнительные аргументы.  И в заключение,
аргументы могут быть связаны с параметрами путем использования <em>ключевых слов</em>
(keywords), а не путем соответствия позиции параметра и аргумента в списке.  Таким
образом, списки параметров Common Lisp предоставляют удобное решение для некоторых общих
задач кодирования.
</p>
</div><div class="chapter" id="&#x41D;&#x435;&#x43E;&#x431;&#x44F;&#x437;&#x430;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x44B;&#x435; &#x43F;&#x430;&#x440;&#x430;&#x43C;&#x435;&#x442;&#x440;&#x44B;"><h3>Необязательные параметры</h3>

<p>В то время как многие функции, подобно <code>verbose-sum</code>, нуждаются только в обязательных
параметрах, не все функции являются настолько простыми.  Иногда функции должны иметь
параметр, который будет использоваться только при некоторых вызовах, поскольку он имеет
"правильное" значение по умолчанию.  Таким примером может быть функция, которая создает
структуру данных, которая будет при необходимости расти.  Поскольку, структура данных
может расти, то не имеет значения, по большей части, какой начальный размер она имеет.  Но
пользователь функции, который имеет понятие о том, сколько данных будет помещено в данную
структуру, может улучшить производительность программы путем указания нужного начального
размера этой структуры.  Однако, большинство пользователей данной функции, скорее всего,
позволят выбрать наиболее подходящий размер автоматически.  В Common Lisp вы можете
предоставить этим пользователям одинаковые возможности с помощью необязательных
параметров; пользователи, которые не хотят устанавливать значение сами, получат разумное
значение по умолчанию, а остальные пользователи смогут подставить нужное значение.<a class="fn_top" id="fnt__5" href="functions#fn__5">5)</a>
</p>
<p>Для определения функции с необязательными параметрами после списка обязательных
параметров поместите символ  <code>&amp;optional</code>, за которым перечислите имена необязательных
параметров.  Простой пример использования выглядит так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> foo <span class="paren2">(<span class="">a b &amp;optional c d</span>)</span> <br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> a b c d</span>)</span></span>)</span><br/></pre>

<p>Когда функция будет вызвана, сначала аргументы связываются с обязательными параметрами.
После того, как обязательные параметры получили переданные значения, и остались еще
аргументы, то они будут присвоены необязательным параметрам.  Если аргументы закончатся до того, как кончится список необязательных параметров, то оставшиеся параметры получат
значение <code>NIL</code>.  Таким образом, предыдущая функция будет выдавать следующие результаты:
</p><pre>(foo 1 2)     ==&gt; (1 2 NIL NIL)<br/>(foo 1 2 3)   ==&gt; (1 2 3 NIL)<br/>(foo 1 2 3 4) ==&gt; (1 2 3 4)<br/></pre>
<p>Lisp все равно будет проверять количество аргументов, переданных функции (в нашем случае
это число от 2 до 4-х, включительно), и будет выдавать ошибку, если функция вызвана с
лишними аргументами, или их, наоборот, не достает.
</p>
<p>Конечно, вы можете захотеть использовать другие значения по умолчанию, отличные от
<code>NIL</code>.  Вы можете указать их, путем замены имени параметра на список, состоящий из имени
и выражения.  Это выражение будет вычислено только если пользователь не указал значения
для необязательного параметра.  Общепринятым является простое задание конкретного значения
в качестве выражения.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> foo <span class="paren2">(<span class="">a &amp;optional <span class="paren3">(<span class="">b 10</span>)</span></span>)</span> <br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> a b</span>)</span></span>)</span><br/></pre>

<p>Эта функция требует указания одного аргумента, который будет присвоен параметру <code>a</code>.
Второй параметр – <code>b</code>, получит либо значение второго аргумента, если он указан, либо
число 10.
</p><pre>(foo 1 2) ==&gt; (1 2)<br/>(foo 1)   ==&gt; (1 10)<br/></pre>
<p>Однако, иногда, вам потребуется большая гибкость в выборе значения по умолчанию.  Вы можете
захотеть вычислять значение по умолчанию основываясь на других параметрах.  И вы можете
сделать это – выражение для значения по умолчанию может ссылаться на параметры, ранее
перечисленные в списке параметров.  Если вы пишете функцию, которая возвращает что-то типа
описания прямоугольников, и вы хотите сделать ее удобной для использования с квадратами,
то вы можете использовать такой вот список параметров:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> make-rectangle <span class="paren2">(<span class="">width &amp;optional <span class="paren3">(<span class="">height width</span>)</span></span>)</span> <br/>  ...</span>)</span><br/></pre>

<p>что сделает параметр <code>height</code> равным параметру <code>width</code>, если только он не будет явно
задан.
</p>
<p>Иногда полезно будет знать, было ли значение необязательного параметра задано
пользователем, или использовалось значение по умолчанию.  Вместо того, чтобы писать код,
который проверяет, является ли переданное значение равным значению по умолчанию (это все
равно не будет работать, поскольку пользователь может явно задать значение, равное
значению по умолчанию), вы можете добавить еще одно имя переменной к списку параметров
после выражения для значения по умолчанию.  Указанная переменная будет иметь истинное
значение, если пользователь задал значение для аргумента, и <code>NIL</code> в противном случае.
По соглашению, эти переменные называются также как и параметры, но с добавлением 
"<code>-supplied-p</code>" к концу имени. Например:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> foo <span class="paren2">(<span class="">a b &amp;optional <span class="paren3">(<span class="">c 3 c-supplied-p</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> a b c c-supplied-p</span>)</span></span>)</span><br/></pre>

<p>Выполнение этого кода приведет к следующим результатам:
</p><pre>(foo 1 2)   ==&gt; (1 2 3 NIL)<br/>(foo 1 2 3) ==&gt; (1 2 3 T)<br/>(foo 1 2 4) ==&gt; (1 2 4 T)<br/></pre>
</div><div class="chapter" id="&#x41E;&#x441;&#x442;&#x430;&#x442;&#x43E;&#x447;&#x43D;&#x44B;&#x435; (Rest) &#x43F;&#x430;&#x440;&#x430;&#x43C;&#x435;&#x442;&#x440;&#x44B;"><h3>Остаточные (Rest) параметры</h3>

<p>Необязательные параметры применяются только тогда, когда у вас есть отдельные параметры,
для которых пользователь может указывать или не указывать значения.  Но некоторые функции
могут требовать изменяемого количества аргументов.  Некоторые встроенные функции, которые
вы уже видели, работают именно так.  Функция <code>FORMAT</code> имеет два обязательных аргумента
– поток вывода и управляющую строку.  Но кроме этого, он требует переменное количество
аргументов, зависящее от того, сколько значений он должен вставить в управляющую строку.
Функция <code>+</code> также получает переменное количество аргументов – нет никаких причин
ограничиваться складыванием только двух чисел, эта функция может вычислять сумму любого
количества значений. (Она даже может работать вообще без аргументов, возвращая значение
<code>0</code>.)  Следующие примеры являются допустимыми вызовами этих двух функций:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"hello, world"</span></span>)</span><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"hello, ~a"</span> name</span>)</span><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"x: ~d y: ~d"</span> x y</span>)</span><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a></span>)</span><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> 1</span>)</span><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> 1 2</span>)</span><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> 1 2 3</span>)</span><br/></pre>

<p>Очевидно, что вы можете написать функцию с переменным числом аргументов, просто описывая
множество необязательных параметров.  Но это будет невероятно мучительно – простое
написание списка параметров может быть не очень хорошим делом, и это не связывает все
параметры с их использованием в теле функции.  Для того, чтобы сделать это правильно, вы
должны иметь число необязательных параметров равным максимальному допустимому количеству
аргументов при вызове функций.  Это число зависит от реализации, но гарантируется, что оно
будет равно минимум <code>50</code>.  В текущих реализациях оно варьируется от <code>4,096</code> до
<code>536,870,911</code>.<a class="fn_top" id="fnt__6" href="functions#fn__6">6)</a>  Хех!  Этот мозгодробительный подход явно не является хорошим стилем написания программ.
</p>
<p>Вместо этого, Lisp позволяет вам указать параметр, который примет все аргументы (этот
параметр указывается после символа <code>&amp;rest</code>).  Если функция имеет параметр <code>&amp;rest</code>
(остаточный параметр), то любые аргументы, оставшиеся после связывания обязательных и
необязательных параметров, будут собраны в список, который станет значением остаточного
параметра <code>&amp;rest</code>.  Таким образом, список параметров для функций <code>FORMAT</code> и <code>+</code>
будут выглядеть примерно так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/t_stream.htm" class="symbol">stream</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_string.htm" class="symbol">string</a> &amp;rest <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a></span>)</span> ...</span>)</span><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> <span class="paren2">(<span class="">&amp;rest numbers</span>)</span> ...</span>)</span> <br/></pre>




</div><div class="chapter" id="&#x418;&#x43C;&#x435;&#x43D;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x44B;&#x435; &#x43F;&#x430;&#x440;&#x430;&#x43C;&#x435;&#x442;&#x440;&#x44B;"><h3>Именованные параметры</h3>

<p>Необязательные и остаточные (rest) параметры дают вам достаточно гибкости, но ни один из
них не помогает вам в следующей ситуации: предположим, что вы имеете функцию, которая
получает четыре необязательных параметра.  Теперь предположим, что пользователь захочет
задать значение только для одного из параметров, и даже, что пользователь захочет задать значение только для некоторых, расположенных не последовательно, параметров.
</p>
<p>Пользователи, которые хотят задать значение для первого параметра не имеют никаких проблем
– они просто передадут один необязательный параметр, и пропустят оставшиеся.  Но что
делать пользователям, которые хотят указать значения для других параметров – разве это не
та проблема, которую должно решить использование необязательных параметров?
</p>
<p>Конечно, это она.  Но проблема заключается в том, что необязательные параметры все равно
являются позиционными – если пользователь хочет указать четвертый необязательный
параметр, то первые три необязательных параметра превращаются для этого пользователя в
обязательные.  К счастью, существует еще один вид параметров – именованные (keyword)
параметры, которые позволяют указывать пользователю, какие значения будут связаны с
конкретными параметрами.
</p>
<p>Для того, чтобы задать именованные параметры, необходимо после всех требуемых,
необязательных и остаточных параметров, указать символ <code>&amp;key</code> и затем перечислить любое
количество спецификаторов именованных параметров.  Вот пример функции, которая имеет
только именованные параметры:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> foo <span class="paren2">(<span class="">&amp;key a b c</span>)</span> <br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> a b c</span>)</span></span>)</span><br/></pre>

<p>Когда функция вызывается, каждый именованный параметр связывается со значением, которое
указано после ключевого слова, имеющего то же имя, что и параметр.  Вернемся к главе 4, в
которой указывалось, что ключевые слова – это имена, которые начинаются с двоеточия, и
которые автоматически определяются как самовычисляемые (self-evaluating) константы.
</p>
<p>Если ключевое слово не указано в списке аргументов, то соответствующий параметр получает
значение по умолчанию, т.е. принцип тот же, что и для необязательных параметров.  Поскольку
именованные аргументы имеют метку, то они могут быть указаны в любом порядке, если они
следуют после обязательных аргументов.  Например, <code>foo</code> может быть вызвана вот так:
</p><pre>(foo)                ==&gt; (NIL NIL NIL)<br/>(foo :a 1)           ==&gt; (1 NIL NIL)<br/>(foo :b 1)           ==&gt; (NIL 1 NIL)<br/>(foo :c 1)           ==&gt; (NIL NIL 1)<br/>(foo :a 1 :c 3)      ==&gt; (1 NIL 3)<br/>(foo :a 1 :b 2 :c 3) ==&gt; (1 2 3)<br/>(foo :a 1 :c 3 :b 2) ==&gt; (1 2 3)<br/></pre>
<p>Также как и для необязательных параметров, для именованных параметров можно задавать выражение
для вычисления значения по умолчанию и имя <code>supplied-p</code>-переменной.  И для
необязательных, и для именованных параметров, значение по умолчанию может ссылаться на
параметры, указанные ранее в списке.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> foo <span class="paren2">(<span class="">&amp;key <span class="paren3">(<span class="">a 0</span>)</span> <span class="paren3">(<span class="">b 0 b-supplied-p</span>)</span> <span class="paren3">(<span class="">c <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> a b</span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> a b c b-supplied-p</span>)</span></span>)</span><br/></pre><pre>(foo :a 1)           ==&gt; (1 0 1 NIL)<br/>(foo :b 1)           ==&gt; (0 1 1 T)<br/>(foo :b 1 :c 4)      ==&gt; (0 1 4 T)<br/>(foo :a 2 :b 1 :c 4) ==&gt; (2 1 4 T)<br/></pre>
<p>Также, если по некоторым причинам вы хотите, чтобы пользователь использовал имена
аргументов, отличающиеся от имен параметров, то вы можете заменить имя параметра на
список, содержащий имя, которое будет использоваться пользователем при вызове, и имя
параметра.  Следующее определение <code>foo</code>:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> foo <span class="paren2">(<span class="">&amp;key <span class="paren3">(<span class=""><span class="paren4">(<span class=""><span class="keyword">:apple</span> a</span>)</span></span>)</span> <span class="paren3">(<span class=""><span class="paren4">(<span class=""><span class="keyword">:box</span> b</span>)</span> 0</span>)</span> <span class="paren3">(<span class=""><span class="paren4">(<span class=""><span class="keyword">:charlie</span> c</span>)</span> 0 c-supplied-p</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> a b c c-supplied-p</span>)</span></span>)</span><br/></pre>

<p>позволяет пользователю вызывать функцию вот так:
</p><pre>(foo :apple 10 :box 20 :charlie 30) ==&gt; (10 20 30 T)<br/></pre>
<p>Этот стиль особенно полезен, если вы хотите полностью отделить публичный интерфейс от
деталей внутренней реализации, поскольку обычно внутри вы хотите использовать короткие
имена переменных, и значащие имена в программном интерфейсе.  Однако, обычно это
используется не особо часто.
</p>

</div><div class="chapter" id="&#x421;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x43D;&#x43E;&#x435; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435; &#x440;&#x430;&#x437;&#x43D;&#x44B;&#x445; &#x442;&#x438;&#x43F;&#x43E;&#x432; &#x43F;&#x430;&#x440;&#x430;&#x43C;&#x435;&#x442;&#x440;&#x43E;&#x432;"><h3>Совместное использование разных типов параметров</h3>

<p>Использование всех четырех типов параметров в одной функции хотя и является вполне возможным, но применяется редко.  Когда используется более одного типа параметров, они должны быть объявлены в
порядке, который мы уже обсуждали – сначала указываются имена требуемых параметров, затем
- необязательных, потом - остаточных (<code>&amp;rest</code>), и в заключение - именованных параметров.
Но обычно в функциях, которые используют несколько типов параметров, комбинируют требуемые
параметры с одним из других видов параметров, или возможно комбинируют необязательные и
остаточные параметры.  Два других сочетания – необязательных или остаточных параметров с
именованными параметрами, могут привести к очень удивительному поведению функции.
</p>
<p>Комбинация необязательных и именованных параметров преподносит достаточно сюрпризов, так что
вы скорее всего должны избегать их совместного использования.  Проблема заключается в том,
что если пользователь не задает значений для всех необязательных параметров, то эти
параметры получают имена и значения именованных параметров.  Например, эта функция
использует необязательные и именованные параметры:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> foo <span class="paren2">(<span class="">x &amp;optional y &amp;key z</span>)</span> <br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> x y z</span>)</span></span>)</span><br/></pre>

<p>Если она вызывается вот так, то все нормально:
</p><pre>(foo 1 2 :z 3) ==&gt; (1 2 3)<br/></pre>
<p>И вот так, все работает нормально:
</p><pre>(foo 1)  ==&gt; (1 nil nil)<br/></pre>
<p>Но в этом случае, она выдает ошибку:
</p><pre>(foo 1 :z 3) ==&gt; ERROR<br/></pre>
<p>Это происходит потому, что имя параметра <code>:z</code> берется как значение для необязательного
параметра <code>y</code>, оставляя для обработки только аргумент <code>3</code>.  При этом, Lisp ожидает,
что в этом месте встретится либо пара имя/значение, либо не будет ничего, и одиночное
значение приведет к выдаче ошибки.  Будет даже хуже, если функция будет иметь два
необязательных параметра, так что использование функции как в последнем примере, приведет
к тому, что значения  <code>:z</code> и <code>3</code> будут присвоены двум необязательным параметрам, а
именованный параметр <code>z</code> получит значение по умолчанию –  <code>NIL</code>, без всякого
указания, что что-то произошло неправильно.
</p>
<p>В общем, если вы обнаружите, что вы пишете функцию, которая использует и необязательные и
именованные параметры, то вам лучше просто исправить ее для использования только
именованных параметров – этот подход более гибок, и вы всегда сможете добавить новые
параметры не беспокоя пользователей вашей функции.  Вы можете даже удалять именованные
параметры, если никто не использует их.<a class="fn_top" id="fnt__7" href="functions#fn__7">7)</a>
Использование именованных параметров помогает сделать код более легким для сопровождения и
развития – если вам нужно изменить поведение функции, и это изменение потребует
ввода новых параметров, вы можете добавить именованные параметры без изменения, или даже без перекомпиляции кода, который использует эту функцию.
</p>
<p>Вы можете безопасно комбинировать остаточные и именованные параметры, но вначале поведение
может показаться немного удивительным.  Обычно, наличие либо остаточных, либо именованных
параметров приведет к тому, что значения, оставшиеся после заполнения всех обязательных и
необязательных параметров, будут обработаны определенным образом – либо собраны в список
(для остаточных параметров), или присвоены соответствующим именованным параметрам. Если в
списке параметров используются и остаточные и именованные параметры, то выполняются оба
действия – все оставшиеся значения собираются в список, который присваивается параметру
<code>&amp;rest</code>, а также соответствующие значения присваиваются именованным параметрам.  Так что
имея следующую функцию:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> foo <span class="paren2">(<span class="">&amp;rest <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rest.htm" class="symbol">rest</a> &amp;key a b c</span>)</span> <br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rest.htm" class="symbol">rest</a> a b c</span>)</span></span>)</span><br/></pre>

<p>вы получите следующие результаты:
</p><pre>(foo :a 1 :b 2 :c 3)  ==&gt; ((:A 1 :B 2 :C 3) 1 2 3)<br/></pre>

</div><div class="chapter" id="&#x412;&#x43E;&#x437;&#x432;&#x440;&#x430;&#x442; &#x437;&#x43D;&#x430;&#x447;&#x435;&#x43D;&#x438;&#x439; &#x438;&#x437; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438;"><h3>Возврат значений из функции</h3>

<p>Все функции, которые уже были написаны, так или иначе использовали обычное поведение,
заключающееся в возврате значения последнего вычисленного выражения как собственного
возвращаемого значения.  Это самый употребительный способ возврата значений из функции.
</p>
<p>Однако, иногда бывает нужно вернуть значение из середины функции, вырываясь таким образом
из вложенных управляющих конструкций.  В таком случае вы можете использовать специальный
оператор <code>RETURN-FROM</code>, который предназначен для немедленного возвращения любого
значения из функции.
</p>
<p>Вы увидите в главе 20 что <code>RETURN-FROM</code> в самом деле не привязана к функциям; она
используется для возврата из блока кода, определенного с помощью оператора <code>BLOCK</code>.
Однако, <code>DEFUN</code> автоматически помещает тело функции в блок кода с тем же именем, что и
имя функции.  Так что, вычисление <code>RETURN-FROM</code> с именем функции и значением, которое вы
хотите возвратить, приведет к немедленному выходу из функции с возвратом указанного
значения.  <code>RETURN-FROM</code> является специальным оператором, чьим первым аргументом
является имя блока из которого необходимо выполнить возврат.  Это имя не вычисляется, так
что нет нужды его экранировать.
</p>
<p>Следующая функция использует вложенные циклы для нахождения первой пары чисел, каждое из
которых меньше чем <code>10</code>, и чье произведение больше заданного аргумента, и она использует
<code>RETURN-FROM</code> для возврата первой найденной пары чисел:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> foo <span class="paren2">(<span class="">n</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_dotime.htm" class="symbol">dotimes</a> <span class="paren3">(<span class="">i 10</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_dotime.htm" class="symbol">dotimes</a> <span class="paren4">(<span class="">j 10</span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren5">(<span class="">&gt; <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> i j</span>)</span> n</span>)</span><br/>        <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_ret_fr.htm" class="symbol"><i><span class="symbol">return-from</span></i></a> foo <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> i j</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Надо отметить, что необходимость указания имени функции из которой вы хотите вернуться,
является не особо удобной – если вы измените имя функции, то вам нужно будет также
изменить имя, использованное в операторе <code>RETURN-FROM</code>.<a class="fn_top" id="fnt__8" href="functions#fn__8">8)</a>  Но следует отметить,
что явное использование <code>RETURN-FROM</code> в Lisp происходит значительно реже, чем
использование выражения <code>return</code> в C-подобных языках, поскольку все выражения Lisp,
включая управляющие конструкции, такие как условные выражения и циклы, вычисляются в
значения.  Так что это не представляет особой сложности на практике.
</p>







</div><div class="chapter" id="&#x424;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438; &#x43A;&#x430;&#x43A; &#x434;&#x430;&#x43D;&#x43D;&#x44B;&#x435;, &#x438;&#x43B;&#x438; &#x424;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438; &#x432;&#x44B;&#x441;&#x448;&#x435;&#x433;&#x43E; &#x43F;&#x43E;&#x440;&#x44F;&#x434;&#x43A;&#x430;"><h3>Функции как данные, или Функции высшего порядка</h3>

<p>В то время как основной способ использования функций – это вызов их с указанием имени,
существуют ситуации, когда было бы полезно рассматривать функции как данные.  Например, вы
можете передать одну функцию в качестве аргумента другой функции, вы можете написать общую
функцию сортировки, и предоставить пользователю возможность указания функции для сравнения
двух элементов.  Так что один и тот же алгоритм может использоваться с разными
функциями сравнения.  Аналогично, обратные вызовы (callbacks) и перехваты событий (hooks) зависят от возможности
хранения ссылок на исполняемый код, который можно выполнить позже.  Поскольку функции уже
являются стандартным способом представления частей кода, имеет смысл разрешить
рассмотрение функций как данных.<a class="fn_top" id="fnt__9" href="functions#fn__9">9)</a>
</p>
<p>В Lisp функции являются просто другим типом объектов.  Когда вы определяете функцию с
помощью <code>DEFUN</code>, вы в действительности делаете две вещи: создаёте новый объект-функцию,
и даёте ему имя.  Кроме того, имеется возможность, как вы увидели в главе 3, использовать <code>LAMBDA</code>
для создания функции без имени.  Действительное представление объекта-функции, независимо
от того, именованный он или нет, является неопределенным – в компилируемых вариантах
Lisp, они вероятно состоят в основном из машинного кода.  Единственными вещами которые вам
надо знать – как получить эти объекты, и как выполнять их, если вы их получили.
</p>
<p>Специальный оператор <code>FUNCTION</code> обеспечивает механизм получения объекта-функции.  Он
принимает единственный аргумент и возвращает функцию с этим именем.  Имя не экранируется.
Так что, если вы определили функцию <code>foo</code>, например вот так:
</p><pre>CL-USER&gt; (defun foo (x) (* 2 x))<br/>FOO<br/></pre>
<p>вы можете получить объект-функцию следующим образом:<a class="fn_top" id="fnt__10" href="functions#fn__10">10)</a>
</p><pre>CL-USER&gt; (function foo)<br/>#&lt;Interpreted Function FOO&gt;<br/></pre>
<p>В действительности, вы уже использовали <code>FUNCTION</code>, но это было замаскировано. Синтаксис
<code>#</code>', который вы использовали в главе 3, является синтаксической оберткой для
<code>FUNCTION</code>, точно также как и ' является оберткой для <code>QUOTE</code>.<a class="fn_top" id="fnt__11" href="functions#fn__11">11)</a>  Так
что вы можете получить объект-функцию вот так:
</p><pre>CL-USER&gt; #'foo<br/>#&lt;Interpreted Function FOO&gt;<br/></pre>
<p>После того, как вы получили объект-функцию, есть только одна вещь, которую вы можете
сделать с ней – выполнить ее. Common Lisp предоставляет две функции для выполнения
функции через объект-функцию: <code>FUNCALL</code> и <code>APPLY</code>.<a class="fn_top" id="fnt__12" href="functions#fn__12">12)</a> Они отличаются тем, как они получают аргументы, которые будут переданы
вызываемой функции.
</p>
<p><code>FUNCALL</code> это функция, которая используется тогда, когда во время написания кода вы
знаете количество аргументов, которые вы будете передавать функции.  Первым аргументом
<code>FUNCALL</code> является запускаемый объект-функция, а оставшиеся аргументы передаются данной
функции.  Так что следующие два выражения являются эквивалентными:
</p><pre>(foo 1 2 3) === (funcall #'foo 1 2 3)<br/></pre>
<p>Однако довольно мало смысла в использовании <code>FUNCALL</code> для вызова функции, чье имя вы
знаете во время написания кода.  В действительности, два предыдущих выражения скорее всего
скомпилируются в один и тот же машинный код.
</p>
<p>Следующая функция демонстрирует более реалистичное использование <code>FUNCALL</code>.  Она
принимает объект-функцию в качестве аргумента, и рисует простую текстовую диаграмму
значений возвращенных функцией, вызываемой для значений от <code>min</code> до <code>max</code> с шагом
<code>step</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> plot <span class="paren2">(<span class="">fn <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_max_m.htm" class="symbol">min</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_max_m.htm" class="symbol">max</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_step.htm" class="symbol">step</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for i from <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_max_m.htm" class="symbol">min</a> to <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_max_m.htm" class="symbol">max</a> by <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_step.htm" class="symbol">step</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a><br/>        <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> repeat <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_funcal.htm" class="symbol">funcall</a> fn i</span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"*"</span></span>)</span></span>)</span><br/>        <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"~%"</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Выражение <code>FUNCALL</code> вычисляет значение функции для каждого значения <code>i</code>.  Внутрениий
цикл использует это значение для определения того, сколько раз напечатать знак
"звездочка".
</p>
<p>Заметьте, что вы не используете <code>FUNCTION</code> или <code>#</code>' для получения значения <code>fn</code>; вы
хотите, чтобы оно интерпретировалось как переменная, поскольку значение этой переменной
является объектом-функцией.  Вы можете вызвать <code>plot</code> с любой функцией, которая берет
один числовой аргумент, например, со встроенной функцией <code>EXP</code>, которая возвращает
значение <code>e</code>, возведенное в степень переданного аргумента.
</p><pre>CL-USER&gt; (plot #'exp 0 4 1/2)<br/>*<br/>*<br/>**<br/>****<br/>*******<br/>************<br/>********************<br/>*********************************<br/>******************************************************<br/>NIL<br/></pre>
<p>Однако <code>FUNCALL</code> не особо полезен, когда список аргументов становится известен только во
время выполнения.  Например, для работы с функцией <code>plot</code> в других случаях, представьте,
что вы получили список, содержащий объект-функцию, минимальное и максимальное значения, а
также шаг изменения значений.  Другими словами, список содержит значения, которые вы
хотите передать как аргументы для <code>plot</code>.  Предположим, что этот список находится в
переменной <code>plot-data</code>.  Вы можете вызвать <code>plot</code> с этими значениями вот так вот:
</p>
<pre class="code"><span class="paren1">(<span class="">plot <br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_firstc.htm" class="symbol">first</a> plot-data</span>)</span> <br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_firstc.htm" class="symbol">second</a> plot-data</span>)</span> <br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_firstc.htm" class="symbol">third</a> plot-data</span>)</span> <br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_firstc.htm" class="symbol">fourth</a> plot-data</span>)</span></span>)</span><br/></pre>


<p>Это работает нормально, но достаточно раздражает необходимость явного доставания
аргументов лишь для того, чтобы передать их функции <code>plot</code>.
</p>
<p>Это как раз тот случай, когда на помощь приходит <code>APPLY</code>.  Подобно <code>FUNCALL</code>, ее
первым аргументом является объект-функция.  Но после первого аргумента, вместо
перечисления отдельных аргументов, она принимает список.  Затем <code>APPLY</code> применяет
функцию к значениям в списке.  Это позволяет вам переписать предыдущий код следующим
образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_apply.htm" class="symbol">apply</a> #'plot plot-data</span>)</span><br/></pre>

<p>Кроме того, <code>APPLY</code> может также принимать "свободные" аргументы, также как и обычные
аргументы в списке. Таким образом, если <code>plot-data</code> содержит только значения для
<code>min</code>, <code>max</code> и <code>step</code>, то вы все равно можете использовать  <code>APPLY</code> для
отображения функции <code>EXP</code> используя следующее выражение:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_apply.htm" class="symbol">apply</a> #'plot #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_exp_e.htm" class="symbol">exp</a> plot-data</span>)</span><br/></pre>

<p><code>APPLY</code> не заботится о том, использует ли функция необязательные, остаточные или
именованные объекты – список аргументов создается путем объединения всех аргументов, и
результирующий список должен быть правильным списком аргументов для функции с достаточным
количеством аргументов для обязательных параметров и соответствующими именованными
параметрами.
</p>

</div><div class="chapter" id="&#x410;&#x43D;&#x43E;&#x43D;&#x438;&#x43C;&#x43D;&#x44B;&#x435; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438;"><h3>Анонимные функции</h3>

<p>После того, как вы начали писать или даже просто использовать функции, которые принимают
в качестве аргументов другие функции, вы, скорее всего, открыли для себя тот момент, что
иногда раздражает необходимость определять и давать имя функции, которая будет
использоваться в одном месте, особенно, если вы никогда не будете вызывать ее по имени.
</p>
<p>Когда кажется, что определение новых функций с помощью <code>DEFUN</code> является излишним, вы
можете создать "анонимную" функцию, используя выражение <code>LAMBDA</code>.  Как обсуждалось в
главе 3, <code>LAMBDA</code>-выражение выглядит примерно так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_lambda.htm" class="symbol"><i><span class="symbol">lambda</span></i></a> <span class="paren2">(<span class="">parameters</span>)</span> body</span>)</span><br/></pre>

<p>Можно представить себе, что <code>LAMBDA</code>-выражения – это специальный вид имен функций, где
само имя напрямую описывает что эта функция делает.  Это объясняет, почему вы можете
использовать <code>LAMBDA</code>-выражение вместо имени функции с <code>#</code>'.
</p><pre>(funcall #'(lambda (x y) (+ x y)) 2 3) ==&gt; 5<br/></pre>
<p>Вы даже можете использовать <code>LAMBDA</code>-выражение как "имя" функции в выражениях,
вызывающих функцию.  Если вы хотите, то вы можете переписать предыдущий пример с
<code>FUNCALL</code> в следующем виде.
</p><pre>((lambda (x y) (+ x y)) 2 3) ==&gt; 5<br/></pre>
<p>Но обычно так никогда не пишут, это использовалось лишь для демонстрации, что
<code>LAMBDA</code>-выражения разрешено и можно использовать везде, где могут использоваться
обычные функции.<a class="fn_top" id="fnt__13" href="functions#fn__13">13)</a>
</p>
<p>Анонимные функции могут быть очень полезными, когда вы хотите передать одну функцию в качестве
аргумента другой, и она достаточно проста для записи на
месте.  Например, предположим, что вы хотите нарисовать график функции <code>2x</code>. Вы можете
определить следующую функцию:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> double <span class="paren2">(<span class="">x</span>)</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> 2 x</span>)</span></span>)</span><br/></pre>

<p>которую затем передать  <code>plot</code>.
</p><pre>CL-USER&gt; (plot #'double 0 10 1)<br/>**<br/>****<br/>******<br/>********<br/>**********<br/>************<br/>**************<br/>****************<br/>******************<br/>********************<br/>NIL<br/></pre>
<p>Но легче и более понятно написать вот так:
</p><pre>CL-USER&gt; (plot #'(lambda (x) (* 2 x)) 0 10 1)<br/>**<br/>****<br/>******<br/>********<br/>**********<br/>************<br/>**************<br/>****************<br/>******************<br/>********************<br/>NIL<br/></pre>

<p>Другим очень важным применением <code>LAMBDA</code>-выражений является их использование для
создания замыканий (closures) – функций, которые захватывают часть среды выполнения, в
которой они были созданы.  Вы уже использовали замыкания в главе 3, но подробное описание
о том, как замыкания работают и как они могут использоваться, больше относится к
переменным, а не к функциям, так что я отложу это обсуждение до следующей главы.
</p></div></div><div class="footnotes"><div><a class="fn_bot" id="fn__1" href="functions#fnt__1">1)</a>Несмотря на важность функций в Common Lisp, не совсем правильно называть его функциональным языком.  Это правильно для некоторой части возможностей Common Lisp, таких как функции работы со списками, которые созданы для работы в стиле тело-form*!!!. Конечно же Lisp занимает значительное место в истории функционального  программирования – McCarthy ввел в обращение много идей, которые считаются очень важными для функционального программирования, но Common Lisp был умышленно спроектирован для поддержки разных стилей программирования.  В семействе Lisp-подобных языков, язык Scheme является наиболее близким к понятию "чистого" функционального языка, но даже он имеет несколько возможностей, которые отделяют его от чистоты таких языков как Haskell и ML.</div><div><a class="fn_bot" id="fn__2" href="functions#fnt__2">2)</a>Хорошо, почти любой символ.
Неопределенным является поведение, когда вы в качестве имени для ваших функций используете
одно из имен, указанных в стандарте.  Однако, как вы увидите в главе 21, система пакетов
Lisp позволяет вам создавать имена в разных пространствах имен, так что это не является
проблемой.</div><div><a class="fn_bot" id="fn__3" href="functions#fnt__3">3)</a>Списки параметров иногда называются
лямбда-списками из-за исторического отношения между понятием функции в Lisp и
лямбда-исчислением.</div><div><a class="fn_bot" id="fn__4" href="functions#fnt__4">4)</a>Например, следующий код:

<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_docume.htm" class="symbol">documentation</a> 'foo '<a href="http://www.lispworks.com/reference/HyperSpec/Body/a_fn.htm" class="symbol"><i><span class="symbol">function</span></i></a></span>)</span><br/></pre>

вернёт строку документации для функции <code>foo</code>.  Однако, заметьте, что документация
предназначается для людей, а не для работы программ.  Реализации Lisp не обязаны сохранять
их и могут удалить их в любое время, так что переносимые программы не должны
зависеть от наличия документации к функции.  В некоторых реализациях требуется установка
специальных переменных, имена которых зависят от конкретной реализации, чтобы они начали
хранить документацию к функциям.</div><div><a class="fn_bot" id="fn__5" href="functions#fnt__5">5)</a>В
языках, которые явно не поддерживают необязательные параметры, программисты обычно находят
методы их эмуляции.  Одна из техник заключается в использовании предопределенных значений
"не-значение", которые пользователь может передать, показывая, что он хочет использовать
значение по умолчанию.  В языке C, например, часто используют  <code>NULL</code> в качестве такого
предопределенного значения.  Однако, такая договоренность между функцией и ее
пользователями является лишь подпоркой – в некоторых функциях или для некоторых
аргументов предопределенным значением может быть <code>NULL</code>, в то время как для других
функций или для других аргументов таким значением может быть  <code>-1</code> или некоторая другая
предопределенная (часто заданная с помощью <code>#define</code>) константа.</div><div><a class="fn_bot" id="fn__6" href="functions#fnt__6">6)</a>Для вашей реализации вы можете узнать это значение используя константу
<code>CALL-ARGUMENTS-LIMIT</code>.</div><div><a class="fn_bot" id="fn__7" href="functions#fnt__7">7)</a>четыре стандартные функции принимают
необязательные и именованные аргументы – <code>READ-FROM-STRING</code>, <code>PARSE-NAMESTRING</code>,
<code>WRITE-LINE</code> и <code>WRITE-STRING</code>.  Их оставили во время стандартизации для обеспечения
обратной совместимости с более ранними диалектами Lisp.  <code>READ-FROM-STRING</code> является
лидером по количеству ошибок сделанных начинающими программистами на Lisp – вызов этой
функции как <code>(read-from-string s :start 10)</code> игнорирует ключевое слово <code>:start</code>,
читает с индекса <code>0</code>, а не с <code>10</code>.  Это происходит, поскольку <code>READ-FROM-STRING</code>
имеет два необязательных параметра, которые съедают аргументы <code>:start</code> и <code>10</code>.</div><div><a class="fn_bot" id="fn__8" href="functions#fnt__8">8)</a>Другой макрос, <code>RETURN</code>, не
требует указания имени блока.  Однако, вы не можете использовать его вместо
<code>RETURN-FROM</code> для того, чтобы не указывать имя функции – это лишь синтаксическая
обвязка для возврата из блока с именем <code>NIL</code>.  Описание этого макроса, вместе с
описанием <code>BLOCK</code> и <code>RETURN-FROM</code>, будет сделано в главе 20.</div><div><a class="fn_bot" id="fn__9" href="functions#fnt__9">9)</a>Конечно, Lisp не является единственным языком, который
позволяет рассматривать функции как данные.  Язык C использует указатели на функции,
Perl использует ссылки на подпрограммы, Python использует подход, аналогичный Lisp, а C#
ввел делегаты (типизированные указатели на функции, призванные улучшить механизмы
используемые в Java) и также механизм анонимных классов.</div><div><a class="fn_bot" id="fn__10" href="functions#fnt__10">10)</a>Точное печатное представление
объекта-функции может отличаться в зависимости от реализации.</div><div><a class="fn_bot" id="fn__11" href="functions#fnt__11">11)</a>Лучше всего
рассматривать <code>FUNCTION</code> как специальный вид экранирования.  Экранирование символа
предотвращает его вычисление, оставляя сам символ, а не значение переменной с именем
символа. <code>FUNCTION</code> также изменяет нормальные правила вычисления, но вместо
предотвращения вычисления символа, заставляет вычислять его как имя функции, точно также,
как если бы этот символ использовался в качестве имени функции в выражении вызова.</div><div><a class="fn_bot" id="fn__12" href="functions#fnt__12">12)</a>В действительности существует и
третья возможность, специальный оператор <code>MULTIPLE-VALUE-CALL</code>, но я отложу этот вопрос
до того момента, когда мы будет обсуждать выражения, возвращающие множественные значения в главе 20.</div><div><a class="fn_bot" id="fn__13" href="functions#fnt__13">13)</a>В Common Lisp также возможно использовать <code>LAMBDA</code>-выражение как
аргумент <code>FUNCALL</code> (или любой другой функции, которая принимает аргумент-функцию, такой
как <code>SORT</code> или <code>MAPCAR</code>) без указания  <code>#</code>' перед нею, например так:

<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_funcal.htm" class="symbol">funcall</a> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_lambda.htm" class="symbol"><i><span class="symbol">lambda</span></i></a> <span class="paren3">(<span class="">x y</span>)</span> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> x y</span>)</span></span>)</span> 2 3</span>)</span><br/></pre>

Это разрешено и полностью соответствует версии с использованием <code>#</code>'.  Исторически,
<code>LAMBDA</code>-выражения не были выражениями, которые можно было вычислить.  <code>LAMBDA</code> не
являлось именем функции, макросом или специальным оператором.  Вместо этого, список,
начинавшийся с символа <code>LAMBDA</code>, являлся специальной синтаксической конструкцией, которую
Lisp распознавал, как что-то вроде имени функции.

Но если это было бы правдой, то выражение <code>(funcall (lambda (...) ...))</code> должно быть
неправильным, поскольку <code>FUNCALL</code> является функцией, и стандартные правила вычислений для
вызова функций должны требовать, чтобы <code>LAMBDA</code>-выражение было вычислено.  Однако, в
ходе процесса стандартизации в ANSI для того, чтобы сделать возможным реализацию ISLISP,
другого диалекта Lisp, который стандартизировался в то же самое время, в Common Lisp был
введен макрос <code>LAMBDA</code>, используемый для совместимости на уровне пользователей.  Этот
макрос раскрывается в вызов <code>FUNCTION</code>, окружающего <code>LAMBDA</code>-выражение.  Другими
словами, следующее <code>LAMBDA</code>-выражение:

<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_lambda.htm" class="symbol"><i><span class="symbol">lambda</span></i></a> <span class="paren2">(<span class=""/>)</span> 42</span>)</span><br/></pre>

раскрывается в следующее, если оно возникает в контексте, где требуется его вычисление:

<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_fn.htm" class="symbol"><i><span class="symbol">function</span></i></a> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_lambda.htm" class="symbol"><i><span class="symbol">lambda</span></i></a> <span class="paren3">(<span class=""/>)</span> 42</span>)</span></span>)</span>   ; или #'<span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_lambda.htm" class="symbol"><i><span class="symbol">lambda</span></i></a> <span class="paren2">(<span class=""/>)</span> 42</span>)</span><br/></pre>

Это делает возможным использование <code>LAMBDA</code>-выражений как значений, таких, как аргумент
<code>FUNCALL</code>.  Другими словами, это просто синтаксическая обертка.  Большинство людей либо
всегда используют <code>#</code>' перед <code>LAMBDA</code>-выражениями, либо никогда не используют.  В этой
книге я всегда буду использовать <code>#</code>'.</div></div></div> <table width="100%"> <tbody> <tr> <td width="20%" align="left"> <a href="syntax-and-semantics">Предыдущая</a> </td> <td width="60%" align="center"> <a href="index.html">Оглавление</a> </td> <td width="20%" align="right"> <a href="variables">Следующая</a> </td> </tr> </tbody> </table> </div> <div class="bottom">@2009-2013 lisper.ru</div> 
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-7734690-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
 </body> </html>