<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ru" xml:lang="ru"> <head> <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> <meta name="keywords" content="Common Lisp,lisp,лисп" /> <title>Макросы: Создание собственных макросов</title> <link href="../css/style.css" rel="stylesheet" type="text/css" /><link href="../css/colorize.css" rel="stylesheet" type="text/css" />  </head> <body> <div class="top"> <div id="login"> <a href="http://lisper.ru/register">Регистрация</a> | <a href="http://lisper.ru/login?done=/pcl/macros-defining-your-own">Войти</a> </div> </div> <div id="caution"> <img alt="Lisp — программируемый язык программирования" src="../image/gecko.png" /> <a href="http://www.vkusnoserver.ru/" target="_blank" style="float: right;"> <img src="../vkusnoserver.png" /> </a> </div> <div id="mainmenu"> <ul> <li> <a href="http://lisper.ru/">Главная</a> </li><li> <a href="http://lisper.ru/articles/">Статьи</a> </li><li> <a href="http://lisper.ru/planet/">Планета</a> </li><li> <a href="http://lisper.ru/forum/">Форум</a> </li><li> <a href="http://lisper.ru/apps/">Сервисы</a> </li><li> <a href="index.html">Practical Common Lisp</a> </li><li> <a href="http://lisper.ru/wiki/">Wiki</a> </li><li> <a href="http://lisper.ru/files/">Файлы</a> </li><li> <a href="http://lisper.ru/search">Поиск</a> </li> </ul> </div> <div id="content"> <table width="100%"> <tbody> <tr> <td width="20%" align="left"> <a href="macros-standard-control-constructs">Предыдущая</a> </td> <td width="60%" align="center"> <a href="index.html">Оглавление</a> </td> <td width="20%" align="right"> <a href="practical-building-a-unit-test-framework">Следующая</a> </td> </tr> </tbody> </table> <div class="article"><div class="toc"><div class="toc-header">Содержание</div><div class="toc-body"><ul><li><div><a href="macros-defining-your-own#8. &#x41C;&#x430;&#x43A;&#x440;&#x43E;&#x441;&#x44B;: &#x421;&#x43E;&#x437;&#x434;&#x430;&#x43D;&#x438;&#x435; &#x441;&#x43E;&#x431;&#x441;&#x442;&#x432;&#x435;&#x43D;&#x43D;&#x44B;&#x445; &#x43C;&#x430;&#x43A;&#x440;&#x43E;&#x441;&#x43E;&#x432;">8. Макросы: Создание собственных макросов</a><ul><li><div><a href="macros-defining-your-own#&#x418;&#x441;&#x442;&#x43E;&#x440;&#x438;&#x44F; &#x41C;&#x430;&#x43A;&#x430;: &#x43E;&#x431;&#x44B;&#x447;&#x43D;&#x430;&#x44F; &#x442;&#x430;&#x43A;&#x430;&#x44F; &#x438;&#x441;&#x442;&#x43E;&#x440;&#x438;&#x44F;">История Мака: обычная такая история</a></div></li><li><div><a href="macros-defining-your-own#&#x412;&#x440;&#x435;&#x43C;&#x44F; &#x440;&#x430;&#x441;&#x43A;&#x440;&#x44B;&#x442;&#x438;&#x44F; &#x43C;&#x430;&#x43A;&#x440;&#x43E;&#x441;&#x43E;&#x432; &#x43F;&#x440;&#x43E;&#x442;&#x438;&#x432; &#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x438; &#x432;&#x44B;&#x43F;&#x43E;&#x43B;&#x43D;&#x435;&#x43D;&#x438;&#x44F;">Время раскрытия макросов против времени выполнения</a></div></li><li><div><a href="macros-defining-your-own#DEFMACRO">DEFMACRO</a></div></li><li><div><a href="macros-defining-your-own#&#x41F;&#x440;&#x438;&#x43C;&#x435;&#x440; &#x43C;&#x430;&#x43A;&#x440;&#x43E;&#x441;&#x430;: do-primes">Пример макроса: do-primes</a></div></li><li><div><a href="macros-defining-your-own#&#x41C;&#x430;&#x43A;&#x440;&#x43E;&#x43F;&#x430;&#x440;&#x430;&#x43C;&#x435;&#x442;&#x440;&#x44B;">Макропараметры</a></div></li><li><div><a href="macros-defining-your-own#&#x413;&#x435;&#x43D;&#x435;&#x440;&#x430;&#x446;&#x438;&#x44F; &#x440;&#x430;&#x441;&#x43A;&#x440;&#x44B;&#x442;&#x438;&#x44F;">Генерация раскрытия</a></div></li><li><div><a href="macros-defining-your-own#&#x423;&#x441;&#x442;&#x440;&#x430;&#x43D;&#x435;&#x43D;&#x438;&#x435; &#x43F;&#x440;&#x43E;&#x442;&#x435;&#x447;&#x435;&#x43A;">Устранение протечек</a></div></li><li><div><a href="macros-defining-your-own#&#x41C;&#x430;&#x43A;&#x440;&#x43E;&#x441;&#x44B;, &#x441;&#x43E;&#x437;&#x434;&#x430;&#x44E;&#x449;&#x438;&#x435; &#x43C;&#x430;&#x43A;&#x440;&#x43E;&#x441;&#x44B;">Макросы, создающие макросы</a><ul><li><div><a href="macros-defining-your-own#&#x414;&#x440;&#x443;&#x433;&#x43E;&#x439; &#x43A;&#x43B;&#x430;&#x441;&#x441;&#x438;&#x447;&#x435;&#x441;&#x43A;&#x438;&#x439; &#x43C;&#x430;&#x43A;&#x440;&#x43E;&#x441;, &#x441;&#x43E;&#x437;&#x434;&#x430;&#x44E;&#x449;&#x438;&#x439; &#x43C;&#x430;&#x43A;&#x440;&#x43E;&#x441;&#x44B;: ONCE-ONLY">Другой классический макрос, создающий макросы: ONCE-ONLY</a></div></li></ul></div></li><li><div><a href="macros-defining-your-own#&#x41D;&#x435; &#x442;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x43F;&#x440;&#x43E;&#x441;&#x442;&#x44B;&#x435; &#x43C;&#x430;&#x43A;&#x440;&#x43E;&#x441;&#x44B;">Не только простые макросы</a></div></li></ul></div></li></ul></div></div>
<div class="chapter" id="8. &#x41C;&#x430;&#x43A;&#x440;&#x43E;&#x441;&#x44B;: &#x421;&#x43E;&#x437;&#x434;&#x430;&#x43D;&#x438;&#x435; &#x441;&#x43E;&#x431;&#x441;&#x442;&#x432;&#x435;&#x43D;&#x43D;&#x44B;&#x445; &#x43C;&#x430;&#x43A;&#x440;&#x43E;&#x441;&#x43E;&#x432;"><h3>8. Макросы: Создание собственных макросов</h3>

<p>Теперь пора начать писать свои собственные макросы. Стандартные макросы, описанные мною в предыдущей главе, должны были дать вам некоторое представление о том, что вы можете сделать при помощи макросов, но это было только начало. Поддержка макросов в Common Lisp не является чем-то большим, чем поддержка функций в C, и поэтому каждый программист на Lisp может создать свои собственные варианты стандартных конструкций контроля точно так же, как каждый программист на C может написать простые варианты функций из стандартной библиотеки C. Макросы являются частью языка, которая позволяет вам создавать абстракции поверх основного языка и стандартной библиотеки, что приближает вас к возможности непосредственного выражения того, что вы хотите выразить.
</p>
<p>Возможно, самым большим препятствием для правильного понимания макросов является, как это ни парадоксально, то, что они так хорошо интегрированы в язык. Во многих отношениях они кажутся просто странной разновидностью функций — они написаны на Лисп, они принимают аргументы и возвращают результаты, и они позволяют вам абстрагироваться от отвлекающих деталей. Тем не менее, несмотря на эти многочисленные сходства, макросы работают на другом, по сравнению с функциями, уровне и создают совершенно иной вид абстракции.
</p>
<p>Как только вы поймете разницу между макросами и функциями, тесная интеграция макросов в язык станет огромным благом. И в то же время для новых лисперов это часто является источником путаницы. Следующая история, не являющаяся подлинной в историческом или техническом смысле, попытается уменьшить ваше замешательство, направляя ваши мысли касательно работы макросов в правильное русло.
</p><div class="chapter" id="&#x418;&#x441;&#x442;&#x43E;&#x440;&#x438;&#x44F; &#x41C;&#x430;&#x43A;&#x430;: &#x43E;&#x431;&#x44B;&#x447;&#x43D;&#x430;&#x44F; &#x442;&#x430;&#x43A;&#x430;&#x44F; &#x438;&#x441;&#x442;&#x43E;&#x440;&#x438;&#x44F;"><h3>История Мака: обычная такая история</h3>

<p>Когда-то, давным-давно, жила-была компания Lisp программистов. Это было так давно, что в Lisp даже не существовало макросов. Каждый раз все то, что не могло быть определено с помощью функций или сделано с помощью специализированных операторов, должно было быть написано в полном объеме, что было довольно трудоемким делом. К сожалению, программисты в этой компании были хоть и блестящи, но очень ленивы. Нередко в своих программах, когда процесс написания больших объемов кода становился слишком утомителен, они вместо кода писали комментарии, описывающие требуемый в этом месте программы код. К еще большему сожалению, из-за своей лени программисты также ненавидели возвращаться назад и действительно писать код, описанный в комментариях. Вскоре компания получила большую кучу кода, которую никто не мог запустить, потому что он был полон комментариев с описанием того, что еще предстоит написать.
</p>
<p>В отчаянии большой босс нанял младшего (junior) программиста, Мака, чьей работой стал поиск комментариев, написание требуемого кода и вставка его в программу на место комментариев. Мак никогда не запускал программы, ведь они не были завершены и поэтому он попросту не мог этого сделать. Но даже если бы они были завершены, Мак не знал, какие данные необходимо подать на их вход. Поэтому он просто писал свой код, основываясь на содержимом комментариев, и посылал его назад создавшему комментарий программисту.
</p>
<p>С помощью Мака все программы вскоре были доделаны, и компания заработала уйму денег продавая их: так много денег, что смогла удвоить количество программистов. Но по какой-то причине никто не думал нанимать кого-то в помощь Маку; вскоре он один помогал нескольким дюжинам программистов. Чтобы не тратить все свое время на поиск комментариев в исходном коде, Мак внес небольшие изменения в используемый программистами компилятор. Теперь, если компилятор встречал комментарий, то отсылал его электронной почтой Маку, а затем ждал ответа с замещающим комментарий кодом. К сожалению, даже с этими изменениями Маку было тяжело удовлетворять запросам программистов. Он работал так тщательно, как только мог, но иногда, особенно когда записи не были ясны, он допускал ошибки.
</p>
<p>Однако программисты обнаружили, что чем точнее они пишут свои комментарии, тем больше вероятность того, что Мак вернет правильный код. Как-то раз один из программистов, встретив затруднение с описанием в словах нужного кода, включил в один из комментариев программу на Lisp, которая генерировала нужный код. Такой комментарий был удобен Маку: он просто запустил программу и послал результат компилятору.
</p>
<p>Следующее новшество появилось, когда программист вставил в самый верх одной из своих программ комментарий, содержащий определение функции и пояснение, гласившее: "Мак, не пиши здесь никакого кода, но сохрани эту функцию на будущее; я собираюсь использовать ее в некоторых своих комментариях." Другие комментарии в этой программе гласили следующее: "Мак, замени этот комментарий на результат выполнения той функции с символами <code>x</code> и <code>y</code> как аргументами."
</p>
<p>Этот метод распространился так быстро, что в течение нескольких дней большинство программ стало содержать дюжины комментариев с описанием функций, которые использовались только кодом в других комментариях. Чтобы облегчить Маку различение комментариев, содержащих только определения и не требующих немедленного ответа, программисты отмечали их стандартным предисловием: "Definition for Mac, Read Only" (Определение для Мака, только для чтения). Это (как мы помним, программисты были очень ленивы) быстро сократилось до "DEF. MAC. R/O", а потом до "DEFMACRO".
</p>
<p>Очень скоро в комментариях для Мака вообще не осталось английского. Целыми днями он читал и отвечал на электронные письма от компилятора, содержащие DEFMACRO комментарии и вызывал функции, описанные в DEFMACRO. Так как Lisp программы в комментариях осуществляли всю реальную работу, то работа с электронными письмами перестала быть проблемой. У Мака внезапно стало много свободного времени, и он сидел в своем кабинете и грезил о белых песчаных пляжах, чистой голубой океанской воде и напитках с маленькими бумажными зонтиками.
</p>
<p>Несколько месяцев спустя программисты осознали что Мака уже довольно давно никто не видел. Придя в его кабинет, они обнаружили, что все покрыто тонким слоем пыли, стол усыпан брошюрами о различных тропических местах, а компьютер выключен. Но компилятор продолжал работать! Как ему это удавалось? Выяснилось, что Мак сделал заключительное изменение в компиляторе: вместо отправки электронного письма с комментарием Маку компилятор теперь сохранял функции, описанные с помощью DEFMACRO комментариев, и запускал при вызове их из других комментариев. Программисты решили, что нет оснований говорить большим боссам, что Мак больше не приходит на работу. Так происходит и по сей день: Мак получает зарплату и время от времени шлет программистам открытки то из одной тропической страны, то из другой.
</p>


</div><div class="chapter" id="&#x412;&#x440;&#x435;&#x43C;&#x44F; &#x440;&#x430;&#x441;&#x43A;&#x440;&#x44B;&#x442;&#x438;&#x44F; &#x43C;&#x430;&#x43A;&#x440;&#x43E;&#x441;&#x43E;&#x432; &#x43F;&#x440;&#x43E;&#x442;&#x438;&#x432; &#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x438; &#x432;&#x44B;&#x43F;&#x43E;&#x43B;&#x43D;&#x435;&#x43D;&#x438;&#x44F;"><h3>Время раскрытия макросов против времени выполнения</h3>

<p>Ключом к пониманию макросов является полное понимание разницы между кодом, генерирующим код (макросами), и кодом, который в конечном счете выполняет программу (все остальное). Когда вы пишете макросы, вы пишете программы, которые будут использоваться компилятором для генерации кода, который затем будет скомпилирован. Только после того, как все макросы будут полностью раскрыты, а полученный код скомпилирован, программа сможет быть запущена. Время, когда выполняются макросы, называется <em>временем раскрытия макросов</em>; оно отлично от <em>времени выполнения</em>, когда выполняется обычный код, включая код, сгенерированный макросами.
</p>
<p>Очень важно полностью понимать это различие, так как код, работающий во время раскрытия макросов, запускается в окружении, сильно отличающемся от окружения кода, работающего во время выполнения. А именно, во время раскрытия макросов не существует способа получить доступ к данным, которые будут существовать во время выполнения. Подобно Маку, который не мог запускать программы, над которыми он работал, так как не знал, что является корректным входом для них, код, работающий во время раскрытия макросов, может работать только с данными, являющимися неотъемлемой частью исходного кода. Для примера предположим, что следующий исходный код появляется где-то в программе:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> foo <span class="paren2">(<span class="">x</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren3">(<span class="">&gt; x 10</span>)</span> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_pr.htm" class="symbol">print</a> 'big</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Обычно вы бы думали о <code>x</code> как о переменной, которая будет содержать аргумент, переданный при вызове foo. Но во время раскрытия макросов (например когда компилятор выполняет макрос <strong>WHEN</strong>) единственными доступными данными является исходный код. Так как программа пока не выполняется, нет вызова <code>foo</code> и, следовательно, нет значения, ассоциированного с <code>x</code>. Вместо этого, значения, которые компилятор передает в <strong>WHEN</strong>, являются списками Lisp, представляющими исходный код, а именно <code>(&gt; x 10)</code> и <code>(print 'big)</code>. Предположим, что <strong>WHEN</strong> определен, как вы видели в предыдущей главе, подобным образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmac.htm" class="symbol"><i><span class="symbol">defmacro</span></i></a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/e_cnd.htm" class="symbol">condition</a> &amp;rest body</span>)</span><br/>  `<span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> ,<a href="http://www.lispworks.com/reference/HyperSpec/Body/e_cnd.htm" class="symbol">condition</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_progn.htm" class="symbol"><i><span class="symbol">progn</span></i></a> ,@body</span>)</span></span>)</span></span>)</span><br/></pre>

<p>При компиляции кода foo, макрос <strong>WHEN</strong> будет запущен с этими двумя формами в качестве аргументов. Параметр <code>condition</code> будет связан с формой <code>(&gt; x 10)</code>, а форма <code>(print 'big)</code> будет собрана (will be collected) в список (и будет его единственным элементом), который станет значением параметра <strong>&amp;rest</strong> <code>body</code>. Выражение квазицитирования затем сгенерирует следующий код:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren2">(<span class="">&gt; x 10</span>)</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_progn.htm" class="symbol"><i><span class="symbol">progn</span></i></a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_pr.htm" class="symbol">print</a> 'big</span>)</span></span>)</span></span>)</span><br/></pre>

<p>подставляя значение <code>condition</code>, а также вклеивая значение body в <strong>PROGN</strong>.
</p>
<p>Когда Lisp интерпретируется, а не компилируется, разница между временем раскрытия макросов и временем выполнения менее очевидна, так как они "переплетены" во времени (temporally intertwined). Также стандарт языка не специфицирует в точности того, как интерпретатор должен обрабатывать макросы: он может раскрывать все макросы в интерпретируемой форме, а затем интерпретировать полученный код, или же он может начать с непосредственно интерпретирования формы и раскрывать макросы при их встрече. В обоих случаях макросам всегда передаются невычисленные объекты Lisp, представляющие подформы формы макроса, и задачей макроса все также является генерирование кода, который затем осуществит какие-то действия, а не непосредственное осуществление этих действий.
</p>





</div><div class="chapter" id="DEFMACRO"><h3>DEFMACRO</h3>

<p>Как вы видели в главе 3, макросы на самом деле определяются с помощью форм <strong>DEFMACRO</strong>, что означает, разумеется, "DEFine MACRO", а не "Definition for Mac". Базовый шаблон <strong>DEFMACRO</strong> очень похож на шаблон <strong>DEFUN</strong>.
</p><pre>(defmacro name (parameter*)<br/>  "Optional documentation string."<br/>  body-form*)<br/></pre>
<p>Подобно функциям, макрос состоит из имени, списка параметров, необязательной строки документации и тела, состоящего из выражений Lisp <a class="fn_top" id="fnt__1" href="macros-defining-your-own#fn__1">1)</a>. Однако, как я только что говорил, работой макроса не является осуществление какого-то действия напрямую, — его работой является генерирование кода, который затем сделает то, что вам нужно.
</p>
<p>Макросы могут использовать всю мощь Lisp при генерировании своих раскрытий, поэтому в этой главе я смогу дать лишь обзор того, что вы можете делать с помощью макросов. Однако я могу описать общий процесс написания макросов, который подходит для всех типов макросов, от самых простых до наиболее сложных.
</p>
<p>Задачей макроса является преобразование формы макроса (другими словами, формы Lisp, первым элементом которой является имя макроса) в код, который осуществляет определенные действия. Иногда вы пишете макрос начиная с того кода, который вы бы хотели иметь возможность писать, то есть с примера формы макроса. В другой раз вы решаете написать макрос после того, как вы использовали какой-то образец кода несколько раз и понимаете, что можете сделать ваш код чище путем абстрагирования этого образца.
</p>
<p>Несмотря на то, с какого конца вы начинаете, вы должны представлять противоположный конец перед тем, как сможете начать создавать макрос: вы должны знать и то, откуда движетесь, и то, куда, до того как сможете рассчитывать написать код, осуществляющий это автоматически. Таким образом, первым шагом в написании макроса является написание по крайней мере одного примера вызова макроса, и кода, в который этот вызов должен раскрыться.
</p>
<p>После того, как у вас есть пример вызова и его желаемое раскрытие, вы готовы ко второму шагу: фактическому написанию кода макроса. Для простых макросов это будет тривиальным делом написания шаблона-квазицитирования с параметрами макроса, вставленными на нужные места. Сложные макросы сами будут значительными программами, использующими вспомогательные функции и структуры данных.
</p>
<p>После того, как вы написали код, преобразующий пример вызова в соответствующее раскрытие, вам нужно убедиться в том, что у абстракции, предоставляемой макросом, нет "протечек" деталей реализации. Предоставляемые макросами "дырявые" абстракции будут работать хорошо только для определенных аргументов или будут взаимодействовать с кодом вызывающего окружения нежелательными способами. Как оказывается, макросы могут "протекать" лишь небольшим количеством способов, все из которых легко избежать, если вы знаете, как выявлять их. Я обсужу как это делается в секции "Устранение протечек".
</p>
<p>Подводя итог можно сказать, что шаги по написанию макросов следующие:
</p>
<p>1. Написание примера вызова макроса, а затем кода, в который он должен быть раскрыт (или в обратном порядке).
</p>
<p>2. Написание кода, генерирующего написанный вручную код раскрытия по аргументам в примере вызова.
</p>
<p>3. Проверка того, что предоставляемая макросом абстракция не "протекает".
</p>





</div><div class="chapter" id="&#x41F;&#x440;&#x438;&#x43C;&#x435;&#x440; &#x43C;&#x430;&#x43A;&#x440;&#x43E;&#x441;&#x430;: do-primes"><h3>Пример макроса: do-primes</h3>

<p>Для того, чтобы увидеть, как этот трёхшаговый процесс осуществляется, вы напишете макрос <code>do-primes</code>, который предоставляет конструкцию итерирования, подобную <strong>DOTIMES</strong> и <strong>DOLIST</strong>, за исключением того, что вместо итерирования по целым числам или элементам списка итерирование будет производиться по последовательным простым числам. Этот пример не является примером чрезвычайно полезного макроса, он — всего лишь средство демонстрации вышеописанного процесса.
</p>
<p>Прежде всего вам нужны две вспомогательные функции: одна для проверки того, является ли данное число простым, и вторая, возвращающая следующее простое число, большее или равное ее аргументу. В обоих случаях вы можете использовать простой, но неэффективный метод "грубой силы".
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> primep <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/t_number.htm" class="symbol">number</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren3">(<span class="">&gt; <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_number.htm" class="symbol">number</a> 1</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for fac from 2 to <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_sqrt_.htm" class="symbol">isqrt</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_number.htm" class="symbol">number</a></span>)</span> never <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_zerop.htm" class="symbol">zerop</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_mod.htm" class="symbol">mod</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_number.htm" class="symbol">number</a> fac</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> next-prime <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/t_number.htm" class="symbol">number</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for n from <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_number.htm" class="symbol">number</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">when</a> <span class="paren3">(<span class="">primep n</span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_return.htm" class="symbol">return</a> n</span>)</span></span>)</span><br/></pre>

<p>Теперь вы можете написать макрос. Следуя процедуре, очерченной выше, вам нужен по крайней мере один пример вызова макроса и кода, в который он должен быть раскрыт. Предположим, что вы начали с мысли о том, что хотите иметь возможность написать следующее:
</p>
<pre class="code"><span class="paren1">(<span class="">do-primes <span class="paren2">(<span class="">p 0 19</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"~d "</span> p</span>)</span></span>)</span><br/></pre>

<p>для выражения цикла, который выполняет тело для каждого простого числа, большего либо равного 0 и меньшего либо равного 19, используя переменную <code>p</code> для хранения очередного простого числа. Имеет смысл смоделировать этот макрос с помощью стандартных макросов <strong>DOLIST</strong> и <strong>DOTIMES</strong>; макрос, следующий образцу существующих макросов, легче понять и использовать, нежели макросы, которые вводят неоправданно новый синтаксис.
</p>
<p>Без использования макроса <code>do-primes</code> вы можете написать такой цикл путем использования <strong>DO</strong> (и двух вспомогательных функций, определенных ранее) следующим образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren2">(<span class=""><span class="paren3">(<span class="">p <span class="paren4">(<span class="">next-prime 0</span>)</span> <span class="paren4">(<span class="">next-prime <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> p</span>)</span></span>)</span></span>)</span></span>)</span><br/>    <span class="paren2">(<span class=""><span class="paren3">(<span class="">&gt; p 19</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"~d "</span> p</span>)</span></span>)</span><br/></pre>

<p>Теперь вы готовы к написанию кода макроса, который будет выполнять необходимое преобразование.
</p>




</div><div class="chapter" id="&#x41C;&#x430;&#x43A;&#x440;&#x43E;&#x43F;&#x430;&#x440;&#x430;&#x43C;&#x435;&#x442;&#x440;&#x44B;"><h3>Макропараметры</h3>

<p>Так как аргументы, передаваемые в макрос, являются объектами Lisp, представляющими исходный код вызова макроса, первым шагом любого макроса является извлечение тех частей этих объектов, которые нужны для вычисления раскрытия. Для макросов, которые просто подставляют свои аргументы напрямую в шаблон, этот шаг тривиален: подходит простое определение правильных параметров для захвата нужных аргументов.
</p>
<p>Но, кажется, такого подхода недостаточно для <code>do-primes</code>. Первый аргумент вызова <code>do-primes</code> является списком, содержащим имя переменной цикла, <code>p</code>; нижнюю границу, 0; верхнюю границу, 19. Но, если вы посмотрите на раскрытие, список, как целое, не встречается в нем: эти три элемента разделены и вставлены в различные места.
</p>
<p>Вы можете определить <code>do-primes</code> с двумя параметрами, первый для захвата этого списка и параметр <strong>&amp;rest</strong> для захвата форм тела цикла, а затем разобрать первый список вручную подобным образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmac.htm" class="symbol"><i><span class="symbol">defmacro</span></i></a> do-primes <span class="paren2">(<span class="">var-and-range &amp;rest body</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">var <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_firstc.htm" class="symbol">first</a> var-and-range</span>)</span></span>)</span><br/>        <span class="paren4">(<span class="">start <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_firstc.htm" class="symbol">second</a> var-and-range</span>)</span></span>)</span><br/>        <span class="paren4">(<span class="">end <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_firstc.htm" class="symbol">third</a> var-and-range</span>)</span></span>)</span></span>)</span><br/>    `<span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">,var <span class="paren6">(<span class="">next-prime ,start</span>)</span> <span class="paren6">(<span class="">next-prime <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> ,var</span>)</span></span>)</span></span>)</span></span>)</span><br/>         <span class="paren4">(<span class=""><span class="paren5">(<span class="">&gt; ,var ,end</span>)</span></span>)</span><br/>       ,@body</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Очень скоро я объясню как тело макроса генерирует правильное раскрытие; сейчас же вам следует отметить, что переменные <code>var</code>, <code>start</code> и <code>end</code>, каждая содержит значение, извлеченное из <code>var-and-range</code>, и эти значения затем подставляются в выражение квазицитирования, генерирующее раскрытие <code>do-primes</code>.
</p>
<p>Однако, вам не нужно разбирать <code>var-and-range</code> вручную, так как список параметров макроса является так называемым списком <em>деструктурируемых</em> параметров. Деструктурирование, как и говорит название, осуществляет разбор некоторой структуры, в нашем случае списочной структуры форм, переданных макросу.
</p>
<p>Внутри списка деструктурируемых параметров простое имя параметра может быть заменено вложенным списком параметров. Параметры в таком списке будут получать свои значения из элементов выражения, которое было бы связано с параметром, замененным этим списком. Например, вы можете заменить <code>var-and-range</code> списком <code>(var start end)</code> и три элемента списка будут автоматически деструктурированы в эти три параметра.
</p>
<p>Другой особенностью списка параметров макросов является то, что вы можете использовать <strong>&amp;body</strong> как синоним <strong>&amp;rest</strong>. Семантически <strong>&amp;body</strong> и <strong>&amp;rest</strong> эквиваленты, но множество сред разработки будут использовать факт наличия параметра <strong>&amp;body</strong> для изменения того, как они будут выравнивать код использования макроса, поэтому обычно параметры <strong>&amp;body</strong> используются для захвата списка форм, которые составляют тело макроса.
</p>
<p>Таким образом, вы можете улучшить определение макроса <code>do-primes</code> и дать подсказку (как людям, читающим ваш код, так и вашим инструментам разработки) об его предназначении:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmac.htm" class="symbol"><i><span class="symbol">defmacro</span></i></a> do-primes <span class="paren2">(<span class=""><span class="paren3">(<span class="">var start end</span>)</span> &amp;body body</span>)</span><br/>  `<span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">,var <span class="paren5">(<span class="">next-prime ,start</span>)</span> <span class="paren5">(<span class="">next-prime <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> ,var</span>)</span></span>)</span></span>)</span></span>)</span><br/>       <span class="paren3">(<span class=""><span class="paren4">(<span class="">&gt; ,var ,end</span>)</span></span>)</span><br/>     ,@body</span>)</span></span>)</span><br/></pre>

<p>В стремлении к краткости список деструктурируемых параметров также предоставляет вам автоматическую проверку ошибок: при определении таким образом <code>do-primes</code>, Lisp будет способен определять вызовы, в которых первый аргумент не является трехэлементным списком, и выдавать вам разумные сообщения об ошибках (как когда вы вызываете функцию со слишком малым или, наоборот, слишком большим числом аргументов). Также, среды разработки, такие как SLIME, указывающие вам какие аргументы ожидаются, как только вы напечатаете имя функции или макроса, при использовании вами списка деструктурируемых параметров будут способны более конкретно указать синтаксис вызова макроса. С исходным определением SLIME будет подсказывать вам, что <code>do-primes</code> вызывается подобным образом:
</p>
<pre class="code"><span class="paren1">(<span class="">do-primes var-and-range &amp;rest body</span>)</span><br/></pre>

<p>С новым же описанием она сможет указать вам, что вызов должен выглядеть следующим образом:
</p>
<pre class="code"><span class="paren1">(<span class="">do-primes <span class="paren2">(<span class="">var start end</span>)</span> &amp;body body</span>)</span><br/></pre>

<p>Списки деструктурируемых параметров могут содержать параметры <strong>&amp;optional</strong>, <strong>&amp;key</strong> и <strong>&amp;rest</strong>, а также вложенные деструктурируемые списки. Однако все эти возможности не нужны вам для написания <code>do-primes</code>.
</p>


</div><div class="chapter" id="&#x413;&#x435;&#x43D;&#x435;&#x440;&#x430;&#x446;&#x438;&#x44F; &#x440;&#x430;&#x441;&#x43A;&#x440;&#x44B;&#x442;&#x438;&#x44F;"><h3>Генерация раскрытия</h3>

<p>Так как <code>do-primes</code> является довольно простым макросом, после деструктурирования аргументов, всё что вам остаётся сделать — это подставить их в шаблон для получения раскрытия.
</p>
<p>Для простых макросов, наподобие <code>do-primes</code>, лучшим вариантом является использование специального синтаксиса квазицитирования. Коротко говоря, выражения квазицитирования подобны выражениям цитирования, за исключением того, что вы можете "раскавычить" определенные подвыражения, предваряя их запятой, за которой возможно следует знак "at" (@). Без этого знака "at" запятая вызывает включение как есть значения следующего за ней подвыражения. Со знаком "at" значение, которое должно быть списком, "вклеивается" в окружающий список.
</p>
<p>Другой пригодный способ думать о синтаксисе квазицитирования как об очень кратком способе написания кода, генерирующего списки. Такое представление о нем имеет преимущество, так как является очень близким к тому, что на самом деле происходит "под капотом": когда процедура чтения считывает выражение квазицитирования, она преобразует его в код, который генерирует соответствующую списковую структуру. Например, `(,a b) вероятно будет прочитано как (list a 'b). Стандарт языка не указывает, какой в точности код процедура чтения должна выдавать, пока она генерирует правильные списковые структуры.
</p>
<p>Таблица 8-1 показывает некоторые примеры выражений квазицитирования вместе с эквивалентным создающим списки кодом, а также результаты, которые вы получите при вычислении как выражений квазицитирования, так и эквивалентного кода<a class="fn_top" id="fnt__2" href="macros-defining-your-own#fn__2">2)</a>:
</p><table><tbody><tr><th colspan="3"> Таблица 8-1. Примеры квазицитирования </th></tr><tr><td> Синтаксис квазицитирования </td><td class="leftalign"> Эквивалентный создающий списки код       </td><td> Результат </td></tr><tr><td class="leftalign"> `(a (+ 1 2) c)             </td><td class="leftalign"> (list 'a '(+ 1 2) 'c)                   </td><td> (a (+ 1 2) c) </td></tr><tr><td class="leftalign"> `(a ,(+ 1 2) c)            </td><td class="leftalign"> (list 'a (+ 1 2) 'c)                    </td><td> (a 3 c) </td></tr><tr><td class="leftalign"> `(a (list 1 2) c)          </td><td class="leftalign"> (list 'a '(list 1 2) 'c)                </td><td> (a (list 1 2) c) </td></tr><tr><td class="leftalign"> `(a ,(list 1 2) c)         </td><td class="leftalign"> (list 'a (list 1 2) 'c)                 </td><td> (a (1 2) c) </td></tr><tr><td class="leftalign"> `(a ,@(list 1 2) c)        </td><td> (append (list 'a) (list 1 2) (list 'c)) </td><td> (a 1 2 c) </td></tr></tbody></table>

<p>Важно заметить, что нотация квазицитирования является просто удобством. Но это большое удобство. Для оценки того, насколько оно велико, сравните версию <code>do-primes</code> с квазицитированием со следующей версией, которая явно использует создающий списки код:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmac.htm" class="symbol"><i><span class="symbol">defmacro</span></i></a> do-primes-a <span class="paren2">(<span class=""><span class="paren3">(<span class="">var start end</span>)</span> &amp;body body</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_append.htm" class="symbol">append</a> '<span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a></span>)</span><br/>          <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> var<br/>                            <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> 'next-prime start</span>)</span><br/>                            <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> 'next-prime <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> '<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> var</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/>          <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> '&gt; var end</span>)</span></span>)</span></span>)</span><br/>          body</span>)</span></span>)</span><br/></pre>

<p>Как вы очень скоро увидите, текущая реализация <code>do-primes</code> не обрабатывает корректно некоторые граничные случаи. Но первое, что вы должны проверить, — это то, что она по крайней мере работает для исходного примера. Вы можете сделать это двумя способами. Во-первых, вы можете косвенно протестировать свою реализацию просто воспользовавшись ею (подразумевая, что если итоговое поведение корректно, то и раскрытие также корректно). Например, вы можете напечатать исходный пример использования <code>do-primes</code> в REPL и увидеть, что он и в самом деле напечатает правильную последовательность простых чисел.
</p><pre>CL-USER&gt; (do-primes (p 0 19) (format t "~d " p))<br/>2 3 5 7 11 13 17 19<br/>NIL<br/></pre>
<p>Или же вы можете проверить макрос напрямую, посмотрев на раскрытие определенного вызова. Функция <strong>MACROEXPAND-1</strong> получает любое выражение Lisp в качестве аргумента и возвращает результат осуществления одного шага раскрытия          макроса<a class="fn_top" id="fnt__3" href="macros-defining-your-own#fn__3">3)</a>. Так как <strong>MACROEXPAND-1</strong> является функцией, для дословной передачи ей формы макроса вы должны зацитировать эту форму. Теперь вы можете воспользоваться <strong>MACROEXPAND-1</strong> для просмотра раскрытия предыдущего вызова<a class="fn_top" id="fnt__4" href="macros-defining-your-own#fn__4">4)</a>.
</p><pre>CL-USER&gt; (macroexpand-1 '(do-primes (p 0 19) (format t "~d " p)))<br/>(DO ((P (NEXT-PRIME 0) (NEXT-PRIME (1+ P))))<br/>    ((&gt; P 19))<br/>  (FORMAT T "~d " P))<br/>T<br/></pre>
<p>Также, для большего удобства, в SLIME вы можете проверить раскрытие макроса поместив курсор на открывающую скобку формы макроса в вашем исходном коде и набрав C-c RET для вызова функции Emacs <code>slime-macroexpand-1</code>, которая передаст форму макроса в <strong>MACROEXPAND-1</strong> и напечатает результат во временном буфере.
</p>
<p>Теперь вы можете видеть, что результат раскрытия макроса совпадает с исходным (написанным вручную) раскрытием, и поэтому кажется, что <code>do-primes</code> работает.
</p>






</div><div class="chapter" id="&#x423;&#x441;&#x442;&#x440;&#x430;&#x43D;&#x435;&#x43D;&#x438;&#x435; &#x43F;&#x440;&#x43E;&#x442;&#x435;&#x447;&#x435;&#x43A;"><h3>Устранение протечек</h3>

<p>В своем эссе "Закон дырявых абстракций" Джоэл Спольски придумал термин "дырявой абстракции" для описания такой абстракции, через которую "протекают" детали, абстрагирование от которых предполагается. Так как написание макроса — это способ создания абстракции, вам следует убедиться, что ваш макрос излишне не "протекает"<a class="fn_top" id="fnt__5" href="macros-defining-your-own#fn__5">5)</a>
</p>
<p>Как оказывается, внутренние детали реализации могут "протекать" через макросы тремя способами. К счастью, довольно легко сказать, имеет ли место одна из трех этих возможностей, и устранить их.
</p>
<p>Текущее определение страдает от одной из трех возможных "протечек" макросов, а именно, оно вычисляет подформу <code>end</code> слишком много раз. Предположим, что вы вызвали <code>do-primes</code> с таким выражением, как <code>(random 100)</code>, на месте параметра <code>end</code> вместо использования числового литерала, такого, как 19.
</p>
<pre class="code"><span class="paren1">(<span class="">do-primes <span class="paren2">(<span class="">p 0 <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_random.htm" class="symbol">random</a> 100</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"~d "</span> p</span>)</span></span>)</span><br/></pre>

<p>Предполагаемым поведением здесь является итерирование по простым числам от нуля до какого-то случайного простого числа, возвращенного <code>(random 100)</code>. Однако, это не то, что делает текущая реализация, как это показывает <strong>MACROEXPAND-1</strong>.
</p>
<pre class="code"><p>CL-USER&gt; <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mexp_.htm" class="symbol">macroexpand-1</a> '<span class="paren2">(<span class="">do-primes <span class="paren3">(<span class="">p 0 <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_random.htm" class="symbol">random</a> 100</span>)</span></span>)</span> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"~d "</span> p</span>)</span></span>)</span></span>)</span><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">DO</a> <span class="paren2">(<span class=""><span class="paren3">(<span class="">P <span class="paren4">(<span class="">NEXT-PRIME 0</span>)</span> <span class="paren4">(<span class="">NEXT-PRIME <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> P</span>)</span></span>)</span></span>)</span></span>)</span><br/>    <span class="paren2">(<span class=""><span class="paren3">(<span class="">&gt; P <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_random.htm" class="symbol">RANDOM</a> 100</span>)</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">FORMAT</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">T</a> <span class="string">"~d "</span> P</span>)</span></span>)</span><br/>T<br/></p></pre>

<p>При запуске кода раскрытия <strong>RANDOM</strong> будет вызываться при каждой проверке условия окончания цикла. Таким образом, вместо итерирования, пока <code>p</code> не станет больше, чем изначально выбранное случайное число, этот цикл будет осуществляться пока не случится, что выбранное в очередной раз случайное число окажется меньше текущего значения <code>p</code>. Хотя общее число итераций по прежнему случайно, оно будет подчиняться вероятностному распределению, отличному от равномерного распределения результатов <strong>RANDOM</strong>.
</p>
<p>Это является "протечкой" абстракции, так как для корректного использования макроса, его пользователь должен быть осведомлен о том, что форма <code>end</code> будет вычислять более одного раза. Одним из способов устранения этой "протечки" является простое специфицирование ее как поведения <code>do-primes</code>. Но это не достаточно удовлетворительно: при реализации макросов вам следует пытаться соблюдать Правило Наименьшего Удивления. К тому же программисты обычно ожидают, что формы, которые они передают макросам, будут вычисляться не большее число раз, чем это действительно необходимо<a class="fn_top" id="fnt__6" href="macros-defining-your-own#fn__6">6)</a>. Более того, так как <code>do-primes</code> построена на основе модели стандартных макросов <strong>DOTIMES</strong> и <strong>DOLIST</strong>, которые вычисляют однократно все свои формы, кроме форм тела, то большинство программистов будут ожидать от <code>do-primes</code> подобного поведения.
</p>
<p>Вы можете исправить множественное вычисление достаточно легко: вам просто следует сгенерировать код, который вычисляет <code>end</code> однократно и сохраняет результат в переменную для дальнейшего использования. Вспомним, что в цикле <strong>DO</strong> переменные с формой инициализации и без формы вычисления последующих значений не изменяются от итерации к итерации. Поэтому вы можете исправить проблему множественных вычислений следующим определением:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmac.htm" class="symbol"><i><span class="symbol">defmacro</span></i></a> do-primes <span class="paren2">(<span class=""><span class="paren3">(<span class="">var start end</span>)</span> &amp;body body</span>)</span><br/>  `<span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">ending-value ,end</span>)</span><br/>        <span class="paren4">(<span class="">,var <span class="paren5">(<span class="">next-prime ,start</span>)</span> <span class="paren5">(<span class="">next-prime <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> ,var</span>)</span></span>)</span></span>)</span></span>)</span><br/>       <span class="paren3">(<span class=""><span class="paren4">(<span class="">&gt; ,var ending-value</span>)</span></span>)</span><br/>     ,@body</span>)</span></span>)</span><br/></pre>

<p>К сожалению данное исправление вводит две новые "протечки" в предоставляемую нашим макросом абстракцию.
</p>
<p>Одна из этих "протечек" подобна проблеме множественных вычислений, которую мы только что исправили. Так как формы инициализации переменных цикла <strong>DO</strong> вычисляются в том порядке, в каком переменные определены, то когда раскрытие макроса вычисляется, выражение, переданное как <code>end</code>, будет вычислено перед выражением, переданным как <code>start</code>, то есть в обратном порядке от того, как они идут в вызове макроса. Эта "протечка" не вызывает никаких проблем пока <code>start</code> и <code>end</code> являются литералами вроде 0 и 19. Но, если они являются формами, которые могут иметь побочные эффекты, вычисление их в неправильном порядке снова нарушает Правило Наименьшего Удивления.
</p>
<p>Эта "протечка" устраняется тривиально путем изменения порядка определения двух переменных.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmac.htm" class="symbol"><i><span class="symbol">defmacro</span></i></a> do-primes <span class="paren2">(<span class=""><span class="paren3">(<span class="">var start end</span>)</span> &amp;body body</span>)</span><br/>  `<span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">,var <span class="paren5">(<span class="">next-prime ,start</span>)</span> <span class="paren5">(<span class="">next-prime <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> ,var</span>)</span></span>)</span></span>)</span><br/>        <span class="paren4">(<span class="">ending-value ,end</span>)</span></span>)</span><br/>       <span class="paren3">(<span class=""><span class="paren4">(<span class="">&gt; ,var ending-value</span>)</span></span>)</span><br/>     ,@body</span>)</span></span>)</span><br/></pre>

<p>Последняя "протечка", которую нам нужно устранить, была создана использованием имени переменной <code>ending-value</code>. Проблема заключается в том, что имя, которое должно быть полностью внутренней деталью реализации макроса, может вступить во взаимодействие с кодом, переданным макросу, или с контекстом, в котором макрос вызывается. Следующий, кажущийся вполне допустимым, вызов <code>do-primes</code> не работает корректно из-за данной "протечки":
</p>
<pre class="code"><span class="paren1">(<span class="">do-primes <span class="paren2">(<span class="">ending-value 0 10</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_pr.htm" class="symbol">print</a> ending-value</span>)</span></span>)</span><br/></pre>

<p>То же касается и следующего вызова:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren2">(<span class=""><span class="paren3">(<span class="">ending-value 0</span>)</span></span>)</span><br/>  <span class="paren2">(<span class="">do-primes <span class="paren3">(<span class="">p 0 10</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> ending-value p</span>)</span></span>)</span><br/>  ending-value</span>)</span><br/></pre>

<p>И снова <strong>MACROEXPAND-1</strong> может вам показать, в чем проблема. Первый вызов расширяется в следующее:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren2">(<span class=""><span class="paren3">(<span class="">ending-value <span class="paren4">(<span class="">next-prime 0</span>)</span> <span class="paren4">(<span class="">next-prime <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> ending-value</span>)</span></span>)</span></span>)</span><br/>     <span class="paren3">(<span class="">ending-value 10</span>)</span></span>)</span><br/>    <span class="paren2">(<span class=""><span class="paren3">(<span class="">&gt; ending-value ending-value</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_pr.htm" class="symbol">print</a> ending-value</span>)</span></span>)</span><br/></pre>

<p>Некоторые реализации Lisp могут отвергуть такой код из-за того, что <code>ending-value</code> используется дважды в качестве имен переменных одного и того-же цикла <strong>DO</strong>. Если же этого не произойдет, то код зациклится, так как <code>ending-value</code> никогда не станет больше себя самого.
</p>
<p>Второй проблемный вызов расширяется следующим образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren2">(<span class=""><span class="paren3">(<span class="">ending-value 0</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">p <span class="paren5">(<span class="">next-prime 0</span>)</span> <span class="paren5">(<span class="">next-prime <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> p</span>)</span></span>)</span></span>)</span><br/>       <span class="paren4">(<span class="">ending-value 10</span>)</span></span>)</span><br/>      <span class="paren3">(<span class=""><span class="paren4">(<span class="">&gt; p ending-value</span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> ending-value p</span>)</span></span>)</span><br/>  ending-value</span>)</span><br/></pre>

<p>В этом случае сгенерированный код полностью допустим, но его поведение совсем не то, что нужно вам. Так как привязка ending-value, установленная с помощью <strong>LET</strong> снаружи цикла перекрывается переменной с таким же именем внутри <strong>DO</strong>,
то форма <code>(incf ending-value p)</code> увеличивает переменную цикла <code>ending-value</code> вместо внешней переменной с таким же именем, создавая другой вечный цикл<a class="fn_top" id="fnt__7" href="macros-defining-your-own#fn__7">7)</a>.
</p>
<p>Очевидно, что то, что нам нужно для устранения этой "протечки" — это символ, который никогда не будет использоваться снаружи кода, сгенерированного макросом. Вы можете попытаться использовать действительно маловероятный символ, но это все равно не даст вам никаких гарантий. Вы можете также защитить себя в некоторой степени путем использования пакетов, описанных в главе 21. Но существует лучшее решение.
</p>
<p>Функция <strong>GENSYM</strong> возвращает уникальный символ при каждом своем вызове. Такой символ никогда до этого не был прочитан процедурой чтения Lisp и, так как он не интернирован (isn't interned) ни в один пакет, никогда не будет прочитан ею. Поэтому, вместо использования литеральных имен наподобие <code>ending-value</code>, вы можете генерировать новый символ при каждом раскрытии <code>do-primes</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmac.htm" class="symbol"><i><span class="symbol">defmacro</span></i></a> do-primes <span class="paren2">(<span class=""><span class="paren3">(<span class="">var start end</span>)</span> &amp;body body</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">ending-value-name <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_gensym.htm" class="symbol">gensym</a></span>)</span></span>)</span></span>)</span><br/>    `<span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">,var <span class="paren6">(<span class="">next-prime ,start</span>)</span> <span class="paren6">(<span class="">next-prime <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> ,var</span>)</span></span>)</span></span>)</span><br/>          <span class="paren5">(<span class="">,ending-value-name ,end</span>)</span></span>)</span><br/>         <span class="paren4">(<span class=""><span class="paren5">(<span class="">&gt; ,var ,ending-value-name</span>)</span></span>)</span><br/>       ,@body</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Обратите внимание, что код, вызывающий <strong>GENSYM</strong> не является частью раскрытия; он запускается как часть процедуры раскрытия макроса и поэтому создает новый символ при каждом раскрытии макроса. Это может казаться несколько странным сначала: <code>ending-value-name</code> является переменной, чье значение является именем другой переменной. Но на самом деле тут нет никаких отличий от параметра <code>var</code>, чье значение также является именем переменной. Единственная разница состоит в том, что значение <code>var</code> было создано процедурой чтения, когда форма макроса была прочитана, а значение <code>ending-value-name</code> было сгенерированно программно при запуске кода макроса.
</p>
<p>С таким определением две ранее проблемные формы расширяются в код, который работает так, как вам нужно. Первая форма:
</p>
<pre class="code"><span class="paren1">(<span class="">do-primes <span class="paren2">(<span class="">ending-value 0 10</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_pr.htm" class="symbol">print</a> ending-value</span>)</span></span>)</span><br/></pre>

<p>расширяется в следующее:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren2">(<span class=""><span class="paren3">(<span class="">ending-value <span class="paren4">(<span class="">next-prime 0</span>)</span> <span class="paren4">(<span class="">next-prime <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> ending-value</span>)</span></span>)</span></span>)</span><br/>     <span class="paren3">(<span class=""><span class="keyword">#:g2141</span> 10</span>)</span></span>)</span><br/>    <span class="paren2">(<span class=""><span class="paren3">(<span class="">&gt; ending-value <span class="keyword">#:g2141</span></span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_wr_pr.htm" class="symbol">print</a> ending-value</span>)</span></span>)</span><br/></pre>

<p>Теперь переменная, используемая для хранения конечного значения является сгенерированным функцией <code>gensym</code> символом, #:g2141. Имя идентификатора, <em>G2141</em>, было сгенерировано с помощью  <strong>GENSYM</strong>, но важно не это; важно то, что идентификатор хранит значение объекта. Сгенерированные таким образом символы печатаются в обычном синтаксисе для неинтернированных символов: с начальным <code>#:</code>.
</p>
<p>Вторая ранее проблемная форма:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren2">(<span class=""><span class="paren3">(<span class="">ending-value 0</span>)</span></span>)</span><br/>  <span class="paren2">(<span class="">do-primes <span class="paren3">(<span class="">p 0 10</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> ending-value p</span>)</span></span>)</span><br/>  ending-value</span>)</span><br/></pre>

<p>после замены <code>do-primes</code> его раскрытием будет выглядеть подобным образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren2">(<span class=""><span class="paren3">(<span class="">ending-value 0</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">p <span class="paren5">(<span class="">next-prime 0</span>)</span> <span class="paren5">(<span class="">next-prime <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> p</span>)</span></span>)</span></span>)</span><br/>       <span class="paren4">(<span class=""><span class="keyword">#:g2140</span> 10</span>)</span></span>)</span><br/>      <span class="paren3">(<span class=""><span class="paren4">(<span class="">&gt; p <span class="keyword">#:g2140</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> ending-value p</span>)</span></span>)</span><br/>  ending-value</span>)</span><br/></pre>

<p>И снова, тут нет никакой "протечки", так как переменная <code>ending-value</code>, связанная окружающей цикл <code>do-primes</code> формой <strong>LET</strong>, больше не перекрывается никакими переменными, вводимыми в коде раскрытия.
</p>
<p>Не все литеральные имена, используемые в раскрытии макросов, обязательно вызовут проблему; когда вы приобретете больше опыта работы с различными связывающими формами, вы сможете определять, приведет ли использование данного имени в определенном месте к "протечке" в предоставляемой макросом абстракции. Но нет никаких реальных проблем в использовании сгенерированных имен везде для уверенности.
</p>
<p>Этим исправлением мы устранили все "протечки" в реализации <code>do-primes</code>. После получения некоторого опыта в написании макросов, вы научитесь писать макросы с заранее устраненными "протечками" такого рода. На самом деле это довольно просто, если вы будете следовать следующим правилам:
</p><ul><li> Если только нет определенной причины сделать иначе, включайте все подформы в раскрытие на такие позиции, чтобы они выполнялись в том же порядке, в каком они идут в вызове макроса.</li><li> Если только нет определенной причины сделать иначе, убедитесь, что все подформы вычисляются лишь единожды, путём создания переменных в раскрытии, для хранения значений вычисления форм аргументов, и последующего использования этих переменных везде в раскрытии, где нужны значения этих форм.</li><li> Используйте <strong>GENSYM</strong> во время раскрытия макросов для создания имен переменных, используемых в раскрытии.</li></ul>


</div><div class="chapter" id="&#x41C;&#x430;&#x43A;&#x440;&#x43E;&#x441;&#x44B;, &#x441;&#x43E;&#x437;&#x434;&#x430;&#x44E;&#x449;&#x438;&#x435; &#x43C;&#x430;&#x43A;&#x440;&#x43E;&#x441;&#x44B;"><h3>Макросы, создающие макросы</h3>

<p>Конечно же, нет никаких причин, по которым вы должны получать преимущества от использования макросов только при написании функций. Задачей макросов является абстрагирование общих синтаксических образцов, а некоторые образцы появляются снова и снова и при написании макросов, поэтому и тут можно получить преимущества от абстрагирования.
</p>
<p>На самом деле, вы уже видели один такой образец: многие макросы, как и последняя версия <code>do-primes</code>, начинаются с <strong>LET</strong>, который вводит несколько переменных, содержащих сгенерированные символы для использовании в раскрытии макроса. Так как это общий образец, почему бы нам не абстрагировать его с помощью его собственного макроса?
</p>
<p>В этой секции вы напишете макрос <code>with-gensyms</code>, который делает именно это. Другими словами, вы напишете макрос, создающий макрос: макрос, который генерирует код, который генерирует код. В то время как сложные макросы, создающие макросы, могут слегка сбивать с толку, пока вы не привыкнете к легкому умозрительному обращению с различными уровнями кода, <code>with-gensyms</code> довольно прямолинеен и послужит полезным и, в то же время, не требующим непомерных умственных усилий упражнением.
</p>
<p>Предположим, вы хотите иметь возможность написать подобное:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmac.htm" class="symbol"><i><span class="symbol">defmacro</span></i></a> do-primes <span class="paren2">(<span class=""><span class="paren3">(<span class="">var start end</span>)</span> &amp;body body</span>)</span><br/>  <span class="paren2">(<span class=""><i><span class="symbol">with-gensyms</span></i> <span class="paren3">(<span class="">ending-value-name</span>)</span><br/>    `<span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">,var <span class="paren6">(<span class="">next-prime ,start</span>)</span> <span class="paren6">(<span class="">next-prime <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> ,var</span>)</span></span>)</span></span>)</span><br/>          <span class="paren5">(<span class="">,ending-value-name ,end</span>)</span></span>)</span><br/>         <span class="paren4">(<span class=""><span class="paren5">(<span class="">&gt; ,var ,ending-value-name</span>)</span></span>)</span><br/>       ,@body</span>)</span></span>)</span></span>)</span><br/></pre>

<p>и получить <code>do-primes</code>, эквивалентный его предыдущей версии. Другими словами, <code>with-gensyms</code> должен раскрываться в <strong>LET</strong>, которая связывает каждую перечисленную переменную, <code>ending-value-name</code> в данном случае, со сгенерированным символом. Достаточно просто написать это с помощью простого шаблона-квазитирования.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmac.htm" class="symbol"><i><span class="symbol">defmacro</span></i></a> <i><span class="symbol">with-gensyms</span></i> <span class="paren2">(<span class=""><span class="paren3">(<span class="">&amp;rest names</span>)</span> &amp;body body</span>)</span><br/>  `<span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> ,<span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for n in names collect `<span class="paren4">(<span class="">,n <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_gensym.htm" class="symbol">gensym</a></span>)</span></span>)</span></span>)</span><br/>     ,@body</span>)</span></span>)</span><br/></pre>

<p>Обратите внимание, как мы можем использовать запятую для подстановки значения выражения <strong>LOOP</strong>. Этот цикл генерирует список связывающих форм, каждая из которых состоит из списка, содержащего одно из переданных <code>with-gensyms</code> имен, а также литеральный код <code>(gensym)</code>. Вы можете проверить, какой код сгенерирует выражение <strong>LOOP</strong> в REPL, заменив <code>names</code> списком символов.
</p>
<pre class="code"><p>CL-USER&gt; <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for n in '<span class="paren2">(<span class="">a b c</span>)</span> collect `<span class="paren2">(<span class="">,n <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_gensym.htm" class="symbol">gensym</a></span>)</span></span>)</span></span>)</span><br/><span class="paren1">(<span class=""><span class="paren2">(<span class="">A <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_gensym.htm" class="symbol">GENSYM</a></span>)</span></span>)</span> <span class="paren2">(<span class="">B <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_gensym.htm" class="symbol">GENSYM</a></span>)</span></span>)</span> <span class="paren2">(<span class="">C <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_gensym.htm" class="symbol">GENSYM</a></span>)</span></span>)</span></span>)</span><br/></p></pre>

<p>После списка связывающих форм в качестве тела <strong>LET</strong> вклеивается аргумент <code>body</code> <code>with-gensyms</code>. Таким образом, из кода, который вы оборачиваете в <code>with-gensyms</code>, вы можете ссылаться на любое из имен переменных из списка переменных, переданного <code>with-gensyms</code>.
</p>
<p>Если вы воспользуетесь macro-expand для формы <code>with-gensyms</code> в новом определении <code>do-primes</code>, то вы получите подобное:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren2">(<span class=""><span class="paren3">(<span class="">ending-value-name <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_gensym.htm" class="symbol">gensym</a></span>)</span></span>)</span></span>)</span><br/>  `<span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">,var <span class="paren5">(<span class="">next-prime ,start</span>)</span> <span class="paren5">(<span class="">next-prime <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> ,var</span>)</span></span>)</span></span>)</span><br/>        <span class="paren4">(<span class="">,ending-value-name ,end</span>)</span></span>)</span><br/>       <span class="paren3">(<span class=""><span class="paren4">(<span class="">&gt; ,var ,ending-value-name</span>)</span></span>)</span><br/>     ,@body</span>)</span></span>)</span><br/></pre>

<p>Выглядит неплохо. Хотя этот макрос довольно прост, очень важно ясно понимать то, когда различные макросы раскрываются: когда вы компилируете <strong>DEFMACRO</strong> <code>do-primes</code>, форма <code>with-gensyms</code> раскрывается в код, который вы только что видели. Таким образом, скомпилированная версия <code>do-primes</code> в точности такая же, как если бы вы написали внешний <strong>LET</strong> вручную. Когда вы компилируете функцию, которая использует <code>do-primes</code>, то для генерации расширения <code>do-primes</code> запускается код, сгенерированный <code>with-gensyms</code>, но сам <code>with-gensyms</code> при компиляции формы <code>do-primes</code> не нужен, так как он уже был раскрыт при компиляции <code>do-primes</code>.
</p>

<div class="chapter" id="&#x414;&#x440;&#x443;&#x433;&#x43E;&#x439; &#x43A;&#x43B;&#x430;&#x441;&#x441;&#x438;&#x447;&#x435;&#x441;&#x43A;&#x438;&#x439; &#x43C;&#x430;&#x43A;&#x440;&#x43E;&#x441;, &#x441;&#x43E;&#x437;&#x434;&#x430;&#x44E;&#x449;&#x438;&#x439; &#x43C;&#x430;&#x43A;&#x440;&#x43E;&#x441;&#x44B;: ONCE-ONLY"><h3>Другой классический макрос, создающий макросы: ONCE-ONLY</h3>

<p>Другим классическим макросом, создающим макросы, является <code>once-only</code>, который используется для генерации кода, вычисляющего определенные аргументы макроса только единожды и в определенном порядке. Используя <code>once-only</code> вы можете написать <code>do-primes</code> почти таким же простым способом, как исходную "протекающую" версию, следующим образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmac.htm" class="symbol"><i><span class="symbol">defmacro</span></i></a> do-primes <span class="paren2">(<span class=""><span class="paren3">(<span class="">var start end</span>)</span> &amp;body body</span>)</span><br/>  <span class="paren2">(<span class="">once-only <span class="paren3">(<span class="">start end</span>)</span><br/>    `<span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">,var <span class="paren6">(<span class="">next-prime ,start</span>)</span> <span class="paren6">(<span class="">next-prime <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> ,var</span>)</span></span>)</span></span>)</span></span>)</span><br/>         <span class="paren4">(<span class=""><span class="paren5">(<span class="">&gt; ,var ,end</span>)</span></span>)</span><br/>       ,@body</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Однако, реализация <code>once-only</code> несколько запутанна для обычного пошагового объяснения, так как зависит от множества уровней квазицитирования и "раскавычивания". Если вы действительно хотите попрактиковаться в понимании макросов, вы можете попытаться разобраться, как он работает. Макрос выглядит следующим образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmac.htm" class="symbol"><i><span class="symbol">defmacro</span></i></a> once-only <span class="paren2">(<span class=""><span class="paren3">(<span class="">&amp;rest names</span>)</span> &amp;body body</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">gensyms <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for n in names collect <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_gensym.htm" class="symbol">gensym</a></span>)</span></span>)</span></span>)</span></span>)</span><br/>    `<span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class="">,@<span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for g in gensyms collect `<span class="paren6">(<span class="">,g <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_gensym.htm" class="symbol">gensym</a></span>)</span></span>)</span></span>)</span></span>)</span><br/>      `<span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren5">(<span class="">,,@<span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for g in gensyms for n in names collect ``<span class="paren1">(<span class="">,,g ,,n</span>)</span></span>)</span></span>)</span><br/>        ,<span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren6">(<span class="">,@<span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for n in names for g in gensyms collect `<span class="paren2">(<span class="">,n ,g</span>)</span></span>)</span></span>)</span><br/>           ,@body</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>



</div></div><div class="chapter" id="&#x41D;&#x435; &#x442;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x43F;&#x440;&#x43E;&#x441;&#x442;&#x44B;&#x435; &#x43C;&#x430;&#x43A;&#x440;&#x43E;&#x441;&#x44B;"><h3>Не только простые макросы</h3>

<p>Конечно я могу расказать о макросах намного больше. Все макросы, которые вы до сих пор видели, были довольно простыми примерами, избавляющими вас от небольшого количества работы по набору текста, но не предоставляющими радикально новых способов выражения мыслей. В последующих главах вы увидите примеры макросов, позволяющих вам выражать мысли способами, практически не возможными без макросов. И вы начнете прямо со следующей главы, в которой вы создадите простой, но эффективный фреймворк для модульного тестирования.
</p></div></div><div class="footnotes"><div><a class="fn_bot" id="fn__1" href="macros-defining-your-own#fnt__1">1)</a>Подобно функциям, макрос также может содержать объявления, но сейчас вам не стоит беспокоиться об этом.</div><div><a class="fn_bot" id="fn__2" href="macros-defining-your-own#fnt__2">2)</a><strong>APPEND</strong>, который я ранее не упоминал, является функцией, которая получает произвольное число аргументов-списков и возвращает в качестве результата единственный список, полученный склейкой их вместе.</div><div><a class="fn_bot" id="fn__3" href="macros-defining-your-own#fnt__3">3)</a>Другая функция, <strong>MACROEXPAND</strong>, продолжает раскрытие результата пока первый элемент получаемого раскрытия является именем макроса. Однако, это часто показывает вам гораздо более низкоуровневое представление о том, что делает код, чем вам нужно, так как базовые структуры контроля, такие как <strong>DO</strong>, также реализованы в виде макросов. Другими словами, в то время как в учебных целях может быть полезно посмотреть, во что в конечном счете расширяется ваш макрос, это не очень полезно для просмотра того, во что расширяется именно ваш макрос.</div><div><a class="fn_bot" id="fn__4" href="macros-defining-your-own#fnt__4">4)</a>Если все раскрытие макроса отображается в одну строку, возможой причиной является то, что переменная <strong> *PRINT-PRETTY* </strong> установлена в <strong>NIL</strong>. Если это так, вычисление <code>(setf *print-pretty* t)</code> должно сделать раскрытия макросов более легкими для чтения.</div><div><a class="fn_bot" id="fn__5" href="macros-defining-your-own#fnt__5">5)</a>Этот закон, описанный в книге Джоэла Спольски "Джоэл о программировании", доступен также по адресу <a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html.">http://www.joelonsoftware.com/articles/LeakyAbstractions.html.</a> Точка зрения Спольски, выраженная в эссе, заключается в том, что все абстракции содержат "течи" в той или иной степени, то есть не существует идеальных абстракций. Но это не значит, что вы должны допускать "течи", которые легко устранить.</div><div><a class="fn_bot" id="fn__6" href="macros-defining-your-own#fnt__6">6)</a>Конечно, для определенных форм, таких как формы тела цикла <code>do-primes</code>, предполагается именно вычисление более одного раза.</div><div><a class="fn_bot" id="fn__7" href="macros-defining-your-own#fnt__7">7)</a>Может быть не очень очевидным, что этот цикл обязательно бесконечен, учитывая неравномерное распределение простых чисел. Начальной точкой доказательства, что он на самом деле бесконечен, является постулат Бертрана, который говорит, что для любого <code>n &gt; 1</code>, существует простое число <code>p</code> такое, что <code>n &lt; p &lt; 2n</code>. Отсюда вы можете доказать, что для любого простого числа <code>P</code>, меньшего чем сумма предыдущих простых чисел, следующее простое число <code>P' </code> также меньше чем исходная сумма плюс <code>P</code>.</div></div></div> <table width="100%"> <tbody> <tr> <td width="20%" align="left"> <a href="macros-standard-control-constructs">Предыдущая</a> </td> <td width="60%" align="center"> <a href="index.html">Оглавление</a> </td> <td width="20%" align="right"> <a href="practical-building-a-unit-test-framework">Следующая</a> </td> </tr> </tbody> </table> </div> <div class="bottom">@2009-2013 lisper.ru</div> 
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-7734690-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
 </body> </html>