<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ru" xml:lang="ru"> <head> <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> <meta name="keywords" content="Common Lisp,lisp,лисп" /> <title>Практика. Спам-фильтр</title> <link href="../css/style.css" rel="stylesheet" type="text/css" /><link href="../css/colorize.css" rel="stylesheet" type="text/css" />  </head> <body> <div class="top"> <div id="login"> <a href="http://lisper.ru/register">Регистрация</a> | <a href="http://lisper.ru/login?done=/pcl/practical-a-spam-filter">Войти</a> </div> </div> <div id="caution"> <img alt="Lisp — программируемый язык программирования" src="../image/gecko.png" /> <a href="http://www.vkusnoserver.ru/" target="_blank" style="float: right;"> <img src="../vkusnoserver.png" /> </a> </div> <div id="mainmenu"> <ul> <li> <a href="http://lisper.ru/">Главная</a> </li><li> <a href="http://lisper.ru/articles/">Статьи</a> </li><li> <a href="http://lisper.ru/planet/">Планета</a> </li><li> <a href="http://lisper.ru/forum/">Форум</a> </li><li> <a href="http://lisper.ru/apps/">Сервисы</a> </li><li> <a href="index.html">Practical Common Lisp</a> </li><li> <a href="http://lisper.ru/wiki/">Wiki</a> </li><li> <a href="http://lisper.ru/files/">Файлы</a> </li><li> <a href="http://lisper.ru/search">Поиск</a> </li> </ul> </div> <div id="content"> <table width="100%"> <tbody> <tr> <td width="20%" align="left"> <a href="loop-for-black-belts">Предыдущая</a> </td> <td width="60%" align="center"> <a href="index.html">Оглавление</a> </td> <td width="20%" align="right"> <a href="practical-parsing-binary-files">Следующая</a> </td> </tr> </tbody> </table> <div class="article"><div class="toc"><div class="toc-header">Содержание</div><div class="toc-body"><ul><li><div><a href="practical-a-spam-filter#23. &#x41F;&#x440;&#x430;&#x43A;&#x442;&#x438;&#x43A;&#x430;: &#x441;&#x43F;&#x430;&#x43C;-&#x444;&#x438;&#x43B;&#x44C;&#x442;&#x440;">23. Практика: спам-фильтр</a><ul><li><div><a href="practical-a-spam-filter#&#x421;&#x435;&#x440;&#x434;&#x446;&#x435; &#x441;&#x43F;&#x430;&#x43C;-&#x444;&#x438;&#x43B;&#x44C;&#x442;&#x440;&#x430;">Сердце спам-фильтра</a></div></li><li><div><a href="practical-a-spam-filter#&#x422;&#x440;&#x435;&#x43D;&#x438;&#x440;&#x443;&#x435;&#x43C; &#x444;&#x438;&#x43B;&#x44C;&#x442;&#x440;">Тренируем фильтр</a></div></li><li><div><a href="practical-a-spam-filter#&#x41F;&#x43E;&#x441;&#x43B;&#x43E;&#x432;&#x43D;&#x430;&#x44F; &#x441;&#x442;&#x430;&#x442;&#x438;&#x441;&#x442;&#x438;&#x43A;&#x430;">Пословная статистика</a></div></li><li><div><a href="practical-a-spam-filter#&#x41A;&#x43E;&#x43C;&#x431;&#x438;&#x43D;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435; &#x432;&#x435;&#x440;&#x43E;&#x44F;&#x442;&#x43D;&#x43E;&#x441;&#x442;&#x435;&#x439;">Комбинирование вероятностей</a></div></li><li><div><a href="practical-a-spam-filter#&#x41E;&#x431;&#x440;&#x430;&#x442;&#x43D;&#x430;&#x44F; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x44F; Chi-&#x43A;&#x432;&#x430;&#x434;&#x440;&#x430;&#x442;">Обратная функция Chi-квадрат</a></div></li><li><div><a href="practical-a-spam-filter#&#x422;&#x440;&#x435;&#x43D;&#x438;&#x440;&#x443;&#x435;&#x43C; &#x444;&#x438;&#x43B;&#x44C;&#x442;&#x440;">Тренируем фильтр</a></div></li><li><div><a href="practical-a-spam-filter#&#x422;&#x435;&#x441;&#x442;&#x438;&#x440;&#x443;&#x435;&#x43C; &#x444;&#x438;&#x43B;&#x44C;&#x442;&#x440;">Тестируем фильтр</a></div></li><li><div><a href="practical-a-spam-filter#&#x41D;&#x430;&#x431;&#x43E;&#x440; &#x432;&#x441;&#x43F;&#x43E;&#x43C;&#x43E;&#x433;&#x430;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x44B;&#x445; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x439;">Набор вспомогательных функций</a></div></li><li><div><a href="practical-a-spam-filter#&#x410;&#x43D;&#x430;&#x43B;&#x438;&#x437; &#x440;&#x435;&#x437;&#x443;&#x43B;&#x44C;&#x442;&#x430;&#x442;&#x43E;&#x432;">Анализ результатов</a></div></li><li><div><a href="practical-a-spam-filter#&#x427;&#x442;&#x43E; &#x434;&#x430;&#x43B;&#x435;&#x435;?">Что далее?</a></div></li></ul></div></li></ul></div></div>
<div class="chapter" id="23. &#x41F;&#x440;&#x430;&#x43A;&#x442;&#x438;&#x43A;&#x430;: &#x441;&#x43F;&#x430;&#x43C;-&#x444;&#x438;&#x43B;&#x44C;&#x442;&#x440;"><h3>23. Практика: спам-фильтр</h3>

<p>В 2002-м году Paul Graham, имея некоторое количество свободного времени после продажи
Viaweb Yahoo, написал статью "A Plan for Spam"<a class="fn_top" id="fnt__1" href="practical-a-spam-filter#fn__1">1)</a>), которая привела к небольшой революции в технологии
фильтрации спама.  До статьи Graham, большинство спам-фильтров были написаны в
терминах рукописных правил: если сообщение имеет в заголовке слово XXX, то вероятно оно
является спамом; Если в сообщении имеется три или больше слов в строке написанных
ЗАГЛАВНЫМИ БУКВАМИ, то вероятно, что это тоже спам. Graham провел несколько месяцев
пытаясь написать фильтр, который бы использовал такие правила, до того, как осознал что
это фундаментально неправильная задача.
</p>
<p>Для того, чтобы узнать индивидуальные признаки спама вы должны попытаться влезть в шкуру
спамера, и я публично заявляю, что я хочу провести как можно меньше времени в этом
качестве.
</p>
<p>Чтобы не пытаться думать как спамер, Graham решил попробовать отделять спам от не-спама,
используя статистику, собранную о том, какие слова появляются в обоих типах сообщений.
Фильтр может отслеживать то, как часто отдельные слова появляются и в спаме и в не-спаме,
и затем использовать частоты вхождения этих слов в сообщения, чтобы вычислить вероятность
того, к какой группе относится сообщение.  Он назвал этот подход Байесовской фильтрацией
(Bayesian filtering) по ассоциации с названием статистического подхода, который он
использовал для вычисления частот слов.<a class="fn_top" id="fnt__2" href="practical-a-spam-filter#fn__2">2)</a>
</p><div class="chapter" id="&#x421;&#x435;&#x440;&#x434;&#x446;&#x435; &#x441;&#x43F;&#x430;&#x43C;-&#x444;&#x438;&#x43B;&#x44C;&#x442;&#x440;&#x430;"><h3>Сердце спам-фильтра</h3>

<p>В этой главе вы реализуете основную функциональность системы фильтрации спама.  Вы не будете
писать полноценное приложение; вместо этого, вы сосредоточитесь на функциях
для классификации новых сообщений и тренировки фильтра.
</p>
<p>Это приложение будет достаточно большим, так что было бы удобным определение нового пакета
для того, чтобы избежать конфликта имен.  Например, в исходном коде, который вы можете
загрузить с сайта данной книги, я использую имя пакета <code>COM.GIGAMONKEYS.SPAM</code>, определяя
пакет, который использует и стандартный пакет <code>COMMON-LISP</code> и пакет
<code>COM.GIGAMONKEYS.PATHNAMES</code> из главы 15.  Определение выглядит следующим образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpkg.htm" class="symbol"><i><span class="symbol">defpackage</span></i></a> <span class="keyword">:com.gigamonkeys.spam</span><br/>  <span class="paren2">(<span class=""><span class="keyword">:use</span> <span class="keyword">:common-lisp</span> <span class="keyword">:com.gigamonkeys.pathnames</span></span>)</span></span>)</span><br/></pre>

<p>Любой файл, содержащий код для данного приложения должен начинаться со строки:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_in_pkg.htm" class="symbol">in-package</a> <span class="keyword">:com.gigamonkeys.spam</span></span>)</span><br/></pre>

<p>Вы можете продолжать использовать это имя пакета, или можете заменить  <code>com.gigamonkeys</code>
на домен, который находится под вашим контролем.<a class="fn_top" id="fnt__3" href="practical-a-spam-filter#fn__3">3)</a>
</p>
<p>Вы можете также ввести данное выражение в REPL чтобы переключиться на этот пакет и
протестировать функции, которые вы пишете.  В SLIME это приведет к смене строки
приглашения с <code>CL-USER&gt;</code> на <code>SPAM&gt;</code>, вот так:
</p><pre>CL-USER&gt; (in-package :com.gigamonkeys.spam)<br/>#&lt;The COM.GIGAMONKEYS.SPAM package&gt;<br/>SPAM&gt; <br/></pre>
<p>После того, как вы определили пакет, вы можете начать писать код.  Основная функция,
которую вы должны реализовать, выполняет простую работу – получает текст сообщения в
качестве аргумента, и классифицирует сообщение как спам, не-спам или неопределенное.  Вы
можете легко реализовать эту функцию путем определения ее в терминах других функций,
которые вы напишете позже.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> classify <span class="paren2">(<span class="">text</span>)</span><br/>  <span class="paren2">(<span class="">classification <span class="paren3">(<span class="">score <span class="paren4">(<span class="">extract-features text</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Читая этот код, начиная с самых вложенных функций, первым шагом в классификации сообщения
будет извлечение свойств (features), которые затем будут переданы функции <code>score</code>.  В
функции <code>score</code> вы вычислите значение, которое может быть преобразовано в одну из
классификаций (спам, не-спам или неопределенное) функцией <code>classification</code>.  Из этих
трех функций, функция <code>classification</code> является самой простой. Вы можете предположить,
что <code>score</code> будет возвращать значение около <code>1</code> если сообщение является спамом, около
<code>0</code>, если оно не является спамом, и около <code>.5</code>, если система не может корректно
классифицировать его.
</p>
<p>Так что вы можете реализовать <code>classification</code> следующим образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*max-ham-score*</span> .4</span>)</span><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*min-spam-score*</span> .6</span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> classification <span class="paren2">(<span class="">score</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_cond.htm" class="symbol"><i><span class="symbol">cond</span></i></a><br/>    <span class="paren3">(<span class=""><span class="paren4">(<span class="">&lt;= score <span class="special">*max-ham-score*</span></span>)</span> 'ham</span>)</span><br/>    <span class="paren3">(<span class=""><span class="paren4">(<span class="">&gt;= score <span class="special">*min-spam-score*</span></span>)</span> 'spam</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> 'unsure</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Функция <code>extract-features</code> также достаточно проста, хотя она требует большего количества
кода для реализации.  В настоящее время, свойствами, которые вы будете извлекать из
сообщения, будут слова из текста сообщения.  Для каждого слова вам необходимо отслеживать
количество вхождений в сообщения, указанные как спам и не-спам.  Удобным способом хранения
всех этих данных вместе со словом, является определение класса <code>word-feature</code> с тремя
слотами.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defcla.htm" class="symbol"><i><span class="symbol">defclass</span></i></a> word-feature <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><span class="paren3">(<span class="">word       <br/>    <span class="keyword">:initarg</span> <span class="keyword">:word</span><br/>    <span class="keyword">:accessor</span> word<br/>    <span class="keyword">:initform</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_error.htm" class="symbol">error</a> <span class="string">"Must supply :word"</span></span>)</span><br/>    <span class="keyword">:documentation</span> <span class="string">"The word this feature represents."</span></span>)</span><br/>   <span class="paren3">(<span class="">spam-count<br/>    <span class="keyword">:initarg</span> <span class="keyword">:spam-count</span><br/>    <span class="keyword">:accessor</span> spam-count<br/>    <span class="keyword">:initform</span> 0<br/>    <span class="keyword">:documentation</span> <span class="string">"Number of spams we have seen this feature in."</span></span>)</span><br/>   <span class="paren3">(<span class="">ham-count<br/>    <span class="keyword">:initarg</span> <span class="keyword">:ham-count</span><br/>    <span class="keyword">:accessor</span> ham-count<br/>    <span class="keyword">:initform</span> 0<br/>    <span class="keyword">:documentation</span> <span class="string">"Number of hams we have seen this feature in."</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Вы будете хранить все свойства в хэш-таблице, так что вы сможете легко находить объект
представляющий заданное свойство.  Вы можете определить специальную переменную,
<code>*feature-database*</code>, для хранения указателя на данную таблицу.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defvar</span></i></a> <span class="special">*feature-database*</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_has.htm" class="symbol">make-hash-table</a> <span class="keyword">:test</span> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_equal.htm" class="symbol">equal</a></span>)</span></span>)</span><br/></pre>

<p>Вы должны использовать <code>DEFVAR</code> вместо <code>DEFPARAMETER</code>, поскольку вы не хотите, чтобы
<code>*feature-database*</code> была очищена, если в ходе работы вы заново загрузите файл,
содержащий определение этой переменной – она может содержать данные, которые вы не хотите
потерять.  Конечно, это означает, что если вы хотите очистить накопленные данные, то вы не
можете просто заново вычислить выражение <code>DEFVAR</code>.  Так что вы должны определить функцию
<code>clear-database</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> clear-database <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="special">*feature-database*</span> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_has.htm" class="symbol">make-hash-table</a> <span class="keyword">:test</span> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_equal.htm" class="symbol">equal</a></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Для нахождения свойств, присутствующих в заданном сообщении, код должен будет выделить
отдельные слова, и затем найти соответствующий объект <code>word-feature</code> в таблице
<code>*feature-database*</code>.  Если <code>*feature-database*</code> не содержит такого свойства, то вам
необходимо создать новый объект <code>word-feature</code> чтобы хранить данные о новом слове.  Вы
можете поместить эту логику в отдельную функцию, <code>intern-feature</code>, которая получает
слово и возвращает соответствующее свойство, создавая его, если это необходимо.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> intern-feature <span class="paren2">(<span class="">word</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_gethas.htm" class="symbol">gethash</a> word <span class="special">*feature-database*</span></span>)</span><br/>      <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_gethas.htm" class="symbol">gethash</a> word <span class="special">*feature-database*</span></span>)</span><br/>            <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ins.htm" class="symbol">make-instance</a> 'word-feature <span class="keyword">:word</span> word</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Вы можете выделить из сообщения отдельные слова с помощью регулярных выражений.  Например,
используя библиотеку Common Lisp Portable Perl-Compatible Regular Expression
(<code>CL-PPCRE</code>), написанную Weitz, вы можете написать <code>extract-words</code> следующим
образом:<a class="fn_top" id="fnt__4" href="practical-a-spam-filter#fn__4">4)</a>
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> extract-words <span class="paren2">(<span class="">text</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rm_dup.htm" class="symbol">delete-duplicates</a><br/>   <span class="paren3">(<span class="">cl-ppcre:all-matches-as-strings <span class="string">"[a-zA-Z]{3,}"</span> text</span>)</span><br/>   <span class="keyword">:test</span> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm" class="symbol">string=</a></span>)</span></span>)</span><br/></pre>

<p>Теперь все что вам остается реализовать в <code>extract-features</code> – это совместить вместе
<code>extract-words</code> и <code>intern-feature</code>.  Поскольку <code>extract-words</code> возвращает список
строк и вы хотите получить список, в котором каждая строка преобразована в соответствующий
объект <code>word-feature</code>, то тут самое время применить <code>MAPCAR</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> extract-features <span class="paren2">(<span class="">text</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mapc_.htm" class="symbol">mapcar</a> #'intern-feature <span class="paren3">(<span class="">extract-words text</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Вы можете проверить эти функции в интерпретаторе, например вот так:
</p><pre>SPAM&gt; (extract-words "foo bar baz")<br/>("foo" "bar" "baz")<br/></pre>
<p>И вы можете убедиться, что <code>DELETE-DUPLICATES</code> работает правильно:
</p><pre>SPAM&gt; (extract-words "foo bar baz foo bar")<br/>("baz" "foo" "bar")<br/></pre>
<p>Вы также можете проверить работу <code>extract-features</code>.
</p><pre>SPAM&gt; (extract-features "foo bar baz foo bar")<br/>(#&lt;WORD-FEATURE @ #x71ef28da&gt; #&lt;WORD-FEATURE @ #x71e3809a&gt;<br/> #&lt;WORD-FEATURE @ #x71ef28aa&gt;)<br/></pre>
<p>Однакоб как вы можете видеть, стандартный метод печати произвольных объектов не особо
информативен.  В процессе работы над этой программой, было бы полезно иметь возможность
печатать объекты <code>word-feature</code> в более понятном виде.  К счастью, как я упоминал в
главе 17, печать объектов реализована в терминах обобщенной функции <code>PRINT-OBJECT</code>, так
что для изменения способа печати объектов <code>word-feature</code> вам нужно определить метод
для <code>PRINT-OBJECT</code>, специализированный для <code>word-feature</code>.  Для того, чтобы сделать
реализацию таких методов более легкой, Common Lisp предоставляет макрос
<code>PRINT-UNREADABLE-OBJECT</code>.<a class="fn_top" id="fnt__5" href="practical-a-spam-filter#fn__5">5)</a>
</p>
<p>Использование <code>PRINT-UNREADABLE-OBJECT</code> выглядит следующим образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_pr_unr.htm" class="symbol">print-unreadable-object</a> <span class="paren2">(<span class="">object stream-variable &amp;key <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_identi.htm" class="symbol">identity</a></span>)</span><br/>  body-form*</span>)</span><br/></pre>

<p>Аргумент <code>object</code> является выражением, которое вычисляется в объект, который должен быть
напечатан.  Внутри тела <code>PRINT-UNREADABLE-OBJECT</code>, <code>stream-variable</code> связывается с
потоком, в который вы можете напечатать все, что вам нужно. Все что вы напечатаете в этот
поток, будет выведено в <code>PRINT-UNREADABLE-OBJECT</code> и заключено в стандартный синтаксис
для не читаемых объектов – <code>#&lt;&gt;</code>.<a class="fn_top" id="fnt__6" href="practical-a-spam-filter#fn__6">6)</a>
</p>
<p><code>PRINT-UNREADABLE-OBJECT</code> также позволяет вам включать в вывод тип объекта и признак
уникальности (FIXME identity) путем указания именованных параметров <code>type</code> и
<code>identity</code>.  Если они имеют не-<code>NIL</code> значение, то вывод будет начинаться с имени
класса и заканчиваться признаком уникальности (FIXME identity) объекта, точно также, как
это делается стандартным методом <code>PRINT-OBJECT</code> для объектов, унаследованных от
<code>STANDARD-OBJECT</code>.  Для <code>word-feature</code>, вы вероятно захотите определить метод
<code>PRINT-OBJECT</code>, который будет включать в вывод тип, но не включать признак уникальности(FIXME
identity), а также значения слотов <code>word</code>, <code>ham-count</code> и <code>spam-count</code>.  Такой метод
может выглядеть вот так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm" class="symbol"><i><span class="symbol">defmethod</span></i></a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_pr_obj.htm" class="symbol">print-object</a> <span class="paren2">(<span class=""><span class="paren3">(<span class="">object word-feature</span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_stream.htm" class="symbol">stream</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_pr_unr.htm" class="symbol">print-unreadable-object</a> <span class="paren3">(<span class="">object <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_stream.htm" class="symbol">stream</a> <span class="keyword">:type</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_slts.htm" class="symbol"><i><span class="symbol">with-slots</span></i></a> <span class="paren4">(<span class="">word ham-count spam-count</span>)</span> object<br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/t_stream.htm" class="symbol">stream</a> <span class="string">"~s :hams ~d :spams ~d"</span> word ham-count spam-count</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Теперь вы можете протестировать работу <code>extract-features</code> в интерпретаторе и увидите
какие свойства были выделены из сообщения.
</p><pre>SPAM&gt; (extract-features "foo bar baz foo bar")<br/>(#&lt;WORD-FEATURE "baz" :hams 0 :spams 0&gt;<br/> #&lt;WORD-FEATURE "foo" :hams 0 :spams 0&gt;<br/> #&lt;WORD-FEATURE "bar" :hams 0 :spams 0&gt;)<br/></pre>


</div><div class="chapter" id="&#x422;&#x440;&#x435;&#x43D;&#x438;&#x440;&#x443;&#x435;&#x43C; &#x444;&#x438;&#x43B;&#x44C;&#x442;&#x440;"><h3>Тренируем фильтр</h3>

<p>Теперь, когда у вас имеется способ отслеживания отдельных свойств, вы почти готовы для
реализации функции <code>score</code>.  Но сначала вам нужно написать код, который вы будете
использовать для тренировки фильтра, так что <code>score</code> будет иметь хоть какие-то данные
для использования.  Вы можете определить функцию <code>train</code>, которая получает некоторый
текст и символ, определяющий к какому типу относится это сообщений (спам или не спам), и
которая для всех свойств, присутствующих в заданном тесте, увеличивает либо счетчик для
спама, либо счетчик не спама, а также глобальный счетчик обработанных сообщений.  Снова,
вы можете использовать подход разработки "сверху вниз" (top-down) и реализовать эту
функцию в терминах других, еще не существующих функций.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> train <span class="paren2">(<span class="">text <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_dolist.htm" class="symbol">dolist</a> <span class="paren3">(<span class="">feature <span class="paren4">(<span class="">extract-features text</span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">increment-count feature <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a></span>)</span></span>)</span><br/>  <span class="paren2">(<span class="">increment-total-count <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a></span>)</span></span>)</span><br/></pre>

<p>Вы уже написали <code>extract-features</code>, так что следующим шагом будет реализация
<code>increment-count</code>, которая получает объект <code>word-feature</code> и тип сообщения, и
увеличивает соответствующий слот данного свойства.  Поскольку нет причин думать, что
логика увеличения этих счетчиков будет применяться для различных видов объектов, то вы
можете написать ее как обычную функцию.<a class="fn_top" id="fnt__7" href="practical-a-spam-filter#fn__7">7)</a>  Поскольку вы определили и <code>ham-count</code> и <code>spam-count</code> с опциями
<code>:accessor</code>, то для увеличения соответствующего слота вы можете использовать вместе
<code>INCF</code> и функции доступа, созданные при вычислении <code>DEFCLASS</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> increment-count <span class="paren2">(<span class="">feature <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a><br/>    <span class="paren3">(<span class="">ham <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> <span class="paren5">(<span class="">ham-count feature</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">spam <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> <span class="paren5">(<span class="">spam-count feature</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Конструкция <code>ECASE</code> является вариантом конструкции <code>CASE</code>, которые обе похожи на
конструкцию <code>case</code> в языках, произошедших от Algol (переименованный в <code>switch</code> в C и
его производных).  Обе эти конструкции вычисляют свой первый аргумент и затем находят
выражение, чей первый элемент (ключ) имеет то же самое значение в соответствии с логикой
сравнения <code>EQL</code>.  В нашем случае это означает, что вычисляется переменная <code>type</code>,
возвращая значение, переданное как второй аргумент функции <code>increment-count</code>.
</p>
<p>Ключи поиска не вычисляются.  Другими словами, значение переменной <code>type</code> будет
сравниваться с непосредственными объектами (literal objects), считанными процедурой чтения
Lisp как часть выражения <code>ECASE</code>. В этой функции, это означает что ключи являются
символами <code>ham</code> и <code>spam</code>, а не значениями переменных с именами <code>ham</code> и <code>spam</code>.
Так что, если <code>increment-count</code> будет вызвана вот так:
</p>
<pre class="code"><span class="paren1">(<span class="">increment-count some-feature 'ham</span>)</span><br/></pre>

<p>то значением  <code>type</code> будет символ <code>ham</code>, и будет вычислено первое выражение <code>ECASE</code>,
что приведен к увеличению счетчика для не спама. С другой стороны, если мы вызовем эту
функцию вот так:
</p>
<pre class="code"><span class="paren1">(<span class="">increment-count some-feature 'spam</span>)</span><br/></pre>

<p>то будет выполнено второе выражение, увеличивая счетчик для спама.  Заметьте, что при
вызове <code>increment-count</code> символы <code>ham</code> и <code>spam</code> маскируются, иначе это приведет к
тому, что они будут считаться именами переменных.  Но они не маскируются, когда они
используются в <code>ECASE</code>, поскольку <code>ECASE</code> не вычисляет ключи сравнения.<a class="fn_top" id="fnt__8" href="practical-a-spam-filter#fn__8">8)</a>
</p>
<p>Буква <code>E</code> в <code>ECASE</code> обозначает "исчерпывающий" (FIXME "exhaustive") или "ошибка
("error"), обозначая, что <code>ECASE</code> должен выдать ошибку, если сравниваемое значение не
совпадает ни с одним, из перечисленных ключей.  Обычное выражение <code>CASE</code> возвращает
<code>NIL</code>, если не было найдено совпадений.
</p>
<p>Для реализации <code>increment-total-count</code>, вам нужно решить, где вы будете хранить
счетчики; в настоящий момент, достаточно использовать две глобальные переменные:
<code>*total-spams*</code> и <code>*total-hams*</code>.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defvar</span></i></a> <span class="special">*total-spams*</span> 0</span>)</span><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defvar</span></i></a> <span class="special">*total-hams*</span> 0</span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> increment-total-count <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a><br/>    <span class="paren3">(<span class="">ham <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> <span class="special">*total-hams*</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">spam <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> <span class="special">*total-spams*</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Вы должны использовать <code>DEFVAR</code> для определения этих двух переменных по той же причине,
что и для переменной <code>*feature-database*</code> – они будут хранить данные, которые вы не
хотите потерять лишь потому, что вы в процессе разработки заново считали исходный код.
Но вы можете захотеть, чтобы эти переменные также сбрасывались при очистке
<code>*feature-database*</code>, так что вы должны добавить несколько строк в функцию
<code>clear-database</code>, как это показано здесь:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> clear-database <span class="paren2">(<span class=""/>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_setf.htm" class="symbol">setf</a><br/>   <span class="special">*feature-database*</span> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_has.htm" class="symbol">make-hash-table</a> <span class="keyword">:test</span> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_equal.htm" class="symbol">equal</a></span>)</span><br/>   <span class="special">*total-spams*</span> 0<br/>   <span class="special">*total-hams*</span> 0</span>)</span></span>)</span><br/></pre>
</div><div class="chapter" id="&#x41F;&#x43E;&#x441;&#x43B;&#x43E;&#x432;&#x43D;&#x430;&#x44F; &#x441;&#x442;&#x430;&#x442;&#x438;&#x441;&#x442;&#x438;&#x43A;&#x430;"><h3>Пословная статистика</h3>

<p>Сердцем статистического спам-фильтра являются функции, которые вычисляют
статистические вероятности.  Математические нюансы<a class="fn_top" id="fnt__9" href="practical-a-spam-filter#fn__9">9)</a> того, как эти вычисления производятся не являются темой данной книги –
заинтересованные читатели могут обратиться к нескольким статьям Gary Robinson.<a class="fn_top" id="fnt__10" href="practical-a-spam-filter#fn__10">10)</a>  Однако я
сосредоточусь на том, как это все реализуется.
</p>
<p>Начальной точкой для статистических вычислений является набор измеренных значений –
частоты сохраненные в переменных <code>*feature-database*</code>, <code>*total-spams*</code> и
<code>*total-hams*</code>.  Предполагая, что набор сообщений, на которых происходила тренировка,
является статистически репрезентативным, мы можем рассматривать полученные частоты как
вероятности появления соответствующих свойств в спаме и не спаме.
</p>
<p>Основная идея классификации сообщения заключается в выделении всех свойств, вычисления
вероятностей для отдельных свойств, и затем объединения всех вычисленных вероятностей в
значение для всего сообщения.  Сообщения, с большим количеством "спамовых" свойств и малым
количеством "не спамовых" будут иметь значения около <code>1</code>, а сообщения, с большим
количеством "не спамовых" свойств и малым количеством "спамовых", получат значение около
<code>0</code>.
</p>
<p>Сначала вам нужно иметь статистическую функцию, которая вычисляет базовую вероятность, что
сообщение, содержащее данное свойство, является спамом.  С нашей точки зрения,
вероятность, что сообщение, содержащее заданное свойство является спамом, равно отношению
числа спам-сообщений, содержащих данное свойство, к общему количеству сообщений,
содержащих данное свойство.  Так что это значение будет вычисляться вот так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> spam-probability <span class="paren2">(<span class="">feature</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_slts.htm" class="symbol"><i><span class="symbol">with-slots</span></i></a> <span class="paren3">(<span class="">spam-count ham-count</span>)</span> feature<br/>    <span class="paren3">(<span class="">/ spam-count <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> spam-count ham-count</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Проблема с вычисляемым этой функцией значением заключается в том, что оно сильно зависит
от полной вероятности, что любое сообщение будет считаться как спам, или как не спам.
Например, предположим, что у вас в девять раз больше не спама, чем спама.  Тогда полностью
нейтральное свойство, в соответствии с данной функцией, будет появляться в одном спамовом
сообщении, против девяти не спамовых сообщений, давая вам вероятность спама, равную
<code>1/10</code>.
</p>
<p>Но вы более заинтересованы в вероятности, что данное свойство будет появляться в спамовых
сообщениях, независимо от общей вероятности получения спама или не спама.  Таким образом,
вам нужно разделить число вхождений в спам на количество спамовых сообщений, на которых
происходила тренировка, и то же самое сделать для число вхождений в не спамовые сообщения.
Для того, чтобы избежать получения ошибок <code>division-by-zero</code> (деление на ноль), если
либо <code>*total-spams*</code>, либо <code>*total-hams*</code> равно нулю, вам необходимо считать
соответствующие частоты равными нулю. (Если общее число спамовых или не спамовых сообщений
равно нулю, то соответствующие счетчики в свойствах, также должны быть равны нулю, так что
вы можете рассматривать полученную частоту равной нулю).
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> spam-probability <span class="paren2">(<span class="">feature</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_slts.htm" class="symbol"><i><span class="symbol">with-slots</span></i></a> <span class="paren3">(<span class="">spam-count ham-count</span>)</span> feature<br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">spam-frequency <span class="paren6">(<span class="">/ spam-count <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_max_m.htm" class="symbol">max</a> 1 <span class="special">*total-spams*</span></span>)</span></span>)</span></span>)</span><br/>          <span class="paren5">(<span class="">ham-frequency <span class="paren6">(<span class="">/ ham-count <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_max_m.htm" class="symbol">max</a> 1 <span class="special">*total-hams*</span></span>)</span></span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class="">/ spam-frequency <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> spam-frequency ham-frequency</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Эта версия страдает от другой проблемы – она не обращает внимания на число
проанализированных сообщений.  Предположим, что вы производили обучение на 2000 сообщений,
половина спама и половина не спама.  Теперь рассмотрим два свойства, которые входят только
в сообщения со спамом.  Одно из них входит во все 1000 спамовых сообщений, а второе - только в одно из
них.  В соответствии с текущей реализацией <code>spam-probability</code>, появление любого из
свойств в сообщении, сообщает, что оно является спамом с вероятностью <code>1</code>.
</p>
<p>Однако, все равно возможно, что свойство, которое встречается только в одном, даже спамовом сообщении, в
действительности является нейтральным свойством – оно достаточно редко встречается в спаме
и не спаме, всего в одном сообщении из 2000.  Если вы проведете обучение на следующих двух тысячах сообщений, может быть,
что оно встретитсяся еще раз, теперь – в не спаме, и станет нейтральным, с
вероятностью вхождения в спам, равной <code>.5</code>.
</p>
<p>Так что, наверное, вам хочется вычислять вероятность, которая учитывает количество
случаев, когда встречается каждое свойство (number of data points).
В своих статьях Robinson предложил функцию, основанную на
Байесовском понимании включения наблюдаемых данных в априорные знания или
предположения. Проще говоря, вы вычисляете новую вероятность начиная с
предполагаемой априорной вероятности и веса, данного этой вероятности, а
затем добавляя новую информацию. Функция предложенная Robinson'ом выглядит вот так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> bayesian-spam-probability <span class="paren2">(<span class="">feature &amp;optional<br/>                                  <span class="paren3">(<span class="">assumed-probability 1/2</span>)</span><br/>                                  <span class="paren3">(<span class="">weight 1</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">basic-probability <span class="paren5">(<span class="">spam-probability feature</span>)</span></span>)</span><br/>        <span class="paren4">(<span class="">data-points <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> <span class="paren6">(<span class="">spam-count feature</span>)</span> <span class="paren6">(<span class="">ham-count feature</span>)</span></span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">/ <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> weight assumed-probability</span>)</span><br/>          <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> data-points basic-probability</span>)</span></span>)</span><br/>       <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> weight data-points</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Robinson предложил значения <code>1/2</code> для <code>assumed-probability</code> и <code>1</code> для <code>weight</code>.
Используя эти значения, свойство, которое один раз встретилось в спаме, и ни разу в
не спаме, будет иметь значение <code>bayesian-spam-probability</code> равное <code>0.75</code>, а свойство,
которое встречается 10 раз в спаме, и ни разу в не спаме, будет иметь значение
<code>bayesian-spam-probability</code> приблизительно равное <code>0.955</code>, а то, которое входит в 1000
спамовых сообщений, и ни разу в не спам, будет иметь вероятность приблизительно равную
<code>0.9995</code>.
</p>




</div><div class="chapter" id="&#x41A;&#x43E;&#x43C;&#x431;&#x438;&#x43D;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435; &#x432;&#x435;&#x440;&#x43E;&#x44F;&#x442;&#x43D;&#x43E;&#x441;&#x442;&#x435;&#x439;"><h3>Комбинирование вероятностей</h3>

<p>Теперь, когда вы можете вычислить <code>bayesian-spam-probability</code> для каждого из свойств в
сообщении, последним шагом будет реализация функции <code>score</code> для комбинирования отдельных
вероятностей в одно значение в диапазоне между 0 и 1.
</p>
<p>Если бы вероятности отдельных свойств были бы независимы, то можно было бы перемножить их
для получения общей вероятности.  Но к сожалению в действительности они зависимы –
некоторые свойства появляются вместе с другими, а некоторые никогда не появляются с
другими.<a class="fn_top" id="fnt__11" href="practical-a-spam-filter#fn__11">11)</a>
</p>
<p>Robinson предложил использовать метод комбинации вероятности, предложенный статистиком
R. A. Fisher (Фишер).  Не вдаваясь в детали того, как этот метод работает, он выглядит
следующим образом: сначала вы комбинируете вероятности путем их умножения.  Это дает вам
число, близкое к нулю если в вашей выборке много свойств с низкими вероятностями.  Потом
вы берете логарифм данного числа и умножаете его на -2.  Фишер в 1950 показал, что если
отдельные вероятности были независимыми, и соответствовали равномерному распределению между
0 и 1, то результирующее значение будет соответствовать chi-квадрат распределению. Это
значение и удвоенное число вероятностей может быть передано в обратную функцию
chi-квадрат, которая вернет вероятность, которая отражает вероятность получения значения,
которое больше значения, полученного комбинированием того же числа произвольно выбранных
вероятностей.  Когда обратная функция chi-квадрат возвращает маленькую вероятность, это
означает что использовалось неправильно число малых значений (либо большое число значений
с относительно малой вероятностью, либо несколько очень малых значений) в отдельных
вероятностях.
</p>
<p>Для использования этой вероятности для определения является ли сообщения спамом или нет,
вы должны начать с <em>нулевой гипотезы</em> (<em>null hypothesis</em>), предполагаемого предположения,
несостоятельность которого вы надеетесь доказать. Нулевая
гипотеза заключается в том, что классифицируемое сообщение в действительности является
произвольным набором свойств.  Если это так, то отдельные вероятности (вероятности того,
что каждое свойство может появиться в спаме) также будут произвольными.  Так что,
произвольная выборка свойств обычно будет содержать некоторые свойства с большой
вероятностью появления в спаме, а другие свойства будут иметь низкую вероятность появления
в спаме.  Если вы скомбинируете эти произвольно выбранные вероятности в соответствии с
методом Фишера, то вы должны получить усредненное значение, для которого обратная функция
chi-квадрат сообщит вероятность успеха.  Но если обратная функция chi-квадрат возвращает
низкую вероятность, то это означает, что к сожалению, вероятности, которые вошли в
объединенное значение, были выбраны не произвольным образом; использовалось слишком много
значений с низкой вероятностью чтобы это было случайным. Так что вы можете избавиться от
нулевой гипотезы и вместо этого использовать альтернативную гипотезу, что свойства были
взяты из противоположного примера – с несколькими свойствами с высокой вероятностью, и
большим числом с низкой вероятностью.  Другими словами, это должно быть не спамовое
сообщение.
</p>
<p>Однако, метод Фишера не является симметричным, поскольку обратная функция chi-квадрат
возвращает вероятность, что заданное число вероятность, выбранных произвольным образом,
может быть скомбинировано таким образом, чтобы значение было больше чем полученное путем
объединения настоящих вероятностей.  Эта асимметрия работает на вас, поскольку когда вы
отвергаете нулевую гипотезу, вы знаете что существует более правильная гипотеза.  Когда вы
комбинируете отдельные вероятности с помощью метода Фишера, и вам говорят, что существует
высокая вероятность, что нулевая гипотеза является неправильной (что сообщение не является
произвольным набором слов), то это означает, что сообщение, вероятно, является не спамом.
Возвращенное число не является вероятностью, что сообщение не является спамом, но, по
крайней мере, является хорошим признаком этого.  И наоборот, комбинация отдельных
вероятностей не спамовых свойств по Фишеру, дает вам признак того, что сообщение обладает
свойствами спама.
</p>
<p>Для получения окончательного результата вам необходимо объединить эти два значения в одно
число, которое даст вам рейтинг "спам-не спам" в диапазоне от 0 до 1.  Метод,
рекомендованный Робинсоном, заключается в добавлении к числу 1/2 половины разницы между
значениями вероятности отнесения к спаму и не спаму, или, другими словами, среднее значение
вероятности отнесения к спаму и единицы минус вероятность отнесения к не спаму.  Это
приводит нужному эффекту, так что если два значения согласованы (высокая вероятность спама
и низкая не спама, или наоборот), то вы получите четкий индикатор близкий по значению к 0
или 1.  Но когда оба значения высоки или низки, то вы получите окончательное значение
приблизительно равное 1/2, что будет рассматриваться как "неопределенное".
</p>
<p>Функция <code>score</code>, которая реализует эту схему выглядит следующим образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> score <span class="paren2">(<span class="">features</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">spam-probs <span class="paren5">(<span class=""/>)</span></span>)</span> <span class="paren4">(<span class="">ham-probs <span class="paren5">(<span class=""/>)</span></span>)</span> <span class="paren4">(<span class="">number-of-probs 0</span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_dolist.htm" class="symbol">dolist</a> <span class="paren4">(<span class="">feature features</span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">unless</a> <span class="paren5">(<span class="">untrained-p feature</span>)</span><br/>        <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren6">(<span class=""><span class="paren1">(<span class="">spam-prob <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_float.htm" class="symbol">float</a> <span class="paren3">(<span class="">bayesian-spam-probability feature</span>)</span> 0.0d0</span>)</span></span>)</span></span>)</span><br/>          <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_push.htm" class="symbol">push</a> spam-prob spam-probs</span>)</span><br/>          <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_push.htm" class="symbol">push</a> <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a__.htm" class="symbol">-</a> 1.0d0 spam-prob</span>)</span> ham-probs</span>)</span><br/>          <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> number-of-probs</span>)</span></span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class="">h <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a__.htm" class="symbol">-</a> 1 <span class="paren1">(<span class="">fisher spam-probs number-of-probs</span>)</span></span>)</span></span>)</span><br/>          <span class="paren5">(<span class="">s <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a__.htm" class="symbol">-</a> 1 <span class="paren1">(<span class="">fisher ham-probs number-of-probs</span>)</span></span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class="">/ <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a__.htm" class="symbol">-</a> 1 h</span>)</span> s</span>)</span> 2.0d0</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Вы берете список свойств и выполняете цикл, строя два списка вероятностей – один список
вероятностей, что сообщение, содержащее каждое из свойств, является спамом, и другой
список, что сообщение не является спамом.  Для оптимизации, вы также можете подсчитать
количество вероятностей и передать это число функции <code>fisher</code>, чтобы избежать подсчета в
самой функции <code>fisher</code>.  Число, возвращенное функцией <code>fisher</code> будет маленьким, если
отдельные вероятности содержат слишком много малых вероятностей чтобы рассматриваться как
произвольный текст.  Так что, малое число Фишера для "спамовых" вероятностей означает, что
там содержится много не-спамовых свойств; вычитая число Фишера из 1, вы получаете
вероятность того, что сообщение не является спамом.  Соответственно, вычитая число Фишера
для "не-спамовых" вероятностей из 1, дает вам вероятность того, что сообщение является
спамом.  Комбинируя эти два числа вы получаете общую вероятность принадлежности к спаму в
диапазоне между 0 и 1.
</p>
<p>Внутри цикла вы можете использовать функцию <code>untrained-p</code> для пропуска тех свойств,
которые не встречались в процессе обучения.  Эти свойства будут иметь счетчики спама и не
спама равные нулю.  Функция <code>untrained-p</code> является тривиальной.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> untrained-p <span class="paren2">(<span class="">feature</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_slts.htm" class="symbol"><i><span class="symbol">with-slots</span></i></a> <span class="paren3">(<span class="">spam-count ham-count</span>)</span> feature<br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_and.htm" class="symbol">and</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_zerop.htm" class="symbol">zerop</a> spam-count</span>)</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_zerop.htm" class="symbol">zerop</a> ham-count</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Новой функцией является <code>fisher</code>.  Предполагая, что вы уже имеете функцию
<code>inverse-chi-square</code>, то <code>fisher</code> является достаточно простой.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> fisher <span class="paren2">(<span class="">probs number-of-probs</span>)</span><br/>  <span class="string">"The Fisher computation described by Robinson."</span><br/>  <span class="paren2">(<span class="">inverse-chi-square <br/>   <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> -2 <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_log.htm" class="symbol">log</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_reduce.htm" class="symbol">reduce</a> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> probs</span>)</span></span>)</span></span>)</span><br/>   <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> 2 number-of-probs</span>)</span></span>)</span></span>)</span><br/></pre>

<p>К сожалению, существует небольшая проблема с этой прямолинейной реализацией.  Хотя
использование <code>REDUCE</code> является кратким и идиоматичным способом умножения списка чисел,
но в этом конкретном приложении существует опасность, что произведение будет слишком
маленьким чтобы быть представленным как число с плавающей запятой. В этом случае,
результат будет (FIXME underflow to zero) преобразован в ноль.  И если произведение
вероятностей будет равен нулю, то все будет напрасно, поскольку вызов <code>LOG</code> для нуля
либо выдаст ошибку, либо, в некоторых реализациях, приведет к получению специального
значения "отрицательная бесконечность", которое приведет к тому, что все последующие
вычисления станут бессмысленными.  Это очень нежелательно, поскольку метод Фишера очень
чувствителен к малым значениям (близким к нулю), и при умножении часто возникает
вероятность (FIXME underflow) переполнения снизу.
</p>
<p>К счастью, для того, чтобы избежать данной проблемы вы можете использовать немного знаний
из школьной математики.  Вспомните, что логарифм произведения является суммой логарифмов
соответствующих членов.  Так что вместо умножения вероятностей, и затем вычисления
логарифма, вы можете использовать сумму логарифмов вероятностей.  А поскольку <code>REDUCE</code>
может принимать именованный параметр <code>:key</code>, то вы можете использовать ее для проведения
всех вычислений.  Так что вместо этого кода:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_log.htm" class="symbol">log</a> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_reduce.htm" class="symbol">reduce</a> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> probs</span>)</span></span>)</span><br/></pre>

<p>напишите вот этот:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_reduce.htm" class="symbol">reduce</a> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/a_pl.htm" class="symbol">+</a> probs <span class="keyword">:key</span> #'<a href="http://www.lispworks.com/reference/HyperSpec/Body/f_log.htm" class="symbol">log</a></span>)</span><br/></pre>



</div><div class="chapter" id="&#x41E;&#x431;&#x440;&#x430;&#x442;&#x43D;&#x430;&#x44F; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x44F; Chi-&#x43A;&#x432;&#x430;&#x434;&#x440;&#x430;&#x442;"><h3>Обратная функция Chi-квадрат</h3>

<p>Реализации функции <code>inverse-chi-square</code> приведенная в данном разделе, является
практически прямым переводом на Lisp версии функции написанной Робинсоном на Python.
Точное математическое значение этой функции не рассматривается в этой книге, но вы можете
получить примерное знание о том, что она делает, путем размышления о том, как значения,
которые вы передаете функции <code>fisher</code> будут влиять на результат: большее количество
малых значений, переданных <code>fisher</code>, приведет к меньшему значению произведения
вероятностей.  Логарифм от малого числа приведет к получению отрицательного числа с
большим абсолютным значением, которое после умножения на -2 станет еще большим
положительным числом.  Таким образом, чем больше будет вероятностей с малым значением
переданно <code>fisher</code>, тем большее значение будет передано <code>inverse-chi-square</code>. Конечно,
число используемых вероятностей также влияет на значение переданное
<code>inverse-chi-square</code>.  Поскольку вероятности, по определению имеют значение меньшее или
равное 1, то большее количество вероятностей входящих в произведение будет приводить к
меньшему значению вероятности, и, соответственно, к большему числу, переданному функции
<code>inverse-chi-square</code>.  Так что функция <code>inverse-chi-square</code> должна возвращать низкую
вероятность в тех случаях, когда число Фишера является ненормально большим для числа
вероятностей, которые входят в него.  Следующая функция делает следующее:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> inverse-chi-square <span class="paren2">(<span class="">value degrees-of-freedom</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_assert.htm" class="symbol">assert</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_evenpc.htm" class="symbol">evenp</a> degrees-of-freedom</span>)</span></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_max_m.htm" class="symbol">min</a> <br/>   <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> with m = <span class="paren4">(<span class="">/ value 2</span>)</span><br/>      for i below <span class="paren4">(<span class="">/ degrees-of-freedom 2</span>)</span><br/>      for prob = <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_exp_e.htm" class="symbol">exp</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a__.htm" class="symbol">-</a> m</span>)</span></span>)</span> then <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> prob <span class="paren5">(<span class="">/ m i</span>)</span></span>)</span><br/>      summing prob</span>)</span><br/>   1.0</span>)</span></span>)</span><br/></pre>

<p>Возвращаясь к главе 10, вспоминаем, что функция <code>EXP</code> возводит число <code>e</code> (основание
натурального алгоритма) в заданную степень.  Таким образом, чем больше используемое
значение, тем меньше будет начальное значение <code>prob</code>.  Но это начальное значение затем
будет выравнено вверх, для каждой из степеней свободы, пока <code>m</code> больше чем число
степеней свободы.  Поскольку значение возвращаемое функцией <code>inverse-chi-square</code>
рассматривается как другая вероятность, то важно ограничить значение возвращаемое <code>MIN</code>,
поскольку ошибки округления при умножении и возведении в степень могут привести к тому,
что <code>LOOP</code> вернет сумму которая больше 1.
</p>
</div><div class="chapter" id="&#x422;&#x440;&#x435;&#x43D;&#x438;&#x440;&#x443;&#x435;&#x43C; &#x444;&#x438;&#x43B;&#x44C;&#x442;&#x440;"><h3>Тренируем фильтр</h3>

<p>Поскольку вы написали <code>classify</code> и <code>train</code> таким образом, чтобы они принимали
аргумент-строку, то вы можете работать с ними интерактивно.  Если вы еще это не сделали,
то вы должны переключиться на пакет, в рамках которого вы писали код, путем вычисления
формы <code>IN-PACKAGE</code> в строке ввода, или используя сокращенную форму, реализованную в
SLIME – <code>change-package</code>.  Для использования этой возможности SLIME, наберите запятую,
и затем наберите имя в строке ввода.  Нажатие Tab при наборе имени пакета приведет к
автоматическому дополнению имени, основываясь на именах пакетов, которые знает Lisp.
Теперь вы можете выполнить любую функцию, которая является частью спам-фильтра.
Сначала вы должны убедиться, что база данных свойств пуста.
</p><pre>SPAM&gt; (clear-database)<br/></pre>
<p>Теперь вы можете тренировать фильтр с помощью конкретного текста.
</p><pre>SPAM&gt; (train "Make money fast" 'spam)<br/></pre>
<p>И посмотреть что думает по этому поводу функция классификации.
</p><pre>SPAM&gt; (classify "Make money fast")<br/>SPAM<br/>SPAM&gt; (classify "Want to go to the movies?")<br/>UNSURE<br/></pre>
<p>Хотя вам нужны лишь результаты классификации , было бы хорошо видеть и вычисленную оценку.
Самым простым способом получения обоих значений не затрагивая остальной код, будет
изменение функции <code>classification</code> таким образом, чтобы она возвращала несколько
значений.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> classification <span class="paren2">(<span class="">score</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm" class="symbol">values</a><br/>   <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_cond.htm" class="symbol"><i><span class="symbol">cond</span></i></a><br/>     <span class="paren4">(<span class=""><span class="paren5">(<span class="">&lt;= score <span class="special">*max-ham-score*</span></span>)</span> 'ham</span>)</span><br/>     <span class="paren4">(<span class=""><span class="paren5">(<span class="">&gt;= score <span class="special">*min-spam-score*</span></span>)</span> 'spam</span>)</span><br/>     <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> 'unsure</span>)</span></span>)</span><br/>   score</span>)</span></span>)</span><br/></pre>

<p>Вы можете сделать это изменение и затем перекомпилировать лишь одну функцию.  Поскольку
функция <code>classify</code> возвращает то, что вернула функция <code>classification</code>, то она также
будет возвращать два значения.  Но поскольку, основное возвращаемое значение не
затрагивается, то пользователи данной функции, ожидающие лишь одно значение, никак не
будут затронуты данными изменениями.  Теперь, когда вы будете тестировать <code>classify</code>, вы
сможете увидеть какое значение было передано функции <code>classification</code>.
</p><pre>SPAM&gt; (classify "Make money fast")<br/>SPAM<br/>0.863677101854273D0<br/>SPAM&gt; (classify "Want to go to the movies?")<br/>UNSURE<br/>0.5D0<br/></pre>
<p>И теперь вы сможете увидеть что произойдет, если потренируете фильтр с некоторым
количеством не-спамового текста.
</p><pre>SPAM&gt; (train "Do you have any money for the movies?" 'ham)<br/>1<br/>SPAM&gt; (classify "Make money fast")<br/>SPAM<br/>0.7685351219857626D0<br/></pre>
<p>Этот текст все равно считается спамом, но с меньшей оценкой, поскольку слово <code>money</code>
входил в не-спамовый текст.
</p><pre>SPAM&gt; (classify "Want to go to the movies?")<br/>HAM<br/>0.17482223132078922D0<br/></pre>
<p>А сейчас этот текст правильно распознается как не-спам, из-за наличия в нем слова
<code>movies</code>, которое сейчас считается не-спамовым свойством.
</p>
<p>Однако, вряд ли вы хотите тренировать фильтр вручную.  Что вам действительно
нужно – простой способ указать на пачку файлов и провести обучение фильтра на них.  И
если вы хотите проверить, насколько хорошо фильтр работает, вы можете использовать его для
классификации другой пачки файлов заранее известного типа, и проанализировать результаты.  Так
что последним кусочком кода, который вы напишете в данной главе, будет набор тестов для фильтра,
которые будут тестировать его на кучке заданных сообщений известных типов, используя часть 
сообщений для обучения, а затем измеряя точность с которой фильтр классифицирует
оставшуюся часть.
</p>

</div><div class="chapter" id="&#x422;&#x435;&#x441;&#x442;&#x438;&#x440;&#x443;&#x435;&#x43C; &#x444;&#x438;&#x43B;&#x44C;&#x442;&#x440;"><h3>Тестируем фильтр</h3>

<p>Для тестирования фильтра вам нужны наборы сообщений известных типов.  Вы можете
использовать сообщения из вашего почтового ящика, или вы можете взять один из наборов
сообщений, размещенных в Интернете.  Например, набор сообщений SpamAssassin<a class="fn_top" id="fnt__12" href="practical-a-spam-filter#fn__12">12)</a> содержит несколько тысяч
сообщений, классифицированных вручную на спам, явный не-спам и не-спам, который тяжело
отличить от спама.  Чтобы сделать пользование тестами более простым, вы можете определить
вспомогательные функции, которые управляются массивом пар имя файла/тип.  Вы можете
определить функцию, которая принимает имя файла и тип, и добавляет их в набор следующим
образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> add-file-to-corpus <span class="paren2">(<span class="">filename <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> corpus</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_vec_ps.htm" class="symbol">vector-push-extend</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> filename <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a></span>)</span> corpus</span>)</span></span>)</span><br/></pre>

<p>Значение <code>corpus</code> (набор) должно быть изменяемым вектором с указателем заполнения.  Например, вы
можете создать новый набор следующим образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*corpus*</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ar.htm" class="symbol">make-array</a> 1000 <span class="keyword">:adjustable</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="keyword">:fill-pointer</span> 0</span>)</span></span>)</span><br/></pre>

<p>Если у вас спам и не спам уже находятся в разных каталогах, то вы можете захотеть добавить
все файлы в каталоге используя один и тот же тип.  Вот функция, которая использует функцию
<code>list-directory</code> из главы 15, чтобы выполнить эту задачу:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> add-directory-to-corpus <span class="paren2">(<span class="">dir <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> corpus</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_dolist.htm" class="symbol">dolist</a> <span class="paren3">(<span class="">filename <span class="paren4">(<span class="">list-directory dir</span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">add-file-to-corpus filename <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> corpus</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Например, предположим, что у вас есть каталог <code>mail</code>, содержащий два подкаталога,
<code>spam</code> и <code>ham</code>, каждый содержащий сообщения соответствующего типа (спам и не-спам); вы
можете добавить все файлы из этих двух каталогов к набору, хранящемуся в <code>*corpus*</code>,
используя следующие команды:
</p><pre>SPAM&gt; (add-directory-to-corpus "mail/spam/" 'spam *corpus*)<br/>NIL<br/>SPAM&gt; (add-directory-to-corpus "mail/ham/" 'ham *corpus*)<br/>NIL<br/></pre>
<p>Теперь вам нужна функция для проверки классификатора.  Основная стратегия работы будет
заключаться в выборе произвольной части набора сообщений для обучения фильтра, а затем
тестирования работы путем классификации оставшейся части набора, сравнивая классификацию,
возвращенную нашей функцией с известными результатами.  Главной вещью которую вы захотите
узнать является то, насколько правильно работает классификатор – сколько процентов
сообщений классифицировано правильно.  Но вы вероятно также будете заинтересованы в
информации о том, какие сообщения были неправильно классифицированы и в чем заключается
ошибка – больше неправильных пропусков или фальшивых срабатываний?  Для того, чтобы
сделать более простым выполнение различных видов анализа поведения классификатора, вы
должны определить функции тестирования, для построения списка вычисленных значений,
которые вы затем сможете проанализировать как захотите.
</p>
<p>Основная функция тестирования будет выглядеть следующим образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> test-classifier <span class="paren2">(<span class="">corpus testing-fraction</span>)</span><br/>  <span class="paren2">(<span class="">clear-database</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let*</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">shuffled <span class="paren5">(<span class="">shuffle-vector corpus</span>)</span></span>)</span><br/>         <span class="paren4">(<span class="">size <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> corpus</span>)</span></span>)</span><br/>         <span class="paren4">(<span class="">train-on <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_floorc.htm" class="symbol">floor</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> size <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a__.htm" class="symbol">-</a> 1 testing-fraction</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">train-from-corpus shuffled <span class="keyword">:start</span> 0 <span class="keyword">:end</span> train-on</span>)</span><br/>    <span class="paren3">(<span class="">test-from-corpus shuffled <span class="keyword">:start</span> train-on</span>)</span></span>)</span></span>)</span><br/></pre>

<p>Эта функция начинает работу с очистки базы свойств.<a class="fn_top" id="fnt__13" href="practical-a-spam-filter#fn__13">13)</a>  Затем она перемешивает набор
писем используя функцию, которую мы реализуем далее, и определяет, на основе параметра
<code>testing-fraction</code>, сколько значений мы будем использовать для обучения и сколько мы
оставим для тестирования.  Две вспомогательные функции: <code>train-from-corpus</code> и
<code>test-from-corpus</code> будут принимать именованные параметры <code>:start</code> и <code>:end</code>, что
позволит работать над частью заданного набора сообщений.
</p>
<p>Функция <code>train-from-corpus</code> достаточно проста – это цикл по соответствующей части
набора сообщений с использованием <code>DESTRUCTURING-BIND</code> для выделения имени файла и типа
из списка, находящегося в каждом элементе, и затем передача данных параметров для
обучения.  Поскольку некоторые почтовые сообщения, особенно такие, которые имеют вложения,
имеют достаточно большой размер, то вы должны ограничить количество знаков, которое будет
выделяться из сообщения.  Функция будет получать текст с помощью функции
<code>start-of-file</code>, которую мы реализуем далее, которая будет принимать в качестве
параметров имя файла и максимальное количество возвращаемых знаков.  <code>train-from-corpus</code>
выглядит примерно так:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defpar.htm" class="symbol"><i><span class="symbol">defparameter</span></i></a> <span class="special">*max-chars*</span> <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> 10 1024</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> train-from-corpus <span class="paren2">(<span class="">corpus &amp;key <span class="paren3">(<span class="">start 0</span>)</span> end</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for idx from start below <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> end <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> corpus</span>)</span></span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a><br/>        <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_destru.htm" class="symbol">destructuring-bind</a> <span class="paren4">(<span class="">file <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a></span>)</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_aref.htm" class="symbol">aref</a> corpus idx</span>)</span><br/>          <span class="paren4">(<span class="">train <span class="paren5">(<span class="">start-of-file file <span class="special">*max-chars*</span></span>)</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Функция <code>test-from-corpus</code> выглядит аналогично, за тем исключением, что вы захотите
возвращать список, содержащий результаты каждой из операции классификации, так что вы в
последующем сможете проанализировать эти результаты.  Так что вы должны захватывать и
определенный тип сообщения, и вычисленное значение, возвращенные функцией <code>classify</code>, и
собирать эти данные в список состоящий из имени файла, известного типа, типа,
возвращенного функцией <code>classify</code> и вычисленного значения.  Чтобы сделать результаты
более понятными для человека, вы можете включить в список именованные параметры,
описывающие соответствующие значения.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> test-from-corpus <span class="paren2">(<span class="">corpus &amp;key <span class="paren3">(<span class="">start 0</span>)</span> end</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for idx from start below <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm" class="symbol">or</a> end <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> corpus</span>)</span></span>)</span> collect<br/>        <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_destru.htm" class="symbol">destructuring-bind</a> <span class="paren4">(<span class="">file <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a></span>)</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_aref.htm" class="symbol">aref</a> corpus idx</span>)</span><br/>          <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_multip.htm" class="symbol">multiple-value-bind</a> <span class="paren5">(<span class="">classification score</span>)</span><br/>              <span class="paren5">(<span class="">classify <span class="paren6">(<span class="">start-of-file file <span class="special">*max-chars*</span></span>)</span></span>)</span><br/>            <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_list.htm" class="symbol">list</a> <br/>             <span class="keyword">:file</span> file<br/>             <span class="keyword">:type</span> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a><br/>             <span class="keyword">:classification</span> classification<br/>             <span class="keyword">:score</span> score</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>


</div><div class="chapter" id="&#x41D;&#x430;&#x431;&#x43E;&#x440; &#x432;&#x441;&#x43F;&#x43E;&#x43C;&#x43E;&#x433;&#x430;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x44B;&#x445; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x439;"><h3>Набор вспомогательных функций</h3>

<p>Для окончания реализации функции <code>test-classifier</code>, вам необходимо написать две
вспомогательных функции, которые напрямую не относятся к фильтрации спама –
<code>shuffle-vector</code> и <code>start-of-file</code>.
</p>
<p>Простым и эффективным способом реализации <code>shuffle-vector</code> будет использование алгоритма
Фишера-Ятеса (Fisher-Yates).<a class="fn_top" id="fnt__14" href="practical-a-spam-filter#fn__14">14)</a>  Вы
можете начать с реализации функции <code>nshuffle-vector</code>, которая перемешивает вектор,
используя то же самое хранилище.  Имя функции соответствует тому же самому соглашению по
именованию деструктивных функций, таких как <code>NCONC</code> и <code>NREVERSE</code>.  Она выглядит
следующим образом:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> nshuffle-vector <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_vector.htm" class="symbol">vector</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for idx downfrom <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1-</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_vector.htm" class="symbol">vector</a></span>)</span></span>)</span> to 1<br/>        for other = <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_random.htm" class="symbol">random</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_1pl_1_.htm" class="symbol">1+</a> idx</span>)</span></span>)</span><br/>        <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_when_.htm" class="symbol">unless</a> <span class="paren4">(<span class="">= idx other</span>)</span><br/>             <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_rotate.htm" class="symbol">rotatef</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_aref.htm" class="symbol">aref</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_vector.htm" class="symbol">vector</a> idx</span>)</span> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_aref.htm" class="symbol">aref</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_vector.htm" class="symbol">vector</a> other</span>)</span></span>)</span></span>)</span></span>)</span><br/>  <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_vector.htm" class="symbol">vector</a></span>)</span><br/></pre>

<p>Недеструктивная версия просто делает копию оригинального вектора, и передает его в
деструктивную версию.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> shuffle-vector <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_vector.htm" class="symbol">vector</a></span>)</span><br/>  <span class="paren2">(<span class="">nshuffle-vector <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_cp_seq.htm" class="symbol">copy-seq</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_vector.htm" class="symbol">vector</a></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Другая вспомогательная функция – <code>start-of-file</code>, также достаточно проста.  Наиболее
эффективным способом считывания содержимого файла в память, будет создание массива
соответствующего размера и использования функции <code>READ-SEQUENCE</code> для его заполнения.
Так что вы можете создать массив знаков с размером, равным размеру файла, или
максимальному количеству считываемых знаков, в зависимости от того, какое из значений
будет меньше.  К сожалению, как я упоминал в главе 14, функция <code>FILE-LENGTH</code> не особенно
хорошо работает для текстовых потоков, поскольку количество знаков в файле может зависеть
от используемой кодировки знаков и конкретного текста.  В наихудшем случае, единственным
способом точного определения количества знаков в файле, является считывание всего файла.
Таким образом, неясно что вернет <code>FILE-LENGTH</code> для текстового потока; в большинстве
реализаций <code>FILE-LENGTH</code> всегда возвращает число байт в файле, которое может быть
больше, чем число знаков, которое может быть прочитано из файла.
</p>
<p>Однако, <code>READ-SEQUENCE</code> возвращает количество прочитанных знаков.  Так что вы можете
попробовать считать количество знаков, определенное с помощью <code>FILE-LENGTH</code>, и вернуть
подстроку, если количество считанных знаков было меньше.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> start-of-file <span class="paren2">(<span class="">file max-chars</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_open.htm" class="symbol"><i><span class="symbol">with-open-file</span></i></a> <span class="paren3">(<span class="">in file</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let*</span></i></a> <span class="paren4">(<span class=""><span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_max_m.htm" class="symbol">min</a> <span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_file_l.htm" class="symbol">file-length</a> in</span>)</span> max-chars</span>)</span></span>)</span><br/>           <span class="paren5">(<span class="">text <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_mk_stg.htm" class="symbol">make-string</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a></span>)</span></span>)</span><br/>           <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rd_rd.htm" class="symbol">read</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rd_seq.htm" class="symbol">read-sequence</a> text in</span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_if.htm" class="symbol"><i><span class="symbol">if</span></i></a> <span class="paren5">(<span class="">&lt; <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rd_rd.htm" class="symbol">read</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_length.htm" class="symbol">length</a></span>)</span><br/>        <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_subseq.htm" class="symbol">subseq</a> text 0 <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rd_rd.htm" class="symbol">read</a></span>)</span><br/>        text</span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>


</div><div class="chapter" id="&#x410;&#x43D;&#x430;&#x43B;&#x438;&#x437; &#x440;&#x435;&#x437;&#x443;&#x43B;&#x44C;&#x442;&#x430;&#x442;&#x43E;&#x432;"><h3>Анализ результатов</h3>

<p>Теперь вы готовы к написанию кода для анализа результатов, сгенерированных
<code>test-classifier</code>.  Мы должны вспомнить, что <code>test-classifier</code> возвращает список,
возвращенный <code>test-from-corpus</code>, в котором каждый элемент является списком свойств
(plist), описывающим результаты классификации одного файла.  Этот список содержит имя
файла, известный тип, результат классификации и вычисленное значение, возвращенное
функцией <code>classify</code>.  Первой частью нашего аналитического кода, который вы должны
написать, является функция, которая будет возвращать признак того, была ли классфикация
правильной, или нет (пропущенный спам или не спам, и т.п.).  Вы можете использовать
<code>DESTRUCTURING-BIND</code> для получения элементов <code>:type</code> и <code>:classification</code> списка
результатов (используя опцию <code>&amp;allow-other-keys</code> для того, чтобы <code>DESTRUCTURING-BIND</code>
игнорировал другие пары имя-знаение), а затем используя вложенные выражения <code>ECASE</code> для
преобразования отдельных сочетаний в конкретный символ.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> result-type <span class="paren2">(<span class="">result</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_destru.htm" class="symbol">destructuring-bind</a> <span class="paren3">(<span class="">&amp;key <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a> classification &amp;allow-other-keys</span>)</span> result<br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a><br/>      <span class="paren4">(<span class="">ham<br/>       <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> classification<br/>         <span class="paren6">(<span class="">ham 'correct</span>)</span><br/>         <span class="paren6">(<span class="">spam 'false-positive</span>)</span><br/>         <span class="paren6">(<span class="">unsure 'missed-ham</span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class="">spam<br/>       <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> classification<br/>         <span class="paren6">(<span class="">ham 'false-negative</span>)</span><br/>         <span class="paren6">(<span class="">spam 'correct</span>)</span><br/>         <span class="paren6">(<span class="">unsure 'missed-spam</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Вы можете проверить эту функцию в интерпретаторе.
</p><pre>SPAM&gt; (result-type '(:FILE #p"foo" :type ham :classification ham :score 0))<br/>CORRECT<br/>SPAM&gt; (result-type '(:FILE #p"foo" :type spam :classification spam :score 0))<br/>CORRECT<br/>SPAM&gt; (result-type '(:FILE #p"foo" :type ham :classification spam :score 0))<br/>FALSE-POSITIVE<br/>SPAM&gt; (result-type '(:FILE #p"foo" :type spam :classification ham :score 0))<br/>FALSE-NEGATIVE<br/>SPAM&gt; (result-type '(:FILE #p"foo" :type ham :classification unsure :score 0))<br/>MISSED-HAM<br/>SPAM&gt; (result-type '(:FILE #p"foo" :type spam :classification unsure :score 0))<br/>MISSED-SPAM<br/></pre>
<p>Наличие этой функции делает анализ результатов <code>test-classifier</code> более простым.
Например, вы можете начать с определения следующих функций-предикатов для каждого типа
результатов.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> false-positive-p <span class="paren2">(<span class="">result</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> <span class="paren3">(<span class="">result-type result</span>)</span> 'false-positive</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> false-negative-p <span class="paren2">(<span class="">result</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> <span class="paren3">(<span class="">result-type result</span>)</span> 'false-negative</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> missed-ham-p <span class="paren2">(<span class="">result</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> <span class="paren3">(<span class="">result-type result</span>)</span> 'missed-ham</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> missed-spam-p <span class="paren2">(<span class="">result</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> <span class="paren3">(<span class="">result-type result</span>)</span> 'missed-spam</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> correct-p <span class="paren2">(<span class="">result</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_eql.htm" class="symbol">eql</a> <span class="paren3">(<span class="">result-type result</span>)</span> 'correct</span>)</span></span>)</span><br/></pre>

<p>С помощью этих функций, вы можете просто использовать функции работы со списками и
последовательностями, которые обсуждались в главе 11, для того чтобы выделить и подсчитать
разные типы результатов.
</p><pre>SPAM&gt; (count-if #'false-positive-p *results*)<br/>6<br/>SPAM&gt; (remove-if-not #'false-positive-p *results*)<br/>((:FILE #p"ham/5349" :TYPE HAM :CLASSIFICATION SPAM :SCORE 0.9999983107355541d0)<br/> (:FILE #p"ham/2746" :TYPE HAM :CLASSIFICATION SPAM :SCORE 0.6286468956619795d0)<br/> (:FILE #p"ham/3427" :TYPE HAM :CLASSIFICATION SPAM :SCORE 0.9833753501352983d0)<br/> (:FILE #p"ham/7785" :TYPE HAM :CLASSIFICATION SPAM :SCORE 0.9542788587998488d0)<br/> (:FILE #p"ham/1728" :TYPE HAM :CLASSIFICATION SPAM :SCORE 0.684339162891261d0)<br/> (:FILE #p"ham/10581" :TYPE HAM :CLASSIFICATION SPAM :SCORE 0.9999924537959615d0))<br/></pre>
<p>Вы также можете использовать символы, возвращенные <code>result-type</code> в качестве ключей
хэш-таблицы или ассоциативного списка (alist).  Например, вы можете написать функцию,
которая будет печатать итоговые результаты и процентное соотношение каждого типа в
результате, используя ассоциативный список, который отображает каждый из типов в
соответствующий счетчик.
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> analyze-results <span class="paren2">(<span class="">results</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let*</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">keys '<span class="paren5">(<span class="">total correct false-positive <br/>                 false-negative missed-ham missed-spam</span>)</span></span>)</span><br/>         <span class="paren4">(<span class="">counts <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> for x in keys collect <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_cons.htm" class="symbol">cons</a> x 0</span>)</span></span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_dolist.htm" class="symbol">dolist</a> <span class="paren4">(<span class="">item results</span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_car_c.htm" class="symbol">cdr</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_assocc.htm" class="symbol">assoc</a> 'total counts</span>)</span></span>)</span></span>)</span><br/>      <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_car_c.htm" class="symbol">cdr</a> <span class="paren6">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_assocc.htm" class="symbol">assoc</a> <span class="paren1">(<span class="">result-type item</span>)</span> counts</span>)</span></span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_loop.htm" class="symbol"><i><span class="symbol">loop</span></i></a> with total = <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_car_c.htm" class="symbol">cdr</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_assocc.htm" class="symbol">assoc</a> 'total counts</span>)</span></span>)</span><br/>          for <span class="paren4">(<span class="">label . <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_countc.htm" class="symbol">count</a></span>)</span> in counts<br/>          <a href="http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm" class="symbol">do</a> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"~&amp;~@(~a~):~20t~5d~,5t: ~6,2f%~%"</span><br/>                     label <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_countc.htm" class="symbol">count</a> <span class="paren5">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/a_st.htm" class="symbol">*</a> 100 <span class="paren6">(<span class="">/ <a href="http://www.lispworks.com/reference/HyperSpec/Body/f_countc.htm" class="symbol">count</a> total</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

<p>Эта функция выдаст следующий результат, если ей передать список результатов, созданный с
помощью <code>test-classifier</code>:
</p><pre>SPAM&gt; (analyze-results *results*)<br/>Total:               3761 : 100.00%<br/>Correct:             3689 :  98.09%<br/>False-positive:         4 :   0.11%<br/>False-negative:         9 :   0.24%<br/>Missed-ham:            19 :   0.51%<br/>Missed-spam:           40 :   1.06%<br/>NIL<br/></pre>
<p>И в качестве заключительного этапа анализа, вы можете захотеть взглянуть на то, почему
отдельное сообщение было классифицировано таким образом.  Следующая функция сделает это:
</p>
<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> explain-classification <span class="paren2">(<span class="">file</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm" class="symbol"><i><span class="symbol">let*</span></i></a> <span class="paren3">(<span class=""><span class="paren4">(<span class="">text <span class="paren5">(<span class="">start-of-file file <span class="special">*max-chars*</span></span>)</span></span>)</span><br/>         <span class="paren4">(<span class="">features <span class="paren5">(<span class="">extract-features text</span>)</span></span>)</span><br/>         <span class="paren4">(<span class="">score <span class="paren5">(<span class="">score features</span>)</span></span>)</span><br/>         <span class="paren4">(<span class="">classification <span class="paren5">(<span class="">classification score</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class="">show-summary file text classification score</span>)</span><br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_dolist.htm" class="symbol">dolist</a> <span class="paren4">(<span class="">feature <span class="paren5">(<span class="">sorted-interesting features</span>)</span></span>)</span><br/>      <span class="paren4">(<span class="">show-feature feature</span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> show-summary <span class="paren2">(<span class="">file text classification score</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"~&amp;~a"</span> file</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"~2%~a~2%"</span> text</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"Classified as ~a with score of ~,5f~%"</span> classification score</span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> show-feature <span class="paren2">(<span class="">feature</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_w_slts.htm" class="symbol"><i><span class="symbol">with-slots</span></i></a> <span class="paren3">(<span class="">word ham-count spam-count</span>)</span> feature<br/>    <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_format.htm" class="symbol">format</a><br/>     <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm" class="symbol">t</a> <span class="string">"~&amp;~2t~a~30thams: ~5d; spams: ~5d;~,10tprob: ~,f~%"</span><br/>     word ham-count spam-count <span class="paren4">(<span class="">bayesian-spam-probability feature</span>)</span></span>)</span></span>)</span></span>)</span><br/><br/><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> sorted-interesting <span class="paren2">(<span class="">features</span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_sort_.htm" class="symbol">sort</a> <span class="paren3">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/f_rm_rm.htm" class="symbol">remove-if</a> #'untrained-p features</span>)</span> #'&lt; <span class="keyword">:key</span> #'bayesian-spam-probability</span>)</span></span>)</span><br/></pre>


</div><div class="chapter" id="&#x427;&#x442;&#x43E; &#x434;&#x430;&#x43B;&#x435;&#x435;?"><h3>Что далее?</h3>

<p>Конечно, вы могли бы сделать больше реализуя эту задачу.  Для превращения написанного кода
в полноценное приложение для фильтрации спама, вам понадобилось бы найти способ интеграции его в
вашу почтовую систему.  Один из способов, который можно было применить для того, чтобы
можно было использовать любой почтовый клиенте, является написание кода, который бы
позволял выполнять данное приложение как прокси для POP3 – протокола, который большинство
клиентов используют для скачивания почты с почтовых серверов.  Такая прокси могла бы
забирать почту с настоящего POP3-сервера, и раздавать ее вашим почтовым клиентам после
того, как сообщения либо будут помечены как спам с помощью дополнительных заголовков, так
что фильтры ваших почтовых клиентов смогут распознать такие сообщения, либо будут отложены
в сторону.  Конечно, вам необходим способ для общения с фильтром на тему неправильной
классификации сообщений – поскольку вы установите приложение как сервер, то вы также
должны будете предоставить Web-интерфейс для работы с ним.  Я буду обсуждать вопросы
построения Web-интерфейсов в главе 26, и мы создадим его, для другого приложения, в главе
29.
</p>
<p>Или вы можете захотеть улучшить основы классификации – наиболее вероятным местом для
начала работы будет улучшение работы  <code>extract-features</code>.  В частности, вы должны
сделать процедуру разбивки на слова более осведомленной о структуре почтового сообщения –
вы можете выделить различные виды свойств для слов, появляющихся в теле письма, и для тех,
которые появляются в заголовках сообщения.  И конечно, вы можете декодировать различные
виды кодировок сообщений, таких как  base64 и quoted printable, поскольку спаммеры часто
пытаются изменить свои сообщения используя эти кодировки.
</p>
<p>Но я оставлю эти улучшения на ваше усмотрение.  Теперь вы готовы продолжить ваш путь к
построению потокового MP3-сервера, начав с написания библиотеки для разбора двоичных
файлов.
</p></div></div><div class="footnotes"><div><a class="fn_bot" id="fn__1" href="practical-a-spam-filter#fnt__1">1)</a>Она доступна по адресу
<a href="http://www.paulgraham.com/spam.html">http://www.paulgraham.com/spam.html</a> и в книге "Hackers &amp; Painters: Big Ideas from the
Computer Age" (O'Reilly, 2004</div><div><a class="fn_bot" id="fn__2" href="practical-a-spam-filter#fnt__2">2)</a>Есть некоторые возражения на тему, действительно
ли подход, предложенный Graham, является "Байесовским".  Однако имя уже стало привычным и
оно становится синонимом для названия "ститистический", когда речь идет о спам-фильтрах.</div><div><a class="fn_bot" id="fn__3" href="practical-a-spam-filter#fnt__3">3)</a>Плохой практикой является
распространение версии этого приложения, используя пакет, имя которого начинается с
<code>com.gigamonkeys</code>, поскольку вы не управляете данным доменом.</div><div><a class="fn_bot" id="fn__4" href="practical-a-spam-filter#fnt__4">4)</a>Библиотека <code>CL-PPCRE</code> включена в исходные тексты для книги, доступные с сайта,
посвященного книге.  Или вы можете скачать ее с сайта разработчика по адресу
<a href="http://www.weitz.de/cl-ppcre/.">http://www.weitz.de/cl-ppcre/.</a></div><div><a class="fn_bot" id="fn__5" href="practical-a-spam-filter#fnt__5">5)</a>Основная причина использования  <code>PRINT-UNREADABLE-OBJECT</code>
заключается в том, что он берет на себя заботу о выдаче ошибки, если кто-то пытается
напечатать ваш объект в форме, подходящей для последующего считывания, например при
использовании директивы  <code>~S</code> функции <code>FORMAT</code>.</div><div><a class="fn_bot" id="fn__6" href="practical-a-spam-filter#fnt__6">6)</a><code>PRINT-UNREADABLE-OBJECT</code> также выдает ошибку,
если он используется в то время, когда переменная контроля печати <code>*PRINT-READABLY*</code>
имеет истинное значение.  Так что метод <code>PRINT-OBJECT</code> состоящий только из
<code>PRINT-UNREADABLE-OBJECT</code> будет корректно реализовывать поведение <code>PRINT-OBJECT</code> с
учетом состояния переменной <code>*PRINT-READABLY*</code>.</div><div><a class="fn_bot" id="fn__7" href="practical-a-spam-filter#fnt__7">7)</a>Если вы позже решите, что вам нужны разные версии
<code>increment-feature</code> для разных классов, то вы можете переопределить <code>increment-count</code>
как обобщенную функцию, а текущую реализацию объявить методом, специализированным для
<code>word-feature</code>.</div><div><a class="fn_bot" id="fn__8" href="practical-a-spam-filter#fnt__8">8)</a>С технической
точки зрения, ключи сравнения в выражениях <code>CASE</code> или <code>ECASE</code> рассматриваются как
указатели списков, которые могут обозначать списки объектов.  Отдельный объект, не
являющийся списком, рассматривается как указатель списка, состоящий только из одного
объекта, в то время, как список обозначает сам себя.  Таким образом, каждое выражение
может иметь несколько ключей сравнения; <code>CASE</code> и <code>ECASE</code> будут выбирать выражения, чей
список ключей содержит нужное значение.  Например, если вы хотите сделать <code>good</code>
синонимом для <code>ham</code>, а <code>bad</code> – синонимом для <code>spam</code>, то вы можете записать
<code>increment-count</code> в следующем виде:

<pre class="code"><span class="paren1">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_defun.htm" class="symbol"><i><span class="symbol">defun</span></i></a> increment-count <span class="paren2">(<span class="">feature <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a></span>)</span><br/>  <span class="paren2">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_case_.htm" class="symbol">ecase</a> <a href="http://www.lispworks.com/reference/HyperSpec/Body/a_type.htm" class="symbol">type</a><br/>    <span class="paren3">(<span class=""><span class="paren4">(<span class="">ham good</span>)</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> <span class="paren5">(<span class="">ham-count feature</span>)</span></span>)</span></span>)</span><br/>    <span class="paren3">(<span class=""><span class="paren4">(<span class="">spam bad</span>)</span> <span class="paren4">(<span class=""><a href="http://www.lispworks.com/reference/HyperSpec/Body/m_incf_.htm" class="symbol">incf</a> <span class="paren5">(<span class="">spam-count feature</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span><br/></pre>

</div><div><a class="fn_bot" id="fn__9" href="practical-a-spam-filter#fnt__9">9)</a>Говоря о математических нюансах,
закоренелые статистики могут быть оскорблены легкомысленным использованием слова
"вероятность" в данной главе.  Однако, поскольку даже профессора (FIXME pros), которые
делятся на байезианцев и вероятностников, не могут прийти к согласию о значении термина
вероятность, то я не буду об этом беспокоиться.  Это книга о программировании, а не о
статистике.</div><div><a class="fn_bot" id="fn__10" href="practical-a-spam-filter#fnt__10">10)</a>К статьям
Robinson, которые относятся к теме данной главы, можно отнести "A Statistical Approach to
the Spam Problem" (опубликованная в Linux Journal и доступная с
<a href="http://www.linuxjournal.com/article.php?sid">http://www.linuxjournal.com/article.php?sid</a>=6467, а также в более коротком варианте, в его
блоге по адресу <a href="http://radio.weblogs.com/0101454/stories/2002/09/16/spamDetection.html">http://radio.weblogs.com/0101454/stories/2002/09/16/spamDetection.html</a>) и
"Why Chi?  Motivations for the Use of Fisher's Inverse Chi-Square Procedure in Spam
Classification" (доступная по адресу <a href="http://garyrob.blogs.com/whychi93.pdf">http://garyrob.blogs.com/whychi93.pdf</a>).  Другой
полезной статьей может быть "Handling Redundancy in Email Token Probabilities" (доступна с
<a href="http://garyrob.blogs.com//handlingtokenredundancy94.pdf">http://garyrob.blogs.com//handlingtokenredundancy94.pdf</a>).  Архив списка рассылки проекта
SpamBayes (<a href="http://spambayes.sourceforge.net/">http://spambayes.sourceforge.net/</a>) также содержит большое количество полезной
информации об алгоритмах и подходах к тестированию спам-фильтров.</div><div><a class="fn_bot" id="fn__11" href="practical-a-spam-filter#fnt__11">11)</a>Техники, которые комбинируют не-независиммые вероятности таким образом, как
будто они являются независимыми, называются "наивными Байесовскими".  Оригинальное
предложение Graham в действительности было наивным Байевским классификатором, с
использованием некоторых "эмпирически выведенных" констант.</div><div><a class="fn_bot" id="fn__12" href="practical-a-spam-filter#fnt__12">12)</a>Несколько
наборов спамовых сообщений, включая набор сообщений от SpamAssassin можно найти по адресу
<a href="http://nexp.cs.pdx.edu/">http://nexp.cs.pdx.edu/</a>~psam/cgi-bin/view/PSAM/CorpusSets.</div><div><a class="fn_bot" id="fn__13" href="practical-a-spam-filter#fnt__13">13)</a>Если вы хотите проводить тестирование
не затрагивая существующую базу свойств, то вы должны связать <code>*feature-database*</code>,
<code>*total-spams*</code> и <code>*total-hams*</code> используя <code>LET</code>, но вы не будете иметь возможности
просмотра этих баз после окончания работы данной функции, до тех пор, пока вы не будете
возвращать эти значения как результат работы функции.</div><div><a class="fn_bot" id="fn__14" href="practical-a-spam-filter#fnt__14">14)</a>Этот алгоритм назван в честь Фишера, который предложил
метод, используемый для комбинации вероятностей, и Франка Ятеса, его соавтора по книге  "Statistical Tables
for Biological, Agricultural and Medical Research" (Oliver &amp; Boyd, 1938) в которой,
согласно высказыванию Кнута, они впервые опубликовали описание данного алгоритма.</div></div></div> <table width="100%"> <tbody> <tr> <td width="20%" align="left"> <a href="loop-for-black-belts">Предыдущая</a> </td> <td width="60%" align="center"> <a href="index.html">Оглавление</a> </td> <td width="20%" align="right"> <a href="practical-parsing-binary-files">Следующая</a> </td> </tr> </tbody> </table> </div> <div class="bottom">@2009-2013 lisper.ru</div> 
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-7734690-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
 </body> </html>