<html><head>
<meta http-equiv="content-type" content="text/html; charset=KOI8-R">
<!-- This HTML file has been created by texi2html 1.54
     from ../texi/make.texinfo on 19 July 2000 -->

<title>GNU make</title>

</head>
<body>
<h1>GNU Make</h1>

<h2>Программа управления компиляцией</h2>

<h2>GNU <code>make</code> Версия 3.79</h2>
<h2>Апрель 2000</h2>

<address>Richard M. Stallman и Roland McGrath, перевод (C) Владимир Игнатов, 2000</address>

<p>
Версия перевода 0.1 

</p><p> Английский оригинал этого текста находится  
    <a href="http://www.gnu.org/manual/make-3.79.1/make.html">здесь</a>.
</p><p> Оригинал перевода находится
    <a href="http://www.geocities.com/SiliconValley/Office/6533">на моей домашней страничке</a>.

</p><p>
</p><p></p><hr><p>

</p><h1>Оглавление</h1>
<ul>
<li><a name="TOC1" href="#SEC1">Назначение программы <code>make</code></a>
<ul>
<li><a name="TOC2" href="#SEC2">Как читать данное руководство</a>
</li><li><a name="TOC3" href="#SEC3">Ошибки и проблемы</a>
</li></ul>
</li><li><a name="TOC4" href="#SEC4">Знакомство с make-файлами (makefiles)</a>
<ul>
<li><a name="TOC5" href="#SEC5">Как выглядят правила (rules)</a>
</li><li><a name="TOC6" href="#SEC6">Пример простого make-файла</a>
</li><li><a name="TOC7" href="#SEC7">Как <code>make</code> обрабатывает make-файл</a>
</li><li><a name="TOC8" href="#SEC8">Упрощение make-файла с помощью переменных</a>
</li><li><a name="TOC9" href="#SEC9">Неявные правила упрощают make-файл</a>
</li><li><a name="TOC10" href="#SEC10">Другой стиль написания make-файлов</a>
</li><li><a name="TOC11" href="#SEC11">Правило для очистки каталога</a>
</li></ul>
</li><li><a name="TOC12" href="#SEC12">Создание make-файлов</a>
<ul>
<li><a name="TOC13" href="#SEC13">Из чего состоят make-файлы</a>
</li><li><a name="TOC14" href="#SEC14">Имена make-файлов</a>
</li><li><a name="TOC15" href="#SEC15">Подключение других make-файлов</a>
</li><li><a name="TOC16" href="#SEC16">Переменная <code>MAKEFILES</code></a>
</li><li><a name="TOC17" href="#SEC17">Автоматическое обновление make-файлов</a>
</li><li><a name="TOC18" href="#SEC18">"Перекрытие" (overriding) части make-файла</a>
</li><li><a name="TOC19" href="#SEC19">Как <code>make</code> читает make-файл</a>
</li></ul>
</li><li><a name="TOC20" href="#SEC20">Составление правил (rules)</a>
<ul>
<li><a name="TOC21" href="#SEC21">Синтаксис правил</a>
</li><li><a name="TOC22" href="#SEC22">Использование шаблонных символов (wildcard characters) в именах файлов</a>
<ul>
<li><a name="TOC23" href="#SEC23">Примеры шаблонных имен</a>
</li><li><a name="TOC24" href="#SEC24">Проблемы при использовании шаблонных имен</a>
</li><li><a name="TOC25" href="#SEC25">Функция <code>wildcard</code></a>
</li></ul>
</li><li><a name="TOC26" href="#SEC26">Поиск пререквизитов по каталогам</a>
<ul>
<li><a name="TOC27" href="#SEC27">Переменная <code>VPATH</code>: список каталогов для поиска пререквизитов</a>
</li><li><a name="TOC28" href="#SEC28">Директива <code>vpath</code></a>
</li><li><a name="TOC29" href="#SEC29">Процедура поиска по каталогам</a>
</li><li><a name="TOC30" href="#SEC30">Написание команд с учетом поиска по каталогам</a>
</li><li><a name="TOC31" href="#SEC31">Поиск в каталогах и неявные правила</a>
</li><li><a name="TOC32" href="#SEC32">Поиск в каталогах для подключаемых библиотек</a>
</li></ul>
</li><li><a name="TOC33" href="#SEC33">Абстрактные цели (phony targets)</a>
</li><li><a name="TOC34" href="#SEC34">Правила без команд и пререквизитов</a>
</li><li><a name="TOC35" href="#SEC35">Использование пустых целей (empty target files) для фиксации событий</a>
</li><li><a name="TOC36" href="#SEC36">Имена специальных целей</a>
</li><li><a name="TOC37" href="#SEC37">Правила с несколькими целями</a>
</li><li><a name="TOC38" href="#SEC38">Несколько правил с одной целью</a>
</li><li><a name="TOC39" href="#SEC39">Статические шаблонные правила (static pattern rules)</a>
<ul>
<li><a name="TOC40" href="#SEC40">Синтаксис статических шаблонных правил</a>
</li><li><a name="TOC41" href="#SEC41">Сравнение статических шаблонных правил (static pattern rules) и неявных правил (implicit rules)</a>
</li></ul>
</li><li><a name="TOC42" href="#SEC42">Правила с двойным двоеточием (double-colon rules)</a>
</li><li><a name="TOC43" href="#SEC43">Автоматическая генерация списка пререквизитов</a>
</li></ul>
</li><li><a name="TOC44" href="#SEC44">Написание команд</a>
<ul>
<li><a name="TOC45" href="#SEC45">Отображение исполняемых команд (command echoing)</a>
</li><li><a name="TOC46" href="#SEC46">Исполнение команд</a>
</li><li><a name="TOC47" href="#SEC47">Параллельное исполнение команд</a>
</li><li><a name="TOC48" href="#SEC48">Ошибки при исполнении команд</a>
</li><li><a name="TOC49" href="#SEC49">Прерывание (interrupting) или принудительное завершение (killing) <code>make</code></a>
</li><li><a name="TOC50" href="#SEC50">Рекурсивный вызов <code>make</code></a>
<ul>
<li><a name="TOC51" href="#SEC51">Как работает переменная <code>MAKE</code></a>
</li><li><a name="TOC52" href="#SEC52">Связь с <code>make</code> "нижнего уровня" (sub-<code>make</code>) через переменные</a>
</li><li><a name="TOC53" href="#SEC53">Передача опций в <code>make</code> "нижнего уровня"</a>
</li><li><a name="TOC54" href="#SEC54">Опция <samp>`--print-directory'</samp></a>
</li></ul>
</li><li><a name="TOC55" href="#SEC55">Именованные командные последовательности (canned command sequences)</a>
</li><li><a name="TOC56" href="#SEC56">Пустые команды (empty commands)</a>
</li></ul>
</li><li><a name="TOC57" href="#SEC57">Использование переменных (variables)</a>
<ul>
<li><a name="TOC58" href="#SEC58">Обращение к переменным</a>
</li><li><a name="TOC59" href="#SEC59">Две разновидности (flavors) переменных</a>
</li><li><a name="TOC60" href="#SEC60">"Расширенные" способы обращения к переменным</a>
<ul>
<li><a name="TOC61" href="#SEC61">Ссылка с заменой (substitution reference)</a>
</li><li><a name="TOC62" href="#SEC62">Вычисляемые имена переменных (computed variable names)</a>
</li></ul>
</li><li><a name="TOC63" href="#SEC63">Как переменные получают свои значения</a>
</li><li><a name="TOC64" href="#SEC64">Установка значения переменной</a>
</li><li><a name="TOC65" href="#SEC65">Добавление текста к переменной</a>
</li><li><a name="TOC66" href="#SEC66">Директива <code>override</code></a>
</li><li><a name="TOC67" href="#SEC67">Многострочные переменные</a>
</li><li><a name="TOC68" href="#SEC68">Переменные из операционного окружения (environment)</a>
</li><li><a name="TOC69" href="#SEC69">Целе-зависимые (target-specific) значения переменных</a>
</li><li><a name="TOC70" href="#SEC70">Шаблонно-зависимые (pattern-specific) значения переменных</a>
</li></ul>
</li><li><a name="TOC71" href="#SEC71">Условные части (conditional parts) make-файла</a>
<ul>
<li><a name="TOC72" href="#SEC72">Пример условной конструкции</a>
</li><li><a name="TOC73" href="#SEC73">Синтаксис условных конструкций</a>
</li><li><a name="TOC74" href="#SEC74">Проверка опций запуска make в условных конструкциях</a>
</li></ul>
</li><li><a name="TOC75" href="#SEC75">Функции преобразования текста</a>
<ul>
<li><a name="TOC76" href="#SEC76">Синтаксис вызова функций</a>
</li><li><a name="TOC77" href="#SEC77">Функции анализа и подстановки строк</a>
</li><li><a name="TOC78" href="#SEC78">Функции для обработки имен файлов</a>
</li><li><a name="TOC79" href="#SEC79">Функция <code>foreach</code></a>
</li><li><a name="TOC80" href="#SEC80">Функция <code>if</code></a>
</li><li><a name="TOC81" href="#SEC81">Функция <code>call</code></a>
</li><li><a name="TOC82" href="#SEC82">Функция <code>origin</code></a>
</li><li><a name="TOC83" href="#SEC83">Функция <code>shell</code></a>
</li><li><a name="TOC84" href="#SEC84">Функции управления сборкой</a>
</li></ul>
</li><li><a name="TOC85" href="#SEC85">Запуск <code>make</code></a>
<ul>
<li><a name="TOC86" href="#SEC86">Аргументы для задания make-файла</a>
</li><li><a name="TOC87" href="#SEC87">Аргументы для задания главной цели (goal)</a>
</li><li><a name="TOC88" href="#SEC88">Вместо исполнения команд</a>
</li><li><a name="TOC89" href="#SEC89">Предотвращение перекомпиляции некоторых файлов</a>
</li><li><a name="TOC90" href="#SEC90">"Перекрытие" (overriding) переменных</a>
</li><li><a name="TOC91" href="#SEC91">Проверка компиляции программы</a>
</li><li><a name="TOC92" href="#SEC92">Обзор опций</a>
</li></ul>
</li><li><a name="TOC93" href="#SEC93">Использование неявных правил (implicit rules)</a>
<ul>
<li><a name="TOC94" href="#SEC94">Использование неявных правил (implicit rules)</a>
</li><li><a name="TOC95" href="#SEC95">Перечень имеющихся неявных правил</a>
</li><li><a name="TOC96" href="#SEC96">Используемые в неявных правилах переменные</a>
</li><li><a name="TOC97" href="#SEC97">"Цепочки" (chains) неявных правил</a>
</li><li><a name="TOC98" href="#SEC98">Определение и переопределение шаблонных правил (pattern rules)</a>
<ul>
<li><a name="TOC99" href="#SEC99">Введение в шаблонные правила (pattern rules)</a>
</li><li><a name="TOC100" href="#SEC100">Примеры шаблонных правил</a>
</li><li><a name="TOC101" href="#SEC101">Автоматические переменные</a>
</li><li><a name="TOC102" href="#SEC102">Процедура сопоставления с шаблоном</a>
</li><li><a name="TOC103" href="#SEC103">Шаблонные правила с призвольным (match-anything) соответствием</a>
</li><li><a name="TOC104" href="#SEC104">Отмена действия неявных правил</a>
</li></ul>
</li><li><a name="TOC105" href="#SEC105">Определение правил "последнего шанса" (last-resort rules)</a>
</li><li><a name="TOC106" href="#SEC106">Устаревшие суффиксные правила (suffix rules)</a>
</li><li><a name="TOC107" href="#SEC107">Алгоритм поиска неявных правил</a>
</li></ul>
</li><li><a name="TOC108" href="#SEC108">Использование <code>make</code> для обновления архивов</a>
<ul>
<li><a name="TOC109" href="#SEC109">Использование элементов архива в качестве целей</a>
</li><li><a name="TOC110" href="#SEC110">Неявные правила для целей - элементов архива</a>
<ul>
<li><a name="TOC111" href="#SEC111">Обновление каталога символов архивного файла</a>
</li></ul>
</li><li><a name="TOC112" href="#SEC112">Проблемы при использовании архивов</a>
</li><li><a name="TOC113" href="#SEC113">Суффиксные правила для архивных файлов</a>
</li></ul>
</li><li><a name="TOC114" href="#SEC114">Возможности GNU <code>make</code></a>
</li><li><a name="TOC115" href="#SEC115">Несовместимость и нереализованные функции</a>
</li><li><a name="TOC116" href="#SEC116">Принятые соглашения для make-файлов</a>
<ul>
<li><a name="TOC117" href="#SEC117">Общие соглашения для make-файлов</a>
</li><li><a name="TOC118" href="#SEC118">Использование утилит</a>
</li><li><a name="TOC119" href="#SEC119">Переменные для имен команд</a>
</li><li><a name="TOC120" href="#SEC120">Переменные для имен каталогов инсталляции</a>
</li><li><a name="TOC121" href="#SEC121">Стандартные имена целей для пользователей</a>
</li><li><a name="TOC122" href="#SEC122">"Категории" команд инсталляции</a>
</li></ul>
</li><li><a name="TOC123" href="#SEC123">Справочник</a>
</li><li><a name="TOC124" href="#SEC124">Сообщения об ошибках</a>
</li><li><a name="TOC125" href="#SEC125">Пример "сложного" make-файла</a>
</li><li><a name="TOC126" href="#SEC126">Индекс</a>
</li><li><a name="TOC127" href="#SEC127">Индекс: функции, переменные и директивы</a>
</li></ul>

<p></p><hr><p>


</p><h1><a name="SEC1" href="#TOC1">Назначение программы <code>make</code></a></h1>

<p>Утилита <code>make</code> автоматически определяет какие части большой программы
должны быть перекомпилированы, и выполняет необходимые для этого действия.

В данном руководстве описывается программа
GNU <code>make</code>, авторами которой являются Richard 
Stallman и Roland McGrath. 
Начиная с версии 3.76, разработку программы ведет  
Paul D. Smith. </p>

<p>GNU <code>make</code> удовлетворяет требованиям 
раздела 6.2  
стандарта <cite>IEEE Standard 1003.2-1992</cite> (POSIX.2). 

<a name="IDX1"></a>
<a name="IDX2"></a>
<a name="IDX3"></a>

</p>

<p>В приводимых примерах будут фигурировать программы на языке Си, поскольку
они широко распространены. Однако, вы можете использовать
<code>make</code> с любым языком программирования для которого имеется компилятор,
работающий из командной строки.
На самом деле, область применения <code>make</code> не ограничивается только
сборкой программ. Вы можете использовать ее для решения любых задач, где 
одни файлы должны автоматически обновляться при изменении других файлов. </p>

<p>Перед тем, как использовать <code>make</code>, вы должны создать так называемый  
<strong>make-файл (makefile)</strong>, который будет описывать зависимости между 
файлами вашей 
программы, и
содержать команды для обновления этих файлов. Как правило, исполняемый файл программы зависит
от объектных файлов, которые, в свою очередь, получаются в результате компиляции соответствующих
файлов с исходными текстами. </p>

<p>После того, как нужный make-файл создан, простой команды 
: </p><pre>make
</pre>

<p>будет достаточно для выполнения всех необходимых перекомпиляций если какие-либо из исходных
файлов программы были изменены. 
Используя информацию из make-файла, и, зная время
последней модификации файлов, утилита <code>make</code> 
решает, каких из файлов должны быть обновлены.
Для каждого из этих файлов будут выполнены указанные в make-файле команды. </p>

<p>При вызове <code>make</code>, в командной строке могут быть заданы параметры, 
указывающие, какие файлы следует перекомпилировать и каким образом это делать.
Смотрите раздел
<a href="#SEC85">Запуск <code>make</code></a>. </p>

<h2><a name="SEC2" href="#TOC2">Как читать данное руководство</a></h2>

<p>Если вы - начинающий пользователь make, или просто хотите получить общее представление
об этой утилите, то вам следует прочесть несколько первых разделов из каждой главы, 
пропуская остальные.
    В каждой главе первые несколько разделов посвящены введению в тему и содержат общую 
информацию,
а последующие разделы содержат специальную и техническую информацию.
Исключение составляет раздел  
<a href="#SEC4">Знакомство с make-файлами</a>, который целиком посвящен введению
в данную тему. </p>

<p>Если вы знакомы с другими версиями программы <code>make</code>, обратите внимание
на раздел 
<a href="#SEC114">Возможности GNU <code>make</code></a>, 
в котором описан широкий набор возможностей, имеющихся в утилите 
GNU <code>make</code>, 
а также раздел 
<a href="#SEC115">Несовместимость и нереализованные функции</a>, 
в котором описаны несколько вещей, которые имеются в других реализациях, но
отсутствуют в 
GNU <code>make</code>

</p><p>Для быстрого получения справки, смотрите разделы
<a href="#SEC92">Обзор опций</a> и 
<a href="#SEC123">Справочник</a>,
а также раздел 
<a href="#SEC36">Имена специальных целей</a>.
</p>


<h2><a name="SEC3" href="#TOC3">Ошибки и проблемы</a></h2>
<p>
<a name="IDX4"></a>
<a name="IDX5"></a>
<a name="IDX6"></a>

</p>

<p>Если у вас возникли проблемы с использованием GNU <code>make</code> или вам кажется,
что вы обнаружили ошибку в ее работе, пожалуйста, сообщите об этом разработчикам.
Мы не может обещать невозможного, однако постараемся исправить положение. </p>

<p>Прежде, чем сообщать об ошибке, убедитесь в том что это - действительно ошибка.
Еще раз внимательно перечитайте документацию. Если у вас что-то не получается - посмотрите,
действительно ли в документации говорится о том, что это можно сделать. Если из документации
непонятно - допустимы ли ваши действия или нет, сообщите нам об этом. Это означает
ошибку в документации!
</p>

<p>Прежде, чем сообщать об ошибке или пытаться исправить ее самостоятельно, попробуйте
локализовать ошибку - создать make-файл минимального размера, на котором она проявляется.
Затем, вышлите нам этот make-файл вместе с полученными результатами работы <code>make</code>.
Укажите также, каких результатов вы на самом деле ожидали - это поможет нам обнаружить
возможные ошибки в документации. </p>

<p>Если вы действительно обнаружили проблему, пожалуйста, сообщите нам об этом по
следующему адресу: </p><pre>    bug-make@gnu.org
</pre>

<p>Пожалуйста, укажите номер версии вашей программы <code>make</code>. Вы можете
получить эту информацию, набрав в командной строке
<samp>`make --version'</samp>. Не забудьте также указать тип вашей машины и операционной
системы. 
По возможности, укажите содержимое файла <tt>`config.h'</tt>, который получается
в результате работы процесса конфигурирования на вашей машине. </p>


<h1><a name="SEC4" href="#TOC4">Знакомство с make-файлами (makefiles)</a></h1>

<p> Для работы с утилитой <code>make</code>, вам понадобится так называемый 
<strong>make-файл (makefile)</strong>,
который будет содержать описание требуемых действий.
Как правило, make-файл описывает, каким образом нужно компилировать и компоновать
программу. 

<a name="IDX7"></a>

</p>

<p>В этой главе мы обсудим простой make-файл, который описывает, как скомпилировать 
и скомпоновать программу - текстовой редактор. Наш текстовой редактор будет состоять
из восьми файлов с исходными текстами на языке Си и трех заголовочных файлов.
Make-файл также может инструктировать <code>make</code> как выполнять те или иные
действия, когда явно будет затребовано их выполнение (например, удалить определенные
файлы в ответ на команду "очистка").
Пример более сложного make-файла будет
приведен в разделе <a href="#SEC125">Пример "сложного" make-файла</a>. </p>

<p>При компиляции текстового редактора, любой файл с исходным текстом, который был
модифицирован, должен быть откомпилирован заново. Если был модифицирован какой-либо
из заголовочных файлов, то, во избежании проблем, должны быть перекомпилированы все 
исходные файлы, которые включали в себя этот заголовочный файл. 
Каждая компиляция исходного файла породит новую версию соответствующего ему объектного файла.
И, наконец, если какие-либо из исходных файлов были перекомпилированы, то все объектные
файлы (как "новые", так и оставшиеся от предыдущих компиляций) должны быть заново скомпонованы
для получения новой версии исполняемого файла нашего текстового редактора.
<a name="IDX8"></a><a name="IDX9"></a></p>


<h2><a name="SEC5" href="#TOC5">Как выглядят правила (rules)</a></h2>
<p>
<a name="IDX10"></a>
<a name="IDX11"></a>
<a name="IDX12"></a>

</p>

<p>Простой make-файл состоит из "правил" (rules) следующего вида:  
</p>

<p>
<a name="IDX13"></a>
<a name="IDX14"></a>
<a name="IDX15"></a>

</p><pre><var>цель</var> ... : <var>пререквизит</var> ...
        <var>команда</var>
        ...
        ...
</pre>

<p> Обычно, <strong>цель (target)</strong> представляет собой имя файла, который 
генерируется в процессе
работы утилиты <code>make</code>. Примером могут служить объектные и исполняемый файлы
собираемой программы.  
Цель также может быть именем некоторого действия, которое нужно выполнить (например,
<samp>`clean'</samp> - очистить). Подробнее это обсуждает в разделе 
<a href="#SEC33">Абстрактные цели </a>). </p>

<p>
<strong>Пререквизит (prerequisite)</strong> 
- это файл, который используется как исходдные данные 
для порождения цели. Очень часто цель зависит сразу от нескольких файлов.</p>

<p>
<a name="IDX16"></a>

<strong>Команда</strong> - это действие, выполняемое утилитой <code>make</code>. 
В правиле может содержаться несколько команд - каждая на свое собственной
строке.
<strong>Важное замечание:</strong> строки, содержащие команды обязательно должны
начинаться с символа табуляции! Это - "грабли", на которые наступают многие начинающие
пользователи. </p>

<p>Обычно, команды находятся в правилах с пререквизитами и служат для создания файла-цели,
если какой-нибудь из пререквизитов был модифицирован.
Однако, правило, имеющее команды, не обязательно должно иметь пререквизиты.
Например, правило с целью <samp>`clean'</samp> ("очистка"), 
содержащее команды удаления, может не иметь пререквизитов. </p>

<p> <strong>Правило (rule)</strong> описывает, когда и каким образом следует обновлять файлы, 
указанные в нем в качестве цели. Для создания или обновления цели, <code>make</code> 
исполняет
указанные в правиле команды, используя пререквизиты в качестве исходных данных.
Правило также может описывать каким образом должно выполняться некоторое действие. 
Подробно это обсуждается в разделе  
<a href="#SEC20">Составление правил</a>. </p>

<p>Помимо правил, make-файл может содержать и другие конструкции, однако, простой 
make-файл 
может состоять и из одних лишь правил. Правила могут выглядеть более сложными, чем приведенный
выше шаблон, однако все они более или менее соответствуют ему по структуре. </p>

<h2><a name="SEC6" href="#TOC6">Пример простого make-файла</a></h2>
<p>
<a name="IDX17"></a>
<a name="IDX18"></a>

</p>

<p>Вот пример простого make-файла, в котором описывается, что исполняемый
файл <code>edit</code> зависит от восьми объектных файлов, которые, в свою очередь,
зависят от восьми соответствующих исходных файлов и трех заголовочных файлов. </p>

<p>В данном примере, заголовочный файл <tt>`defs.h'</tt> включается во все файлы
с исходным текстом. Заголовочный файл <tt>`command.h'</tt> включается только в те
исходные файлы, которые относятся к командам редактирования, а файл <tt>`buffer.h'</tt> -
только в "низкоуровневые" файлы, непосредственно оперирующие буфером редактирования.
</p>

<pre>edit : main.o kbd.o command.o display.o \
       insert.o search.o files.o utils.o
        cc -o edit main.o kbd.o command.o display.o \
                   insert.o search.o files.o utils.o

main.o : main.c defs.h
        cc -c main.c
kbd.o : kbd.c defs.h command.h
        cc -c kbd.c
command.o : command.c defs.h command.h
        cc -c command.c
display.o : display.c defs.h buffer.h
        cc -c display.c
insert.o : insert.c defs.h buffer.h
        cc -c insert.c
search.o : search.c defs.h buffer.h
        cc -c search.c
files.o : files.c defs.h buffer.h command.h
        cc -c files.c
utils.o : utils.c defs.h
        cc -c utils.c
clean :
        rm edit main.o kbd.o command.o display.o \
           insert.o search.o files.o utils.o
</pre>

<p>Для повышения удобочитаемости, мы разбили длинные строки на две части с помощью
символа обратной косой черты, за которым следует перевод строки. 
<a name="IDX19"></a>
<a name="IDX20"></a>
<a name="IDX21"></a>
<a name="IDX22"></a>
<a name="IDX23"></a>
</p>

<p>Для того, чтобы с помощью этого make-файла создать исполняемый файл <tt>`edit'</tt>,
наберите:</p><pre>make
</pre>

<p>Для того, чтобы удалить исполняемый и объектные файлы из директории проекта,
наберите:</p><pre>make clean
</pre>

<p>В приведенном примере, целями, в частности, являются объектные файлы <samp>`main.o'</samp>
и <samp>`kbd.o'</samp>, а также исполняемый файл <samp>`edit'</samp>.
К пререквизитам относятся такие файлы, как 
<samp>`main.c'</samp> 
и <samp>`defs.h'</samp>. Каждый объектный файл, фактически, является одновременно и целью
и пререквизитом. Примерами команд могут служить  
<samp>`cc -c main.c'</samp> и <samp>`cc -c 
kbd.c'</samp>. </p>

<p>В случае, если цель является файлом, этот файл должен быть перекомпилирован или 
перекомпонован всякий раз, когда был изменен какой-либо из его пререквизитов.
Кроме того, любые пререквизиты, которые сами генерируются автоматически, должны быть
обновлены 
первыми. 
В нашем примере, исполняемый файл  
<tt>`edit'</tt>
зависит от восьми объектных файлов; объектный файл
<tt>`main.o'</tt> зависит от исходного файла <tt>`main.c'</tt> и заголовочного
файла <tt>`defs.h'</tt>. </p>

<p>За каждой строкой, содержащей цель и пререквизиты, следует строка с командой.
Эти команды  указывают, каким образом надо обновлять целевой файл. 
В начале каждой строки, содержащей команду, должен находится символ табуляции.
Именно наличие символа табуляции является признаком, по которому 
<code>make</code> отличает строки с командами от прочих строк make-файла. 
Имейте ввиду, что <code>make</code> не имеет ни малейшего представления о том,
как работают эти команды. Поэтому, ответственность за то, что выполняемые команды
нужным образом обновят целевой файл, целиком ложится на вас. 
Утилита <code>make</code> просто исполняет указанные в правиле команды если
цель нуждается в обновлении. <a name="IDX24"></a></p>

<p>Цель <samp>`clean'</samp> является не файлом, а именем действия. 
Поскольку, при обычной сборке программы это действие не требуется, цель
<samp>`clean'</samp> не является пререквизитом какого-либо из правил.
Следовательно,
<code>make</code> не будет "трогать" это правило, пока вы специально
об этом не попросите. Заметьте, что это правило не только не является пререквизитом,
но и само не содержит каких-либо пререквизитов. Таким образом, единственное
предназначение данного правила - выполнение указанных в нем команд. 
Цели, которые являются не файлами, а именами действий называются 
<em>абстрактными целями (phony 
targets)</em>.
Абстрактные цели подробно рассматриваются в разделе 
<a href="#SEC33">Абстрактные цели</a>.
В разделе <a href="#SEC48">Ошибки при выполнении команд</a> описано,
как заставить <code>make</code> игнорировать ошибки, которые могут возникнуть 
при выполнении команды 
<code>rm</code> и любых других команд. <a name="IDX25"></a><a name="IDX26"></a></p>

<h2><a name="SEC7" href="#TOC7">Как <code>make</code> обрабатывает make-файл</a></h2>
<p>
<a name="IDX27"></a>
<a name="IDX28"></a>
</p>

<p>По умолчанию, <code>make</code> начинает свою работу с первой встреченной цели 
(кроме целей, чье имя начинается с символа <samp>`.'</samp>). 
Эта цель будет являться <strong>главной целью по умолчанию (default goal)</strong>.

<strong>Главная цель (goal)</strong> - это цель, которую стремится достичь <code>make</code> 
в качестве
результата своей работы.
В разделе <a href="#SEC87">Аргументы для задания главной цели</a> обсуждается,
каким образом можно явно задать главную цель.
<a name="IDX29"></a>
<a name="IDX30"></a>
<a name="IDX31"></a>
</p>

<p>В примере из предыдущего раздела, главная цель заключалась в обновлении 
исполняемого файла <tt>`edit'</tt>, поэтому мы поместили данное правило в начало 
make-файла.
</p>

<p>Таким образом, когда вы даете команду: </p><pre>make
</pre>

<p><code>make</code> читает make-файл из текущей директории и начинает его обработку
с первого встреченного правила. 
В нашем примере это правило обеспечивает перекомпоновку исполняемого файла 
<tt>`edit'</tt>. Однако, прежде чем <code>make</code> сможет полностью обработать это правило,
ей нужно обработать правила для всех файлов, от которых зависит 
<tt>`edit'</tt>.  В данном случае - от всех объектных файлов программы.
Каждый из этих объектных файлов обрабатывается согласно своему собственному правилу.
Эти правила говорят, что каждый файл с расширением
<samp>`.o'</samp> (объектный файл) получается в результате компиляции соответствующего ему
исходного файла.
Такая компиляция должна быть выполнена, если исходный файл или какой-либо из заголовочных
файлов, перечисленных в качестве пререквизитов, являются "более новыми", чем объектный файл,
либо объектного файла вообще не существует. </p>

<p>Другие правила обрабатывается потому, что их цели прямо или косвенно являются 
пререквизитами для главной цели. 
Если какое-либо правило никоим образом не "связано" с главной целью (то есть ни прямо,
ни косвенно не являются его пререквизитом), то это правило не обрабатывается.
Чтобы задействовать такие правила, придется явно указать <code>make</code> на необходимость 
их обработки (подобным, например, образом: <code>make clean</code>). </p>

<p>Перед перекомпиляцией объектного файла, <code>make</code> рассматривает необходимость
обновления его пререквизитов, в данном случае - файла с исходным текстом и заголовочных 
файлов. В нашем make-файле не содержится никаких инструкций по обновлению этих файлов - 
файлы с расширениями <samp>`.c'</samp> и <samp>`.h'</samp> не являются целями 
каких-либо правил. Таким образом, утилита <code>make</code> не предпринимает никаких
действий с этими файлами. Однако, <code>make</code> могла бы автоматически обновлять
и исходные тексты, если бы они, например, генерировались с помощью программ, подобных
Bison или Yacc, и для них были бы определены соответствующие правила. </p>

<p>После перекомпиляции объектных файлов, которые нуждаются в этом, <code>make</code>
принимает решение - нужно ли перекомпоновывать файл <tt>`edit'</tt>. Это нужно
делать, если файла <tt>`edit'</tt> не существует или какой-нибудь из объектных
файлов по сравнению с ним является более "свежим". Если какой-либо из
объектных файлов только что был откомпилирован заново, то он будет "моложе", чем 
файл <tt>`edit'</tt>. Соответственно, файл <tt>`edit'</tt> будет перекомпонован.
<a name="IDX32"></a></p>

<p>Так, если мы модифицируем файл <tt>`insert.c'</tt> и запустим <code>make</code>,
этот файл будет скомпилирован заново для обновления объектного файла <tt>`insert.o'</tt>, и,
затем, файл <tt>`edit'</tt> будет перекомпонован. Если мы изменим файл <tt>`command.h'</tt> 
и запустим <code>make</code>, то будут перекомпилированы объектные файлы  
<tt>`kbd.o'</tt>, <tt>`command.o'</tt> и <tt>`files.o'</tt>, а затем исполняемый файл
<tt>`edit'</tt> будет скомпонован заново. </p>


<h2><a name="SEC8" href="#TOC8">Упрощение make-файла с помощью переменных</a></h2>
<p>
<a name="IDX33"></a>
<a name="IDX34"></a>

</p>

<p>В приведенном выше примере, в правиле для <tt>`edit'</tt> нам дважды пришлось 
перечислять список объектных файлов программы: </p>

<pre>edit : main.o kbd.o command.o display.o \
              insert.o search.o files.o utils.o
        cc -o edit main.o kbd.o command.o display.o \
                   insert.o search.o files.o utils.o
</pre>

<p>
<a name="IDX35"></a>

    Подобное дублирование чревато ошибками. При добавлении в проект
нового объектного файла, можно добавить его в один список и забыть про другой. Мы можем
устранить подобный риск, и, одновременно, упростить make-файл, используя переменные.

<strong>Переменные (variables)</strong> позволяют, один раз определив текстовую строку, 
затем использовать ее  
многократно в нужных местах.  Переменные подробно обсуждаются в разделе
<a href="#SEC57">Использование переменных</a>). </p>

<p>
<a name="IDX36"></a>
<a name="IDX37"></a>
<a name="IDX38"></a>
<a name="IDX39"></a>
<a name="IDX40"></a>

    Обычной практикой при построении make-файлов является 
использование переменной с именем
<code>objects</code>, <code>OBJECTS</code>, <code>objs</code>,
<code>OBJS</code>, <code>obj</code>, или <code>OBJ</code>, которая содержит список
всех объектных файлов программы.
Мы могли бы определить подобную переменную с именем <code>objects</code> таким 
образом: </p>

<pre>objects = main.o kbd.o command.o display.o \
          insert.o search.o files.o utils.o
</pre>

<p>Далее, всякий раз, когда нам нужен будет список объектных файлов,
мы можем использовать значение этой переменной с помощью записи
<samp>`$(objects)'</samp> (смотрите раздел <a href="#SEC57">Использование переменных</a>). </p>

<p>Вот как будет выглядеть наш простой пример с использованием переменной для хранения
списка объектных файлов: </p>

<pre>objects = main.o kbd.o command.o display.o \
          insert.o search.o files.o utils.o

edit : $(objects)
        cc -o edit $(objects)
main.o : main.c defs.h
        cc -c main.c
kbd.o : kbd.c defs.h command.h
        cc -c kbd.c
command.o : command.c defs.h command.h
        cc -c command.c
display.o : display.c defs.h buffer.h
        cc -c display.c
insert.o : insert.c defs.h buffer.h
        cc -c insert.c
search.o : search.c defs.h buffer.h
        cc -c search.c
files.o : files.c defs.h buffer.h command.h
        cc -c files.c
utils.o : utils.c defs.h
        cc -c utils.c
clean :
        rm edit $(objects)
</pre>



<h2><a name="SEC9" href="#TOC9">Неявные правила упрощают make-файл</a></h2>
<p>
<a name="IDX41"></a>
<a name="IDX42"></a>
<a name="IDX43"></a>

</p>

<p>На самом деле, нет необходимости явного указания команд компиляции отдельно для
каждого из исходных файлов. Утилита <code>make</code> сама может "догадаться" об 
использовании нужных команд, поскольку у нее имеется, так называемое, 
<strong>неявное правило (implicit rule)</strong>
для обновления файлов с расширением <samp>`.o'</samp> из файлов с расширеним <samp>`.c'</samp>,
с помощью команды <samp>`cc -c'</samp>. Например, она бы использовала 
команду <samp>`cc -c main.c -o main.o'</samp> для преобразования файла <tt>`main.c'</tt>
в файл <tt>`main.o'</tt>. Таким образом, можно убрать явное указание команд 
компиляции из правил, описывающих построение объектных файлов. Смотрите раздел
<a href="#SEC93">Использование неявных правил</a>. </p>

<p>Когда файл с расширением <samp>`.c'</samp> автоматически используется подобным образом,
он также автоматически добавляется в список пререквизитов "своего" объектного файла. Таким
образом, мы вполне можем убрать файлы с расширением <samp>`.c'</samp> из списков 
пререквизитов
объектных файлов. </p>

<p>Вот новый вариант нашего примера, в который были внесены оба описанных выше изменения, 
а также используется переменная 
<code>objects</code>:</p>

<pre>objects = main.o kbd.o command.o display.o \
          insert.o search.o files.o utils.o

edit : $(objects)
        cc -o edit $(objects)

main.o : defs.h
kbd.o : defs.h command.h
command.o : defs.h command.h
display.o : defs.h buffer.h
insert.o : defs.h buffer.h
search.o : defs.h buffer.h
files.o : defs.h buffer.h command.h
utils.o : defs.h

.PHONY : clean
clean :
        -rm edit $(objects)
</pre>

<p>Примерно так и выглядят make-файлы в реальной практике. Для правила с
<samp>`clean'</samp> здесь использована более сложная запись, которую мы обсудим позже 
(смотрите разделы  <a href="#SEC33">Абстрактные цели</a>, и
<a href="#SEC48">Ошибки при исполнении команд</a>). </p>

<p>Из-за своего удобства, неявные правила широко используются и играют важную роль 
в работе <code>make</code>. </p>


<h2><a name="SEC10" href="#TOC10">Другой стиль написания make-файлов</a></h2>
<p>
<a name="IDX44"></a>

</p>

<p>Если для создания объектных файлов используются только неявные правила, то
можно использовать другой стиль написания make-файлов. В таком make-файле записи
группируются по их пререквизитам, а не по их целям. Вот как может выглядеть
подобный make-файл: </p>

<pre>objects = main.o kbd.o command.o display.o \
          insert.o search.o files.o utils.o

edit : $(objects)
        cc -o edit $(objects)

$(objects) : defs.h
kbd.o command.o files.o : command.h
display.o insert.o search.o files.o : buffer.h
</pre>

<p>Здесь, заголовочный файл <tt>`defs.h'</tt> объявляется пререквизитом для всех
объектных файлов программы. Файлы 
<tt>`command.h'</tt> и <tt>`buffer.h'</tt> являются пререквизитами для перечисленных
объектных файлов. </p>

<p>Какой стиль построения make-файлов предпочесть - является делом вкуса. Альтернативный
стиль более компактен, однако он нравится не всем - многие считают более "естественным"
располагать информацию о каждой цели в одном месте, а не "распылять" ее по
make-файлу. </p>


<h2><a name="SEC11" href="#TOC11">Правило для очистки каталога</a></h2>
<p>
<a name="IDX45"></a>
<a name="IDX46"></a>
</p>

<p>Компиляция программы - не единственная вещь, для которой вы, возможно, захотите
написать правила. Часто, в make-файле указывается, каким образом можно выполнить некоторые 
другие действия, не относящиеся к компиляции программы. Таким действием, например, может
быть удаление все объектных и исполняемых файлов программы для очистки каталога. </p>

<p>
<a name="IDX47"></a>

    Вот как можно было бы написать правило для очистки каталога в
нашем проекте текстового редактора:</p> 

<pre>clean:
        rm edit $(objects)
</pre>

<p>На практике, скорее всего, мы бы записали это правило чуть более сложным способом,
предполагающим возможность непредвиденных ситуаций: 
</p>

<pre>.PHONY : clean
clean :
        -rm edit $(objects)
</pre>

<p>Такая запись предотвратит возможную путаницу если, вдруг, в каталоге будет находится
файл с именем <tt>`clean'</tt>, а также позволит <code>make</code> продолжить работу,
даже если команда <code>rm</code> завершится с ошибкой (смотрите раздел 
<a href="#SEC33">Абстрактные цели</a>, а также 
раздел <a href="#SEC48">Ошибки при исполнении команд</a>.) </p>

<p>Подобное правило не следует помещать в начало make-файла, поскольку мы не хотим,
чтобы оно запускалось "по умолчанию"! В нашем примере, мы помещаем данное правило в
конец make-файла, чтобы главной целью по умолчанию оставалась сборка
файла <code>edit</code>. </p>

<p> Поскольку <code>clean</code> не является пререквизитом цели <code>edit</code>, 
это правило не будеть выполняться, если вызывать <samp>`make'</samp> без аргументов.
Для запуска данного правила, нужно будет набрать <samp>`make clean'</samp>.
Смотрите раздел <a href="#SEC85">Запуск <code>make</code></a>. </p>


<h1><a name="SEC12" href="#TOC12">Создание make-файлов</a></h1>

<p>
<a name="IDX48"></a>

Make-файл является хранилищем информации, указывающей 
программе <code>make</code>, каким образом нужно перекомпилировать проект. </p>

<h2><a name="SEC13" href="#TOC13">Из чего состоят make-файлы</a></h2>

<p>Make-файл может состоять из конструкций пяти видов: <strong>явные правила</strong>, 
<strong>неявные правила</strong>, <strong>определения переменных</strong>, 
<strong>директивы</strong> и 
<strong>комментарии</strong>. Правила, переменные
и директивы подробно рассматриваются в следующих главах. </p>

<ul>
<li>

<a name="IDX49"></a>
 <a name="IDX50"></a>
 
  <strong>Явное правило (explicit rule)</strong> 
  описывает, когда и каким образом следует обновлять 
  файлы, называемые целями правила. В этом правиле перечисляются файлы, от которых
  зависит цель правила (так называемые <strong>пререквизиты</strong>), 
  а также могут быть заданы команды, которые следует использовать
  для создания или обновления цели.
  Смотрите раздел <a href="#SEC20">Составление правил</a>.

    <a name="IDX51"></a>
    <a name="IDX52"></a>

</li><li>

  <strong>Неявное правило (implicit rule)</strong> 
  описывает, когда и каким образом нужно
  обновлять некоторую группу файлов, имена которых подходят под определенный 
  шаблон. Такое правило описывает, как цель может зависеть от файла со "сходным"
  именем и задает команды для обновления целей. Смотрите раздел
  <a href="#SEC93">Использование неявных правил</a>.

    <a name="IDX53"></a>

</li><li>

  <strong>Определение переменной (variable definition)</strong>
  - это строка make-файла, в которой
  переменной присваивается определенное текстовое значение. Далее, это
  значение может быть 
  "подставлено" в нужном месте текста.
  В нашем примере make-файла, переменная <code>objects</code> определялась как
  список объектных файлов программы 
  (смотрите раздел <a href="#SEC8">Упрощение make-файла с помощью переменных</a>). 
  
    <a name="IDX54"></a>

</li><li>

  <strong>Директива</strong> указывает программе <code>make</code> на необходимость
  произведения некоторого специального действия во время чтения make-файла.
  Возможны, в частности, следующие действия:

<ul>
<li>

    Чтение другого make-файла 
    (смотрите раздел <a href="#SEC15">Подключение других make-файлов</a>).

</li><li>

    Решение (на основе значения переменных) об использовании или игнорировании
    части
    make-файла (смотрите раздел <a href="#SEC71">Условные части make-файла</a>).

</li><li>

    Определение многострочной переменной, состоящей из нескольких
    строк 
    (смотрите раздел 
    <a href="#SEC67">Многострочные переменные</a>). 

</li></ul>

<a name="IDX55"></a>
<a name="IDX56"></a>
</li><li>

  Символ <samp>`#'</samp> 
  обозначает начало <strong>комментария</strong>. Весь текст, начиная с этого
  символа и до конца строки, будет игнорирован. Комментарий может быть продолжен на
  следущую строку с помощью одиночного символа обратной косой черты, находящегося в
  конце строки.
  Комментарии могут находиться практически в любом месте make-файла за несколькими 
  исключениями. Они не могут находится внутри директивы <code>define</code> и, возможно,
  внутри команд (поскольку, здесь уже интерпретатор командной строки будет 
  решать - что именно является комментарием). Строка make-файла, целиком состоящая из
  комментария, рассматривается как пустая и игнорируется.

</li></ul>



<h2><a name="SEC14" href="#TOC14">Имена make-файлов</a></h2>
<p>
<a name="IDX57"></a>
<a name="IDX58"></a>
<a name="IDX59"></a>
<a name="IDX60"></a>
</p>

<p> По умолчанию, когда <code>make</code> ищет make-файл для обработки, она 
поочередно пробует найти файлы со следующими именами (в указанном порядке):
<tt>`GNUmakefile'</tt>, <tt>`makefile'</tt> и 
<tt>`Makefile'</tt>.

<a name="IDX61"></a>
<a name="IDX62"></a>
<a name="IDX63"></a>
</p>

<p>
<a name="IDX64"></a>

Обычно, вам имеет смысл давать своему make-файлу имя
<tt>`makefile'</tt>, либо <tt>`Makefile'</tt>. Мы рекомендуем использовать
имя <tt>`Makefile'</tt>, потому что при выводе содержимого каталога, 
файл с таким именем будет находится в начале списка, наряду с такими важными
файлами как <tt>`README'</tt>. Первое из проверяемых имен - <tt>`GNUmakefile'</tt>
- не может быть рекомендовано для большинсства make-файлов. Это имя можно использовать,
если ваш make-файл специфичен для GNU <code>make</code> и не будет обрабатываться
другими версиями <code>make</code>. 
Другие версии программы <code>make</code>
ищут make-файлы с именами <tt>`makefile'</tt> и <tt>`Makefile'</tt>, но не
<tt>`GNUmakefile'</tt>. </p>

<p>В том случае, если <code>make</code> не может найти файлов с
перечисленными выше именами, то она пробует продолжить работу без использования 
make-файла.
В таком случае, при вызове <code>make</code> вы должны явно указать главную цель
и утилита попробует достичь этой цели, используя только "встроенные" в нее 
неявные правила.
Смотрите раздел <a href="#SEC93">Использование неявных правил</a>. </p>

<p>
<a name="IDX65"></a>
<a name="IDX66"></a>
<a name="IDX67"></a>

Если вы хотите использовать "нестандартное" имя для вашего make-файла, вы можете
указать его в командной строке, используя опции 
<samp>`-f'</samp> или <samp>`--file'</samp>. Аргументы
<samp>`-f <var>имя_файла</var>'</samp> или <samp>`--file=<var>имя_файла</var>'</samp>, указывают
программе <code>make</code> на необходимость использования файла с именем <var>имя_файла</var> 
в качестве make-файла. Вы можете задать обработку сразу нескольких make-файлов,
перечислив их в командной строке с помощь нескольких опций
<samp>`-f'</samp> или <samp>`--file'</samp>.
Все указанные таким образом make-файлы логически "объединяются" в том порядке, как они
были заданы в командной строке. При наличии в командной строке опций
<samp>`-f'</samp> или <samp>`--file'</samp>, автоматического поиска make-файлов с
именами  
<tt>`GNUmakefile'</tt>, 
<tt>`makefile'</tt> и <tt>`Makefile'</tt>, не производится.

<a name="IDX68"></a>
<a name="IDX69"></a>
<a name="IDX70"></a>
<a name="IDX71"></a>
</p>


<h2><a name="SEC15" href="#TOC15">Подключение других make-файлов</a></h2>
<p>
<a name="IDX72"></a>
<a name="IDX73"></a>
</p>

<p>
<a name="IDX74"></a>

Встретив в make-файле директиву <code>include</code>, <code>make</code>
приостанавливает чтение текущего make-файла и, прежде чем продолжить работу,
 прочитывает один или несколько указанных в
этой директиве make-файлов. Эта директива представляет собой строку make-файла,
выглядящую подобным образом: 
</p>

<pre>include <var>имена_файлов</var>...
</pre>

<p>Имена файлов могут представлять собой шаблоны имен, допустимые в интерпретаторе
командной строки.

<a name="IDX75"></a>
<a name="IDX76"></a>
<a name="IDX77"></a>
</p>

<p>В начале строки могут находится дополнительные пробелы - все они будут игнорированы. 
Наличие символа  
табуляции в начале строки недопустимо, поскольку такие строки <code>make</code> считает 
командами. Между словом <code>include</code> и началом списка файлов, а также между именами
файлов необходим пробел. Лишние пробелы между именами, а также пробелы после конца директивы, 
игнорируются. 
В конце строки с директивой может находится комментарий, начинающийся, как обычно, 
с символа <samp>`#'</samp>. Если имена файлов содержат ссылки на переменные или функции,
то эти ссылки "раскрываются" (вместо них подставляются вычисленные значения).
Смотрите раздел <a href="#SEC57">Использование переменных</a>. </p>

<p>Если, например, у вас есть три файла с расширением <tt>`.mk'</tt> - <tt>`a.mk'</tt>, 
<tt>`b.mk'</tt>, и <tt>`c.mk'</tt>, а переменная <code>$(bar)</code> ссылается на строку
<code>bish bash</code>, то следующая запись</p>

<pre>include foo *.mk $(bar)
</pre>

<p>будет эквивалентна </p>

<pre>include foo a.mk b.mk c.mk bish bash
</pre>

<p>Когда <code>make</code> обрабатывает директиву <code>include</code>, она 
приостанавливает чтение текущего make-файла и поочередно читает каждый файл из списка, 
указанного в директиве. 
Когда весь список будет прочитан, <code>make</code> возвращается к обработке make-файла,
в котором была встречена директива <code>include</code>. </p>

<p>Директива <code>include</code> может оказаться полезной если, предположим,
у нас имеется несколько программ, собираемых при помощи отдельных make-файлов, которым
требуется наличие некоторого "общего" набора определений переменных
(смотрите раздел <a href="#SEC64">Установка значения переменной</a>)
или шаблонных 
правил 
(смотрите раздел <a href="#SEC98">Определение и переопределение шаблонных правил</a>). </p>

<p>Другой случай, когда директива <code>include</code> может быть использована 
- это автоматическая генерация пререквизиттов для исходных файлов. Автоматически сгенерированные
пререквизиты могут быть помещены в отдельный файл, который, затем, будет включаться в основной
make-файл программы.
Подобная практика, в целом, выглядит более привлекательной, чем "беспорядочное" добавление
новых пререквизитов в конец главного make-файла, которое традиционно практикуется при
работе с другими версиями <code>make</code>.  
Смотрите раздел <a href="#SEC43">Автоматическая генерация списка пререквизитов</a>.

<a name="IDX78"></a>
<a name="IDX79"></a>
<a name="IDX80"></a>
</p>

<p>
<a name="IDX81"></a>
<a name="IDX82"></a>
<a name="IDX83"></a>
<a name="IDX84"></a>
<a name="IDX85"></a>
<a name="IDX86"></a>
<a name="IDX87"></a>

Если указанное в директиве имя начинается не с символа '/' и файл с таким именем
отсутствует в текущей директории, производится его поиск еще в нескольких каталогах.
Сначала поиск производится во всех каталогах, которые были указаны в командной строке
с помощью опций <samp>`-I'</samp> и <samp>`--include-dir'</samp> 
(смотрите раздел <a href="#SEC92">Обзор опций</a>).
Затем, поиск производится поочередно в следующих директориях (если, конечно, 
они существуют):
<tt>`<var>prefix</var>/include'</tt> (обычно <tt>`/usr/local/include'</tt>
<a name="DOCF1" href="#FOOT1">(1)</a>)
<tt>`/usr/gnu/include'</tt>,
<tt>`/usr/local/include'</tt>, <tt>`/usr/include'</tt>.
</p>

<p>Если поиск включаемого make-файла завершился неудачно, <code>make</code> выдает
предупреждающее сообщение, которое, однако не является фатальной ошибкой, поскольку
обработка make-файла, содержащего директиву 
<code>include</code>, еще продолжается. 
После того, как все включаемые файлы будут прочитаны, <code>make</code> попытается
создать или обновить те из них, которые не существуют или устарели.
Смотрите раздел <a href="#SEC17">Автоматическое обновление make-файлов</a>. 
Только после неудачной попытки найти способ создания отсутствующих make-файлов,
ситуация будет квалифицирована как фатальная ошибка и <code>make</code> завершит
работу. </p>

<p>Если вы хотите, чтобы <code>make</code> просто игнорировала 
make-файлы, которые
не существуют и не могут быть построены автоматически, используйте директиву
<code>-include</code>:</p>

<pre>-include <var>имена_файлов</var>...
</pre>

<p>Эта директива работает аналогично директиве <code>include</code>, за
исключением того, что отсутствие включаемых make-файлов <var>имена_файлов</var> 
не вызывает ошибки
(даже не выдается каких-либо предупреждающих сообщений).
Для совместимости с другими версиями <code>make</code>, директива 
<code>-include</code> имеет второе, дополнительное имя <code>sinclude</code>. </p>


<h2><a name="SEC16" href="#TOC16">Переменная <code>MAKEFILES</code></a></h2>
<p>
<a name="IDX88"></a>
<a name="IDX89"></a>

</p>
<p>
<a name="IDX90"></a>

Если среди переменных среды (environment variables) имеется переменная с именем 
<code>MAKEFILES</code>, то ее содержимое интерпретируется как список  
имен  (разделенных пробелами)
дополнительных make-файлов, которые должны быть прочитаны перед тем, как начнут
обрабатываться "основные" make-файлы.
Этот механизм работает во многом аналогично директиве <code>include</code>. 
Аналогичным образом производится и поиск этих дополнительных make-файлов в
разных каталогах (смотрите раздел <a href="#SEC15">Подключение других make-файлов</a>).
При этом, главная цель не может браться из этих файлов, а отсутствие какого-либо из
них не рассматривается как ошибка. </p>

<p>
<a name="IDX91"></a>

Одно из основных применений переменной <code>MAKEFILES</code> - это организация
"связи" между рекурсивными вызовами <code>make</code> 
(смотрите раздел <a href="#SEC50">Рекурсивный вызов <code>make</code></a>). 
Обычно, нежелательно устанавливать переменную <code>MAKEFILES</code> перед
первым вызовом <code>make</code> (на самом "высоком" уровне), чтобы не создавать
причудливую "смесь" из основного make-файла и файлов, перечисленных в <code>MAKEFILES</code>.
Однако, если вы запускаете <code>make</code> без указания конкретного make-файла, 
дополнительные make-файлы, перечисленные в <code>MAKEFILES</code> могут сделать
что-нибудь полезное в помощь встроенным в <code>make</code> неявным правилам,
например, задать нужные пути поиска 
(смотрите раздел <a href="#SEC26">Поиск пререквизитов по каталогам</a>). </p>

<p> Некоторые пользователя соблазняются возможностью автоматически устанавливать
переменную <code>MAKEFILES</code> при входе в систему, и пишут свои make-файлы 
в рассчете на это. Делать этого категорически не рекомендуется, поскольку такие
make-файлы не будут работать при попытке их использования другими пользователями.
Гораздо лучше, явно подключать нужные make-файлы с помощью обычной директивы 
<code>include</code>. 
Смотрите раздел <a href="#SEC15">Подключение других make-файлов </a>. </p>


<h2><a name="SEC17" href="#TOC17">Автоматическое обновление make-файлов</a></h2>

<p>
<a name="IDX92"></a>
<a name="IDX93"></a>
<a name="IDX94"></a>

Иногда make-файлы могут быть получены из других файлов, таких как
файлы RCS или SCCS. Если make-файл может быть получен из других файлов,
скорее всего, вы захотите, чтобы <code>make</code> всегда работала с
самой "свежей" версией этого файла. </p>

<p>Для этого, после чтения всех make-файлов, утилита <code>make</code> поочередно 
рассматривает каждый из них в качестве главной цели, пробуя обновить их.
Если в make-файле имеется правило (найденное в этом же make-файле, либо в
каком-нибудь другом), указывающее на способ его обновления, или имеется неявное
правило, которое может быть к нему применено, то этот make-файл, при необходимости,
обновляется 
(смотрите раздел <a href="#SEC93">Использование неявных правил</a>). После того, как
все make-файлы были проверены, если хотя бы один из них был действительно обновлен,
<code>make</code> начинает всю процедуру сначала и перечитывает все make-файлы
заново. Возможно, утилита опять попытается обновить некоторые из make-файлов, но
как правило, они уже не будут меняться, поскольку только что была получена их
самая свежая версия. </p>

<p>
Если вам заранее известно, что некоторые ваши make-файлы не
могут быть "обновлены", и вы хотите, чтобы 
<code>make</code> не пыталась искать подходящие для них неявные правила
(скажем, по соображениям эффективности), вы можете использовать любой 
"стандартный" прием для отключения поиска неявных правил. 
Например, вы можете создать
явное правило с пустой командой, где в качестве цели выступает нужный вам make-файл 
(смотрите раздел <a href="#SEC56">Пустые команды</a>).
</p>

<p> Если в make-файле для обновления файла имеется правило с двойным двоеточием
(double-colon rule),
не имеющее пререквизитов, то этот файл всегда будет обновляться 
(смотрите раздел <a href="#SEC42">Правила с двойным двоеточием</a>). 
В случае, если бы целью такого правила являлся make-файл, мог бы возникнуть
бесконечный цикл: make-файл все время бы обновлялся, что, в свою очередь, заставляло
бы <code>make</code> заново перечитывать все make-файлы и так далее, до
бесконечности. Поэтому, во избежание зацикливания, <code>make</code> 
<strong>не</strong> пытается обновить make-файлы, которые являются целями правил 
с двойным двоеточием без пререквизитов. </p>

<p> В том случае, если при запуске <code>make</code>, ей не были указаны
make-файлы для обработки (с помощью опций <samp>`-f'</samp> и <samp>`--file'</samp>),
то утилита попытается найти подходящий make-файл, поочередно пробую принятые
по умолчанию имена make-файлов (смотрите раздел  
<a href="#SEC14">Имена make-файлов</a>).
В отличие от make-файлов, указываемых с помощью опций <samp>`-f'</samp> и <samp>`--file'</samp>,
<code>make</code> не может быть уверена, что эти файлы вообще существуют. Однако,
если make-файл с именем, принятым по умолчанию, в данный момент не существует, но может
быть построен с использованием каких-либо известных <code>make</code> правил, то
вы, скорее всего захотите, чтобы эти правила были выполнены и нужный make-файл был
создан. </p>

<p> Поэтому, если ни один из make-файлов с принятыми по умолчанию именами не существует,
<code>make</code> предпринимает попытку создать их (в том же самом порядке, каком 
происходил их поиск).
Смотрите раздел <a href="#SEC14">Имена make-файлов </a>. Эти попытки продолжаются до
тех пор, пока какой-либо из make-файлов не будет создан, либо <code>make</code> 
"перепробует" все имена make-файлов, принятых по умолчанию. Заметьте, что невозможность
найти или построить make-файл не является ошибкой, поскольку наличие make-файла не
является обязательным условием работы <code>make</code>. </p>

<p> При использовании опций <samp>`-t'</samp> или <samp>`--touch'</samp> (смотрите 
раздел <a href="#SEC88">Вместо исполнения команд</a>), 
вряд ли вы захотите оказаться в ситуации, когда для определения того,
какие цели нужно пометить как обновленные, будет использована устаревшая версия
make-файла.
Поэтому, опция <samp>`-t'</samp> не оказывает влияния на процедуру обновления
make-файлов - они обновляются даже тогда, когда она указана.
Аналогично, опции <samp>`-q'</samp> (или <samp>`--question'</samp>) и
<samp>`-n'</samp> (или <samp>`--just-print'</samp>) не отменяют процедуру
обновления файлов; в противном случае, использование устаревшей версии make-файла
могло бы вызвать некорректную работу этих опций.
Таким образом, при обработке <samp>`make -f mfile -n foo'</samp>, файл <tt>`mfile'</tt>
будет обновлен, затем он будет перечитан заново, и, после этого, будут напечатаны
команды, обновляющие цель <tt>`foo'</tt> и ее пререквизиты. Эти команды будут 
соответствовать работе 
с обновленной версией <tt>`mfile'</tt>. </p>

<p> Однако, в определенных ситуациях, вам может понадобиться избежать обновления
make-файлов. Вы может сделать это, указав в командной строке эти файлы в качестве
целей и, одновременно, указать их (с помощью опций <samp>`-f'</samp> и <samp>`--file'</samp>)
в качестве make-файлов. Когда make-файл явно указан в командной строке в качестве цели,
опция <samp>`-t'</samp> и аналогичные опции, могут быть к нему применены. </p>

<p>Таким образом, при обработке <samp>`make -f mfile -n mfile foo'</samp> будет прочитан
make-файл
<tt>`mfile'</tt>, затем будут напечатаны команды, требуемые для его обновления (без их
реального исполнения), и, затем, будут напечатаны команды, необходимые для обновления 
<tt>`foo'</tt> (также без их выполнения). Команды для обновления <tt>`foo'</tt> будут
соответствовать нынешнему состоянию <tt>`mfile'</tt>. </p>

<h2><a name="SEC18" href="#TOC18">"Перекрытие" (overriding) части make-файла</a></h2>

<p>
<a name="IDX95"></a>
<a name="IDX96"></a>

Иногда, возникает потребность в нескольких make-файлах, лишь незначительно различающихся
между собой. Зачастую, в такой ситуации может быть использована директива 
<samp>`include'</samp>: нужный make-файлы можно получить путем
включения другого make-файла и добавления своего набора правил или определений переменных.
Однако, с помощью подобной методики, вам не удастся задать разные команды для 
обновления одной и той же цели. Этого можно добиться другим способом. </p>

<p>
<a name="IDX97"></a>

Во "внешнем" make-файле (make-файле, который включает в себя другие make-файлы) вы можете
задать шаблонное правило с произвольным соответствием (match-anything pattern rule), 
которое будет указывать, что цели, не описанные 
в данном make-файле, следут поискать в другом make-файле.
Смотрите раздел <a href="#SEC98">Определение и переопределение шаблонных правил</a>, где
подробно описаны шаблонные правила. </p>

<p>Например, если у нас имеется make-файл с именем <tt>`Makefile'</tt>, который описывает
цель <samp>`foo'</samp> (и другие цели), то мы можем написать make-файл
с именем <tt>`GNUmakefile'</tt>, который будет содержать следующие строки:</p>

<pre>foo:
        frobnicate &gt; foo

%: force
        @$(MAKE) -f Makefile $@
force: ;
</pre>

<p>В таком случае, при выполнении команды <samp>`make foo'</samp>, <code>make</code> 
считает файл
<tt>`GNUmakefile'</tt>, и увидит, что для достижения цели <tt>`foo'</tt>, должна 
быть выполнена команда
<samp>`frobnicate &gt; foo'</samp>. При выполнении команды <samp>`make 
bar'</samp>, <code>make</code> увидит, что цель <tt>`bar'</tt> не описана в 
make-файле <tt>`GNUmakefile'</tt>, и, поэтому, использует команду из шаблонного 
правила: 
<samp>`make -f Makefile bar'</samp>. Если <tt>`Makefile'</tt> содержит правило
для цели
<tt>`bar'</tt>, то эта цель будет обновлена. Аналогично <code>make</code> поступит и
с любыми другими целями, не описанными в  
<tt>`GNUmakefile'</tt> </p>

<p>В данном примере, шаблонное правило содержит лишь
<samp>`%'</samp>, поэтому любая цель подходит под такой шаблон.
Пререквизит <tt>`force'</tt> указан лишь для того, чтобы команды из данного правила
выполнялись всегда - даже в том случае, если целевой файл уже существует.
Правило, описывающее цель <tt>`force'</tt>, содержит пустую команду для того,
чтобы <code>make</code> не пыталась использовать неявное правило для обновления 
этой цели (иначе возник бы бесконечный цикл, поскольку для обновления <tt>`force'</tt>,
<code>make</code> попыталась бы использовать то же самое шаблонное правило). </p>


<h2><a name="SEC19" href="#TOC19">Как <code>make</code> читает make-файл</a></h2>
<p>
<a name="IDX98"></a>
<a name="IDX99"></a>
</p>

<p>
Программа GNU <code>make</code> работает по двухпроходной схеме.  
На первом проходе производится чтение всех make-файлов (в том числе и 
подключаемых), в ходе которого вся содержащаяся в них информация 
(переменные и их значения, явные и неявные правила) переводится во внутреннее
представление и строится граф зависимостей для всех целей и их пререквизитов.
Далее, на втором проходе, это внутреннее представление используется
для определения того, какие именно цели нуждаются в обновлении и
исполняются соответствующие правила.
</p>

<p>
Понимание такой двухпроходной схемы является важным,  
поскольку она оказывает непосредственное влияние на ход вычисления 
переменных и функций; непонимание, зачастую, является источником недоразумений
при написании make-файлов.
 
Здесь мы опишем, как происходит "пофазная" обработка различных конструкций.
Мы будем говорить, что расширение (expansion)
является 
<strong>немедленным (immediate)</strong>, если оно производится
во время первой фазы работы: это означает,
<code>make</code> будет вычислять переменные и функции 
в момент считывания и "разбора" make-файла. 
Мы будем говорить, что расширение
является
<strong>отложенным (deferred)</strong>, если оно не происходит "немедленно".  
Расширение отложенной конструкции не происходит до тех пор, пока эта конструкция
не встретится позже, уже в "немедленном" контексте, либо она будет расширена на
втором проходе. 
</p>

<p>
Возможно, вы еще не знакомы со всеми конструкциями.
В таком случае, вы сможете вернуться к данному разделу потом, когда
вы ознакомитесь с этими конструкциями в следующих главах.
</p>

<h3>Присваивание значения переменным</h3>
<p>
<a name="IDX100"></a>
<a name="IDX101"></a>
<a name="IDX102"></a>
<a name="IDX103"></a>
<a name="IDX104"></a>

</p>
<p>
Определения переменных обрабатываются следующим образом:
</p>

<pre><var>немедленно</var> = <var>отложенно</var>
<var>немедленно</var> ?= <var>отложенно</var>
<var>немедленно</var> := <var>немедленно</var>
<var>немедленно</var> += <var>отложенно</var> или <var>немедленно</var>

define <var>немедленно</var>
  <var>отложенно</var>
endef
</pre>

<p>
В операторе добавления, <samp>`+='</samp>, правая часть обрабатывается 
"немедленно", если переменная была ранее определена как упрощенно вычисляемая 
(с помощью <samp>`:='</samp>) и "отложенно" в противном случае.
</p>

<h3>Условные конструкции</h3>

<p>
<a name="IDX105"></a>
<a name="IDX106"></a>
<a name="IDX107"></a>
<a name="IDX108"></a>
</p>

<p>
Все условные конструкции (во всех формах - <code>ifdef</code>, 
<code>ifeq</code>, <code>ifndef</code> и <code>ifneq</code>) целиком и полностью
обрабатываются "немедленно". 
</p>

<h3>Определения правил</h3>

<p>
<a name="IDX109"></a>
<a name="IDX110"></a>
<a name="IDX111"></a>
<a name="IDX112"></a>
<a name="IDX113"></a>
</p>

<p>
Правила всегда обрабатываются одинаковым образом, независимо от
их формы:

</p>

<pre><var>немедленно</var> : <var>немедленно</var> ; <var>отложенно</var>
    <var>отложенно</var>
</pre>

<p>
То есть, разделы целей и пререквизитов обрабатываются 
немедленно, а обработка команд, используемых для обновления цели, всегда откладывается.
Это общее правило действует для явных правил, шаблонных правил, суффиксных правил,
статических шаблонных правил и простом определении пререквизитов.
</p>



<h1><a name="SEC20" href="#TOC20">Составление правил (rules)</a></h1>

<p>
<a name="IDX114"></a>
<a name="IDX115"></a>
<a name="IDX116"></a>
<a name="IDX117"></a>
</p>

<p>
</p><p><strong>Правила (rules)</strong> содержатся в make-файле и описывают, когда и 
каким образом
должны быть обновлены или созданы некоторые файлы, называемые 
<strong>целями (targets)</strong>.
Чаще всего, каждое правило содержит только одну цель. 
В правиле перечисляются файлы, которые являются 
<strong>пререквизитами (prerequisites)</strong> для
этой цели и <strong>команды</strong>, которые должны быть выполнены для создания
или обновления цели. 
</p>

<p>
<a name="IDX118"></a>
<a name="IDX119"></a>

Порядок следования правил внутри make-файле не имеет значения. Исключение составляет
лишь выбор <strong>главной цели по умолчанию (default goal)</strong> - цели, к которой 
стремиться <code>make</code>,
если вы не задали ее явно.
По умолчанию, главной целью становиться цель из первого правила в первом обрабатываемом
make-файле. Если это правило содержит несколько целей, то только первая из них становится
главной целью.
Здесь есть два исключения. Во-первых, главными целями, выбираемыми по умолчанию, не могут стать
цели, имя которых начинается с точки (если только они не содержат по крайней мере
одного символа <samp>`/'</samp>). И, во-вторых, из процесса выбора главной цели 
исключаются шаблонные правила 
(смотрите раздел <a href="#SEC98">Определение и переопределение шаблонных правил</a>). </p>

<p>Поэтому, мы обычно пишем make-файлы таким образом, чтобы первое правило 
описывало процесс сборки готовой программы, или всех программ, описываемых 
в этом make-файле (часто, для этого используется цель с именем 
<samp>`all'</samp>). 
Смотрите раздел <a href="#SEC87">Аргументы для задания главной цели</a>. </p>


<h2><a name="SEC21" href="#TOC21">Синтаксис правил</a></h2>

<p>
<a name="IDX120"></a>
<a name="IDX121"></a>

    В общем виде, правило выглядит так: </p>

<pre><var>цели</var> : <var>пререквизиты</var>
        <var>команда</var>
        ...
</pre>

<p>
или так:
</p>

<pre><var>цели</var> : <var>пререквизиты</var> ; <var>команда</var>
        <var>команда</var>
        ...
</pre>

<p>
<a name="IDX122"></a>
<a name="IDX123"></a>

<var>Цели (targets)</var> - это имена файлов, разделенные пробелами. 
В именах целей могут быть
использованы шаблонные символы (смотрите раздел 
<a href="#SEC22">Использование шаблонных символов в именах файлов</a>). 
Для файлов, содержащихся
в архиве, может быть использована специальная форма записи: 
<tt>`<var>a</var>(<var>m</var>)'</tt>, где <var>a</var> - это имя архивного файла,
а <var>m</var> - имя содержащегося в нем файла 
(смотрите раздел <a href="#SEC109">Использование элементов архива в качестве целей</a>).
Обычно, в правиле содержится только одна цель, однако, иногда имеет смысл задать
несколько целей в одном правиле 
(смотрите раздел <a href="#SEC37">Правила с несколькими целями</a>). </p>

<p>
<a name="IDX124"></a>
<a name="IDX125"></a>

Строки, содержащие <var>команды</var>, должны начинаться с символа табуляции.
Первая команда может располагаться либо в строке с пререквизитами (и отделяться от
них точкой с запятой), либо в следующей строке после пререквизитов (эта строка должна
начинаться с символа табуляции). 
В обоих случаях, результат будет один и тот же. 
Смотрите раздел <a href="#SEC44">Написание команд</a>. </p>

<p>
<a name="IDX126"></a>
<a name="IDX127"></a>
<a name="IDX128"></a>

Поскольку знак доллара используется для ссылки на переменные, для использования  
его в правилах, нужно писать <samp>`$$'</samp> 
(смотрите раздел <a href="#SEC57">Использование переменных</a>).
Длинные строки make-файла могут быть разделены на части с помощью символа '\', находящегося
в конце строки. Это может повысить удобочитаемость make-файла, но
"технической" необходимости в этом нет - <code>make</code> никак не ограничивает длину строк
make-файла. </p>

<p>Правило содержит информацию о двух вещах: когда следует считать, что цель "устарела",
и каким образом она может быть обновлена при возникновении такой необходимости. </p>

<p>
<a name="IDX129"></a>
<a name="IDX130"></a>

Критерий "устаревания" вычисляется по отношению к <var>пререквизитам</var>, которые
представляют из себя имена файлов, разделенные пробелами. В именах пререквизитов могут 
использоваться шаблонные символы. Пререквизиты также могут быть файлами, находящимися
в архивах 
(смотрите раздел <a href="#SEC108">Использование <code>make</code> для обновления 
архивов</a>).

Цель считается "устаревшей", если такого файла не существует, либо он "старше",
чем какой-либо из пререквизитов (проверяется время последней модификации файла).
Смысл здесь в том, что, поскольку целевой файл строится на основе информации
из файлов-пререквизитов, то изменение хотя бы одного из них может привести к тому, что
содержимое целевого файла уже не будет "правильным". </p>

<p><var>Команды</var> указывают на то, каким образом следует обновлять цель. 
Это - просто строки (с некоторыми дополнительными возможностями), исполняемые интерпретатором 
командной строки (обычно <samp>`sh'</samp>).
Смотрите раздел 
<a href="#SEC44">Написание команд</a>. </p>


<h2><a name="SEC22" href="#TOC22">Использование шаблонных символов (wildcard characters) в именах файлов</a></h2>

<p>
<a name="IDX131"></a>
<a name="IDX132"></a>
<a name="IDX133"></a>
</p>

<p>
<a name="IDX134"></a>
<a name="IDX135"></a>
<a name="IDX136"></a>

При использованием <strong>шаблонных символов (wildcard characters)</strong>, 
с помощью одного 
имени можно задать целую
группу файлов.
В <code>make</code> шаблонными символами являются 
<samp>`*'</samp>, <samp>`?'</samp> и <samp>`[...]'</samp> (как в оболочке Bourne).
Например, шаблон 
<tt>`*.c'</tt> будет соответствовать всем файлам с суффиксом <samp>`.c'</samp>,
находящимся в текущей директории. </p>

<p>
<a name="IDX137"></a>
<a name="IDX138"></a>
<a name="IDX139"></a>

Символ <samp>`~'</samp> в начале имени файла, также имеет специальное значение.
Одиночный символ <samp>`~'</samp> или сочетание <samp>`~/'</samp> означает ваш
домашний каталог.
Например, выражение 
<tt>`~/bin'</tt> будет означать <tt>`/home/you/bin'</tt>. Если сразу за символом 
<samp>`~'</samp> следует некоторое имя, такая строка будет представлять собой
домашнюю директорию пользователя с этим именем. 
Например, строка <tt>`~john/bin'</tt> будет означать
<tt>`/home/john/bin'</tt>. В системах, где пользователи не имеют своего 
домашнего каталога (таких как MS-DOS или MS-Windows), такое поведение может
эмулироваться с помощью установки переменной окружения <var>HOME</var>. </p>

<p>Раскрытие шаблонных имен (замена их конкретным списком файлов, удовлетворяющих шаблону)
автоматически производится в именах целей, именах пререквизитов и командах 
(в командах этим занимается интерпретатор командной строки). В других случаях, раскрытие
шаблона  производится только при явном запросе с помощью функции
<code>wildcard</code>. </p>

<p>Специальное значение шаблонных символов может быть "отключено" с помощью 
предшествующего им символа '\'. Таким образом, строка <tt>`foo\*bar'</tt> будет
ссылаться на довольно странное имя, состоящее из семи символов -
начального <samp>`foo'</samp>, звездочки и <samp>`bar'</samp>. </p>


<h3><a name="SEC23" href="#TOC23">Примеры шаблонных имен</a></h3>

<p> Шаблонные имена могут быть использованы в командах, которые содержатся в правилах. 
Такие имена будут "раскрыты" интерпретатором командной строки. Вот пример правила 
для удаления всех объектных файлов из текущей директории: </p>

<pre>clean:
        rm -f *.o
</pre>

<p>
<a name="IDX140"></a>
</p>

<p>Шаблоны также могут быть полезны в качестве пререквизитов правил. В следующем примере,
команда <samp>`make print'</samp> вызовет печать всех файлов с исходными текстами
(файлов с расширением <samp>`.c'</samp>), которые были модифицированы с тех пор, как вы
последний раз распечатывали их подобным образом: </p>

<pre>print: *.c
        lpr -p $?
        touch print
</pre>

<p>
<a name="IDX141"></a>
<a name="IDX142"></a>
<a name="IDX143"></a>

В данном правиле, цель <tt>`print'</tt> является пустой целью (empty target file); 
смотрите раздел
<a href="#SEC35">Использование пустых целей для фиксации событий</a>. 
Автоматичесая переменная <samp>`$?'</samp> используется для печати
только тех пререквизитов, которые были изменены (смотрите раздел
<a href="#SEC101">Автоматические переменные</a>.) </p>

<p> При задании переменной, раскрытия шаблонов не производится. Например, если вы
запишите: </p>

<pre>objects = *.o
</pre>

<p>
то значением переменной <code>objects</code> будет строка <samp>`*.o'</samp>.
Однако, если вы используете значение переменной <code>objects</code> в
цели, в пререквизите или в команде, то в момент использования шаблона, будет произведено
его расширение.
Чтобы присвоить переменной <code>objects</code> значение, полученное после расширения 
шаблона, используйте функцию <code>wildcard</code>: </p>

<pre>objects := $(wildcard *.o)
</pre>

<p>Смотрите раздел <a href="#SEC25">Функция <code>wildcard</code></a>. </p>


<h3><a name="SEC24" href="#TOC24">Проблемы при использовании шаблонных имен</a></h3>
<p>
<a name="IDX144"></a>
<a name="IDX145"></a>
<a name="IDX146"></a>
<a name="IDX147"></a>
<a name="IDX148"></a>
</p>

<p> Вот простой пример "неправильного" использования шаблонного имени, результат
которого совершенно отличен от ожидаемого. Предположим, составляя make-файл, вы хотели 
сказать, что исполняемый файл <tt>`foo'</tt> собирается из всех объектных файлов, 
находящихся в текущем каталоге, и записали это следующим образом: </p>

<pre>objects = *.o

foo : $(objects)
        cc -o foo $(CFLAGS) $(objects)
</pre>

<p>При такой записи, переменная <code>objects</code> получит значение <samp>`*.o'</samp>. 
Расширение шаблона <samp>`*.o'</samp> будет произведено только при обработке правила 
с <tt>`foo'</tt>, и
пререквизитами этой цели станут все 
<em>существующие</em> в данный момент файлы <samp>`.o'</samp>. При необходимости, эти объектные
файлы будут перекомпилированы. </p>

<p> Но что будет, если вы удалите все файлы с расширением <samp>`.o'</samp>? Когда шаблону
не соответствует ни один файл, этот шаблон остается в "первоначальном" виде. И, таким образом,
получится что цель <tt>`foo'</tt> будет зависеть от файла со странным именем <tt>`*.o'</tt>.
Поскольку, такого файла на самом деле не существует, <code>make</code> аварийно завершит
работу, выдав сообщение, что она не знает как построить файл <tt>`*.o'</tt>. Пожалуй,
это совсем не то, чего вы хотели добиться! </p>

<p> На самом деле, нужный вам результат получить вполне возможно, но для этого надо использовать
более сложную методику, использующую функцию <code>wildcard</code> и строковые подстановки.
Подобная методика будет обсуждаться в следующих разделах. </p>

<p></p>
<p>
<a name="IDX149"></a>
<a name="IDX150"></a>
</p>

<p>В операционных системах фирмы Microsoft для разделения имен директорий используется
символ '\':</p> 

<pre>  c:\foo\bar\baz.c
</pre>

<p> Приведенное выше имя эквивалентно имени <tt>`c:/foo/bar/baz.c'</tt> в стиле Unix (здесь 
<tt>`c:'</tt> - это, так называемое, имя диска).
Когда программа <code>make</code> работает
в таких операционных системах, она допускает использование обоих символов ('/' и '\')
в именах файлов. Поддержка символа '\' <em>не</em> распространяется, однако, 
на шаблонные имена, 
где
этот символ имеет специальное значение. В таких случаях, вы <em>должны</em> использовать
имена в стиле Unix (с символом '/' в качестве "разделителя"). </p>


<h3><a name="SEC25" href="#TOC25">Функция <code>wildcard</code></a></h3>

<p>
<a name="IDX151"></a>
</p>

<p> Шаблонные имена автоматически "расширяются" при обработке правил, где они
использованы. В других случаях, например, при присваивании переменной нового значения,
или в аргументах функций, такого расширения не производится.
Для "принудительного" расширения шаблонных имен в любых нужных местах, предназначена 
функция <code>wildcard</code>, которая выглядит следующим 
образом: </p>

<pre>$(wildcard <var>шаблон</var>...)
</pre>

<p> Подобная строка, будучи использована в любом месте make-файла, будет заменена
списком существующих в данный момент файлов, которые удовлетворяет 
указанному шаблону (шаблонам). Имена файлов отделяются друг от друга пробелами.
В том случае, если не будет найдено файлов, удовлетворяющих заданному шаблону,
функция возвращает пустую строку. 
Заметьте, что такое поведение функции <code>wildcard</code> отличается от
поведения обычных шаблонов в правилах, которые, в таких случаях, остаются в исходном виде,
а не игнорируются 
(смотрите раздел <a href="#SEC24">Проблемы при использовании шаблонных имен</a>). </p>

<p> Одно из возможных применений фукнции <code>wildcard</code> - это 
получение списка исходных файлов, находящихся в текущем каталоге, например:
</p>

<pre>$(wildcard *.c)
</pre>

<p> Затем, мы может превратить список исходных файлов в список объектных файлов,
заменив их расширение с <samp>`.c'</samp> на <samp>`.o'</samp>, 
например: </p>

<pre>$(patsubst %.c,%.o,$(wildcard *.c))
</pre>

<p>(Здесь, для замены текста, мы использовали функцию <code>patsubst</code>. Смотрите раздел 
<a href="#SEC77">Функции анализа и подстановки строк</a>.) </p>

<p> Таким образом, make-файл, компилирующий все файлы с исходными текстами на языке Си из 
текущего 
каталога, и, затем, компонующий их вместе, может выглядеть 
так: </p>

<pre>objects := $(patsubst %.c,%.o,$(wildcard *.c))

foo : $(objects)
        cc -o foo $(objects)
</pre>

<p> В этом make-файле для компиляции исходных текстов используются неявные правила
компиляции программ на языке Си,
поэтому нет необходимости в явном описании правил компиляции. 
Смотрите раздел 
<a href="#SEC59">Две разновидности переменных</a>, где описывается оператор <samp>`:='</samp>, 
который является вариантом "стандартного" оператора
<samp>`='</samp>. </p>



<h2><a name="SEC26" href="#TOC26">Поиск пререквизитов по каталогам</a></h2>
<p>
<a name="IDX152"></a>
<a name="IDX153"></a>
<a name="IDX154"></a>
<a name="IDX155"></a>
<a name="IDX156"></a>

</p>

<p> Для больших систем, часто бывает полезным хранить бинарные файлы программы и
файлы с ее исходными текстами отдельно, в разных каталогах. Утилита <code>make</code> может
способствовать использованию такой методики с помощью механизма автоматического 
<strong>поиска
пререквизитов по каталогам</strong>. Когда вы будете распределять исходные файлы по директориям,
вам не придется менять отдельные правила, нужно лишь будет указать пути для поиска
этих файлов. </p>


<h3><a name="SEC27" href="#TOC27">Переменная <code>VPATH</code>: список каталогов для поиска пререквизитов</a></h3>

<p>
<a name="IDX157"></a>
</p>

<p> Значение переменной <code>VPATH</code> указывает утилите <code>make</code> список
директорий, где следует производить поиск файлов.
Чаще всего, этот путь представляет собой список каталогов с файлами, которые 
являются пререквизитами каких-либо правил и находятся не в текущем каталоге.
Однако, содержимое переменной <code>VPATH</code> используется для поиска 
любых файлов (а не только пререквизитов), в том числе и файлов, которые являются
целями каких-либо правил. </p>

<p> Таким образом, если файл, который является целью или пререквизитом, не найден
в текущем каталоге, <code>make</code> предпримет попытку найти его в каталогах,
перечисленных в <code>VPATH</code>. 
Если в одном из этих каталогов файл будет найден, он может стать
пререквизитом
(смотрите ниже). Учитывая это, правила могут
составляться таким образом, что имена пререквизитов указываются так, как если бы
они находились в текущем каталоге.
Смотрите раздел
<a href="#SEC30">Написание команд с учетом поиска по каталогам</a>. </p>

<p> Имена перечисленных в <code>VPATH</code> каталогов, отделяются друг от друга пробелами
или двоеточиями. При поиске, <code>make</code> перебирает каталоги в том порядке, как они 
перечислены в переменной <code>VPATH</code>. 
В операционных системах MS-DOS и MS-Windows для разделения имен директорий вместо символа
двоеточия, должен использоваться символ точки с запятой (поскольку символ ':' может быть частью 
названия каталога, находясь после имени диска). </p>

<p>Например, следующая запись: </p>

<pre>VPATH = src:../headers
</pre>

<p>указывает, что путь поиска состоит из двух каталогов, <tt>`src'</tt> и 
<tt>`../headers'</tt>. Поиск в этих каталогах производится в указанном порядке. </p>

<p> При таком значении переменной <code>VPATH</code>, следующее правило, </p> 

<pre>foo.o : foo.c
</pre>

<p>будет интерпретировано так, как будто он записано следующим образом: </p>

<pre>foo.o : src/foo.c
</pre>

<p>если предположить, что файл <tt>`foo.c'</tt> находится не в текущей директории, а
в каталоге
<tt>`src'</tt>. </p>


<h3><a name="SEC28" href="#TOC28">Директива <code>vpath</code></a></h3>

<p>
<a name="IDX158"></a>
</p>

<p> Средством, аналогичным переменной <code>VPATH</code>, но только более "избирательным", 
является директива 
<code>vpath</code> (обратите внимание на нижний регистр букв). Эта директива позволяет
задать пути поиска для некоторой группы файлов, а именно, файлов, чье имя подходит под
определенный шаблон.
Таким образом, вы можете задать некоторый список каталогов поиска для одной группы файлов,
и совсем другой список - для других файлов. </p>

<p> Имеется три формы записи директивы <code>vpath</code>: </p>

  <dl compact="compact">
  <dt><code>vpath <var>шаблон</var> <var>каталоги</var></code> 
  </dt><dd>Задать путь поиска <var>каталоги</var> для файлов, чье имя удовлетворяет шаблону
  <var>шаблон</var>. Путь поиска <var>каталоги</var> - это список имен директорий,
  разделенных двоеточиями (точкой запятой в MS-DOS или 
  MS-Windows) или пробелами, подобно списку поиска переменной
  <code>VPATH</code>.

  </dd><dt><code>vpath <var>шаблон</var></code> 
  </dt><dd>Очистить ("забыть") пути поиска для шаблона <var>шаблон</var>.

  </dd><dt><code>vpath</code> 
  </dt><dd>Очистить ("забыть") все пути поиска, ранее определенные 
  с помощью директивы <code>vpath</code>
  </dd></dl>

<p>В директиве <code>vpath</code>, шаблон представляет собой строку, содержащую
символ <samp>`%'</samp>. Имя искомого файла должно соответствовать этой шаблонной строке,
причем символ <samp>`%'</samp>, как и в шаблонных правилах
(смотрите раздел
<a href="#SEC98">Определение и переопределение шаблонных правил</a>),
может соответствовать любой последовательности символов (в 
том числе и пустой).
Например, шаблону <code>%.h</code> удовлетворяют имена файлов, имеющие 
расширение <code>.h</code>. (Если шаблон не содержит символа <samp>`%'</samp>, он
должен в точности совпадать с именем искомого файла, а необходимость в этом возникает
достаточно редко.) </p>

<p>
<a name="IDX159"></a>
<a name="IDX160"></a>
<a name="IDX161"></a>
<a name="IDX162"></a>
<a name="IDX163"></a>

Специальное значение символа <samp>`%'</samp> в шаблоне директивы 
<code>vpath</code> может быть отменено с помощью предшествующего ему символа
<samp>`\'</samp>. Специальное значение символа <samp>`\'</samp>, предшествующего
символу <samp>`%'</samp> может быть, в свою очередь, отменено добавлением еще
одного символа <samp>`\'</samp> (строка "<samp>\\%</samp>" будет интерпретироваться как
два символа. Первый из них - символ <samp>`\'</samp>, второй - символ <samp>`%'</samp>,
который будет интерпретироваться как шаблонный). Символы <samp>`\'</samp>, имеющие
специальное значение, удаляются из шаблона перед тем, как он будет сравниваться с именами
файлов. Символы <samp>`\'</samp> не имеющие специального значения, остаются в шаблоне. </p>

<p> Если искомого пререквизита нет в текущей директории, а его имя удовлетворяет
шаблону, указанному в директиве <code>vpath</code>, предпринимается попытка найти
его в каталогах, список которых указан в этой директиве. 
Поиск проходит аналогично поиску в каталогах, перечисленных в переменной <code>VPATH</code>,
и предшествует ему. </p>

<p>Например, запись </p>

<pre>vpath %.h ../headers
</pre>

<p>инструктирует <code>make</code>, производить поиск пререквизитов с расширением
<tt>`.h'</tt> в каталоге <tt>`../headers'</tt>, если они не могут быть найдены
в текущей директории. </p>

<p>Если имя искомого пререквизита подходит сразу под несколько шаблонов, указанных в директивах 
<code>vpath</code>, <code>make</code> обрабатывает эти директивы поочередно, друг за другом,
производя поиск во всех каталогах, перечисленных в каждой из них.
Отдельные директивы vpath обрабатываются в том порядке, как они расположены в
make-файле; несколько директив с одинаковым шаблоном никак не влияют друг на друга. </p>

<p>Например, в случае: </p>

<pre>vpath %.c foo
vpath %   blish
vpath %.c bar
</pre>

<p>поиск файла с раширением <samp>`.c'</samp> будет происходить в каталоге <tt>`foo'</tt>, 
затем
<tt>`blish'</tt>, и, наконец <tt>`bar'</tt>, а в случае </p>

<pre>vpath %.c foo:bar
vpath %   blish
</pre>

<p>поиск такого файла будет производиться в каталоге <tt>`foo'</tt>, затем
<tt>`bar'</tt>, и затем <tt>`blish'</tt>. </p>


<h3><a name="SEC29" href="#TOC29">Процедура поиска по каталогам</a></h3>

<p>
<a name="IDX164"></a>
<a name="IDX165"></a>
</p>

<p> Если файл, являющийся пререквизитом, найден с помощь поиска в каталогах 
(независимо от типа поиска - "общего" или "избирательного"), найденный путь к этому файлу
не всегда будет присутствовать в имени пререквизита, которое передаст вам
<code>make</code>. В некоторых
случаях найденный путь "отбрасывается" и не используется. </p>

<p> Вот алгоритм, который использует <code>make</code> при решении вопроса 
о том, следует ли оставлять или отбрасывать найденный в процессе поиска
по каталогам путь: </p>

<ol>

  <li>  Если целевой файл не может быть найден в директории, которая указана в make-файле,
  проводится его поиск по каталогам.

  </li><li>  Если поиск завершился успешно, найденный путь запоминается и искомый целевой
  файл временно помечается как найденная цель.

  </li><li>  Используя этот же метод, проверяются все пререквизиты данной цели.

  </li><li>  После обработки всех пререквизитов, для цели, возможно потребуется ее обновление:

<ol>
    <li> Если цель <em>не</em> нуждается в обновлении, директория, найденная в процессе
    поиска по каталогам, используется для всех пререквизитов этой цели.
    Иначе говоря, если цель не нуждается в обновлении, то используется
    директория, найденная в процессе поиска по каталогам.

    </li><li>    Если цель <em>нуждается</em> в обновлении (является устаревшей), то
    найденный в процессе поиска по каталогам путь <em>отбрасывается</em>, и цель
    обновляется с использовании только ее имени, указанном в make-файле. Другими словами,
    если <code>make</code> должна обновить цель, то эта цель строится или обновляется 
    "локально", а не в той директории, которая была найдена во время поиска по каталогам.
</li></ol>

</li></ol>

<p> Хотя этот алгоритм и выглядит сложным, на практике, он, как правило, дает именно
тот результат, который вы и ожидали. </p>

<p>
<a name="IDX166"></a>
<a name="IDX167"></a>

Другии версии <code>make</code> используют более простой 
алгоритм: если файла нет в текущей директории, но он был найден в процесс поиска 
по каталогам, установленный таким образом путь к этому файлу используется всегда, 
независимо от того,
нуждается ли цель в обновлении или нет. 
Таким образом, при обновлении цели, новая версия файла будет расположена по тому же пути,
где была найдена и "старая" версия. </p>

<p>
<a name="IDX168"></a>

Если для вас желательно именно такое поведение <code>make</code> по отношению к
некоторым (или всем) каталогам, вы можете использовать переменную
<code>GPATH</code>. </p>

<p> Для переменной <code>GPATH</code> используется такой же синтаксис, что и для
<code>VPATH</code> (список имен каталогов, разделенных пробелами или двоеточиями). 
Если "устаревший" целевой файл был найден в результате проведения поиска по каталогам,
и найденный путь присутствует в списке
<code>GPATH</code>, он не будет "отброшен". Далее, цель будет обновлена
именно по этому пути. </p>


<h3><a name="SEC30" href="#TOC30">Написание команд с учетом поиска по каталогам</a></h3>

<p>
<a name="IDX169"></a>
<a name="IDX170"></a>
</p>

<p> Тот факт, что пререквизит был найден с помощью поиска по каталогам, никак 
не влияет на исполняемые команды правила - они будут исполнены именно в том виде,
как они записаны в make-файле. Имея это ввиду, следут внимательно отнестись к написанию
команд - файлы, которые является пререквизитами, должны браться командами из тех 
каталогов, где они были найдены программой <code>make</code>. </p>

<p> Это может быть сделано с использованием <strong>автоматических переменных</strong>, таких
как <samp>`$^'</samp> 
(смотрите раздел <a href="#SEC101">Автоматические переменные</a>).
Например, значением переменной <samp>`$^'</samp> является список всех пререквизитов
правила с именами каталогов, где эти пререквизиты были найдены, а значением переменной
<samp>`$@'</samp> является имя цели. Например: </p> 

<pre>foo.o : foo.c
        cc -c $(CFLAGS) $^ -o $@
</pre>

<p>(Переменная <code>CFLAGS</code> используется для того, чтобы иметь возможность
указать опции компиляции исходных текстов на Си для неявных правил; в данном
случае мы использовали ее просто в целях "унификации" процесса компиляции (смотрите раздел 
<a href="#SEC96">Используемые в неявных правилах переменные</a>). </p>

<p> Часто, в список пререквизитов попадают файлы, которые не нужно передавать в
исполняемую команду (например, заголовочные файлы).
В такой ситуации можно использовать автоматическую переменную <samp>`$&lt;'</samp>, которая
содержит лишь первый пререквизит правила: </p> 

<pre>VPATH = src:../headers
foo.o : foo.c defs.h hack.h
        cc -c $(CFLAGS) $&lt; -o $@
</pre>



<h3><a name="SEC31" href="#TOC31">Поиск в каталогах и неявные правила</a></h3>
<p>
<a name="IDX171"></a>
<a name="IDX172"></a>
<a name="IDX173"></a>
<a name="IDX174"></a>
<a name="IDX175"></a>
<a name="IDX176"></a>
<a name="IDX177"></a>
</p>

<p> Поиск в каталогах, указанных с помощью <code>VPATH</code> или
<code>vpath</code> происходит также и при использовании 
неявных правил (смотрите раздел <a href="#SEC93">Использование неявных правил</a>). </p>

<p> Например, если для файла <tt>`foo.o'</tt> не имеется явных правил, то
<code>make</code> пробует использовать имеющиеся у нее неявные правила, 
в частности, правило, говорящее что для получения <tt>`foo.o'</tt>, надо скомпилировать
файл
<tt>`foo.c'</tt> (если, конечно, такой файл существует). Если искомого файла нет в 
текущей директории, то <code>make</code> предпринимает его поиск по каталогам.
Если файл <tt>`foo.c'</tt>
будет найден в каком-либо из каталогов (или упомянут в make-файле),
то к нему будет применено соответствующее неявное правило для компиляции программ
на языке Си. </p>

<p> Командам из неявных правил "по необходимости" приходится пользоваться автоматическими
переменными, следовательно они будут использовать имена файлов, полученных в результате
поиска по каталогам, без каких-либо дополнительных усилий с вашей стороны. </p>


<h3><a name="SEC32" href="#TOC32">Поиск в каталогах для подключаемых библиотек</a></h3>

<p>
<a name="IDX178"></a>
<a name="IDX179"></a>
<a name="IDX180"></a>
<a name="IDX181"></a>
<a name="IDX182"></a>
<a name="IDX183"></a>
<a name="IDX184"></a>
<a name="IDX185"></a>
<a name="IDX186"></a>
</p>

<p> Поиск в каталогах может производиться специальным образом для файлов,
являющихся библиотеками.
Эта специфическая особенность вступает в силу для пререквизитов, чье 
имя имеет специальную форму
<samp>`-l<var>имя</var>'</samp>. (Возможно, вам это покажется странным,
поскольку пререквизит, обычно, является именем файла, а файл библиотеки
<em>имя</em>, как правило, называется <tt>`lib<var>имя</var>.a'</tt>, 
а не <samp>`-l<var>имя</var>'</samp>.) </p>

<p> Когда имя пререквизита имеет форму <samp>`-l<var>имя</var>'</samp>, 
<code>make</code> обрабатывает ее специальным образом, производя поиск файла с именем
<tt>`lib<var>имя</var>.so'</tt> сначала в текущей директории, затем в каталогах, перечисленных
в подходящих директивах <code>vpath</code>, каталогах из <code>VPATH</code>, и, наконец, 
в каталогах 
<tt>`/lib'</tt>, <tt>`/usr/lib'</tt>, 
и <tt>`<var>prefix</var>/lib'</tt> (обычно <tt>`/usr/local/lib'</tt>, но 
версии <code>make</code> для операционных систем MS-DOS/MS-Windows 
ведут себя так, как если бы <var>prefix</var> 
был корневым каталогом, где инсталлирован компилятор DJGPP). </p>

<p>
Если такой файл не обнаружен, предпринимается попытка найти файл 
<tt>`lib<var>имя</var>.a'</tt> (в перечисленных выше каталогах). 
</p>

<p>
Так, если в вашей системе имеется библиотека <tt>`/usr/lib/libcurses.a'</tt> 
(и отсутствует файл <tt>`/usr/lib/libcurses.so'</tt>), то в следующем примере: 
</p>

<pre>foo : foo.c -lcurses
        cc $^ -o $@
</pre>

<p>
будет выполнена команда <samp>`cc foo.c /usr/lib/libcurses.a -o foo'</samp> если
<tt>`foo'</tt> "старше" чем  <tt>`foo.c'</tt> или 
<tt>`/usr/lib/libcurses.a'</tt>.
</p>

<p>
Хотя, по умолчанию проводится поиск файлов с именами
<tt>`lib<var>имя</var>.so'</tt> и <tt>`lib<var>имя</var>.a'</tt>, это поведение
может быть изменено с помощью
переменной <code>.LIBPATTERNS</code>.  Каждое слово в значении этой переменной
рассматривается как шаблонная строка.
Встретив пререквизит вида
<samp>`-l<var>имя</var>'</samp>, <code>make</code> заменяет символ процента
в каждом из шаблонов на 
<var>имя</var> и производит описанную выше процедуру поиска для полученного
имени библиотечного файла.
Если библиотечный файл не найден, используется следующий шаблон из списка и так далее.
</p>

<p>
По умолчанию, значением переменной <code>.LIBPATTERNS</code> является 
строка "<samp>`lib%.so lib%.a'</samp>", 
которая и обеспечивает описанное выше поведение.
</p>

<p>
Присвоив этой переменной пустое значение, вы можете полностью
отключить описанный механизм поиска подключаемых библиотек.
</p>


<h2><a name="SEC33" href="#TOC33">Абстрактные цели (phony targets)</a></h2>

<p>
<a name="IDX187"></a>
<a name="IDX188"></a>
<a name="IDX189"></a>
</p>

<p> Абстрактная цель (phony target) - это цель, которая не является, на самом деле, 
именем файла.
Это - просто имя для некоторой последовательности команд, которую при необходимости
может выполнить <code>make</code>. Есть по крайней мере два соображения в пользу
использования абстрактных целей: их использование позволяет избежать конфликтов 
с файлами, имеющими
такое же имя, а также ускорить работу <code>make</code>. </p>

<p> Если вы напишите правило, которое не будет порождать указанный в нем целевой
файл, то команды этого правила будут выполняться всякий раз при попытке достижения
цели правила. Например: </p>

<pre>clean:
        rm *.o temp
</pre>

<p> Поскольку исполнение команды <code>rm</code> не приводит к созданию файла
<tt>`clean'</tt>, такой файл, скорее всего, вообще не будет существовать. В таком случае,
команда <code>rm</code> будет выполняться всякий раз, когда вы скажете <samp>`make
clean'</samp>.

<a name="IDX190"></a>
</p>

<p>
<a name="IDX191"></a>

Однако, правило с такой "псевдо-целью" откажется работать, если в текущем каталоге
по какой-нибудь причине окажется файл с именем <tt>`clean'</tt>. Поскольку в правиле
не указано каких-либо пререквизитов, файл 
<tt>`clean'</tt> всегда будет считаться "новым" и команды, указанные в правиле
никогда не выполнятся.
Во избежании подобной проблемы, вы можете прямо указать, что некоторая цель 
является абстрактной. Для этого используется специальная цель
<code>.PHONY</code> (смотрите раздел 
<a href="#SEC36">Имена специальных целей</a>). 
В нашем примере достаточно записать: </p>

<pre>.PHONY : clean
</pre>

<p> После этого, вызов <samp>`make clean'</samp> будет приводить к исполнению нужных
команд, независимо от того, существует файл
<tt>`clean'</tt> или нет. </p>

<p> Поскольку абстрактные цели не являются файлами, которые могут быть обновлены при
изменении других файлов, <code>make</code> не предпринимает попыток применить 
неявные правила для таких целей
(смотрите раздел
<a href="#SEC93">Использование неявных правил</a>). 
В результате, использование абстрактных целей может ускорить обработку make-файла. </p>

<p> Таким образом, сначала должна идти строка, объявляющая <code>clean</code> абстрактной
целью, а затем уже следует правило, описывающее эту цель: </p>
 
<pre>.PHONY: clean
clean:
        rm *.o temp
</pre>

<p>
Следующий пример демонстрирует полезность использования абстрактных целей 
при рекурсивном
вызове 
<code>make</code>.  В таких случаях, как правило, в make-файле имеется
переменная, хранящая список подкаталогов с "подчиненными" проектами, которые
должны быть собраны.
Далее, один из возможных вариантов - создание правила, где с помощью
интерпретатора командной строки организуется цикл, выполняющий поочередную обработка всех
подкаталогов, например:
</p>

<pre>SUBDIRS = foo bar baz

subdirs:
        for dir in $(SUBDIRS); do \
          $(MAKE) -C $$dir; \
        done
</pre>

<p>
Такому методу, однако, присущи некоторые недостатки.  Во-первых, любые
ошибки, возникшие при обработке подпроектов, останутся "незамеченными" -
при возникновении ошибки в подпроекте <code>make</code> будет продолжать 
обработку оставшихся подкаталогов "как ни в чем ни бывало". 
Разумеется, в цикл можно ввести дополнительный код, который будет
детектировать 
ошибочные ситуации и прерывать работу. К сожалению, при запуске
<code>make</code> с опцией <code>-k</code>, такое поведение 
будет нежелательно.
Второй недостаток, (возможно, более серьезный) состоит в том, что при таком подходе
нельзя задействовать возможность "параллельной" работы <code>make</code>
(из-за наличия единственного правила). 
</p>

<p>
Объявив подкаталоги абстрактными целями (вы должны это сделать так как
подкаталоги проектов обычно уже существуют и иначе они не стали бы обрабатываться)
вы можете решить эти проблемы:
</p>

<pre>SUBDIRS = foo bar baz

.PHONY: subdirs $(SUBDIRS)

subdirs: $(SUBDIRS)

$(SUBDIRS):
        $(MAKE) -C $

foo: baz
</pre>

<p>
Мы также объявили, что подкаталог <tt>`foo'</tt> не может быть обработан до
тех пор, пока не будет закончена обработка подкаталога
<tt>`baz'</tt>; подобного рода декларация потребуется для случая "параллельной" работы.
</p>

<p> Как правило, абстрактная цель не должна быть пререквизитом какого-либо
целевого файла, в противном случае указанные в подобном правиле команды будут исполняться
всякий раз при его обработке. Если абстрактная цель не является пререквизитом
какого-либо реального файла, команды из правила, где она описана, будут исполняться
только в том случае, когда эта цель будет указана в качестве главной  
(смотрите раздел <a href="#SEC87">Аргументы для задания главной цели</a>). </p>

<p> Абстрактные цели могут иметь пререквизиты. Например, когда в одном каталоге
содержится сразу несколько собираемых программ, удобно хранить их описания в одном
make-файле.
Так как главной целью по умолчанию становится первая цель из make-файла, в таких
случаях, обычно, первым правилом make-файла делают правило с абстрактной целью 
<samp>`all'</samp>, пререквизитами которой являются все собираемые программы. 
Например: </p>
 
<pre>all : prog1 prog2 prog3
.PHONY : all

prog1 : prog1.o utils.o
        cc -o prog1 prog1.o utils.o

prog2 : prog2.o
        cc -o prog2 prog2.o

prog3 : prog3.o sort.o utils.o
        cc -o prog3 prog3.o sort.o utils.o
</pre>

<p> Теперь вам достаточно сказать <samp>`make'</samp>, чтобы обновить все три программы, или
указать нужные аргументы для обновления конкретных программ 
(например, <samp>`make prog1 prog3'</samp>).  </p>

<p> Когда одна абстрактная цель является пререквизитом другой абстрактной цели, она работает
как своего рода "подпрограмма".
В следующем примере, <samp>`make cleanall'</samp> удалит объектные файлы, diff-файлы, и  
файл <tt>`program'</tt>: </p>
 
<pre>.PHONY: cleanall cleanobj cleandiff

cleanall : cleanobj cleandiff
        rm program

cleanobj :
        rm *.o

cleandiff :
        rm *.diff
</pre>



<h2><a name="SEC34" href="#TOC34">Правила без команд и пререквизитов</a></h2>
<p>
<a name="IDX192"></a>
<a name="IDX193"></a>
<a name="IDX194"></a>
<a name="IDX195"></a>

</p>
<p> Если правило не имеет команд и пререквизитов, а целью этого правила является
имя несуществующего файла, то каждый раз, при обработке такого правила, 
<code>make</code> будет считать что его цель нуждается в обновлении. Если эта цель,
в свою очередь, является пререквизитом каких-либо правилах, то указанные в них команды
всякий раз будут выполняться. </p>

<p>Например: </p>

<pre>clean: FORCE
        rm $(objects)
FORCE:
</pre>

<p> Здесь, цель <samp>`FORCE'</samp> удовлетворяет специальным условиям (не имеет пререквизитов
и команд). Цель <samp>`clean'</samp> зависит от <samp>`FORCE'</samp>, поэтому команды
из правила с <samp>`clean'</samp> вынуждены будут выполняться.
В имени 
<samp>`FORCE'</samp> нет ничего "необычного", просто оно часто используется
для подобных целей. </p>

<p> Очевидно, что такое использование <samp>`FORCE'</samp> эквивалентно объявлению
цели <samp>clean</samp> абстрактной, с помощью
<samp>`.PHONY: clean'</samp>. </p>

<p> Подход с использованием <samp>`.PHONY'</samp> более понятен и эффективен, однако
другие версии <code>make</code> могут не поддерживать <samp>`.PHONY'</samp>. В силу
этой причины, во многих make-файлах используется 
<samp>`FORCE'</samp>. 
Смотрите раздел <a href="#SEC33">Абстрактные цели</a>. </p>


<h2><a name="SEC35" href="#TOC35">Использование пустых целей (empty target files) для фиксации событий</a></h2>
<p>
<a name="IDX196"></a>
<a name="IDX197"></a>
<a name="IDX198"></a>

</p>

<p><strong>Пустая цель (empty target)</strong> является вариантом абстрактной цели. Такие цели 
используются
для хранения команд, исполняющих действие, выполнение которого вам
может иногда потребоваться. В отличие от астрактных целей, пустая цель действительно
может существовать в виде файла. Однако, содержимое такого файла никоим образом 
не используется, и, зачастую, он просто пуст. </p>

<p> Назначение подобной цели - запомнить (с помощью времени последней модификации), когда
последний раз исполнялись указанные в правиле команды. Это делается при помощи включения
в список команд, содержащихся в правиле, команды <code>touch</code>, обновляющей эту цель. </p>

<p> Пустая цель должна иметь какие-нибудь пререквизиты (иначе в ней нет смысла).
Когда вы запрашиваете
обновление этой цели, команды из ее правила будут выполняться, если какой-либо
из пререквизитов "новее", чем цель. Другими словами, команды будут выполняться если
какой-либо из пререквизитов был обновлен со времени последнего обновления цели.
Например: </p>
 
<pre>print: foo.c bar.c
        lpr -p $?
        touch print
</pre>

<p>
<a name="IDX199"></a>
<a name="IDX200"></a>
<a name="IDX201"></a>

</p>

<p> С таким правилом, <samp>`make print'</samp> приведет к выполнению команды <code>lpr</code>,
если какой-нибудь из исходных файлов был изменен с момента последнего вызова <samp>`make 
print'</samp>. Автоматическая переменная <samp>`$?'</samp> использована для того,
чтобы печатать только те исходные файлы, которые были изменены
(смотрите раздел <a href="#SEC101">Автоматические переменные</a>). </p>


<h2><a name="SEC36" href="#TOC36">Имена специальных целей</a></h2>
<p>
<a name="IDX202"></a>
<a name="IDX203"></a>
<a name="IDX204"></a>

</p>
<p> Некоторые имена имеют специальное значение, когда используются в качестве целей. </p>

<dl compact="compact">
<dt><code>.PHONY</code>
</dt><dd>
<a name="IDX205"></a>
 

  Пререквизиты специальной цели 
  <code>.PHONY</code> объявляются абстрактными целями. При необходимости обновления
  таких целей, 
  <code>make</code> будет выполнять команды "безусловно", независимо от того,
  существует ли файл с таким именем, и времени, когда он был модифицирован.
  Смотрите раздел <a href="#SEC33">Абстрактные цели</a>. 

<a name="IDX206"></a>

</dd><dt><code>.SUFFIXES</code>
</dt><dd>

  Пререквизиты специальной цели <code>.SUFFIXES</code> представляют
  собой список суффиксов (расширений) имен файлов, которые будут использоваться
  при поиске суффиксных правил.
  Смотрите раздел <a href="#SEC106">Устаревшие суффиксные правила</a>.

<a name="IDX207"></a>

</dd><dt><code>.DEFAULT</code>
</dt><dd>

   Команды, определенные для цели <code>.DEFAULT</code>, будут использованы со 
  всеми целями make-файла, для которых не найдено ни явных, ни неявных правил.
  Смотрите раздел <a href="#SEC105">Определение правил "последнего шанса"</a>. 
  Команды, определенные для <code>.DEFAULT</code>, будут использованы для
  всех пререквизитов, не являющихся целями каких-либо правил. Смотрите
  раздел  
  <a href="#SEC107">Алгоритм поиска неявных правил</a>.  

<a name="IDX208"></a>

</dd><dt><code>.PRECIOUS</code>
</dt><dd>
<a name="IDX209"></a>
<a name="IDX210"></a>

  Цели, перечисленные в качестве
  пререквизитов <code>.PRECIOUS</code>, подвергаются специальной обработке. В том случае,
  если 
  <code>make</code> будет принудительно завершена или прервана 
  во время исполнения команд для их обновления, эти цели не будут удалены.
  Смотрите раздел <a href="#SEC49">Прерывание или принудительное завершение 
  <code>make</code></a>. Также, если цель является "промежуточным" файлов, он не
  будет, как обычно, удаляться после того, как необходимость в нем отпала.
  Смотрите раздел
  <a href="#SEC97">"Цепочки" неявных правил</a>. В последнем случае, эта 
  специальная цель работает подобно <code>.SECONDARY</code>.
  
  В качестве пререквизита <code>.PRECIOUS</code> может быть указан шаблон имени 
  (например, <samp>`%.o'</samp>), что позволит сохранять все промежуточные файлы
  с именами, удовлетворяющими этому шаблону.

<a name="IDX211"></a>

</dd><dt><code>.INTERMEDIATE</code>
</dt><dd>
<a name="IDX212"></a>

  Пререквизиты цели <code>.INTERMEDIATE</code> рассматриваются
  как промежуточные файлы. Смотрите раздел
  <a href="#SEC97">"Цепочки" неявных правил</a>. 
  <code>.INTERMEDIATE</code> без списка пререквизитов не производит
  никакого эффекта.

<a name="IDX213"></a>

</dd><dt><code>.SECONDARY</code>
</dt><dd>
<a name="IDX214"></a>
<a name="IDX215"></a>

  Цели, указанные в качестве пререквизитов
  <code>.SECONDARY</code> рассматриваются как промежуточные файлы, за исключением того,
  что они никогда не удаляются автоматически. Смотрите раздел
  <a href="#SEC97">"Цепочки" неявных правил</a>. 
  <code>.SECONDARY</code> без указания пререквизитов, помечает таким образом все цели,
  перечисленные в make-файле.

<a name="IDX216"></a>

</dd><dt><code>.DELETE_ON_ERROR</code>
</dt><dd>
<a name="IDX217"></a>

При наличии в make-файле цели с именем <code>.DELETE_ON_ERROR</code>, 
<code>make</code> будет удалять цель правила если она была модифицированы, а
обновляющая ее команда завершилась с ненулевым кодом возврата; аналогично, цель будет удаляться
при прерывании работы <code>make</code>.
Смотрите раздел <a href="#SEC48">Ошибки при исполнении команд</a>.

<a name="IDX218"></a>

</dd><dt><code>.IGNORE</code>

</dt><dd>

  <code>make</code> будет игнорировать ошибки при выполнении команд, обновляющих
  цели, перечисленные в качестве пререквизитов <code>.IGNORE</code>.
  Команды, указываемые для <code>.IGNORE</code>, не имеют значения. 
  Использование <code>.IGNORE</code> без списка пререквизитов, означает
  необходимость игнорирования ошибок во всех командах, исполняемых для обновления
  любой цели make-файла.
  Такое использование <samp>`.IGNORE'</samp> поддерживается только по
  историческим соображениям для обеспечения совместимости. Этот прием не слишком полезен, 
  поскольку воздействует
  на любую команду make-файла; вместо этого, мы рекомендуем использовать более "избирательный"
  метод, позволяющий игнорировать ошибки в конкретных командах. 
  Смотрите раздел <a href="#SEC48">Ошибки при исполнении команд</a>. 

<a name="IDX219"></a>

</dd><dt><code>.SILENT</code>
</dt><dd>

  Если вы указали некоторые цели в качестве пререквизитов <code>.SILENT</code>, то
  в процессе обновления этих целей, <code>make</code> не будет печатать выполняемые
  при этом команды. 
  Указываемые для <code>.SILENT</code> команды не имеют значения. 
  В случае использования 
  <code>.SILENT</code> без списка пререквизитов, будет отключена печать
  всех исполняемых команд. 
  Такое использование <samp>`.SILENT'</samp> поддерживается только по историческим
  причинам, для обеспечения совместимости.
  Мы рекомендуем использовать более избирательный метод для подавления печати
  отдельных команд.
  Смотрите раздел <a href="#SEC45">Отображение исполняемых команд</a>. 
  Временно подавить печать исполняемых команд можно, запуская
  <code>make</code> с опциями <samp>`-s'</samp> или <samp>`--silent'</samp>
  (смотрите раздел <a href="#SEC92">Обзор опций</a>). 
  
<a name="IDX220"></a>

</dd><dt><code>.EXPORT_ALL_VARIABLES</code>
</dt><dd>

  Будучи просто упомянутой в качестве цели, указывает <code>make</code> на
  необходимость, по умолчанию, экспортировать все переменные для возможности их 
  использования  
  в дочернем процессе. Смотрите раздел 
  <a href="#SEC52">Связь с make "нижнего уровня" через переменные</a>.

<a name="IDX221"></a>

</dd><dt><code>.NOTPARALLEL</code>
</dt><dd>
<a name="IDX222"></a>

При наличии в make-файле цели <code>.NOTPARALLEL</code>, 
данный экземпляр <code>make</code> будет работать "последовательно" (даже
при наличии опции <samp>`-j'</samp>).
Рекурсивно запущенные экземпляры <code>make</code> по-прежнему могут 
работать "параллельно" (если только их make-файлы не содержат такой же
специальной цели).
Любые пререквизиты данной цели игнорируются.
</dd></dl>

<p> Любой суффикс, определенный для суффиксных правил, а также "сцепление" двух
суффиксов (например, такое как <samp>`.c.o'</samp>), находясь на месте цели, рассматриваются
специальным образом.
Такие цели представляют из себя суффиксные правила - устаревший,
однако, по-прежнему, широко распространенный способ задания шаблонных правил.
В принципе, любое имя могло бы, таким образом, стать специальной целью, если разбить
его на две части и добавить обе из них к списку суффиксов.
На практике, суффиксы обычно начинаются с символа <samp>`.'</samp>, поэтому такие
специальные цели также начинаются с  <samp>`.'</samp>. 
Смотрите раздел <a href="#SEC106">Устаревшие суффиксные правила</a>. </p>


<h2><a name="SEC37" href="#TOC37">Правила с несколькими целями</a></h2>
<p>
<a name="IDX223"></a>
<a name="IDX224"></a>
<a name="IDX225"></a>
<a name="IDX226"></a>

</p>

<p> Правило с несколькими целями, эквивалентно нескольким правилам с одной целью, которые,
за исключением имени цели, полностью идентичны друг другу.
Ко всем целям будет применяться один и тот же набор команд, однако, эффект от их исполнения
может быть разным, поскольку они могут ссылаться на имя обрабатываемой
в данный
момент цели, используя автоматическую переменную 
<samp>`$@'</samp>. А также, все цели подобного правила имеют один и тот же список
пререквизитов. </p>

<p>Это может быть полезно в двух случаях. </p>

<ul>
<li>

  Вам нужны только пререквизиты, а не команды. 
  Например, строка: 

<pre>kbd.o command.o files.o: command.h
</pre>

объявляет дополнительный пререквизит для каждого из трех указанных объектных файлов.

</li><li>

  Сходные команды используются для обновления всех целей. 
  Эти команды не
  обязаны быть абсолютно идентичными, поскольку, для подстановки конкретного имени цели,
  может быть использована автоматическая переменная <samp>`$@'</samp>  
  (смотрите раздел <a href="#SEC101">Автоматические переменные</a>). 
  
  Например: 

<pre>bigoutput littleoutput : text.g
        generate text.g -$(subst output,,$@) &gt; $@
</pre>

<a name="IDX227"></a>

эквивалентно


<pre>bigoutput : text.g
        generate text.g -big &gt; bigoutput
littleoutput : text.g
        generate text.g -little &gt; littleoutput
</pre>

    Здесь, мы предполагаем, что гипотетическая программа <code>generate</code> может 
   генерировать 
    выходную информацию двух видов, переключаясь с помощью опций
  <samp>`-big'</samp> и 
  <samp>`-little'</samp>. 
  Работа функции <code>subst</code> описана в разделе 
  <a href="#SEC77">Функции анализа и подстановки строк</a>.

</li></ul>


<p> Предположим, вы хотели бы менять список пререквизитов для конкретной цели, подобно
тому, как переменная <samp>`$@'</samp> позволяет вам варьировать исполняемые команды.
Этого невозможно добиться при помощи обычного правила с несколькими целями, однако
вы можете это сделать, используя <strong>статические шаблонные правила</strong>. 
Смотрите раздел  
<a href="#SEC39">Статические шаблонные правила </a>. </p>


<h2><a name="SEC38" href="#TOC38">Несколько правил с одной целью</a></h2>
<p>
<a name="IDX228"></a>
<a name="IDX229"></a>
<a name="IDX230"></a>
<a name="IDX231"></a>

</p>

<p> Один и тот же файл может являться целью нескольких правил. Все пререквизиты
такой цели, перечисленные в разных правилах, объединяются в один общий список
ее пререквизитов. Команды для обновления цели, будут выполняться в том случае,
если хотя бы один пререквизит из любого правила окажется "более новым", чем эта
цель. </p>

<p> Для одной цели может быть исполнен только один набор команд. Если команды для обновления
цели указаны сразу в нескольких правилах, <code>make</code> выполнит только последний
встретившийся набор команд и выдаст сообщение об ошибке. 
(В специальном случае, когда имя целевого файла начинается с точки, сообщение об
ошибке не выдается. Такое странное поведение сохранено только для совместимости
с другими реализациями <code>make</code>). У вас нет причин писать свои make-файлы
таким странным образом, поэтому вы получите сообщение об ошибке. </p>

<p> Дополнительное правило, содержащее только пререквизиты, может быть использовано
для "быстрого" добавления нескольких дополнительных пререквизитов одновременно
ко многим файлам.
Например, в make-файле обычно имеется переменная 
<code>objects</code>, содержащая список всех объектных файлов собираемой программы.
Возможно, простейший путь указать, что все объектные файлы должны быть перекомпилированы 
при изменении
<tt>`config.h'</tt> - это написать: </p>

<pre>objects = foo.o bar.o
foo.o : defs.h
bar.o : defs.h test.h
$(objects) : config.h
</pre>

<p> Подобная запись хороша тем, что может быть легко добавлена в make-файл или
удалена из него, не затрагивая "основные" правила, используемые для генерации
объектных файлов. Это удобно при необходимости "срочно" добавить в make-файл
еще несколько пререквизитов. </p>

<p> Другой возможный прием заключается в том, чтобы передавать список дополнительных 
пререквизитов в переменной, значение которой устанавливать в командной строке при
вызове <code>make</code> (смотрите раздел
<a href="#SEC90">"Перекрытие" переменных</a>). В следующем примере, </p>

<pre>extradeps=
$(objects) : $(extradeps)
</pre>

<p>вызов <samp>`make extradeps=foo.h'</samp> будет добавлять  
<tt>`foo.h'</tt> в список пререквизитов каждого из объектных файлов. При обычном 
вызове <samp>`make'</samp>, этого делаться не будет. </p>

<p> Если ни одно из правил, описывающее цель, не имеет команд, <code>make</code>
попытается применить к этой цели неявные правила 
(смотрите раздел <a href="#SEC93">Использование неявных правил</a>). </p>


<h2><a name="SEC39" href="#TOC39">Статические шаблонные правила (static pattern rules)</a></h2>
<p>
<a name="IDX232"></a>
<a name="IDX233"></a>
<a name="IDX234"></a>
<a name="IDX235"></a>
<a name="IDX236"></a>

</p>

<p><strong>Статические шаблонные правила (static pattern rules)</strong> - это 
правила с несколькими целями,
и возможностью автоматически создавать список пререквизитов для каждой цели, используя
ее имя.
Это - механизм более общий, чем обычные правила с несколькими целями, потому что
их цели не должны иметь идентичные пререквизиты. 
Их пререквизиты должны быть 
<em>похожими</em>, но не обязательно <em>идентичными</em>. </p>



<h3><a name="SEC40" href="#TOC40">Синтаксис статических шаблонных правил</a></h3>
<p>
<a name="IDX237"></a>
<a name="IDX238"></a>

</p>
<p>Для статических шаблонных правил используется следующий синтаксис: </p>

<pre><var>цели</var> ...: <var>шаблон-цели</var>: <var>шаблоны-пререквизитов</var> ...
        <var>команды</var>
        ...
</pre>

<p>В списке <var>целей</var> перечисляются цели, к которым будет применяться данное
правило.
Так же, как и в обычных правилах, при задании имен целей могут использоваться 
шаблонные символы
(смотрите раздел <a href="#SEC22">Использование шаблонных символов в именах файлов</a>). 
</p>

<p>
<a name="IDX239"></a>
<a name="IDX240"></a>

<var>Шаблон-цели</var> и 
<var>шаблоны-пререквизитов</var> описывают, как вычислять список пререквизитов для каждой
цели. Каждая цель статического шаблонного правила сопоставляется с
<var>шаблоном-цели</var>, для получения части имени цели, называемой
<strong>основой</strong>. Далее, полученная основа имени подставляется в каждый из
<var>шаблонов-пререквизитов</var> для получения имен пререквизитов (по одному имени из
каждого <var>шаблона-пререквизита</var>). </p>

<p> Обычно, в каждом шаблоне содержится по одному символу <samp>`%'</samp>. Когда
цель сопоставляется с <var>шаблоном-цели</var>, символ <samp>`%'</samp> может соответствовать
любой части имени цели; именно эта часть будет являться <strong>основой</strong>. Прочие части
имени цели должны в точности совпадать с шаблоном. Например, цель <tt>`foo.o'</tt> удовлетворяет
шаблону <samp>`%.o'</samp> и ее основой будет <samp>`foo'</samp>. Цели же
<tt>`foo.c'</tt> и <tt>`foo.out'</tt> не будут удовлетворять этому шаблону. </p>

<p>
<a name="IDX241"></a>

Имена пререквизитов для каждой цели генерируются путем подстановки основы вместо
символа 
<samp>`%'</samp> в каждом из шаблонов пререквизитов. Например, из одного шаблона
пререквизита
<tt>`%.c'</tt> и основы
<samp>`foo'</samp>, будет получено имя пререквизита <tt>`foo.c'</tt>. Шаблоны
пререквизитов, не содержащие символа
<samp>`%'</samp> также вполне допустимы, в этом случае, указанный пререквизит будет 
одинаков для всех целей. </p>

<p>
<a name="IDX242"></a>
<a name="IDX243"></a>
<a name="IDX244"></a>
<a name="IDX245"></a>
<a name="IDX246"></a>

Специальное значение символа <samp>`%'</samp> в шаблоне может быть отменено с
помощью предшествующего ему символа <samp>`\'</samp>.

Специальное значение символа <samp>`\'</samp>, предшествующего символу <samp>`%'</samp>, 
может быть, в свою очередь, отменено добавлением еще одного символа <samp>`\'</samp> 
(строка <samp>\\%</samp> будет интерпретироваться как два символа. Первый из них - символ <samp>`\'</samp>, 
второй - символ <samp>`%'</samp>, который будет интерпретироваться как шаблонный). 
Символы <samp>`\'</samp>, имеющие специальное значение, удаляются из шаблона перед тем, 
как он будет сравниваться с именами файлов. Символы <samp>`\'</samp>, которые не могут
повлиять на интерпретацию <samp>`%'</samp>,
остаются в шаблоне. 
Например, шаблон
<tt>`the\%weird\\%pattern\\'</tt> состоит из строки <samp>`the%weird\'</samp>, за которой
следуют шаблонный символ  
<samp>`%'</samp> и строка <samp>`pattern\\'</samp>. 
Последние два символа остаются без изменений, поскольку не могут повлиять на
способ интерпретации какого-либо символа <samp>%</samp>. </p>

<p> Вот пример, где объектные файлы <tt>`foo.o'</tt> 
<tt>`bar.o'</tt> компилируются из соответствующих им исходных файлов с 
расширением <tt>`.c'</tt>: </p>

<pre>objects = foo.o bar.o

all: $(objects)

$(objects): %.o: %.c
        $(CC) -c $(CFLAGS) $&lt; -o $@
</pre>

<p> В этом примере, автоматическая переменные <samp>`$&lt;'</samp> и <samp>`$@'</samp> 
содержат, соответственно, имя пререквизита и имя цели (смотрите раздел
<a href="#SEC101">Автоматические переменные</a>). </p>

<p> Каждая перечисленная в правиле цель, должна удовлетворять шаблону цели, иначе
будет выдано соответствующее предупреждение.
Если у вас имеется список файлов, лишь некоторые из которых удовлетворяют шаблону,
вы можете удалить неподходящие имена с помощью функции
<code>filter</code> 
(смотрите раздел 
<a href="#SEC77">Функции анализа и подстановки строк</a>): </p>

<pre>files = foo.elc bar.o lose.o

$(filter %.o,$(files)): %.o: %.c
        $(CC) -c $(CFLAGS) $&lt; -o $@
$(filter %.elc,$(files)): %.elc: %.el
        emacs -f batch-byte-compile $&lt;
</pre>

<p> В этом примере, результатом <samp>`$(filter %.o,$(files))'</samp> является 
<tt>`bar.o lose.o'</tt>, и первое статическое правило вызывает компиляцию этих
объектных файлов из соответствующих им исходных файлов.
Результатом выражения
<samp>`$(filter %.elc,$(files))'</samp> является <tt>`foo.elc'</tt>, и этот файл
получается из <tt>`foo.el'</tt>. </p>

<p> Следующий пример иллюстрирует использование автоматической переменной 
<code>$*</code> в статическом шаблонном правиле: 

<a name="IDX247"></a>

</p>

<pre>bigoutput littleoutput : %output : text.g
        generate text.g -$* &gt; $@
</pre>

<p> При запуске команды <code>generate</code>, ссылка на <code>$*</code> будет заменена 
соответствующей основой имени - строкой
<samp>`big'</samp> или <samp>`little'</samp>. </p>



<h3><a name="SEC41" href="#TOC41">Сравнение статических шаблонных правил (static pattern rules) и неявных правил (implicit rules)</a></h3>

<p>
<a name="IDX248"></a>
<a name="IDX249"></a>
</p>

<p> Статические шаблонные правила имеют много общего с обычными шаблонными правилами
(смотрите раздел
<a href="#SEC98">Определение и переопределение шаблонных правил</a>). 
Оба вида правил содержат шаблон для цели и шаблон для конструирования имен пререквизитов.
Разница заключается в том, каким образом 
<code>make</code> принимает решение о необходимости применения данного 
правила. </p>

<p> Неявное правило <em>может</em> быть применено к любой цели, которая подходит
под его шаблон, однако оно действительно
<em>будет</em> применено только в том случае, когда цель не имеет команд, определенных
иным способом и имеются все необходимые для этого пререквизиты.
Если для одной цели могут быть применены сразу несколько неявных правил, будет использовано
только одно из них; какое именно - будет зависеть от порядка их следования. </p>

<p> Статическое шаблонное правило, напротив, применяется к точно указанному набору целей. 
Оно не может быть применено к каким-либо другим целям и одинаковым образом применяется
ко всем перечисленным в нем целям.
Случай, когда к одной и той же цели могут быть применены два разных статических шаблонных
правила, оба из которых имеют команды, считается ошибкой. </p>

<p> Статические шаблонные правила могут быть предпочтительней неявных правил по следующим
причинам: </p>

<ul>
  <li>  Вы можете использовать статические шаблонные правила для тех файлов,
  чье имя синтаксически не подходит для использования в неявных правилах, но
  может быть явно указано в списке целей.

  </li><li>  Если вы не уверены, какие, в точности, файлы содержатся в вашей директории,
  вы не можете быть уверены в том, что какие-нибудь "ненужные" в данный момент файлы
  не повлият на работу <code>make</code>. Может случится, что будут использованы не те 
  неявные правила, на которые вы рассчитывали, поскольку их выбор будет зависеть от
  применяемой процедуры поиска.
  В случае статических шаблонных правил такой неоднозначности не существует: каждое
  правило будет применяться в точности к тем целям, которые были в нем указаны.
</li></ul>



<h2><a name="SEC42" href="#TOC42">Правила с двойным двоеточием (double-colon rules)</a></h2>
<p>
<a name="IDX250"></a>
<a name="IDX251"></a>
<a name="IDX252"></a>
<a name="IDX253"></a>

</p>
<p> <strong>Правила с двойным двоеточием (double-colon rules)</strong> представляют 
собой правила, 
записанные с помощью <samp>`::'</samp> вместо обычного 
<samp>`:'</samp> после имени цели. По сравнению с обычными правилами, 
они обрабатываюся по-другому в случаях, когда одна и та же цель указана 
сразу в нескольких правилах. </p>

<p> Когда цель указана в нескольких правилах, все они должны быть одного 
и того же типа: либо обычными правилами, либо правилами с двойным двоеточием.
Если все они являются правилами с двойным двоеточием, то каждое из них
является независимым от других.
Команды, указанные в правиле с двойным двоеточием, будут выполняться, если
его цель окажется "старше", чем какой-либо из его пререквизитов.
Результатом может быть выполнение всех или нескольких правил. Может получиться
и так, что ни одно из правил не будет выполнено. </p>

<p> На самом деле, правила с двойным двоеточием полностью независимы друг от
друга. Каждое из этих правил, обрабатывается индивидуально, как если бы они
были обычными правилами с разными целями. </p>

<p> Правила с двойным двоеточием исполняются в том порядке, как они описаны в 
make-файле. 
Однако, в случаях, когда использование таких правил действительно необходимо,
порядок исполнения команд, как правило, не имеет значения. </p>

<p> В типичных ситуациях, правила с двойным двоеточиям не слишком полезны. Они
используются в тех случаях, когда способ обновления цели зависит от того,
какой именно из пререквизитов вызвал необходимость ее обновления. А такие случаи
встречаются нечасто. </p>

<p> Каждое правило с двойным двоеточием должно содержать команды, в противном
случае <code>make</code> попытается применить подходящее неявное правило.
Смотрите раздел <a href="#SEC93">Использование неявных правил</a>. </p>


<h2><a name="SEC43" href="#TOC43">Автоматическая генерация списка пререквизитов</a></h2>

<p>
<a name="IDX254"></a>
<a name="IDX255"></a>
<a name="IDX256"></a>
</p>

<p> Как правило, в типичном make-файле значительная часть правил служит лишь для того,
чтобы описать зависимость объектных файлов от некоторых заголовочных файлов.
Например, если 
<tt>`main.c'</tt> использует <tt>`defs.h'</tt>, включая его с помощью директивы
<code>#include</code>, вы можете написать: </p> 

<pre>main.o: defs.h
</pre>

<p> Это правило необходимо для того, чтобы <code>make</code> обновляла
объектный файл
<tt>`main.o'</tt> при каждом изменении <tt>`defs.h'</tt>. Для большой программы,
скорее всего, вам придется написать большое количество подобных правил.
Далее, каждый раз при изменении исходных текстов путем добавления или удаления директивы 
<code>#include</code>, вам придется модифицировать соответствующим образом и make-файл.

<a name="IDX257"></a>

</p>

<p>
<a name="IDX258"></a>

    Чтобы избежать подобных неудобств, большинство современных
компиляторов могут автоматически создать для вас такие правила, просматривая
содержимое исходных файлов, и учитывая встретившиеся в них директивы <code>#include</code>.
Обычно, это делается при помощи опции компилятора <samp>`-M'</samp>. 
Например, результатом работы команды </p> 

<pre>cc -M main.c
</pre>

<p>будет строка: </p>

<pre>main.o : main.c defs.h
</pre>

<p> Таким образом, вам больше не потребуется писать подобные правила "вручную" - эту работу
возьмет на себя компилятор. </p>

<p> Обратите внимание, что в приведенной выше зависимости упоминается файл
<tt>`main.o'</tt> и, следовательно, этот файл не сможет рассматриваться
как промежуточный в процессе поиска неявных правил.
Как следствие, <code>make</code> никогда не будет удалять этот файл
после его использования;
смотрите раздел <a href="#SEC97">"Цепочки" неявных правил</a>. </p>

<p>
<a name="IDX259"></a>

При работе со старыми реализациями <code>make</code>, обычной практикой
являлась генерация пререквизитов по отдельному запросу, наподобие
<samp>`make depend'</samp>.

Эта команда создаст файл <tt>`depend'</tt>, содержащий все автоматически сгенерированные
пререквизиты; затем они могут быть включены в make-файл с помощью директивы 
<code>include</code> (смотрите раздел
<a href="#SEC15">Подключение других make-файлов</a>). </p>

<p> Возможность автоматического обновления make-файлов, заложенная в GNU <code>make</code>, 
делает эту практику устаревшей
--вам никогда не понадобится явно указыватть утилите <code>make</code> на необходимость
обновления списка пререквизитов, поскольку она всегда обновляет 
любые используемые make-файлы, если они устарели. 
Смотрите раздел <a href="#SEC17">Автоматическое обновление make-файлов</a>. </p>

<p> Мы рекомендуем вам использовать подход, когда для каждого исходного файла имеется
свой маленький make-файл, содержащий список пререквизитов этого исходного файла. 
Для каждого исходного файла 
<tt>`<var>имя</var>.c'</tt> имеется make-файл <tt>`<var>имя</var>.d'</tt>,
в котором перечислен список файлов, от которых зависит объектный файл 
<tt>`<var>name</var>.o'</tt>. При таком подходе, новые списки пререквизитов могут 
строиться только для тех исходных файлов, которые действительно были модифицированы. </p>

<p> Вот пример шаблонного правила для генерации файлов пререквизитов (то есть make-файлов),
имеющих имя <tt>`<var>имя</var>.d'</tt> из файлов с исходным текстом 
<tt>`<var>имя</var>.c'</tt>: </p>

<pre>%.d: %.c
        set -e; $(CC) -M $(CPPFLAGS) $&lt; \
                  | sed 's/\($*\)\.o[ :]*/\1.o $@ : /g' &gt; $@; \
                [ -s $@ ] || rm -f $@
</pre>

<p>Для получения подробной информации об определении шаблонных правил смотрите
раздел <a href="#SEC98">Определение и переопределение шаблонных правил</a>. 
Флажок <samp>`-e'</samp> заставляет интерпретатор командной строки
немедленно завершать работу в случае, если при вызове
<code>$(CC)</code> произойдет ошибка (команда возвратит отличный от нуля код завершения). 
Обычно, интерпретатор командной строки завершается с кодом возврата, полученным от
последней выполненной команды из всей цепочки команд (<code>sed</code> в данном случае)
и <code>make</code> может просто "не заметить" ошибочной ситуации, произошедшей при
вызове компилятора.

<a name="IDX260"></a>

</p>

<p>
<a name="IDX261"></a>

    При использовании компилятора GNU C, вместо опции <samp>`-M'</samp> вы
можете попробовать использовать опцию 
<samp>`-MM'</samp>. При этом, в список пререквизитов не будут попадать системные
заголовочные файлы. Смотрите раздел `Options Controlling the Preprocessor' руководства
по компилятору GNU C. </p>

<p>
<a name="IDX262"></a>

Назначение команды <code>sed</code> заключается
в преобразовании (например) строки: </p>
 
<pre>main.o : main.c defs.h
</pre>

<p>в строку: </p>

<pre>main.o main.d : main.c defs.h
</pre>

<p>
<a name="IDX263"></a>

    Таким образом, получается, что каждый файл с расширением <samp>`.d'</samp>
зависит от всех тех же исходных и заголовочных файлов, что и соответствующий
ему объектный файл <samp>`.o'</samp>. Теперь, <code>make</code> будет заново
генерировать список пререквизитов при любом изменении исходного либо 
заголовочных файлов программы. </p>

<p> После того, как вы создали правило, обновляющее все <samp>`.d'</samp> файлы, надо
сделать эти файлы доступными для <code>make</code>. Для этого используется директива 
<code>include</code>. 
Смотрите раздел
<a href="#SEC15">Подключение других make-файлов</a>. Например: </p>

<pre>sources = foo.c bar.c

include $(sources:.c=.d)
</pre>

<p>(В этом примере, для преобразования списка исходных файлов
<samp>`foo.c bar.c'</samp> в список пререквизитов (<samp>`foo.d bar.d'</samp>), используется
техника ссылки на переменную с подстановкой.
Смотрите раздел <a href="#SEC61">Ссылка с заменой</a>).
Поскольку файлы с расширением
<samp>`.d'</samp> являются полноправными make-файлами, утилита <code>make</code> будет сама 
заботится об их своевременном обновлении, не требуя от вас каких-либо дополнительных
усилий. Смотрите раздел
<a href="#SEC17">Автоматическое обновление make-файлов</a>. </p>


<h1><a name="SEC44" href="#TOC44">Написание команд</a></h1>

<p>
<a name="IDX264"></a>
<a name="IDX265"></a>
<a name="IDX266"></a>

</p>

<p> Определенные в правиле команды, представляют собой текстовые строки с командами
для интерпретатора командной строки. Команды эти исполняются последовательно, одна за другой.
Каждая строка, содержащая команду, должна начинаться с символа табуляции. Первая
команда также может быть расположена в строке правила, содержащей список целей и
пререквизитов - в таком случае она отделяется от списка пререквизитов символом точки
с запятой и не требует наличия символа табуляции в ее начале.
Среди строк, содержащих команды, могут присутствовать пустые строки и строки, 
содержащие лишь комментарии - все они будут проигнорированы.
(Но имейте ввиду, что "пустая" строка, начинающаяся с символа табуляции, на самом
деле  
<em>не</em> является пустой! Она рассматривается как строка, содержащая пустую команду; 
смотрите раздел <a href="#SEC56">Пустые команды</a>.) </p>

<p> Несмотря на то, что пользователи могут пользоваться разными интерпретаторами
командной строки, для интерпретации команд из make-файла всегда используется
оболочка <tt>`/bin/sh'</tt>(если только в make-файле явно не задается использование 
какой-либо другого 
интерпретатора).
Смотрите раздел <a href="#SEC46">Исполнение команд</a>. </p>


<p>
<a name="IDX267"></a>
<a name="IDX268"></a>
<a name="IDX269"></a>

Тип используемой в системе оболочки определяется исходя из того,
может ли в командных строках использоваться комментарий и используемый
для этого синтаксис. 
В оболочке <tt>`/bin/sh'</tt>, комментарий начинается с символа <samp>`#'</samp> 
и продолжается до конца строки.
Символ <samp>`#'</samp> может располагаться и не в начале строки.
Текст до символа <samp>`#'</samp> не является частью комментария. </p>


<h2><a name="SEC45" href="#TOC45">Отображение исполняемых команд (command echoing)</a></h2>

<p>
<a name="IDX270"></a>
<a name="IDX271"></a>
<a name="IDX272"></a>
<a name="IDX273"></a>
<a name="IDX274"></a>

</p>

<p> Обычно, <code>make</code> печатает каждую командную строку перед тем, 
как она будет выполнена. Мы называем такой механизм  
<strong>эхом (echoing)</strong>, поскольку он создает впечатление, что это вы сами
набираете исполняемые команды. </p>

<p> Если строка, содержащая команду, начинается с символа <samp>`@'</samp>, 
печать этой команды не производится.
Символ <samp>`@'</samp> удаляется из строки с командой перед тем, как она
передается для обработки интерпретатору командной строки.
Такой прием часто используется для команд, назначением которых является
вывод некоторого сообщения, например, команд 
<code>echo</code>, используемых для отображения хода обработки 
make-файла: </p>

<pre>@echo About to make distribution files
</pre>

<p>
<a name="IDX275"></a>
<a name="IDX276"></a>
<a name="IDX277"></a>
<a name="IDX278"></a>

    Когда <code>make</code> вызывается с опцией <samp>`-n'</samp> или 
<samp>`--just-print'</samp>, происходит только лишь отображение команд, 
без их реального выполнения. Смотрите раздел
<a href="#SEC92">Обзор опций</a>. 
Это единственный случай, когда команды, начинающиеся с символа
<samp>`@'</samp>, также будут напечатаны. Используя эти опции, можно увидеть, 
какие команды 
<code>make</code> считает необходимым выполнить, без того, чтобы реально их
выполнять. </p>

<p>
<a name="IDX279"></a>
<a name="IDX280"></a>
<a name="IDX281"></a>
<a name="IDX282"></a>

Опции <samp>`-s'</samp> и <samp>`--silent'</samp> отключают всякое отображение
команд,  
как если бы все команды начинались с символа
<samp>`@'</samp>. Использование в make-файле правила со специальной целью
<code>.SILENT</code> без указания пререквизитов, имеет аналогичный эффект
(смотрите раздел <a href="#SEC36">Имена специальных целей</a>).
Использование специальной цели <code>.SILENT</code> является устаревшей практикой,
взамен которой мы рекомедуем пользоваться более гибким механизмом - символом
<samp>`@'</samp>. </p>


<h2><a name="SEC46" href="#TOC46">Исполнение команд</a></h2>

<p>
<a name="IDX283"></a>
<a name="IDX284"></a>
<a name="IDX285"></a>
<a name="IDX286"></a>

</p>

<p> Последовательность команд, обновляющих цель, исполняется путем вызова
отдельного экземпляра интерпретатора командной строки для каждой из строк 
make-файла, содержащих команды.
(На практике, <code>make</code> может использовать некоторую оптимизацию,
однако это не сказывается на конечном результате.) </p>

<p>
<a name="IDX287"></a>

Это, в частности, означает, что (<strong>обратите внимание!</strong>) такие команды, как
<code>cd</code>, влияющие на переменные среды процесса, не окажут никакого
влияния на следующие за ними команды.

<a name="DOCF2" href="#FOOT2">(2)</a>  

Если вы хотите, чтобы команда  
<code>cd</code> повлияла на следующую за ней команду, поместите обе команды на 
одну строку make-файла, отделив друг от друга с помощью точки с запятой.
В таком случае, <code>make</code> будет рассматривать их как единую команду
и "вместе" передаст их интерпретатору командной строки для последовательного
выполнения.
Например: </p>

<pre>foo : bar/lose
        cd bar; gobble lose &gt; ../foo
</pre>

<p>
<a name="IDX288"></a>
<a name="IDX289"></a>
<a name="IDX290"></a>
<a name="IDX291"></a>
<a name="IDX292"></a>
<a name="IDX293"></a>

Для повышения удобочитаемости, вы можете разбить длинные строки с командами на 
несколько частей с помощью символа <samp>'\'</samp>. Его нужно поместить в конец
каждой строки-фрагмента, за исключением последней.
Перед вызовом интерпретатора командной строки, подобная последовательность строк будет
скомбинирована в одну строку, путем удаления конечных символов <samp>'\'</samp>.
Таким образом, предыдущий пример можно записать так: </p>

<pre>foo : bar/lose
        cd bar;  \
        gobble lose &gt; ../foo
</pre>

<p>
<a name="IDX294"></a>

Имя программы, являющейся интерпретатором командной строки,
берется из переменной 
<code>SHELL</code>. По умолчанию, используется программа <tt>`/bin/sh'</tt>. </p>

<p>
<a name="IDX295"></a>

При работе в операционной системе MS-DOS, если
переменная <code>SHELL</code> не установлена, имя интерпретатора командной строки
берется из
переменной <code>COMSPEC</code> (которая установлена всегда). </p>

<p>
<a name="IDX296"></a>

При работе в операционной системе MS-DOS, обработка строк make-файла, изменяющих 
содержимое переменной
<code>SHELL</code>, имеет некоторые особенности. Стандартный для MS-DOS
интерпретатор командной строки
<tt>`command.com'</tt> обладает столь ограниченными возможностями, что большое
число пользователей <code>make</code> предпочитают заменить его на что-нибудь более
приемлимое.
Поэтому, работая под управлением 
MS-DOS, <code>make</code> отслеживает значение переменной <code>SHELL</code>, и меняет 
свое поведение в зависимости от того, указывает ли эта переменная на интерпретатор с ограниченными
функциональными возможностями (в стиле MS-DOS), либо на "полнофункциональный" интерпретатор 
(в стиле Unix).
Это позволяет утилите <code>make</code> сохранять приемлимую функциональность даже
в случае, когда переменная
<code>SHELL</code> указывает на командный интерпретатор 
<tt>`command.com'</tt>. </p>

<p> Если переменная <code>SHELL</code> указывает на интерпретатор командной строки, 
выдержанный в Unix-стиле, программа <code>make</code>, работающая под управлением
MS-DOS, дополнительно проверяет - действительно ли указанный интерпретатор существует;
если нет, <code>make</code> будет игнорировать строки make-файла, изменяющие значение
переменной <code>SHELL</code>. Работая под управлением MS-DOS, утилита 
GNU <code>make</code> проводит поиск интерпретатора командной строки в следующих
местах: </p>

<ol>
  <li>  В точности том месте, куда указывает значение переменной <code>SHELL</code>. 
  Например,
  если в make-файле указано <samp>`SHELL = /bin/sh'</samp>,
  <code>make</code> будет искать интерпретатор в каталоге <tt>`/bin'</tt> текущего
  диска.

  </li><li>  В текущем каталоге.

  </li><li>  В каждом из каталогов, перечисленных в переменной <code>PATH</code> (в том
    порядке, как они указаны). 

</li></ol>

<p> В каждом из проверяемых каталогов <code>make</code> сначала пытается найти 
файл с известным ей конкретным именем
(<tt>`sh'</tt> в приведенном выше примере). Если такого файла не существует,
делается попытка найти файл с подобным именем, но имеющим другое расширение. При этом, 
проверяются
нзвестные расширения, используемые для исполняемых файлов (
<tt>`.exe'</tt>, <tt>`.com'</tt>, 
<tt>`.bat'</tt>, <tt>`.btm'</tt>, <tt>`.sh'</tt> и некоторые другие). </p>

<p> При успешном завершении любой из этих попыток, в переменную <code>SHELL</code> 
записывается полное имя (с путем) найденного интерпретатора командной строки.
При неудачном завершении всех попыток найти командный интерпретатор,
присваивание переменной <code>SHELL</code> нового значения игнорируется 
и ее содержимое не изменяется.
Таким образом, <code>make</code> будет поддерживать
специфических для оболочек Unix-подобного стиля возможности, только в том случае,
если подходящая
оболочка действительно имеется в системе, где была запущена
<code>make</code>. </p>

<p> Обратите внимание, что описанная выше процедура поиска командного интерпретатора
выполняется только в тех случаях, когда переменная <code>SHELL</code> устанавливается из
из make-файла. Если значение этой переменной берется из среды (environment) или 
устанавливается с помощью командной строки, ожидается что она будет содержать полное
имя (с путем) интерпретатора командной строки, подобно тому, как это происходит в Unix. </p>

<p> Эффект от подобной специфической для MS-DOS обработки, состоит в том, что
строка make-файла  
<samp>`SHELL = /bin/sh'</samp> (встречающаяся во многих make-файлах, ориентированных на
Unix), без именений будет работать в среде MS-DOS - достаточно лишь поместить (например) 
программу
<tt>`sh.exe'</tt> в какой-нибудь из каталогов, перечисленных в 
<code>PATH</code>. </p>

<p>
<a name="IDX297"></a>

В отличие от большинства переменных, <code>SHELL</code> никогда не получает свое
значение из среды (environment). 
Это делается потому, что значение переменной <code>SHELL</code> используется для
указания командного интерпретатора, который выбран вами для интерактивного использования.
Было бы неправильно, если бы ваш персональный выбор отражался бы на работоспособности 
make-файлов.
Смотрите раздел
<a href="#SEC68">Переменные из операционного окружения</a>. 
Переменная среды <code>SHELL</code> <strong>используется</strong>, однако, при 
работе <code>make</code>
в операционных системах MS-DOS и MS-Windows, поскольку, как правило, пользователи, работающие в 
этих системах, не используют переменную <code>SHELL</code> для каких-либо иных целей, 
кроме работы с <code>make</code>.
Если, при работе в MS-DOS, вы по какой-либо причине не можете воспользоваться переменной
<code>SHELL</code>, вместо нее вы можете использовать 
переменную <code>MAKESHELL</code>. При наличии переменой <code>MAKESHELL</code>, 
значение переменной <code>SHELL</code> не учитывается. </p>


<h2><a name="SEC47" href="#TOC47">Параллельное исполнение команд</a></h2>
<p>
<a name="IDX298"></a>
<a name="IDX299"></a>
<a name="IDX300"></a>
<a name="IDX301"></a>
<a name="IDX302"></a>
<a name="IDX303"></a>

</p>

<p> GNU <code>make</code> умеет одновременно выполнять несколько команд. 
Обычно, <code>make</code> выполняет команды поочередно, ожидая завершения очередной
команды, перед тем, как выполнять следующую.
Однако, с помощью опций <samp>`-j'</samp> и 
<samp>`--jobs'</samp> можно заставить <code>make</code> выполнять одновременно
несколько команд. </p>

<p> В операционной системе MS-DOS, опция <samp>`-j'</samp> не работает, 
поскольку эта система не поддерживает многозадачность. </p>

<p> За опцией <samp>`-j'</samp> может следовать целое число, которое будет 
указывать количество одновременно исполняемых команд (это понятие называется
числом <strong>слотов задания (job slots)</strong>).
В случае, если после опции <samp>`-j'</samp> не указано конкретное число слотов задания,
подразумевается их неограниченное количество.
По умолчанию, количество слотов задания равняется единице, что, фактически, означает 
последовательное выполнение (одновременно может выполняться только одна команда). </p>

<p> Одно из неприятных последствий одновременной работы нескольких команд, заключается
в возможности "перемешивания" их сообщений, поскольку нескольким командам может "одновременно"
понадобится вывести некоторую информацию. </p>

<p> Другая проблема заключается в том, что два разных процесса не могут одновременно
читать данные из одного устройства. Дабы иметь  уверенность в том, что одновременно только 
одна команда сможет попытаться прочесть входные данные с терминала, 
<code>make</code> закрывает стандартные потоки ввода у всех запущенных команд, кроме одной.
Это означает, что попытка запущенной команды прочитать данные из стандартного ввода обычно 
заканчивается фатальной ошибкой (например, получением сигнала <samp>`Broken pipe'</samp>).

<a name="IDX304"></a>
<a name="IDX305"></a>

</p>

<p> Невозможно заранее предсказать, какая именно команда получит в качестве стандартного ввода
работающий входной поток 
(подключенный к терминалу или другому источнику, куда был перенаправлен стандартный
ввод утилиты
<code>make</code>). Сначала этот входной поток получит в свое распоряжение
первая запущенная команда, затем первая команда, которая была запущена по окончанию 
работы этой команды и так далее. </p>

<p> Возможно, в будущем, если мы найдем лучшую альтернативу, подобное 
поведение <code>make</code> будет изменено. Пока же, вам не следует использовать 
команды, работающие со стандартным вводом, если вы используете механизм параллельного
исполнения команд. Если вы не пользуетесь подобной возможностью,
во всех командах стандартный ввод будет работать нормально. </p>

<p>
Наконец, параллельное исполнение команд имеет некоторые особенности 
при рекурсивной работе <code>make</code>. Подробно это обсуждается в разделе
<a href="#SEC53">Передача опций в <code>make</code> "нижнего уровня"</a>.
</p>

<p> При аварийном завершении команды (от нее был получен ненулевой код возврата либо она
была прервана полученным сигналом) для которой не был указан режим игнорирования 
ошибок (смотрите раздел
<a href="#SEC48">Ошибки при исполнении команд</a>), оставшиеся командные строки (обновляющие
ту же цель) не будут выполняться.
При этом, если в командной строке не были указаны опции <samp>`-k'</samp> или 
<samp>`--keep-going'</samp>
(смотрите раздел 
<a href="#SEC92">Обзор опций</a>), программа <code>make</code> аварийно завершается.
При любом аварийном завершении (в том числе и из-за получения сигнала), перед тем как 
закончить работу, программа 
<code>make</code> дожидается завершения всех своих дочерних процессов. </p>

<p>
<a name="IDX306"></a>
<a name="IDX307"></a>
<a name="IDX308"></a>
<a name="IDX309"></a>
<a name="IDX310"></a>
<a name="IDX311"></a>

Если ваша компьютерная система сильно загружена, вам возможно захочется, чтобы 
<code>make</code> одновременно запускала меньшее число заданий, чем это делается
при нормальной загрузке. В таком случае можно использовать опцию 
<samp>`-l'</samp> для того, чтобы поставить число одновременно выполняемых команд 
в зависимость от средней загрузки системы.
Для этого, за опцией <samp>`-l'</samp> 
или <samp>`--max-load'</samp> должно следовать число с плавающей точкой. 
Например в следующем случае: </p>

<pre>-l 2.5
</pre>

<p> <code>make</code> будет запускать одновременно не более одной команды, если средняя
загрузка системы будет больше чем 2.5. 
Опция <samp>`-l'</samp>, за которой не следует число, отменяет установленное ранее
ограничение на максимальную загрузку систему. </p>

<p> При наличии ограничения на загрузку системы, <code>make</code> поступает следующим образом. 
Перед тем как запустить новое задание, если, по крайней мере, одно задание уже работает,
<code>make</code> проверяет среднюю загрузку системы. Если она превышает установленный предел,
<code>make</code> ожидает, пока загрузка не упадет до нужного уровня либо все прочие
задания завершатся. </p>

<p> По умолчанию, загрузка системы не ограничивается. </p>


<h2><a name="SEC48" href="#TOC48">Ошибки при исполнении команд</a></h2>
<p>
<a name="IDX312"></a>
<a name="IDX313"></a>
<a name="IDX314"></a>

</p>

<p> После завершения очередной команды, <code>make</code> проверяет полученный
от нее код возврата.
В случае успешного ее завершения, выполняется 
(своим экземпляром командного интерпретатора) следующая командная строка; 
после выполнения последней команды, обработка правила считается завершенной. </p>

<p> Если во время выполнения команды произошла ошибка (от нее был получен ненулевой код
возврата), <code>make</code> прекращает обработку текущего правила, и, возможно,
прерывает работу. </p>

<p> В определенных ситуациях, ошибка при выполнении некоторой команды не является проблемой.
Например,
вы можете использовать команду <code>mkdir</code>, дабы быть уверенным в существовании
некоторого каталога.
Если такая директория уже существует, команда <code>mkdir</code> сообщит об ошибке,
но, скорее всего, вы захотите, чтобы 
<code>make</code> в таком случае продолжила работу, не обращая внимания на ошибку. </p>

<p>
<a name="IDX315"></a>

Для того, чтобы проигнорировать ошибки в команде, поместите в начало 
строки (после символа табуляции), где она описана, символ <samp>`-'</samp>. 
Перед тем, как эта команда будет передана интерпретатору командной строки, символ
<samp>`-'</samp> будет из нее удален. </p>

<p> В следующем примере: </p> 

<pre>clean:
        -rm -f *.o
</pre>

<p>
<a name="IDX316"></a>

</p>

<p> обработка make-файла не будет прервана даже в том случае, если команда 
<code>rm</code> не сможет удалить файл. </p>

<p>
<a name="IDX317"></a>
<a name="IDX318"></a>
<a name="IDX319"></a>

При запуске 
<code>make</code> с опцией <samp>`-i'</samp> или <samp>`--ignore-errors'</samp>,
будут игнорироваться ошибки во всех командах, любого из правил. Такой же эффект
достигается при изпользовании специальной цели
<code>.IGNORE</code> в правиле, не имеющем пререквизитов. Вместо подобной устаревшей 
практики, мы рекомендуем применять более гибкую методику с использованием 
<samp>`-'</samp>. </p>

<p> Когда произошедшая ошибка игнорируется (например, вследствие использования 
<samp>`-'</samp> или опции  
<samp>`-i'</samp>), ошибочное завершение команды 
обрабатывается аналогично нормальному завершению, 
за исключением того, что при этом печатается полученный от команды код возврата
и выдается сообщение, что ошибка была проигнорирована. </p>

<p> При возникновении ошибки, насчет которой <code>make</code> не имеет инструкций о
необходимости ее игнорирования, считается что текущая цель не может быть корректно 
обновлена. По этой причине, любые другие цели, прямо или косвенно зависящие от нее,
также не могут быть достигнуты. 
Соответственно, никакие команды,
обновляющие эти цели, более исполняться не будут, поскольку не будут выполняться
их предварительные условия. </p>

<p>
<a name="IDX320"></a>
<a name="IDX321"></a>

    Обычно, в такой ситуации <code>make</code> прекращает работу, возвращая ненулевой
результат.
Однако, если была указана опция
<samp>`-k'</samp> или <samp>`--keep-going'</samp>, 
<code>make</code> продолжает обработку других пререквизитов оставшихся целей, при 
необходимости обновляя их. Например, после неудачной компиляции объектного файла,
<samp>`make -k'</samp> продолжит работу, компилируя оставшиеся объектные файлы,
хотя уже заранее известно, что их компоновка закончится неудачей.
Смотрите раздел <a href="#SEC92">Обзор опций</a>. 
По окончанию работы <code>make</code>, ненулевой код
возврата будет указывать на произошедшую ошибку. </p>

<p> Мотивы подобного поведения <code>make</code> просты. Обычно, запуская <code>make</code>,
вы хотите получить свежую версию указанной цели. Как только <code>make</code> понимает,
что это невозможно, она сразу же может собщить о происшедшей ошибке.
Напротив, задание опции <samp>`-k'</samp> означает, что ваша цель - наболее полно
протестировать процесс сборки программы, по возможности обнаружив максимальное
количество проблем. После устранения всех найденных проблем, можно будет заново повторить
процесс компиляции.
Подобными соображениями, например, руководствуется редактор Emacs, по умолчанию запуская
<code>make</code> с опцией <samp>`-k'</samp>, при выполнении команды <code>compile</code>.

<a name="IDX322"></a>

</p>

<p>
<a name="IDX323"></a>
<a name="IDX324"></a>
<a name="IDX325"></a>
<a name="IDX326"></a>

Обычно, если при аварийном завершении команды, целевой файл все же
обновился, то он, скорее всего просто поврежден и непригоден для дальнейшего использования.
В любом случае, он, как минимум, обновился некорректно.
Однако, поскольку время модификации файла все-таки изменилось, при следующем запуске,
<code>make</code> уже не будет обновлять этот файл, считая что имеется его "свежая" 
версия. Похожая ситуация возникает, 
когда исполняемая команда аварийно завершается из-за получения сигнала
(смотрите раздел <a href="#SEC49">Прерывание или принудительное завершение make</a>.
Пожалуй, правильнее всего будет удалять целевой файл, если обновляющая его команда 
завершилась с ошибкой. 
Утилита <code>make</code> будет поступать подобным образом при наличии в make-файле специальной
цели <code>.DELETE_ON_ERROR</code>. 
Практически во всех случаях подобное поведение
является наилучшей стратегией, однако, по умолчанию, <code>make</code> этого не делает
(из "исторических" сображений).
Для того, чтобы <code>make</code> автоматически удаляла 
некорректно построенные целевые файлы, вы должны явно этого потребовать. </p>


<h2><a name="SEC49" href="#TOC49">Прерывание (interrupting) или принудительное завершение (killing) <code>make</code></a></h2>

<p>
<a name="IDX327"></a>
<a name="IDX328"></a>
<a name="IDX329"></a>
<a name="IDX330"></a>
<a name="IDX331"></a>
<a name="IDX332"></a>

</p>

<p> Если при выполнении какой-либо команды, программа <code>make</code> получит 
прерывающий ее сигнал,
она может удалить целевой файл, который предполагалось обновить с помощью этой команды.
Файл будет удален в том случае, если время его последней модификации изменилось с тех пор,
как <code>make</code> проверяла его впервые. </p>

<p> Смысл удаления целевого файла заключается в том, чтобы при следующем запуске
<code>make</code>, он был построен заново. Для чего это делается?
Предположим, что во время работы компилятора, в то самое время как он начал
записывать на диск объектный файл <tt>`foo.o'</tt>, вы нажали
<kbd>Ctrl-c</kbd>.

Нажатие <kbd>Ctrl-c</kbd> немедленно прервет работу компилятора, в результате чего
на диске останется фрагмент не полностью записанного файла с более поздним временем 
модификации, чем исходный файл
<tt>`foo.c'</tt>. К счастью, <code>make</code> также получит сигнал
<kbd>Ctrl-c</kbd> и удалит этот "не доделанный" файл. Если бы <code>make</code> 
этого не сделала, при следующем вызове она 
могла 
бы 
подумать,
что уже имеется "свежая" версия файла
<tt>`foo.o'</tt>, и он больше не нуждается в обновлении - результатом был 
бы странный сбой в работе компоновщика, попытающегося скомпоновать 
поврежденный объектный файл. </p>

<p>
<a name="IDX333"></a>

Вы можете предотвратить удаление целевого файла в подобной ситуации, сделав его
пререквизитом специальной цели 
<code>.PRECIOUS</code>. Перед тем, как обновить цель,
<code>make</code> проверяет - не является ли она пререквизитом
цели <code>.PRECIOUS</code>, и на основании этого решает - нужно ли удалять ее при
получении сигнала или нет.
В некоторых ситуациях вам может потребоваться, чтобы при возникновении сигнала, 
цель, тем не менее, не удалялась. Например, если цель служит только для запоминания
времени последней модификации (и ее содержимое не имеет значия), или, по каким-либо
соображениям, она должна существовать всегда, или же процесс ее обновления является
"атомарной" операцией. </p>


<h2><a name="SEC50" href="#TOC50">Рекурсивный вызов <code>make</code></a></h2>
<p>
<a name="IDX334"></a>
<a name="IDX335"></a>

</p>

<p> При рекурсивном использовании, программа <code>make</code> сама выступает в качестве
одной из команд make-файла.
Подобная техника полезна, когда вы хотите иметь  отдельные make-файлы для различных
подсистем, составляющих большую систему.
Предположим, у вас имеется подкаталог 
<tt>`subdir'</tt>, содержащий свой собственный make-файл, и вы хотите, чтобы
make-файл из "объемлющего" каталога запускал <code>make</code> в этом подкаталоге. 
Вы можете сделать это, написав: </p>
 
<pre>subsystem:
        cd subdir &amp;&amp; $(MAKE)
</pre>

<p>или (смотрите раздел
<a href="#SEC92">Обзор опций</a>): </p>

<pre>subsystem:
        $(MAKE) -C subdir
</pre>

<p>
<a name="IDX336"></a>
<a name="IDX337"></a>

</p>

<p> Разумеется, вы может просто взять и использовать приведенные выше примеры в
своих make-файлах, однако, для понимания механизма рекурсивного вызова <code>make</code>,
вам необходимо знать множество вещей, в том числе, каким образом <code>make</code> 
"верхнего уровня" взаимодействует с рекурсивно вызванными копиями 
<code>make</code>. </p>

<p> Для удобства, GNU <code>make</code> записывает имя текущего рабочего каталога 
в переменную
<code>CURDIR</code>. В случае, если <code>make</code> была запущена с параметром
<code>-C</code>, эта переменная будет содержать имя нового (установленного с помощью 
параметра <code>-C</code>) каталога, а не "оригинального" рабочего каталога.
Переменная <code>CURDIR</code> имеет "приоритет" такой же, как если бы она была установлена
внутри make-файла (по умолчанию, переменная среды <code>CURDIR</code> не будет "перекрывать"
ее значение). Если вы сами запишете в переменную <code>CURDIR</code> новое значение, это 
никак не повлияет на работу <code>make</code>. </p>



<h3><a name="SEC51" href="#TOC51">Как работает переменная <code>MAKE</code></a></h3>
<p>
<a name="IDX338"></a>
<a name="IDX339"></a>

</p>
<p> При рекурсивном использовании <code>make</code>, вместо "прямого" указания имени
команды (<samp>`make'</samp>), всегда следует использовать 
переменную
<code>MAKE</code>, как показано в следующем примере: </p> 

<pre>subsystem:
        cd subdir &amp;&amp; $(MAKE)
</pre>

<p> Эта переменная содержит имя исполняемого файла, запущенного в ответ на команду 
<code>make</code>. 
Если, например, этот файл назывался <tt>`/bin/make'</tt>, то в приведенном выше примере
будет вызвана команда
<samp>`cd subdir &amp;&amp; /bin/make'</samp>. Таким образом, при каждом рекурсивном вызове,
будет использована та же самая программа <code>make</code>, которая была вызвана для
make-файла "верхнего" уровня.

<a name="IDX340"></a>

</p>

<p> Использование переменной <code>MAKE</code> оказывает влияние на работу опций
<samp>`-t'</samp> (<samp>`--touch'</samp>), 
<samp>`-n'</samp> (<samp>`--just-print'</samp>) и <samp>`-q'</samp> 
(<samp>`--question'</samp>). Командная строка, содержащая переменную <code>MAKE</code>, 
работает так, как если бы в ее начале находился специальный символ 
<samp>`+'</samp> 
(смотрите раздел <a href="#SEC88">Вместо исполнения команд</a>). </p>

<p> Предположим, в предыдущем примере <code>make</code> была вызвана следующим 
образом: <samp>`make -t'</samp>. (Опция 
<samp>`-t'</samp> заставляет <code>make</code> пометить все цели как "обновленные", не
выполняя в действительности каких-либо команд; смотрите раздел 
<a href="#SEC88">Вместо исполнения команд</a>.) 
Следуя тому, каким образом обычно описывается поведение опции
<samp>`-t'</samp>, команда <samp>`make -t'</samp> создала бы файл
с именем <tt>`subsystem'</tt> и на этом завершила бы свою работу. Скорее всего, однако,
вы хотели бы получить другой результат, а именно, запуск команды
<samp>`cd subdir &amp;&amp; make -t'</samp>. Но для достижения такого результата
потребовалось бы выполнение команды, в то время как опция 
<samp>`-t'</samp> говорит, что команды выполняться не должны.

<a name="IDX341"></a>
<a name="IDX342"></a>
<a name="IDX343"></a>

</p>

<p> Для получения желаемого результата, <code>make</code> обрабатывает строки с командами,
содержащие ссылку на переменную <code>MAKE</code> специальным образом: опции 
<samp>`-t'</samp>, <samp>`-n'</samp> и <samp>`-q'</samp> на такие строки не действуют. 
Командные строки с переменной
<code>MAKE</code> выполняются обычными образом, не обращая внимания на опции, отключающие
выполнение команд.
Для передачи параметров от <code>make</code> "высшего" уровня на "нижние" уровни используется
обычный механизм - переменная <code>MAKEFLAGS</code> (смотрите раздел 
<a href="#SEC53">Передача опций в <code>make</code> "нижнего уровня"</a>). 
Таким образом, все ваши запросы на обновление даты модификации целевых файлов или
печать исполняемых команд, будут переданы "вниз", во все подсистемы. </p>


<h3><a name="SEC52" href="#TOC52">Связь с <code>make</code> "нижнего уровня" (sub-<code>make</code>) через переменные</a></h3>

<p>
<a name="IDX344"></a>
<a name="IDX345"></a>
<a name="IDX346"></a>
<a name="IDX347"></a>
<a name="IDX348"></a>
<a name="IDX349"></a>
<a name="IDX350"></a>

</p>

<p> Значения переменных, определенных в <code>make</code> "верхнего уровня", могут
быть переданы в "порожденные" <code>make</code> через среду (как переменные среды),
при явном на то указании. Эти переменные будут определены и в "порожденных" 
<code>make</code>, однако их значение может быть "перекрыто" другим значением,
устанавливаемым в самом make-файле "нижнего уровня" (если только не 
использовать опцию  
<samp>`-e'</samp>; смотрите раздел <a href="#SEC92">Обзор опций</a>). </p>

<p> Чтобы "передать вниз" или <strong>экспортировать</strong> переменную, 
<code>make</code> добавляет 
переменную с таким же именем и значением в набор переменных среды 
перед выполнением каждой команды.
В свою очередь, "порожденные" копии
<code>make</code>, будут использовать значения переменных среды для инициализации
своих внутренних таблиц переменных.
Смотрите раздел <a href="#SEC68">Переменные из операционного окружения</a>. </p>

<p> За исключением случаев явного указания, <code>make</code> экспортирует только
те переменные, которые "изначально" были определены в среде, либо те из них, которые
были определены с помощью командной строки (и только в том случае, если имя 
переменной состоит только из букв, цифр и символов подчеркивания, поскольку прочие
имена могут "не работать" с некоторыми версиями командных интерпретаторов). </p>

<p> Специальные переменные <code>SHELL</code> и <code>MAKEFLAGS</code> экспортируются
всегда (за исключением случаев, когда вы "принудительно" запретили их экспорт). 
Переменная <code>MAKEFILES</code> экспортируется в том случае, если вы присвоили ей
какое-либо значение. </p>

<p> Переменные, определенные с помощью командной строки, автоматически передаются
"вниз", поскольку <code>make</code> помещает их (наряду с другими параметрами) в 
специальную переменную <code>MAKEFLAGS</code> (смотрите следующий раздел). </p>

<p> Переменные, которые по умолчанию созданы самой <code>make</code>, <em>не</em> передаются
"вниз" 
(смотрите раздел <a href="#SEC96">Используемые в неявных правилах переменные</a>). Такие
переменные каждая <code>make</code> "нижнего уровня", при необходимости, создаст
самостоятельно. </p>

<p>
<a name="IDX351"></a>

Для экспорта указанной переменной в 
<code>make</code> "нижнего уровня", используется директива 
<code>export</code>: </p>

<pre>export <var>переменная</var> ...
</pre>

<p>
<a name="IDX352"></a>

Для <em>запрета</em> экспорта переменной, 
используется директива <code>unexport</code>: </p>

<pre>unexport <var>переменная</var> ...
</pre>

<p> Для удобства, вы можете одновременно определить переменную и указать на необходимость
ее экспортирования. Это делается с помощью 
записи: </p>

<pre>export <var>переменная</var> = значение
</pre>

<p>что эквивалентно: </p>

<pre><var>переменная</var> = значение
export <var>переменная</var>
</pre>

<p>
или 

</p>

<pre>export <var>переменная</var> := значение
</pre>

<p>
что эквивалентно:

</p>

<pre><var>переменная</var> := значение
export <var>переменная</var>
</pre>

<p>
Аналогично, 

</p>

<pre>export <var>переменная</var> += значение
</pre>

<p>
эквивалентно:
</p>

<pre><var>переменная</var> += значение 
export <var>переменная</var>
</pre>

<p> Смотрите раздел <a href="#SEC65">Добавление текста к переменной</a>. </p>

<p> Вы можете заметить, что директивы <code>export</code> и <code>unexport</code>
работают в <code>make</code> таким же образом, как и подобные директивы 
командного интерпретатора <code>sh</code>. </p>

<p> Если вы хотите, чтобы, по умолчанию, все переменные экспортировались, 
используйте директиву
<code>export</code> без аргументов: </p>
 
<pre>export
</pre>

<p> Эта конструкция говорит о том, что все переменные, которые не были
явно указаны в директивах
<code>export</code> и <code>unexport</code>, должны быть экспортированы.
Любые переменные, перечисленные в директиве <code>unexport</code>, по-прежнему 
<em>не</em> будут экспортироваться.
При использовании директивы <code>export</code> без параметров, переменные,
чьи имена содержат не только алфавитно-цифровые символы и подчеркивания,
экспортированы не будут. 
Для экспорта таких переменных надо явно
указать их в директиве <code>export</code>. </p>

<p>
<a name="IDX353"></a>

Старые версии GNU <code>make</code>, по умолчанию, экспортируют все переменные
(как если бы была использована директива <code>export</code> без параметров).
Если ваш make-файл рассчитан на такое поведение и вы хотите, чтобы он оставался
"совместим" со старыми версиями  
<code>make</code>, то вместо директивы <code>export</code> без параметров, 
можно использовать правило со специальной целью
<code>.EXPORT_ALL_VARIABLES</code>.
Старые версии <code>make</code> просто проигнорируют такое правило, в то время как
использование директивы 
<code>export</code> вызвало бы синтаксическую ошибку.

<a name="IDX354"></a>

</p>

<p> Аналогично, вы можете использовать директиву <code>unexport</code> без параметров
для того, чтобы, по умолчанию, 
<em>не</em> экспортировать переменные. Поскольку именно так, по умолчанию, и ведет
себя <code>make</code>, необходимость в директиве <code>unexport</code> без параметров 
может возникнуть только в случае, если ранее где-то была использована директива 
<code>export</code> 
без параметров (возможно, в каком-нибудь из включаемых make-файлов).
Вы 
<strong>не можете</strong> использовать директивы <code>export</code> и <code>unexport</code> 
без параметров для того, чтобы экспортировать переменные для одних команд и не экспортировать
для других.
Сработает самая "последняя" из перечисленных в make-файле директив 
<code>export</code> или <code>unexport</code>, которая и будет определять поведение
<code>make</code> на все время обработки make-файла. </p>

<p>
<a name="IDX355"></a>
<a name="IDX356"></a>

Специальная переменная
<code>MAKELEVEL</code> используется для отражения "уровня вложенности" <code>make</code>.
Ее значение меняется при переходе "с уровня на уровень". 
Значением этой переменной является строка с десятичным числом, показывающим "уровень вложенности"
данной копии <code>make</code>.
Для <code>make</code> самого "верхнего" уровня, ее значением является <samp>`0'</samp>.
Далее, во "вложенной" копии <code>make</code> ее значением будет <samp>`1'</samp>,
следующая "вложенная" копия <code>make</code> получит значение <samp>`2'</samp> и так далее. 
Значение этой переменной увеличивается в тот момент, когда 
<code>make</code> устанавливает переменные среды для запуска очередной команды. </p>

<p> В основном, переменная <code>MAKELEVEL</code> применяется в условных директивах
(смотрите раздел <a href="#SEC71">Условные части make-файла</a>); 
с ее использованием вы можете написать make-файл, который будет вести себя по-разному
в зависимости от того, был ли он запущен непосредственно вами, либо исполнялся 
рекурсивно вызванной копией <code>make</code>. </p>

<p>
<a name="IDX357"></a>

Для передачи во "вложенные" копии <code>make</code> дополнительного списка make-файлов,
которые нужно интерпретировать, вы можете использовать переменную <code>MAKEFILES</code>.
Значением этой переменной является список имен make-файлов, разделенных пробелами.
Будучи определенной в make-файле "высшего уровня", эта переменная будет передаваться
"вниз" через переменные среды и будет работать как список make-файлов, которые должны
быть прочтены "порожденными" копиями <code>make</code> перед чтением основного make-файла. 
Смотрите раздел <a href="#SEC16">Переменная <code>MAKEFILES</code></a>. </p>



<h3><a name="SEC53" href="#TOC53">Передача опций в <code>make</code> "нижнего уровня"</a></h3>

<p>
<a name="IDX358"></a>
<a name="IDX359"></a>

</p>

<p>
<a name="IDX360"></a>

Такие опции как <samp>`-s'</samp> и <samp>`-k'</samp> автоматически передаются 
в "порожденные" <code>make</code> с помощью переменной 
<code>MAKEFLAGS</code>. Эта автоматически устанавливаемая переменная
содержит имена всех опций, переданных программе <code>make</code> 
в командной строке.
Например, при вызове <samp>`make -ks'</samp>, переменная <code>MAKEFLAGS</code> 
получит значение
<samp>`ks'</samp>. </p>

<p> Далее, каждая "порожденная" копия <code>make</code> получит значение 
переменной <code>MAKEFLAGS</code> через переменные среды и интерпретирует ее
содержимое как набор опций для своей работы (аналогично тому, как если бы эти опции 
были переданы через 
командную строку). 
Смотрите раздел <a href="#SEC92">Обзор опций</a>. </p>

<p>
<a name="IDX361"></a>
<a name="IDX362"></a>
<a name="IDX363"></a>

    Аналогично, переменные, определенные с помощью командной строки, передаются в 
"порожденные" <code>make</code> через переменную 
<code>MAKEFLAGS</code>. Слова (из переменной <code>MAKEFLAGS</code>), 
содержащие символ 
<samp>`='</samp>, <code>make</code> рассматривает как определение переменной 
(аналогично тому, как если бы она были определена с помощью командной строки).
Смотрите раздел <a href="#SEC90">"Перекрытие" переменных</a>. </p>

<p>
<a name="IDX364"></a>
<a name="IDX365"></a>
<a name="IDX366"></a>
<a name="IDX367"></a>
<a name="IDX368"></a>
<a name="IDX369"></a>
<a name="IDX370"></a>
<a name="IDX371"></a>
<a name="IDX372"></a>
<a name="IDX373"></a>
<a name="IDX374"></a>
<a name="IDX375"></a>
<a name="IDX376"></a>
<a name="IDX377"></a>

Опции 
<samp>`-C'</samp>, <samp>`-f'</samp>, <samp>`-o'</samp>, и <samp>`-W'</samp> 
не записываются в переменную <code>MAKEFLAGS</code> и, соответственно, не передаются
в "порожденные" копии <code>make</code>. </p>

<p>
<a name="IDX378"></a>
<a name="IDX379"></a>
<a name="IDX380"></a>
<a name="IDX381"></a>

Опция <samp>`-j'</samp> обрабатывается специальным образом (смотрите раздел 
<a href="#SEC47">Параллельное исполнение команд</a>). 

Если в этой опции вы задали некоторое числовое значение <samp>`N'</samp>,
то при наличии в вашей операционной системе соответствующих возможностей
(присутствующих в большинстве UNIX системах; в других системах, обычно,
отсутствуют), 
<code>make</code> "верхнего уровня" и "подчиненные" <code>make</code>
взаимодействуют между собой, контролируя общее число запущенных во всех
копиях <code>make</code> заданий, не допуская ситуацию, когда оно превысит
<samp>`N'</samp>.
Обратите внимание, что задания, помеченные как рекурсивно исполняемые 
(смотрите раздел <a href="#SEC88">Вместо исполнения команд</a>),
при подсчете общего количества заданий не учитываются
(иначе, может получиться, что у нас запущено <samp>`N'</samp> "порожденных" копий
<code>make</code> и не осталось свободных слотов заданий
для выполнения "реальной" работы!)
</p>

<p>
Если ваша операционная система не поддерживает нужный механизм межпрограммного
взаимодействия, то, вместо указанного вами числового значения, в переменную 
<code>MAKEFLAGS</code> всегда записывается 
<samp>`-j 1'</samp>.  
Это делается для того, чтобы случайно не превысить максимальное число одновременной
запускаемых заданий из-за возможного рекурсивного запуска <code>make</code>.
Опция <samp>`-j'</samp> без числовых аргументов передается "вниз" 
без изменений (поскольку она означает запуск максимального возможного числа
заданий). </p>

<p> Если вы не хотите передавать "вниз" другие опции,
вы должны соответствующим образом изменить значение
<code>MAKEFLAGS</code>, например: </p>
 
<pre>subsystem:
        cd subdir &amp;&amp; $(MAKE) MAKEFLAGS=
</pre>

<p>
<a name="IDX382"></a>

На самом деле, определения переменных, заданные в командной строке, помещаются
в переменную <code>MAKEOVERRIDES</code>, а <code>MAKEFLAGS</code> содержит
ссылку на эту переменную.
Если вы хотите передать опции в <code>make</code> "нижнего уровня", но не хотите
передавать определения переменных, заданные в командной строке,
вы можете записать в переменную  
<code>MAKEOVERRIDES</code> пустое значение,
например: </p>
 
<pre>MAKEOVERRIDES =
</pre>

<p>
<a name="IDX383"></a>
<a name="IDX384"></a>

    Обычно, в этом нет особого смысла, однако, некоторые системы имеют
небольшой и фиксированный лимит размера операционной среды, который легко
может быть превышен при записи в переменную
<code>MAKEFLAGS</code> такого большого количества информации.
Эта проблема может проявляться в виде сообщения об ошибке 
<samp>`Arg list too long' (список аргументов слишком велик)</samp>.

<a name="IDX385"></a>
<a name="IDX386"></a>

    (Для строгого соответствия стандарту 
POSIX.2, изменение <code>MAKEOVERRIDES</code> не влияет на
<code>MAKEFLAGS</code> при наличии в make-файле специальной
цели <samp>`.POSIX'</samp>.
Для вас, скорее всего, это и неважно.) </p>

<p>
<a name="IDX387"></a>

    По "историческим" соображениям (для обеспечения совместимости) существует
похожая переменная <code>MFLAGS</code>.
Она содержит такое же значение, как и <code>MAKEFLAGS</code>, 
но в это значение не попадают 
определения переменных, заданных в командной
строки, и, если это значение не пусто, оно всегда начинается с дефиса 
(значение переменной <code>MAKEFLAGS</code> начинается с дефиса
только в том случае, если первая опция не имеет однобуквенного варианта названия, например
<samp>`--warn-undefined-variables'</samp>). Традиционно, <code>MFLAGS</code> 
используется исключительно для рекурсивного вызова
<code>make</code>, 
наподобие: </p>

<pre>subsystem:
        cd subdir &amp;&amp; $(MAKE) $(MFLAGS)
</pre>

<p> Переменная <code>MAKEFLAGS</code> делает подобную технику ненужной.
Используйте эту методику в том случае, если вы хотите сделать ваш make-файл
"совместимым" со старыми вариантами
<code>make</code>; она будет нормально работать и с современными версиями
<code>make</code>. </p>

<p>
<a name="IDX388"></a>
<a name="IDX389"></a>
<a name="IDX390"></a>
<a name="IDX391"></a>

    Переменная <code>MAKEFLAGS</code> может оказаться полезной и в том случае,
если вы хотите, чтобы некоторые опции, такие как 
<samp>`-k'</samp> (смотрите раздел
<a href="#SEC92">Обзор опций</a>), 
использовались при каждом запуске <code>make</code>. Поместите нужное
значение в переменную среды
<code>MAKEFLAGS</code>. Вы также может установить значение 
<code>MAKEFLAGS</code> в make-файле, задав, таким образом, опции, которые должны
использоваться для этого make-файла. (Обратите внимание, что вы не можете
подобным образом использовать переменную
<code>MFLAGS</code>. Значение этой переменной устанавливается только для совместимости; 
самостоятельное присваивание этой переменной другого значения 
никак не будет интерпретироваться <code>make</code>.) </p>

<p> При интерпретации значения <code>MAKEFLAGS</code> (полученного
как из операционной среды, так и из make-файла), значение этой переменной сначала
предваряется дефисом (если оно еще не начинатеся с дефиса).
Далее, это значение рассматривается
как разделенные пробелами слова, являющиеся именами опций. Эти опции интерпретируются
так, как если бы
они были заданы в командной строке 
(за исключением того, что опции <samp>`-C'</samp>, <samp>`-f'</samp>, 
<samp>`-h'</samp>, <samp>`-o'</samp>, <samp>`-W'</samp> и их версии с длинными
именами, игнорируются, а неверные опции не вызывают ошибки). </p>

<p> Используя <code>MAKEFLAGS</code> как переменную среды будьте внимательны и 
не помещайте в нее никаких опций, которые оказывают "глобальное влияние" на
работу 
<code>make</code>.
Так, например, помещение опций <samp>`-t'</samp>, 
<samp>`-n'</samp> или <samp>`-q'</samp> в переменные среды будет
иметь "катастрофические" последствия и приведет к "удивительным" и 
неприятным эффектам. </p>


<h3><a name="SEC54" href="#TOC54">Опция <samp>`--print-directory'</samp></a></h3>

<p>
<a name="IDX392"></a>
<a name="IDX393"></a>
<a name="IDX394"></a>
</p>

<p> При многократном рекурсивном вызове <code>make</code>, могут оказаться 
полезными опции 
<samp>`-w'</samp> и <samp>`--print-directory'</samp>, заставляющие <code>make</code>
печатать имя текущего каталога, когда утилита начинает и заканчивает работу в нем.
Например, при запуске
<samp>`make -w'</samp> в директории <tt>`/u/gnu/make'</tt>, следующая 
строка: </p>
 
<pre>make: Entering directory `/u/gnu/make'.
</pre>

<p>будет выведена перед тем, как <code>make</code> начнет что-либо делать, а 
строка: </p>

<pre>make: Leaving directory `/u/gnu/make'.
</pre>

<p>будет выведена перед тем, как работа будет закончена. </p>

<p>
<a name="IDX395"></a>
<a name="IDX396"></a>
<a name="IDX397"></a>
<a name="IDX398"></a>
<a name="IDX399"></a>
<a name="IDX400"></a>
<a name="IDX401"></a>
<a name="IDX402"></a>
<a name="IDX403"></a>
<a name="IDX404"></a>

    Как правило, вам не придется самостоятельно указывать эти опции, поскольку печать
каталогов 
автоматически включаются при наличии опции <samp>`-C'</samp>, а также в "порожденных" 
копиях <code>make</code>. 
Печать каталогов не будет включаться автоматически при наличии опции 
<samp>`-s'</samp> (подавляющей вывод информации) или опции
<samp>`--no-print-directory'</samp> (явно запрещающей печать каталогов). </p>


<h2><a name="SEC55" href="#TOC55">Именованные командные последовательности (canned command sequences)</a></h2>
<p>
<a name="IDX405"></a>
<a name="IDX406"></a>

</p>

<p> Когда одна и та же последовательность команд может быть использована для обновления
разных целей, с помощью директивы <code>define</code>  можно определить ее как 
именованную командную последовательность и, далее, использовать ее во всех правилах с
такими целями.
Именованная командная последовательность на самом деле является переменной, поэтому ее
имя не должно конфликтовать с именами других переменных. </p>


<p> Вот пример определения именованной командной последовательности: </p> 

<pre>define run-yacc
yacc $(firstword $^)
mv y.tab.c $@
endef
</pre>

<p>
<a name="IDX407"></a>
</p>

<p> Здесь, <code>run-yacc</code> является именем определяемой переменной; 
<code>endef</code> обозначает конец определения; остальные строки являются 
командами.
Ссылки на переменные и функции внутри директивы <code>define</code> не "раскрываются";
символы <samp>`$'</samp>, скобки, имена переменных и прочее, становятся частью значения
определяемой вами переменной.
Смотрите раздел 
<a href="#SEC67">Многострочные переменные</a>, 
где описана работа директивы <code>define</code>. </p>

<p> В этом примере, первая команда запустит программу Yacc для первого пререквизита
правила, в котором использована данная командная последовательность.
Выходная информация программы Yacc всегда будет помещаться в файл
<tt>`y.tab.c'</tt>. Вторая команда даст выходному файлу имя целевого 
файла правила. </p>

<p> Для того, чтобы задействовать именованную последовательность команд,
подставьте переменную с этой последовательностью в качестве команды 
правила (подстановка делается "обычным" для всех переменных способом;
смотрите раздел <a href="#SEC58">Обращение к переменным</a>). 
Переменные, определенные с помощью <code>define</code> являются рекурсивно вычисляемыми,
поэтому все все ссылки на переменные, находящиеся внутри директивы 
<code>define</code>, будут при этом вычислены. Так, в следующем примере: </p>
 
<pre>foo.c : foo.y
        $(run-yacc)
</pre>

<p> при вычислении значения переменной <code>run-yacc</code>, вместо <samp>`$^'</samp> будет 
подставлено имя <samp>`foo.y'</samp>, и имя <samp>`foo.c'</samp>  вместо <samp>`$@'</samp>. </p>

<p> Это достаточно реалистичный пример, однако, на практике, в данном конкретном
правиле нет необходимости, поскольку 
<code>make</code> имеет соответствующие
неявные правила, имеющие аналогичный эффект 
(смотрите раздел <a href="#SEC93">Использование неявных правил</a>). </p>

<p>
<a name="IDX408"></a>
<a name="IDX409"></a>
<a name="IDX410"></a>

При выполнении команды, каждая строка именованной командной последовательности рассматривается
так, как если бы она являлась отдельной строкой правила и ей предшествовал бы символ 
табуляции. 
Так же, каждая строка будет выполняться своей отдельной копией интерпретатора командной
строки.
В начале каждой командной строки именованной последовательности могут использоваться
специальные символы 
<samp>`@'</samp>, 
<samp>`-'</samp>, и <samp>`+'</samp>. Смотрите 
раздел <a href="#SEC44">Написание команд</a>. 
Например, при использовании следующей командной последовательности: </p>

<pre>define frobnicate
@echo "frobnicating target $@"
frob-step-1 $&lt; -o $@-step-1
frob-step-2 $@-step-1 -o $@
endef
</pre>

<p><code>make</code> не будет отображать первую командную строку, однако
напечает следующие две строки с командами. </p>

<p> В то же время, специальный символ в начале строки, ссылающейся на именованную
командную последовательность, будет применен к каждой строке этой последовательности.
Так, при обработке правила: </p>
 
<pre>frob.out: frob.in
        @$(frobnicate)
</pre>

<p><em>ни одна</em> команда отображена не будет. 
(Смотрите раздел <a href="#SEC45">Отображение исполняемых команд</a>, 
где обсуждается использование специального символа <samp>`@'</samp>.) </p>



<h2><a name="SEC56" href="#TOC56">Пустые команды (empty commands)</a></h2>

<p>
<a name="IDX411"></a>
<a name="IDX412"></a>

</p>

<p> Иногда, возникает потребность задать команду, которая, на самом деле, не выполняет
никаких действий. Такая команда задается с помощью командной строки,
не содержащей ничего, кроме пробела.
Например: 
</p>

<pre>target: ;
</pre>

<p> определяется пустую команду для цели <tt>`target'</tt>. 
Можно также использовать отдельную
командную строку, начинающуюся с символа табуляции, однако это может вызвать
путаницу, поскольку такая строка
выглядит как пустая. </p>

<p>
<a name="IDX413"></a>

Если вам непонятно, зачем может понадобиться пустая команда, вспомните о наличии
неявных правил. 
Правило с пустой командой может предовратить применение для указанной цели
команд, определенных в неявных правилах
(или правилах со специальной целью <code>.DEFAULT</code>);
смотрите разделы
<a href="#SEC93">Использование неявных правил</a> и 
<a href="#SEC105">Определение правил "последнего шанса"</a>). </p>

<p> Вы можете попытаться использовать пустые команды для тех целей,
которые на самом деле не являются файлами, а служат лишь для того, чтобы были обновлены
все их пререквизиты.
Это, однако, не слишком хорошая идея, поскольку при наличии реального файла,
имя которого совпадает с именем цели, пререквизиты могут и не быть обновлены в нужный момент.
В таких ситуациях лучше пользоваться абстрактными целями 
(смотрите раздел <a href="#SEC33">Абстрактные цели</a>). </p>



<h1><a name="SEC57" href="#TOC57">Использование переменных (variables)</a></h1>
<p>
<a name="IDX414"></a>
<a name="IDX415"></a>
<a name="IDX416"></a>
<a name="IDX417"></a>

</p>

<p> <strong>Переменная (variable)</strong> представляет собой имя, 
определенное в make-файле для
представления строки текста, называемой 
<strong>значением</strong> переменной. Далее, по вашему запросу, эти значения могут быть
подставлены в нужные места make-файла (например, в имена целей, имена пререквизитов, 
команды и так далее).
В некоторых других версиях <code>make</code>, переменные называются
<strong>макросами (macros)</strong>.

<a name="IDX418"></a>

</p>

<p> За исключением нескольких мест, переменные и функции во всех частях make-файла
вычисляются при его
чтении.
Исключение составляют команды, передаваемые интерпретатора 
командной строки,
правые части определений (с помощью символа <samp>`='</samp>) переменных,
а также определения переменных с помощью директивы <code>define</code>. </p>

<p> Переменная может представлять собой что угодно, например, список файлов, набор передаваемых 
компилятору опций, имя запускаемой программы, список каталогов с исходными файлами,
директорию для выходных файлов и так далее. </p>

<p> Именем переменной может быть любая последовательность символов, не содержащая
<samp>`:'</samp>, <samp>`#'</samp>, <samp>`='</samp> и начальных или конечных
пробелов.
Однако, мы рекомендуем избегать использования имен переменных, содержащих символы, отличные
от букв, цифр и символа подчеркивания. Во-первых, такие имена в будущем могут получить
какое-либо специальное значение, и, во-вторых, не все интерпретаторы командной строки
смогут передать (через переменные среды) такие переменные "порожденным" копиям 
<code>make</code>.
(смотрите раздел
<a href="#SEC52">Связь с make "нижнего уровня" через переменные</a>). </p>

<p> Имена переменных чувствительны к регистру. Таким образом, имена <samp>`foo'</samp>, 
<samp>`FOO'</samp>, и <samp>`Foo'</samp> будут ссылаться на разные 
переменные. </p>

<p> Традиционно, имена переменных записывались с использованием букв верхнего регистра. 
Мы, однако, рекомендуем вам пользоваться нижним регистром для всех переменных, используемых
для "внутренних нужд" make-файла. Верхний же регистр мы рекомендуем оставить
для переменных,
влияющих на работу неявных правил или содержащих параметры, которые пользователь может
переопределять
(смотрите раздел <a href="#SEC90">"Перекрытие" переменных</a>). </p>

<p> Некоторые переменные имеют имена, состоящие лишь из одного или нескольких символов
пунктуации. 
Это, так называемые, <strong>автоматические переменные</strong>; они 
используются специальным образом.
Смотрите раздел <a href="#SEC101">Автоматические переменные</a>. </p>



<h2><a name="SEC58" href="#TOC58">Обращение к переменным</a></h2>
<p>
<a name="IDX419"></a>
<a name="IDX420"></a>
<a name="IDX421"></a>
<a name="IDX422"></a>

</p>
<p> Для подстановки значения переменной, напишите знак доллара, за которым следует
имя переменной, заключенное в круглые или фигурные скобки: обе записи <samp>`$(foo)'</samp> и 
<samp>`${foo}'</samp> представляют собой ссылку на переменную <code>foo</code>. 
Из-за подобного специального значения символа <samp>`$'</samp>,
для получения знака доллара в имени файла или команде нужно 
использовать запись <samp>`$$'</samp>. </p>

<p> Ссылка на переменную может быть использована практически в любом контексте: в качестве 
цели, пререквизита, команды. Она может использоваться в большинстве директив, а также выступать
в качестве нового значения другой переменной.
Вот типичный пример, где переменная используется для
хранения списка объектных файлов программы: </p>
 
<pre>objects = program.o foo.o utils.o
program : $(objects)
        cc -o program $(objects)

$(objects) : defs.h
</pre>

<p> Ссылки на переменную обрабатываются при помощи простой текстовой подстановки. 
Таким образом, правило, описывающее процесс компиляции программы из 
исходного файла <tt>`prog.c'</tt>, могло бы выглядеть так: </p> 

<pre>foo = c
prog.o : prog.$(foo)
        $(foo)$(foo) -$(foo) prog.$(foo)
</pre>

<p> Пробелы, находящиеся в операторе присваивания перед новым значеним переменной, игнорируются,
поэтому переменная 
<code>foo</code> будет содержать строку <samp>`c'</samp>. (Не следует, однако, принимать этот
пример "всерьез" и писать подобным образом свои make-файлы!) </p>

<p> Если за знаком доллара следует символ, отличный от доллара, открывающейся
круглой скобки или открывающейся фигурной скобки, то этот одиночный символ рассматривается
как имя переменной.
Таким образом, вы можете обратиться к переменной <code>x</code>, используя запись 
<samp>`$x'</samp>. 
Однако, такая практика крайне нежелательна, за исключением случаев обращения к автоматическим
переменным (смотрите раздел <a href="#SEC101">Автоматические переменные</a>). </p>



<h2><a name="SEC59" href="#TOC59">Две разновидности (flavors) переменных</a></h2>

<p>
<a name="IDX423"></a>
<a name="IDX424"></a>
<a name="IDX425"></a>
<a name="IDX426"></a>
<a name="IDX427"></a>

</p>
<p> В GNU <code>make</code> есть два способа, с помощью которых переменные могут
получить свое значение. Мы называем это двумя разновидностями (flavors) переменных.
Две разновидности отличаются тем, каким образом переменная была определена и
что происходит при вычислении ее значения. </p>

<p>
<a name="IDX428"></a>

    Первая разновидность - это <strong>рекурсивно
вычисляемые (recursively expanded)</strong> переменные. Такие переменные определяются с помощью
<samp>`='</samp> (смотрите раздел <a href="#SEC64">Установка значения переменной</a>) 
или директивы <code>define</code> (смотрите раздел 
<a href="#SEC67">Многострочные переменные</a>). 
Значение этой переменной запоминается точно в том виде, как вы его указали; если
оно содержит ссылки на другие переменные, то эти ссылки будут вычислены 
(заменены своими текстовыми значениями) только в момент вычисления значения
самой переменной (когда будет вычисляться какая-то другая строка, где использована
эта переменная).
Этот процесс называется <strong>рекурсивным вычислением (recursive expansion)</strong>. </p>

<p> Например, следущий make-файл:</p> 

<pre>foo = $(bar)
bar = $(ugh)
ugh = Huh?

all:;echo $(foo)
</pre>

<p> выдаст на экран <samp>`Huh?'</samp>: при вычислении ссылки <samp>`$(foo)'</samp>, она будет 
заменена на
<samp>`$(bar)'</samp>, которая, свою очередь, заменена на <samp>`$(ugh)'</samp>, которая
, наконец, будет расширена в 
<samp>`Huh?'</samp>. </p>

<p> Эта разновидность переменных - единственная, поддерживаемая другими версиями
<code>make</code>. Она имеется свои достоинства и недостатки.
Ее преимущество (по мнению большинства) заключается в том, что, например, следующий
фрагмент: </p>

<pre>CFLAGS = $(include_dirs) -O
include_dirs = -Ifoo -Ibar
</pre>

<p> будет работать так, как и ожидалось: ссылки на переменную <samp>`CFLAGS'</samp> 
будут "раскрываться" в текст
<samp>`-Ifoo -Ibar -O'</samp>. С другой стороны, серьезный недостаток заключается в том,
что вы не можете ничего "добавить" к переменной, 
наподобие </p>

<pre>CFLAGS = $(CFLAGS) -O
</pre>

<p> поскольку это вызовет бесконечный цикл при попытке вычислить ее значение. (На самом
деле, <code>make</code> распознает ситуацию зацикливания и сообщает 
об ошибке.) 

<a name="IDX429"></a>
<a name="IDX430"></a>

</p>

<p> Другой недостаток рекурсивно вычисляемых переменных состоит в том, что 
все функции, на которые они ссылаются 
(смотрите раздел <a href="#SEC75">Функции преобразования текста</a>) 
будут вычисляться заново при каждой "подстановке" этой переменной. 
Работа <code>make</code> при этом, разумеется, замедляется. Но еще хуже то, что
результат выполнения функций <code>wildcard</code> и <code>shell</code> становится
труднопредсказуемым, поскольку сложно в точности сказать, когда и сколько раз эти
функции будут выполнены. </p>

<p> Подобных недостатков лишена другая разновидность переменных -
упрощенно вычисляемые переменные. </p>

<p>
<a name="IDX431"></a>
<a name="IDX432"></a>
<a name="IDX433"></a>

    <strong>Упрощенно вычисляемые (simply expanded) переменные</strong> определяются с помощью
<samp>`:='</samp> (смотрите раздел <a href="#SEC64">Установка значения переменной</a>). 
Значение такой переменной вычисляется (с расширением всех ссылок на другие переменные
и вычислением функций) только в момент присваивания ей нового 
значения.
После определения переменной, ее значение представляет собой обычный текст, уже не содержащий 
ссылок
на другие переменные. 
Таким образом, </p>

<pre>x := foo
y := $(x) bar
x := later
</pre>

<p>эквивалентно </p>

<pre>y := foo bar
x := later
</pre>

<p> При ссылке на упрощенно вычисляемую переменную делается простая подстановка ее значения
(без каких-либо дополнительных вычислений). </p>

<p> Вот чуть более сложный пример, иллюстрирующей использование
<samp>`:='</samp> совместно с функцией <code>shell</code>. 
(Смотрите раздел <a href="#SEC83">Функция <code>shell</code></a>.) 
Этот пример также демонстрирует использование переменной
<code>MAKELEVEL</code>, которая изменяется во время переходов "с уровня на уровень" 
при рекурсивном использовании <code>make</code>. 
Смотрите раздел <a href="#SEC52">Связь с <code>make</code> "нижнего уровня" через
переменные</a>. </p>

<p>
<a name="IDX434"></a>
<a name="IDX435"></a>

</p><pre>ifeq (0,${MAKELEVEL})
cur-dir   := $(shell pwd)
whoami    := $(shell whoami)
host-type := $(shell arch)
MAKE := ${MAKE} host-type=${host-type} whoami=${whoami}
endif
</pre>

<p> Преимущество использования <samp>`:='</samp> заключается в том, что типичная
команда `спуска в подкаталог' будет выглядеть как: </p>
 
<pre>${subdirs}:
      ${MAKE} cur-dir=${cur-dir}/$@ -C $@ all
</pre>

<p> В общем случае, упрощенно вычисляемые переменные позволяют сделать процесс 
программирования 
сложных make-файлов более предсказуемым, поскольку они работают аналогично обычным 
переменным в большинстве языков программирования. 
Они позволяют переопределять переменные, используя их собственные значения (возможно,
обработанные какими-либо функциями)
и использовать функции подстановки гораздо более эффективным образом 
(смотрите раздел <a href="#SEC75">Функции преобразования текста</a>). </p>

<p>
<a name="IDX436"></a>
<a name="IDX437"></a>
<a name="IDX438"></a>

    Упрощенно вычисляемые переменные можно использовать для добавления
начальных пробелов в значения переменных.
Начальные пробелы удаляются из значения переменной, однако,  
что вы можете
сохранить начальный пробел, "защитив" его 
с помощью ссылки на переменную, 
например: </p>
 
<pre>nullstring :=
space := $(nullstring) # end of the line
</pre>

<p> Здесь, значением переменной <code>space</code> будет в точности один пробел. Комментарий
<samp>`# конец строки'</samp> включен только для большей ясности. 
Поскольку конечные пробелы <em>не</em> удаляются из значения переменной,
единственного пробела в конце строки было бы достаточно для получения
нужного эффекта (но такая запись
была бы менее понятна).
Если вы помещаете пробел в конец значения переменной, хорошей идеей будет
помещение соответствующего комментария в конец строки, поясняющего ваши намерения.
И наоборот, если для вас <em>не</em> желательно наличие пробелов в конце значения
переменной, помните, что вы не должны помещать каких-либо комментариев
в конец строки после 
пробелов: </p>

<pre>dir := /foo/bar    # directory to put the frobs in
</pre>

<p> Здесь, значением переменной <code>dir</code> будет строка <samp>`/foo/bar    '</samp> 
(с четырьмя пробелами в конце), чего вы, скорее всего, совсем не хотели. (Представьте себе,
что случится со строкой, наподобие
 <samp>`$(dir)/file'</samp> в этом случае!) </p>

<p>
<a name="IDX439"></a>
<a name="IDX440"></a>
<a name="IDX441"></a>

    GNU <code>make</code> поддерживает еще один оператор присваивания
<samp>`?='</samp>. Он называется
оператором условного присваивания,
поскольку срабатывает лишь в том случае, когда переменная еще не была определена. 
Например, выражение: </p>
 
<pre>FOO ?= bar
</pre>

<p> эквивалентно (смотрите раздел
<a href="#SEC82">Функция <code>origin</code></a>): </p>

<pre>ifeq ($(origin FOO), undefined)
  FOO = bar
endif
</pre>

<p> Обратите внимание на то, что переменная, содержащая "пустое" значение,
все равно считается определенной, и оператор 
<samp>`?='</samp> не будет присваивать ей нового значения. </p>


<h2><a name="SEC60" href="#TOC60">"Расширенные" способы обращения к переменным</a></h2>
<p>
<a name="IDX442"></a>

</p>
<p> В этом разделе обсуждаются некоторые дополнительные возможности, которые
можно использовать в ссылках на переменные для придания им большей 
гибкости. </p>



<h3><a name="SEC61" href="#TOC61">Ссылка с заменой (substitution reference)</a></h3>
<p>
<a name="IDX443"></a>
<a name="IDX444"></a>
<a name="IDX445"></a>
<a name="IDX446"></a>

</p>
<p>
<a name="IDX447"></a>
<a name="IDX448"></a>

    При использовании <strong>ссылки с заменой (substitution reference)</strong>, вместо нее 
подставляется значение переменной, модифицированное указанным вами способом. 
Такая ссылка имеет форму
<samp>`$(<var>переменная</var>:<var>a</var>=<var>b</var>)'</samp> (или 
<samp>`${<var>переменная</var>:<var>a</var>=<var>b</var>}'</samp>). Это значит, что
должно быть взято значение переменной
<var>переменная</var>, и каждая найденная в нем цепочка символов <var>a</var>,
находящаяся в конце слова, должна быть заменена на цепочку символов 
<var>b</var>. </p>

<p> Говоря "находящаяся в конце слова", мы имеем ввиду, что за последовательностью
символов <var>a</var> должен следовать пробел, либо она должна находиться в конце
строки (со значением переменной); только в этих случаях она будет 
заменена на последовательность
<var>b</var>. Все прочие цепочки <var>a</var> (не удовлетворяющие указанным условиям)
будут оставлены без изменений. 
В следующем примере: </p>
 
<pre>foo := a.o b.o c.o
bar := $(foo:.o=.c)
</pre>

<p> переменная <samp>`bar'</samp> получит значение <samp>`a.c b.c c.c'</samp>. 
Смотрите раздел <a href="#SEC64">Установка значения переменной</a>. </p>

<p> На самом деле, ссылка с заменой представляет собой "укороченый" вариант
использования функции 
<code>patsubst</code> (смотрите раздел
<a href="#SEC77">Функции анализа и подстановки строк</a>). 
Для поддержания совместимости с другими версиями <code>make</code>, мы поддерживаем
оба этих механизма - функцию <code>patsubst</code> и ссылки с заменой. </p>

<p>
<a name="IDX449"></a>

    Другой вариант ссылки с заменой соизмерим по "мощности" с использование
функции <code>patsubst</code>. Он имеет аналогичную форму
<samp>`$(<var>переменная</var>:<var>a</var>=<var>b</var>)'</samp>, но теперь
в строке <var>a</var> должен присутствовать одиночный символ <samp>`%'</samp>. 
Этот вариант ссылки с заменой эквивалентен <samp>`$(patsubst 
<var>a</var>,<var>b</var>,$(<var>переменная</var>))'</samp>. Смотрите раздел 
<a href="#SEC77">Функции анализа и подстановки строк</a>, где описана
работа функции
<code>patsubst</code>. В следующем примере:</p>
 
<pre>foo := a.o b.o c.o
bar := $(foo:%.o=%.c)
</pre>

<p> переменная <samp>`bar'</samp> получит значение <samp>`a.c b.c c.c'</samp>. </p>


<h3><a name="SEC62" href="#TOC62">Вычисляемые имена переменных (computed variable names)</a></h3>
<p>
<a name="IDX450"></a>
<a name="IDX451"></a>
<a name="IDX452"></a>
<a name="IDX453"></a>
<a name="IDX454"></a>
<a name="IDX455"></a>
<a name="IDX456"></a>

</p>

<p> Вычисляемые имена переменных - достаточно сложная концепция, полезная для
программирования лишь весьма "нетривиальных" make-файлов. 
В большинстве случаев, у вас не возникнет потребности в изучении этого 
механизма - достаточно
лишь знать, что знак доллара внутри имени переменной может привести к весьма "странным"
результатам.
Однако, если вы хотите досконально изучить работу <code>make</code> или же
действительно заинтересованы в изучении этого механизма, то читайте дальше. </p>

<p> Внутри имени переменной может находится ссылка на другую переменную. Это называется
<strong>вычисляемым именем переменной (computed variable name)</strong> или 
<strong>вложенной ссылкой (nested variable reference)</strong>. 
В следущем примере: </p>
 
<pre>x = y
y = z
a := $($(x))
</pre>

<p>переменная <code>a</code> получит значение <samp>`z'</samp>: ссылка <samp>`$(x)'</samp> 
внутри выражения
<samp>`$($(x))'</samp> будет заменена на <samp>`y'</samp>, так что строка <samp>`$($(x))'</samp> 
будет преобразована в <samp>`$(y)'</samp> и, далее, расширена в <samp>`z'</samp>. 
Здесь имя переменной не указано "прямо", а вычисляется при расширении выражения 
<samp>`$(x)'</samp>. Ссылка <samp>`$(x)'</samp> здесь находится внутри другой
ссылки на переменную. </p>

<p> Предыдущий пример демонстрировал два "уровня вложенности". На самом деле, число таких
уровней может быть неограниченным. 
Следующий пример демонстрирует три "уровня вложенности": </p> 

<pre>x = y
y = z
z = u
a := $($($(x)))
</pre>

<p> Здесь самая внутренняя ссылка <samp>`$(x)'</samp> заменяется на <samp>`y'</samp>, так
что строка  
<samp>`$($(x))'</samp> расширяется в <samp>`$(y)'</samp>, которая, в свою очередь,
расширяется в 
<samp>`z'</samp>; теперь мы получаем ссылку <samp>`$(z)'</samp>, которая заменяется на
<samp>`u'</samp>. </p>

<p> Ссылки на вычисляемые имена переменных, в свою очередь, сами могут находится внутри
имен переменных. В следующем примере: </p>
 
<pre>x = $(y)
y = z
z = Hello
a := $($(x))
</pre>

<p> переменная <code>a</code> получит значение <samp>`Hello'</samp>: 
строка <samp>`$($(x))'</samp> преобразуется в строку 
<samp>`$($(y))'</samp>, которая преобразуется в строку <samp>`$(z)'</samp> которая, 
в свою очередь, имеет значение 
<samp>`Hello'</samp>. </p>

<p> Вложенные ссылки могут содержать ссылки с заменой, а также вызовы функций
(смотрите раздел <a href="#SEC75">Функции преобразования текста</a>). 
Вот пример, в котором используется функция
<code>subst</code> (смотрите раздел
<a href="#SEC77">Функции анализа и подстановки строк</a>): </p> 

<pre>x = variable1
variable2 := Hello
y = $(subst 1,2,$(x))
z = y
a := $($($(z)))
</pre>

<p> Здесь, переменная <code>a</code> получает значение <samp>`Hello'</samp>. Вряд ли
кто-нибудь будет писать подобным образом, однако, это пример действительно 
работает: выражение <samp>`$($($(z)))'</samp> преобразуется в строку <samp>`$($(y))'</samp>,
которая, затем, преобразуется в <samp>`$($(subst 1,2,$(x)))'</samp>. 
Далее, из переменной <code>x</code> берется ее текущее значение 
(<samp>`variable1'</samp>), которое, с помощью подстановки, заменяется 
на <samp>`variable2'</samp>. После этого, выражение выглядит как
<samp>`$(variable2)'</samp>, и его значеним является строка 
<samp>`Hello'</samp>. </p>

<p> Вычисляемое имя переменной совсем не обязательно должно состоять 
из единственной ссылки на переменную. Оно вполне может включать в себя несколько ссылок
на переменные, а также обычные текстовые строки.
В следующем примере: </p>
 
<pre>a_dirs := dira dirb
1_dirs := dir1 dir2

a_files := filea fileb
1_files := file1 file2

ifeq "$(use_a)" "yes"
a1 := a
else
a1 := 1
endif

ifeq "$(use_dirs)" "yes"
df := dirs
else
df := files
endif

dirs := $($(a1)_$(df))
</pre>

<p> переменная <code>dirs</code> получит значение одной из переменных (<code>a_dirs</code> 
<code>1_dirs</code>, <code>a_files</code> или <code>1_files</code>) в зависимости от
значений переменных 
<code>use_a</code> и <code>use_dirs</code>. </p>

<p> Вычисляемые имена переменных также могут использоваться в ссылках с 
заменой. В следующем примере: </p> 

<pre>a_objects := a.o b.o c.o
1_objects := 1.o 2.o 3.o

sources := $($(a1)_objects:.o=.c)
</pre>

<p> переменная <code>sources</code> получит значение <samp>`a.c b.c c.c'</samp> либо 
<samp>`1.c 2.c 3.c'</samp>, в зависимости от значения переменной <code>a1</code>. </p>

<p> Единственно ограничение на подобное использование вложенных ссылок состоит в том, что
они не могут определять часть имени вызываемой функции. Оно вызвано тем, что распознание
имен функций происходит до того, как производится вычисление вложенных ссылок. 
В следующем примере: </p>
 
<pre>ifdef do_sort
func := sort
else
func := strip
endif

bar := a d b g q c

foo := $($(func) $(bar))
</pre>

<p> в переменную <samp>`foo'</samp>, вместо ожидаемого значения (результата применения
функций <code>sort</code> или <code>strip</code> к аргументу <samp>`a d b g q c'</samp>),
будет записана строка 
<samp>`sort a d b g q c'</samp> или <samp>`strip a d b g q c'</samp>.
Возможно, в будущем подобное ограничение будет снято, если это окажется
полезным. </p>

<p> Вычисляемые имена переменных могут использоваться в левой части 
оператора присваивания и в директиве <code>define</code>, 
например: </p>
 
<pre>dir = foo
$(dir)_sources := $(wildcard $(dir)/*.c)
define $(dir)_print
lpr $($(dir)_sources)
endef
</pre>

<p> В данном примере определяются переменные <samp>`dir'</samp>, 
<samp>`foo_sources'</samp>, и <samp>`foo_print'</samp>. </p>

<p> Обратите внимание, что <strong>вложенные ссылки на переменные</strong> и 
<strong>рекурсивно вычисляемые переменные</strong> 
(смотрите раздел <a href="#SEC59">Две разновидности переменных</a>), 
- это разные концепции, хотя при написаниии "нетривиальных" make-файлов, они
часто используются совместно. </p>


<h2><a name="SEC63" href="#TOC63">Как переменные получают свои значения</a></h2>
<p>
<a name="IDX457"></a>
<a name="IDX458"></a>

</p>
<p> Переменные могут получать свои значения разными путями: </p>

<ul>
  <li>  При запуске <code>make</code>, в командной строке 
  вы можете задать значение
  переменной, которое "перекроет" значение, устанавливаемое в make-файле.
  Смотрите раздел
  <a href="#SEC90">"Перекрытие" переменных</a>.

  </li><li>  Вы можете задать значение переменной внутри make-файла 
  с помощью
  оператора присваивания (смотрите
  раздел 
  <a href="#SEC64">Установка значения переменной</a>) или с помощью директивы
  <code>define</code> (смотрите раздел
  <a href="#SEC67">Многострочные переменные</a>).

  </li><li>  Переменные среды (environment variables) 
  автоматически становятся переменными <code>make</code>. 
  Смотрите раздел
  <a href="#SEC68">Переменные из операционного окружения</a>.

  </li><li>  Несколько переменных, называемых <strong>автоматическими</strong>,
  "автоматически" 
  получают новое
  значение при обработке каждого правила.
  Каждая из таких переменных предназначена для какого-то конкретного применения.
  Смотрите раздел 
  <a href="#SEC101">Автоматические переменные</a>.

  </li><li>  Некоторые переменные имеют "фиксированное" начальное значение. 
  Смотрите раздел <a href="#SEC96">Используемые в неявных правилах переменные</a>.

</li></ul>



<h2><a name="SEC64" href="#TOC64">Установка значения переменной</a></h2>
<p>
<a name="IDX459"></a>
<a name="IDX460"></a>
<a name="IDX461"></a>
<a name="IDX462"></a>
<a name="IDX463"></a>

</p>
<p> Для установки значения переменной внутри make-файла, используется строка, начинающаяся
с имени переменной, за которым следует  
<samp>`='</samp> или <samp>`:='</samp>. Все, что в этой строке следует за 
символом 
<samp>`='</samp> или <samp>`:='</samp>, становится значением переменной. В  
следующем примере: </p>
 
<pre>objects = main.o foo.o bar.o utils.o
</pre>

<p> определяется переменная с именем <code>objects</code>. Пробелы "вокруг" имени
переменной и после 
<samp>`='</samp>, игнорируются. </p>

<p> Переменные, определенные с помощью <samp>`='</samp>, являются 
<strong>рекурсивно вычисляемыми (recursively expanded)</strong>
переменными. Переменные, определенные с помощью <samp>`:='</samp>, являются 
<strong>упрощенно вычисляемыми (simply expanded)</strong> 
переменными; их определения могут содержать ссылки на другие переменные, которые
будут вычислены до того, как будет сделано определение 
(иными словами, до того, как в переменную будет записано новое значение).
Смотрите раздел
<a href="#SEC59">Две разновидности переменных</a>. </p>

<p> Имена переменных могут содержать ссылки на другие переменные и функции,
которые будут вычислены (во время чтения make-файла) для получения действительного 
имени переменной. </p>

<p> На длину строки, являющейся значением переменной, не накладывается
каких-либо ограничений (за исключением доступного программе объема памяти).
"Хорошей идеей" является разбиение длинного определения переменной на несколько
отдельных строк с помощью символа <samp>'\'</samp>, за которым следует символ перевода
строки. 
Такое разбиение никак не отразится на работе <code>make</code>, но будет способствовать
повышению удобочитаемости make-файла. </p>

<p> Большинство переменных, значение которых вы нигде не устанавливали, рассматриваются
как содержащие пустую строку. 
Некоторые переменные имеют заранее определенные непустые 
начальные
значения (которые, разумеется, вы можете изменить обычным образом; смотрите 
раздел
<a href="#SEC96">Используемые в неявных правилах переменные</a>). 
Некоторые специальные переменные автоматически получают новое значение
при обработке каждого правила; они называются 
<strong>автоматическими</strong> переменными (смотрите 
раздел <a href="#SEC101">Автоматические переменные</a>). </p>

<p> Если вы хотите, чтобы переменная получила новое значение только в том случае,
если ей еще не было присвоено
какого-либо значения, вместо <samp>`='</samp> используйте оператор
<samp>`?='</samp>.
Следующие два фрагмента make-файла производят одинаковый эффект
(смотрите раздел <a href="#SEC82">Функция <code>origin</code></a>): </p>
 
<pre>FOO ?= bar
</pre>

<p>
и

</p>

<pre>ifeq ($(origin FOO), undefined)
FOO = bar
endif
</pre>



<h2><a name="SEC65" href="#TOC65">Добавление текста к переменной</a></h2>
<p>
<a name="IDX464"></a>
<a name="IDX465"></a>
<a name="IDX466"></a>

</p>
<p>     Часто возникает необходимость добавить некоторый текст к значению уже определенной 
переменной. Вы можете это сделать с помощью оператора <samp>`+='</samp>, 
например: </p>
 
<pre>objects += another.o
</pre>

<p> Здесь, к значению переменной <code>objects</code> добавляется текст
<samp>`another.o'</samp> (предваренный одиночным пробелом). 
Так, в результате выполнения фрагмента: </p>

<pre>objects = main.o foo.o bar.o utils.o
objects += another.o
</pre>

<p> переменная <code>objects</code> получит значение <samp>`main.o foo.o bar.o utils.o 
another.o'</samp>. </p>

<p> Примерный аналог этого фрагмента без использования <samp>`+='</samp> 
может выглядеть так: </p>

<pre>objects = main.o foo.o bar.o utils.o
objects := $(objects) another.o
</pre>

<p> Однако, аналогия здесь не полная, поскольку работа оператора <samp>`+='</samp> 
отличается некоторыми деталями, которые проявляются при работе с более сложными 
значениями переменных. </p>

<p> Если рассматриваемая переменная до сих пор не была определена,
оператор <samp>`+='</samp> 
ведет себя как обычный <samp>`='</samp>, определяя рекурсивно вычисляемую
переменную.
Если же переменная <em>была</em> ранее определена, поведение 
оператора <samp>`+='</samp> будет зависеть от ее разновидности (смотрите раздел
<a href="#SEC59">Две разновидности переменных</a>). </p>

<p> Когда вы что-либо добавляете с помощью <samp>`+='</samp> к значению уже определенной 
переменной,
<code>make</code>, по существу, действует так, как если бы этот дополнительный текст
был включен в первоначальное определение переменной. 
Предположим, что переменная была ранее определена с помощью <samp>`:='</samp> и является,
вследствие этого, упрощенно вычисляемой переменной. Тогда, при добавлении к ней нового текста,
оператор <samp>`+='</samp> предварительно его "расширит" (аналогично тому, как это делает
оператор <samp>`:='</samp>; смотрите раздел 
<a href="#SEC64">Установка значения переменной</a>, где описана работа 
оператора <samp>`:='</samp>). Таким образом, фрагмент </p>
 
<pre>variable := value
variable += more
</pre>

<p> эквивалентен следующему: </p>

<p>

</p><pre>variable := value
variable := $(variable) more
</pre>

<p> С другой стороны, при использовании оператора <samp>`+='</samp> с рекурсивно
вычисляемой переменной,
<code>make</code> работает немного по-другому. Вспомните, что когда вы определяете
подобную переменную,
<code>make</code> не сразу вычисляет ссылки на функции и другие переменные, присутствующие
в устанавливаемом для нее значении. 
Вместо этого, <code>make</code> запоминает 
указанный вами текст в "оригинальном" виде, так что все присутствующие в нем ссылки на
переменные и функции остаются и могут быть вычислены позднее, когда переменная будет
"раскрываться" (смотрите раздел
<a href="#SEC59">Две разновидности переменных</a>). 
Таким образом, при использовании оператора <samp>`+='</samp> с рекурсивно 
вычисляемой переменной, указанный вами текст добавляется к "нераскрытому" значению,
которое хранится внутри переменной. Поэтому, следующий фрагмент:</p> 

<pre>variable = value
variable += more
</pre>

<p> примерно эквивалентен: </p> 

<pre>temp = value
variable = $(temp) more
</pre>

<p> (разумеется, на самом деле, никакой переменной <code>temp</code> не создается).
Важность этого становится понятной при рассмотрении более сложных случаев,
когда "старое" значение переменной
содержит ссылки на другие переменные.
Рассмотрим типичный пример: </p>
 
<pre>CFLAGS = $(includes) -O
...
CFLAGS += -pg # enable profiling
</pre>

<p> В первой строке этого примера определяется переменная <code>CFLAGS</code>, которая
содержит ссылку на другую переменную с именем <code>includes</code>. 
(переменная <code>CFLAGS</code> используется в неявных правилах для компиляции
программ на языке Си; смотрите раздел
<a href="#SEC95">Перечень имеющихся неявных правил</a>.) 
Использование оператора <samp>`='</samp> определяет переменную
<code>CFLAGS</code> как рекурсивно вычисляемую, и, значит, выражение <samp>`$(includes) 
-O'</samp> <em>не</em> будет вычисляться вв момент определения
этой переменной. Таким образом, переменная <code>includes</code> совсем не обязана к
этому времени быть определена.
Достаточно, чтобы она была определена к тому моменту, когда будет вычисляться значение
переменной
<code>CFLAGS</code>. Если мы попробуем обойтись без оператора
<samp>`+='</samp>, придется сделать что-нибудь, наподобие: 
</p>
 
<pre>CFLAGS := $(CFLAGS) -pg # enable profiling
</pre>

<p> К сожалению, этот фрагмент работает не совсем так, как хотелось бы. 
Из-за использования оператора <samp>`:='</samp> 
переменная <code>CFLAGS</code> становится упрощенно вычисляемой; это означает,
что 
<code>make</code> "раскроет" выражение <samp>`$(CFLAGS) -pg'</samp> перед тем, как
присвоить его переменной.
Если переменная <code>includes</code> еще не была определена, в качестве результата "раскрытия"
мы получим строку <samp>` -O 
-pg'</samp>, и последующее определение <coode>includes уже не сможет повлиять на
этот результат.
Напротив, при использовании <samp>`+='</samp> в переменную <code>CFLAGS</code> запишется
<em>нераскрытое</em> значение <samp>`$(includes) -O -pg'</samp>. Таким образом, мы
сохраняем ссылку на переменную
<code>includes</code>. Если переменная <code>includes</code> будет определена где-нибудь 
позднее, то 
ссылка на 
<samp>`$(CFLAGS)'</samp> будет использовать ее значение. 
</coode></p>


<h2><a name="SEC66" href="#TOC66">Директива <code>override</code></a></h2>

<p>
<a name="IDX467"></a>
<a name="IDX468"></a>
<a name="IDX469"></a>

</p>

<p> Если переменная была установлена при помощи командной строки
(смотрите раздел <a href="#SEC90">"Перекрытие" переменных</a>), 
то "обычное" присваивание ей нового значения внутри make-файла игнорируется.
Если вы все-таки хотите присвоить подобной переменной новое значение,
нужно использовать директиву
<code>override</code>, выглядящую следующим 
образом: </p>
 
<pre>override <var>переменная</var> = <var>значение</var>
</pre>

<p>
или 

</p>

<pre>override <var>переменная</var> := <var>значение</var>
</pre>

<p> При добавлении текста к переменной, определенной через командную строку,
используйте конструкцию: </p>

<pre>override <var>переменная</var> += <var>добавляемый-текст</var>
</pre>

<p> Смотрите раздел <a href="#SEC65">Добавление текста к переменной</a>. </p>

<p> Разумеется, директива <code>override</code> была придумана не для "экскалации войны"
между make-файлом и параметрами командной строки.
Идея заключалась в том, чтобы дать возможность изменять или дополнять передаваемые
пользователем в командной строке значения. </p>

<p> Предположим, вы хотите, чтобы компилятор Си всегда запускался с опцией <samp>`-g'</samp>
и, в то же время, хотели бы дать пользователю возможность самостоятельно указать необходимые
опции компиляции. 
Это можно сделать с помощью
директивы
<code>override</code>: </p>

<pre>override CFLAGS += -g
</pre>

<p> Директиву <code>override</code> можно также использовать совместно с директивой 
<code>define</code>. Выглядит это аналогично: </p>
 
<pre>override define foo
bar
endef
</pre>

<p> Смотрите следующий раздел, где описана работы директивы <code>define</code>. </p>



<h2><a name="SEC67" href="#TOC67">Многострочные переменные</a></h2>

<p>
<a name="IDX470"></a>
<a name="IDX471"></a>
<a name="IDX472"></a>
<a name="IDX473"></a>
<a name="IDX474"></a>

</p>

<p> Другой способ установки значения переменной - использование директивы 
<code>define</code>. Эта директива имеет несколько необычный синтаксис, позволяющий
включать в ее значение символы перевода строки. С ее помощью удобно определять 
именованные командные последовательности 
(смотрите раздел <a href="#SEC55">Именованные командные последовательности</a>). </p>

<p> На первой строке находится только название директивы (<code>define</code>), за которым
следует имя переменной.  Значение переменной указывается в следующих строках. 
Меткой конца значения переменной служит строка, содержащая единственное 
слово 
<code>endef</code>. За исключением синтаксических различий, директива 
<code>define</code> работает аналогично оператору <samp>`='</samp>, создавая
рекурсивно вычисляемую переменную (смотрите раздел 
<a href="#SEC59">Две разновидности переменных</a>). 
Имя этой переменной может содержать функции и ссылки на другие переменные,
которые будут "вычислены" в момент чтения директивы <code>define</code> для нахождения 
действительного
имени определяемой переменной. </p>
 
<pre>define two-lines
echo foo
echo $(bar)
endef
</pre>

<p> При использовании обычного оператора присваивания, значение переменной не может
содержать символов перевода строки. 
При использовании же директивы <code>define</code>, символы перевода строки 
(за исключением символа, находящегося перед строкой с <code>endef</code>)
становятся частью значения переменной. </p>

<p> Предыдущий пример функционально 
подобен: </p>

<pre>two-lines = echo foo; echo $(bar)
</pre>

<p> поскольку две команды, разделенные точкой с запятой работают во многом также, как
и две отдельные команды.
Заметьте, однако, что для команд, расположенных в двух отдельных строках, <code>make</code>
будет вызывать командный интерпретатор дважды, запуская каждую команду в своей отдельной
копии интерпретатора.
Смотрите 
раздел <a href="#SEC46">Исполнение команд</a>. </p>

<p> Для переменных, определенных при помощи <code>define</code>, также
может использоваться директива <code>override</code>. Как обычно, при ее использовании, 
определение переменной внутри make-файла будет иметь "приоритет" перед определением
этой же переменной из командной строки: </p>
 
<pre>override define two-lines
foo
$(bar)
endef
</pre>

<p> Смотрите раздел <a href="#SEC66">Директива <code>override</code></a>. </p>


<h2><a name="SEC68" href="#TOC68">Переменные из операционного окружения (environment)</a></h2>

<p>
<a name="IDX475"></a>
<a name="IDX476"></a>

    Переменные в <code>make</code> могут "приходить" из программного 
    окружения (environment),
в котором 
<code>make</code> была запущена. Каждая переменная среды (environment variable), видимая для 
<code>make</code>, преобразуется в соответствующую переменную
<code>make</code> с таким же именем и значением.
Однако, явное определение такой же переменной внутри make-файла или через командную
строку, "перекроет" значение, полученное из операционной среды.
(При наличии опции <samp>`-e'</samp>, значения из переменных среды будут иметь "приоритет"
перед значениями, определенными в make-файле.
Смотрите раздел <a href="#SEC92">Обзор опций</a>. 
Но мы не рекомендуем использовать такую практику.) </p>

<p> Таким образом, установив, например, переменную среды <code>CFLAGS</code>, вы 
заставите большинство make-файлов запускать компилятор Си с указанными вами опциями.
Такая методика относительно безопасна для переменных со стандартными или общепринятыми
значениями, поскольку вряд-ли make-файлы будут использовать такие переменные для 
каких-либо других целей.
(Разумеется, стропроцентной гарантии надежности здесь дать нельзя; 
например, некоторые make-файлы самостоятельно устанавливают переменную <code>CFLAGS</code> 
и, таким образом, не зависят от значения соответствующей переменной 
среды.) </p>

<p> При рекурсивном вызове <code>make</code>, переменные, определенные на "верхних уровнях"
могут быть переданы на "нижние уровни" через операционное окружение
(смотрите раздел <a href="#SEC50">Рекурсивный вызов <code>make</code></a>). 
По умолчанию, через операционную среду будут передаваться только переменные, которые 
были "первоначально" в ней определены, а также переменные, определенные с помощью 
командной строки. Для передачи через операционную среду любых других переменных, 
следует использовать директиву
<code>export</code>. Смотрите раздел 
<a href="#SEC52">Связь с <code>make</code> "нижнего уровня" через переменные</a>, 
где обсуждается
этот вопрос. </p>

<p> Использовать переменные среды для других целей мы не рекомендуем. Плохо, если
поведение make-файлов будет зависеть от значения (неподконтрольных им) переменных среды; 
это может привести к тому, что один и тот же make-файл у разных пользователей будет
работать по-разному, выдавая разные результаты. Это противоречило бы самой идее 
make-файлов. </p>

<p> Скорее всего, такие проблемы возникли бы и с переменной 
<code>SHELL</code>, которая обычно присутствует в операционной среде для указания
выбранной пользователем командной оболочки. 
Было бы очень нежелательно, чтобы этот выбор пользователя влиял на
работу <code>make</code>. Поэтому <code>make</code> игнорирует значение переменной
среды <code>SHELL</code> (за исключением случаев, когда она работает в операционных 
системах MS-DOS и MS-Windows,
где переменная <code>SHELL</code> , как правило, не устанавливается. 
Смотрите раздел <a href="#SEC46">Исполнение команд</a>.) </p>



<h2><a name="SEC69" href="#TOC69">Целе-зависимые (target-specific) значения переменных</a></h2>

<p>
<a name="IDX477"></a>
<a name="IDX478"></a>

</p>

<p> Значения переменных в <code>make</code> обычно являются глобальными; другими
словами, они одинаковы - в каком бы месте make-файла они ни вычислялись.
Одно из исключений - автоматические переменные (смотрите раздел 
<a href="#SEC101">Автоматические переменные</a>). </p>

<p> Другое исключение - это <strong>целе-зависимые значения переменных
(target-specific variable values)</strong>. 
С их помощью вы можете задать для одной и той же переменной разные значения
в зависимости от того, какую цель
в данный момент обновляет <code>make</code>. Так же как и автоматические переменные,
эти значения доступны только в контексте выполняемых для обновления цели команд
(а также других целе-зависимых операторов присваивания). </p>

<p> Целе-зависимые значения переменных устанавливаются с помощью конструкции 
вида: </p>

<pre><var>цель</var> ... : <var>присваивание-переменной</var>
</pre>

<p>
или:

</p>

<pre><var>цель</var> ... : override <var>присваивание-переменной</var>
</pre>

<p> При указании сразу нескольких <var>целей</var>, для каждой из них создается 
свое отдельное целе-зависимое значение. </p>

<p>     <var>Присваивание-переменной</var> может быть любой допустимой формой оператора
присваивания; 
рекурсивной (<samp>`='</samp>), статической (<samp>`:='</samp>), дополняющей
(<samp>`+='</samp>), или условной (<samp>`?='</samp>). Все переменные, участвующие в
<var>присваивании-переменной</var>, вычисляются "в контексте" указанных целей: 
таким образом, все ранее определенные для этих целей целе-зависимые переменные 
будут здесь доступны.
Обратите внимание, что целе-зависимые 
значения переменных не обязательно должны принадлежать к одной разновидности 
(рекурсивно вычисляемые или упрощенно вычисляемые). </p>

<p> Целе-зависимые переменные имеют такой же приоритет как
и любые другие переменные make-файла; 
переменные, определенные через командную строку (или "взятые" из переменных среды при
наличии опции <samp>`-e'</samp>) будут иметь перед ними "приоритет". По-прежнему,
использование директивы
<code>override</code> позволит целе-зависимой переменной избежать "перекрытия". </p>

<p> Одна из особенностей целе-зависимых переменных заключается в следующем: когда
вы определили целе-зависимую переменную, ее значение также будет "видно" для всех
пререквизитов данной цели (конечно, если для пререквизитов не определены свои собственные 
целе-зависимые переменные).
Так, например, в следующем выражении: 
</p>
 
<pre>prog : CFLAGS = -g
prog : prog.o foo.o bar.o
</pre>

<p>переменная <code>CFLAGS</code> будет иметь значение <samp>`-g'</samp> во всех командах,
выполняемых для цели
<tt>`prog'</tt>, а также (обратите внимание!) для целей
<tt>`prog.o'</tt>, <tt>`foo.o'</tt>, 
<tt>`bar.o'</tt>, и всех их пререквизитов. </p>



<h2><a name="SEC70" href="#TOC70">Шаблонно-зависимые (pattern-specific) значения переменных</a></h2>

<p>
<a name="IDX479"></a>
<a name="IDX480"></a>
</p>

<p> В дополнении к целе-зависимым значениям переменных 
(смотрите раздел <a href="#SEC69">Целе-зависимые значения переменных</a>), 
GNU <code>make</code> поддерживает шаблонно-зависимые значения переменных.
Эти переменные считается определенными для всех целей, подходящих под указанный
шаблон. 
Определенные таким образом переменные "принимаются в рассчет" 
после целе-зависимых переменных, явно определенных для рассматриваемой цели но 
до того, как будут рассмотрены целе-зависимые переменные "родительских" целей. </p>

<p> Шаблонно-зависимые переменные устанавливаются с помощью конструкции 
вида: </p>

<pre><var>шаблон</var> ... : <var>присваивание-переменной</var>
</pre>

<p>
или: 

</p>

<pre><var>шаблон</var> ... : override <var>присваивание-переменной</var>
</pre>

<p> где <var>шаблон</var> представляет собой шаблон с символом <code>'%'</code>. 
Подобно случаю задания целе-зависимых переменных, при указании сразу нескольких
<var>шаблонов</var>, для каждого из них создается отдельный экземпляр шаблонного-зависимого 
значения. <var>Присваивание-переменной</var> может быть любой допустимой формой
оператора присваивания. Как обычно, переменные, определенные через командную строку 
будут иметь "приоритет" если только не использовать директиву 
<code>override</code>. </p>

<p>В следующем примере: </p>

<pre>%.o : CFLAGS = -O
</pre>

<p> переменной <code>CFLAGS</code> будет присвоено значение <samp>`-O'</samp> при
обработке всех целей, удовлетворяющих шаблону
<code>%.o</code>. </p>



<h1><a name="SEC71" href="#TOC71">Условные части (conditional parts) make-файла</a></h1>

<p>
<a name="IDX481"></a>

    <strong>Условная конструкция (conditional)</strong> 
    заставляет <code>make</code> обрабатывать или игнорировать
часть make-файла в зависимости от значения некоторых переменных.
В качестве условия может использоваться сравнение двух переменных или сравнение
переменной с константной строкой.
Условные конструкции управляют тем, "каким" <code>make</code> "увидит" 
обрабатываемый make-файл, и, поэтому, их <em>нельзя</em> использовать для управления 
командами оболочки во время их исполнения. </p>



<h2><a name="SEC72" href="#TOC72">Пример условной конструкции</a></h2>

<p> В следующем примере, условная конструкция инструктирует <code>make</code> использовать
разные наборы библиотек в зависимости от того, имеет ли переменная
<code>CC</code> значение <samp>`gcc'</samp> или нет.
Условная конструкция работает, управляя тем, какая из двух командных строк будет 
использоваться в качестве команды правила.
В результате, при запуске <code>make</code> с параметром  
<samp>`CC=gcc'</samp> произойдет не только изменение используемого компилятора, но
и изменение набора библиотек, с которыми будет компоноваться собираемая 
программа. </p>
 
<pre>libs_for_gcc = -lgnu
normal_libs =

foo: $(objects)
ifeq ($(CC),gcc)
        $(CC) -o foo $(objects) $(libs_for_gcc)
else
        $(CC) -o foo $(objects) $(normal_libs)
endif
</pre>

<p> В этой условной конструкции используется три директивы: <code>ifeq</code>, 
<code>else</code> и <code>endif</code>. </p>

<p> Директива <code>ifeq</code> определяет начало условной конструкции и 
указывает само условие.  
Она имеет два параметра, разделенных запятой и заключенных
в скобки.
Эти параметры вычисляются и, затем, сравниваются.
Если два параметра совпадают, строки, следующие за <code>ifeq</code>, обрабатываются; 
в противном случае они игнорируются. </p>

<p> При использовании директивы <code>else</code>, следующие за ней строки
должны быть обработаны, если условие (из директивы <code>ifeq</code>) не выполняется.
В предыдущем примере, это означает использование второй, альтернативной команды 
компоновки, если первая альтернатива не будет использована.
Наличие директивы <code>else</code> в условной конструкции не является обязательным. </p>

<p> Директива <code>endif</code> завершает условную конструкцию. Следующие за
этой директивой строки, относятся уже к "безусловной" части make-файла.
Наличие директивы
<code>endif</code> является обязательным. </p>

<p> Как видно из предыдущего примера, условные конструкции работают на "текстовом" 
уровне: отдельные строки рассматриваются как часть make-файла либо игнорируются,
в зависимости от проверяемого условия. Поэтому, более крупные синтаксические
элементы (например, правила) могут пересекать "границы" условной конструкции. </p>

<p> Если переменная <code>CC</code> будет содержать значение
<samp>`gcc'</samp>, то приведенный выше пример будет работать 
как: </p>

<pre>foo: $(objects)
        $(CC) -o foo $(objects) $(libs_for_gcc)
</pre>

<p> При любом другом значении переменной <code>CC</code>, тот же пример будет
работать как: 
</p>

<pre>foo: $(objects)
        $(CC) -o foo $(objects) $(normal_libs)
</pre>

<p> Аналогичного результата можно добиться, заключив 
оператор присваивания переменной нужного значения в условную конструкцию, 
и, затем, использовать эту переменную 
"безусловно": </p>
 
<pre>libs_for_gcc = -lgnu
normal_libs =

ifeq ($(CC),gcc)
  libs=$(libs_for_gcc)
else
  libs=$(normal_libs)
endif

foo: $(objects)
        $(CC) -o foo $(objects) $(libs)
</pre>



<h2><a name="SEC73" href="#TOC73">Синтаксис условных конструкций</a></h2>

<p>
<a name="IDX482"></a>
<a name="IDX483"></a>
<a name="IDX484"></a>
<a name="IDX485"></a>
<a name="IDX486"></a>
<a name="IDX487"></a>
</p>

<p> Синтаксис простой (без директивы <code>else</code>) условной конструкции 
выглядит следующим образом: </p>

<pre><var>условная-директива</var>
<var>фрагмент-для-выполненного-условия</var>
endif
</pre>

<p> <var>Фрагмент-для-выполненного-условия</var> представляет собой последовательность
любых строк текста, которые будут рассматриваться как часть make-файла, если 
проверяемое условие выполняется. В противном случае, этот текст не используется. </p>

<p> Синтаксис "сложной" условной конструкции выглядит 
так: </p>

<pre><var>условная-директива</var>
<var>фрагмент-для-выполненного-условия</var>
else
<var>фрагмент-для-невыполненного-условия</var>
endif
</pre>

<p> При выполнении условия, используется фрагмент <var>фрагмент-для-выполненного-условия</var>; 
иначе, используется фрагмент
<var>фрагмент-для-невыполненного-условия</var>. Фрагмент 
<var>фрагмент-для-невыполненного-условия</var> может содержать любое количество 
строк. </p>

<p> <var>Условная-директива</var> имеет одинаковый синтаксис как в простой, так и в
сложной условной конструкции.
Имеется четыре разных директивы, проверяющих разные условия. Вот они: </p>

<p></p>
<dl compact="compact">

<dt><code>ifeq (<var>параметр1</var>, <var>параметр2</var>)</code>
</dt><dd>
</dd><dt><code>ifeq '<var>параметр1</var>' '<var>параметр2</var>'</code>
</dt><dd>
</dd><dt><code>ifeq "<var>параметр1</var>" "<var>параметр2</var>"</code>
</dt><dd>
</dd><dt><code>ifeq "<var>параметр1</var>" '<var>параметр2</var>'</code>
</dt><dd>
</dd><dt><code>ifeq '<var>параметр1</var>' "<var>параметр2</var>"</code>

  </dt><dd>      Значения параметров <var>параметр1</var> и <var>параметр2</var> вычисляются
  и сравниваются между собой. 
  При их совпадении используется фрагмент <var>фрагмент-для-выполненного-условия</var>; 
  иначе используется фрагмент <var>фрагмент-для-невыполненного-условия</var> (если он
  имеется). Часто возникает необходимость проверить - содержит ли переменная
  какое-нибудь "непустое" значение.
  Трудность состоит в том, что после разного рода преобразований и вычислений функций,
  значение, выглядящее как "пустое", будет, на самом деле, состоять из пробелов и,
  таким образом, не будет считаться "пустым".
  Для того, чтобы избежать интерпретации пробелов как непустых значений, можно
  воспользоваться функцией <code>strip</code> (смотрите раздел 
  <a href="#SEC77">Функции анализа и подстановки строк</a>).
  В следующем примере: <pre>ifeq ($(strip $(foo)),)
<var>фрагмент-для-случая-пустого-значения</var>
endif
</pre>  фрагмент <var>фрагмент-для-случая-пустого-значения</var> будет использован
    даже в том случае, если значение переменной 
  <code>$(foo)</code> будет состоять из пробелов.

</dd><dt><code>ifneq (<var>параметр1</var>, <var>параметр2</var>)</code>
</dt><dd>
</dd><dt><code>ifneq '<var>параметр1</var>' '<var>параметр2</var>'</code>
</dt><dd>
</dd><dt><code>ifneq "<var>параметр1</var>" "<var>параметр2</var>"</code>
</dt><dd>
</dd><dt><code>ifneq "<var>параметр1</var>" '<var>параметр2</var>'</code>
</dt><dd>
</dd><dt><code>ifneq '<var>параметр1</var>' "<var>параметр2</var>"</code>

  </dt><dd>     Значения параметров <var>параметр1</var> и <var>параметр2</var> вычисляются
  и сравниваются между собой. 
  Если они не совпадают, используется фрагмент <var>фрагмент-для-выполненного-условия</var>;
  иначе используется фрагмент <var>фрагмент-для-невыполненного-условия</var> (если он
  имеется). 

  </dd><dt><code>ifdef <var>имя-переменной</var></code> 

  </dt><dd>  Если переменная <var>имя-переменной</var> имеет непустое значение,
  будет использован фрагмент
  <var>фрагмент-для-выполненного-условия</var>; иначе, будет использован 
  фрагмент <var>фрагмент-для-невыполненного-условия</var> (если таковой имеется). 
  Переменные, которые еще не определены, рассматриваются как имеющие пустые значения.
  Обратите внимание, что директива <code>ifdef</code> просто проверяет - имеет ли переменная
  непустое значение. Она никогда не пытается вычислить это значение и проверить
  - не пустое ли оно. 
  Как следствие, проверка с помощью <code>ifdef</code> будет возвращать "истину"
  для всех определений, кроме определений, подобных: 
  <code>foo =</code>. Для проверки "вычисленного" значения переменной, используйте
  конструкцию <code>ifeq ($(foo),)</code>. В следующем примере: <pre>bar =
foo = $(bar)
ifdef foo
frobozz = yes
else
frobozz = no
endif
</pre>  переменная <samp>`frobozz'</samp> получит значение <samp>`yes'</samp>, а  
в примере: <pre>foo =
ifdef foo
frobozz = yes
else
frobozz = no
endif
</pre>  переменная <samp>`frobozz'</samp> будет установлена в <samp>`no'</samp>. 
  

</dd><dt><code>ifndef <var>имя-переменной</var></code>

  </dt><dd>  Если переменная <var>имя-переменной</var> имеет пустое значение, будет
  использован фрагмент <var>фрагмент-для-выполненного-условия</var>; иначе,
  будет использован фрагмент <var>фрагмент-для-невыполненного-условия</var>
  (если такой фрагмент имеется).

</dd></dl>

<p> В начале строки с условной директивой могут находится пробелы (которые игнорируются)
но не символ табуляции. 
(При наличии символа табуляции такая строка рассматривалась бы как команда правила.)
За этим маленьким исключением, пробелы и символы табуляции могут свободно
использоваться в любом месте строки с условной директивой (только, разумеется, не внутри 
имени самой директивы и не 
внутри аргументов).
В конце строки может располагаться комментарий, начало которого обозначается 
символом  <samp>`#'</samp>. </p>

<p> Две другие директивы, используемые в условных конструкциях - это директивы
<code>else</code> и <code>endif</code>. Каждая из этих директив записывается
в одно слово и не имеет параметров.
В начале строк с этими директивами, могут находится дополнительные пробелы (которые
будут игнорированы), а в конце строк - пробелы и символы табуляции
(которые также будут игнорированы).
В конце таких строк может располагаться комментарий, начало которого обозначается 
символом  <samp>`#'</samp>. </p>

<p> Условные конструкции влияют на то, какие строки make-файла в действительности
будет использовать <code>make</code>. При
выполнении указаного условия, <code>make</code> будет рассматривать строки 
<var>фрагмент-для-выполненного-условия</var> как часть make-файла; при невыполнении
условия, эти строки будут игнорироваться.
Вследствие этого, синтаксические единицы make-файла (такие как правила) 
вполне могут пересекать границы условной конструкции. </p>

<p> Условия, указанные в условных конструкциях, вычисляются 
в момент чтения make-файла.
Как следствие, в качестве условий не может использоваться проверка автоматических переменных,
поскольку они являются неопределенными до момента запуска команд правила 
(смотрите раздел <a href="#SEC101">Автоматические переменные</a>). </p>

<p> Во избежании неприятных конфузов, не разрешается "начинать" условную конструкцию
в одном make-файле и "заканчивать" ее в другом.
Однако, внутри условной конструкции вы можете использовать директиву 
<code>include</code> (при условии, что включаемый make-файл не будет
пытаться "завершить" эту условную конструкцию). </p>



<h2><a name="SEC74" href="#TOC74">Проверка опций запуска <code>make</code> в условных конструкциях</a></h2>

<p> Вы можете написать условную конструкцию, проверяющую наличие определенных опций
(например, <samp>`-t'</samp>), указанных при запуске <code>make</code>.
Это можно сделать, используя 
переменную <code>MAKEFLAGS</code> совместно с 
функцией 
<code>findstring</code> (смотрите раздел 
<a href="#SEC77">Функции анализа и подстановки строк</a>). 
Необходимость в этом может возникнуть, например, в ситуации, когда одного лишь 
использования команды 
<code>touch</code> недостаточно для обновления файла. </p>

<p> Функция <code>findstring</code> определяет, входит ли одна строка в другую
в качестве подстроки. 
Если, например, вы хотите проверить наличие опции <samp>`-t'</samp>, используйте
<samp>`t'</samp> как первую строку (первый параметр функции), а переменную <code>MAKEFLAGS</code> 
- как другую строку (второй параметр функцции). </p>

<p> В следующем примере, в качестве
завершающего шага пометки архивного файла как "обновленного", используется команда
<samp>`ranlib -t'</samp>: </p>

<pre>archive.a: ...
ifneq (,$(findstring t,$(MAKEFLAGS)))
        +touch archive.a
        +ranlib -t archive.a
else
        ranlib archive.a
endif
</pre>

<p> Префикс <samp>`+'</samp> помечает командные строки как "рекурсивные". Эти команды
будут выполняться даже при наличии опции <samp>`-t'</samp>. Смотрите раздел 
<a href="#SEC50">Рекурсивный вызов <code>make</code></a>. </p>



<h1><a name="SEC75" href="#TOC75">Функции преобразования текста</a></h1>

<p>
<a name="IDX488"></a>

</p>

<p> С помощью <strong>функций</strong>, вы можете производить в make-файле 
некоторую текстовую
обработку, определяя с ее помощью 
имена обрабатываемых файлов или используемые команды.
При 
<strong>вызове функции</strong>, вы указываете ее имя и некоторый текст
(<strong>параметры</strong>), который будет обрабатываться этой функцией.
Результат работы функции будет "подставлен" в make-файл на месте ее вызова (подобно тому,
как вместо ссылки на переменную подставляется ее значение). </p>




<h2><a name="SEC76" href="#TOC76">Синтаксис вызова функций</a></h2>

<p>
<a name="IDX489"></a>
<a name="IDX490"></a>
<a name="IDX491"></a>
<a name="IDX492"></a>

</p>

<p> Вызов функции внешне напоминает ссылку на переменную.
Он выглядит так: </p>


<pre>$(<var>функция</var> <var>параметры</var>)
</pre>

<p>или так: </p>

<pre>${<var>функция</var> <var>параметры</var>}
</pre>

<p> Здесь <var>функция</var> является именем функции. В 
<code>make</code> имеется некоторое количество "встроенных" функций. 
С помощью встроенной функции <code>call</code>
вы можете определить свою собственную функцию.
</p>

<p> <var>Параметры</var> являются параметрами функции. От имени функции они
отделяются одним или несколькими пробелами или символами
табуляции. При наличии нескольких параметров, они отделяются друг от друга запятыми.
Такие пробелы и запятые не рассматриваются как часть значения параметра.
Разделители, которые вы использовали для обозначения вызова функции (круглые или
фигурные скобки), могут появляться в аргументах только "попарно"; другие символы
разделителей могут появляться и поодиночке.
Если аргументы сами, в свою очередь, содержат ссылки на другие функции или
переменные, для всех ссылок рекомендуется использовать один и тот же вид 
разделителей; то есть, например, писать 
<samp>`$(subst a,b,$(x))'</samp>, а не <samp>`$(subst a,b,${x})'</samp>. Такая
запись является не только более ясной, но и более "простой" для <code>make</code> 
(только один вид 
разделителей используется при поиске конца
ссылки). </p>

<p> Перед тем, как аргумент будет передан для обработки в функцию, вычисляются все
содержащиеся в нем ссылки на переменные и функции.
Обработка аргументов производится в том порядке, как они перечислены. </p>

<p> Запятые и непарные скобки не могут "явным" образом появляться в аргументах
функции; нельзя также "явным" образом указать наличии ведущих пробелов в первом
параметре функции.
Однако, эти символы могут быть вставлены в аргумент с помощью ссылки на 
переменные.
Это можно сделать, определив, например, переменные <code>comma</code> и
<code>space</code>, значениями которых будут, соответственно, одиночные символы запятой и
пробела. Далее, значения этих переменных могут быть подставлены в любое место аргументов,
где требуется наличие соответствующего символа.
Например: </p>
 
<pre>comma:= ,
empty:=
space:= $(empty) $(empty)
foo:= a b c
bar:= $(subst $(space),$(comma),$(foo))
# bar is now `a,b,c'.
</pre>

<p> Здесь, с помощью функции <code>subst</code>, каждый символ пробела, содержащийся в
переменной 
<code>foo</code>, заменяется на символ запятой. </p>



<h2><a name="SEC77" href="#TOC77">Функции анализа и подстановки строк</a></h2>

<p>
<a name="IDX493"></a>

</p>

<p> Ниже перечислены функции, оперирующие со строками: </p>

<dl compact="compact">

    <dt><code>$(subst <var>заменяемый_фрагмент</var>,<var>замена</var>,<var>текст</var>)</code>

</dt><dd>
<a name="IDX494"></a>

  Производит текстовую замену в тексте
  <var>текст</var>: каждой вхождение подстроки <var>заменяемый_фрагмент</var> заменяется на
  фрагмент <var>замена</var>. Результат подставляется в место вызова функции. 
  Результатом следующего примера:

<pre>$(subst ee,EE,feet on the street)
</pre>

будет строка <samp>`fEEt on the strEEt'</samp>.

    </dd><dt><code>$(patsubst 
  <var>шаблон</var>,<var>замена</var>,<var>текст</var>)</code>

</dt><dd>
<a name="IDX495"></a>

  Находит в <var>тексте</var> разделенные
  пробелом слова, удовлетворяющие  
  <var>шаблону</var> и заменяет их на строку <var>замена</var>. 
  <var>Шаблон</var> может содержать символ <samp>`%'</samp>, который работает как
  специальный шаблонный символ, соответствующий любому количеству произвольных 
  символов внутри слова.
  Если строка 
  <var>замена</var> также содержит символ <samp>`%'</samp>, 
  он будет заменен текстом, соответствующим символу <samp>`%'</samp> в 
  <var>шаблоне</var>.

<a name="IDX496"></a>
<a name="IDX497"></a>
<a name="IDX498"></a>
<a name="IDX499"></a>
<a name="IDX500"></a>

  Специальное значение символа <samp>`%'</samp> 
  может быть отменено предшествующим ему символом
  <samp>`\'</samp>. Специальное значение символа <samp>`\'</samp>, который
  мог бы отменить специальное значение символа 
  <samp>`%'</samp>, может, в свою очередь, быть отменено дополнительным
  символом <samp>`\'</samp>.

  Символы <samp>`\'</samp>, отменяющие специальное значение символов <samp>`%'</samp> и
  <samp>`\'</samp>, удаляются из шаблона перед тем, как он будет использоваться
  для сравнения или подстановки.

  Символы <samp>`\'</samp>, не могущие повлиять на трактовку
  <samp>`%'</samp>, остаются нетронутыми.

  Например, в шаблоне
  <tt>`the\%weird\\%pattern\\'</tt> за строкой <samp>`the%weird\'</samp> следует
  шаблонный символ 
  <samp>`%'</samp> и строка <samp>`pattern\\'</samp>.
  Два завершающих символа <samp>`\'</samp> остаются нетронутыми, поскольку они
  не могут повлиять на трактовку символа
  <samp>`%'</samp>. Пробельные символы между словами преобразуются в одиночные
  пробелы; начальные и конечные пробелы отбрасываются.

Например, результатом выражения


<pre>$(patsubst %.c,%.o,x.c.c bar.c)
</pre>

будет строка <samp>`x.c.o bar.o'</samp>.

Ссылка с заменой
  (смотрите раздел <a href="#SEC61">Ссылка с заменой</a>) 
  является упрощенным способом получения эффекта, аналогичного 
  использованию функции <code>patsubst</code>.
 Выражение:

<pre>$(<var>переменная</var>:<var>шаблон</var>=<var>замена</var>)
</pre>

эквивалентно


<pre>$(patsubst <var>шаблон</var>,<var>замена</var>,$(<var>переменная</var>))
</pre>

Еще одна упрощенная форма записи имеется для распространенного
способа использования функции
  <code>patsubst</code>: замены суффиксов в именах файлов.
  Выражение:

<pre>$(<var>переменная</var>:<var>суффикс</var>=<var>замена</var>)
</pre>

эквивалентно: 


<pre>$(patsubst %<var>суффикс</var>,%<var>замена</var>,$(<var>переменная</var>))
</pre>

Пусть, например, у вас имеется список объектных файлов:


<pre>objects = foo.o bar.o baz.o
</pre>

Тогда, для получения списка соответствующих исходных файлов, вы можете просто написать:

<pre>$(objects:.o=.c)
</pre>

вместо того, чтобы использовать "обобщенную" форму записи:

<pre>$(patsubst %.o,%.c,$(objects))
</pre>

</dd><dt><code>$(strip <var>строка</var>)</code>
</dt><dd>
<a name="IDX501"></a>
<a name="IDX502"></a>
<a name="IDX503"></a>
<a name="IDX504"></a>

        Удаляет начальные и конечные пробелы из <var>строки</var>, а также 
  заменяет все внутренние последовательности пробельных символов на 
  одиночные пробелы.

Так, результатом выражения 
<samp>`$(strip a b  c )'</samp> будет строка <samp>`a b c'</samp>.

  Функция <code>strip</code> весьма полезна 
  в условных конструкциях.

  Например, при использовании директив <code>ifeq</code> и <code>ifneq</code> 
  для сравнения с пустой строкой
  <samp>`'</samp>, 
  обычно желательно, чтобы строка, целиком состоящая из пробельных символов,
  рассматривалась как пустая 
(смотрите раздел <a href="#SEC71">Условные части make-файла</a>).
  Так, например, следующий фрагмент  make-файла не всегда будет работать желаемым 
  образом: 

<pre>.PHONY: all
ifneq   "$(needs_made)" ""
all: $(needs_made)
else
all:;@echo 'Nothing to make!'
endif
</pre>

 Заменив в директиве <code>ifneq</code> ссылку на переменную 
<samp>`$(needs_made)'</samp> вызовом функции
  <samp>`$(strip $(needs_made))'</samp>, мы получим более надежно
  работающую конструкцию.

</dd><dt><code>$(findstring <var>фрагмент</var>,<var>строка</var>)</code> 

</dt><dd>
<a name="IDX505"></a>
<a name="IDX506"></a>
<a name="IDX507"></a>
<a name="IDX508"></a>

        Производит поиск <var>фрагмента</var> в <var>строке</var>. 
  В случае успеха (фрагмент найден) возвращает значение <var>фрагмент</var>; 
  в противном случае, возвращается пустая строка. 
  Эту функцию можно использовать 
  в условных конструкциях для проверки наличия в рассматриваемой строке 
  определенной подстроки.
  Результатами следующих двух примеров: 

<pre>$(findstring a,a b c)
$(findstring a,b c)
</pre>

будут, соответственно, строки <samp>`a'</samp> и <samp>`'</samp> (пустая строка).
  В разделе <a href="#SEC74">Проверка опций запуска <code>make</code> 
  в условных конструкциях</a> приведен достаточно реалистичный 
  пример использования функции <code>findstring</code>. 

<a name="IDX509"></a>
<a name="IDX510"></a>
<a name="IDX511"></a>

</dd><dt><code>$(filter <var>шаблон</var>...,<var>текст</var>)</code>
    
  </dt><dd>  Удаляет из <var>текста</var> все разделенные пробелами слова, которые
  не удовлетворяют ни одному из указанных 
  <var>шаблонов</var> и возвращает только слова, подходящие под шаблоны.

  Шаблоны записываются с использованием шаблонного символа <samp>`%'</samp>, аналогично
  тому, как это делается в функции
  <code>patsubst</code> (описана выше).

  Функция 
  <code>filter</code> может быть использована для отделения друг от друга 
  строк (например, имен файлов) разных "типов".
  В следующем примере: 

<pre>sources := foo.c bar.c baz.s ugh.h
foo: $(sources)
        cc $(filter %.c %.s,$(sources)) -o foo
</pre>

    объявляется, что цель <tt>`foo'</tt> зависит от файлов <tt>`foo.c'</tt>, 
<tt>`bar.c'</tt>, 
  <tt>`baz.s'</tt> и <tt>`ugh.h'</tt>, однако, при вызове компилятора, ему будут
  переданы только 
  файлы <tt>`foo.c'</tt>, 
  <tt>`bar.c'</tt> и <tt>`baz.s'</tt>.

</dd><dt><code>$(filter-out <var>шаблон</var>...,<var>текст</var>)</code>

</dt><dd>
<a name="IDX512"></a>
<a name="IDX513"></a>
<a name="IDX514"></a>

        Удаляет из 
  <var>текста</var> все разделенные пробелами слова, которые соответствуют
  какому-либо из перечисленных <var>шаблонов</var>, возвращая только слова, не соответствующие
  ни одному из <var>шаблонов</var>. 
  Эта функция представляет собой "противоположность" функции <code>filter</code>. 
  Если, например, у нас имеется такой 
  фрагмент: 

<pre>objects=main1.o foo.o main2.o bar.o
mains=main1.o main2.o
</pre>

то следующее выражение возвратит список объектных файлов, не входящих в
  <samp>`mains'</samp>:

<pre>$(filter-out $(mains),$(objects))
</pre>

<a name="IDX515"></a>
<a name="IDX516"></a>

</dd><dt><code>$(sort <var>список</var>)</code>

</dt><dd>
  Отсортировывает слова из <var>списка</var> в лексикографическом 
  порядке, удаляя дубликаты (повторяющейся слова).
  Результатом является список слов, разделенных одиночными пробелами.
  Так, результатом выражения 

<pre>$(sort foo bar lose)
</pre>

    будет строка <samp>`bar foo lose'</samp>. 

<a name="IDX517"></a>
<a name="IDX518"></a>
<a name="IDX519"></a>

    Даже если вас не интересует лексикографическая сортировка, вы можете
    пользоваться фунцией <code>sort</code> просто для удаления повторяющихся
    слов.
</dd></dl>

<p> Вот довольно реалистичный пример использования функций <code>subst</code> и
<code>patsubst</code>. Предположим, у вас имеется make-файл, в котором
для указания списка каталогов, где <code>make</code> следует производить поиск 
пререквизитов,
используется переменная
<cde>VPATH (смотрите раздел 
<a href="#SEC27">Переменная <code>VPATH</code>: список каталогов для 
поиска пререквизитов</a>). 
В следующем примере демонстрируется, как можно указать компилятору на необходимость поиска
заголовочных файлов в том же списке каталогов. </cde></p>

<p> Значение переменной <code>VPATH</code> представляет собой список имен
каталогов, разделенных двоеточиями, например
<samp>`src:../headers'</samp>. Сперва используем функцию <code>subst</code> для
замены символов двоеточия на пробелы: </p>

<pre>$(subst :, ,$(VPATH))
</pre>

<p> Полученный результат будет выглядеть как <samp>`src ../headers'</samp>. 
Далее, с помощью функции <code>patsubst</code>, преобразуем каждое из имен 
каталогов в соответствующую опцию <samp>`-I'</samp> компилятора. Полученное
значение можно добавить к содержимому переменной 
<code>CFLAGS</code>, которая автоматически передается
компилятору: </p>

<pre>override CFLAGS += $(patsubst %,-I%,$(subst :, ,$(VPATH)))
</pre>

<p> Как результат, к первоначальному значению переменной <code>CFLAGS</code> добавляется
строка <samp>`-Isrc -I../headers'</samp>. 
Директива <code>override</code> 
была использована 
для того, чтобы изменить значение переменной <code>CFLAGS</code> даже 
в том случае, если она была задана с помощью
командной строки
(смотрите раздел <a href="#SEC66">Директива <code>override</code></a>). </p>
                                


<h2><a name="SEC78" href="#TOC78">Функции для обработки имен файлов</a></h2>

<p>
<a name="IDX520"></a>
<a name="IDX521"></a>
</p>

<p> Несколько функций ориентированы на работу с именами файлов или списками
имен файлов. </p>

<p> Каждая из перечисленных ниже функций выполняет некоторое преобразование
имени файла. Аргумент функции рассматривается как последовательность имен файлов,
разделенных пробелами.
(Начальные и конечные пробелы игнорируются.) Каждое из перечисленных 
имен файлов преобразуется одинаковым образом  
и результаты этих преобразований, разделенные одиночными пробелами, 
объединяются вместе. </p>

<dl compact="compact">

<dt><code>$(dir <var>имена</var>...)</code> 
    
</dt><dd>
<a name="IDX522"></a>
<a name="IDX523"></a>
<a name="IDX524"></a>

    Из каждого имени файла, перечисленного в <var>именах</var>, выделяет
    имя каталога, где этот файл расположен. 
  Именем каталога считается часть имени до последнего встреченного символа <samp>`/'</samp> 
  (включая и этот символ). 
  Если имя файла не содержит символов <samp>`/'</samp>, его именем каталога
  считается строка 
  <samp>`./'</samp>. Результатом следующего примера: 

<pre>$(dir src/foo.c hacks)
</pre>

 будет строка <samp>`src/ ./'</samp>.

</dd><dt><code>$(notdir <var>имена</var>...)</code>
    
</dt><dd>
<a name="IDX525"></a>
<a name="IDX526"></a>
<a name="IDX527"></a>

    Из каждого имени файла, перечисленного в <var>именах</var>, удаляет имя каталога,
    где он находится.
  Имена файлов, не содержащие символов <samp>`/'</samp>, остаются без изменений.
  В противном случае (при наличии символов <samp>`/'</samp>), из имени файла удаляется
  все, что расположено до последнего встреченного символа <samp>`/'</samp> 
  (включая и сам этот символ).
  Это означает, что имя файла, оканчивающееся символом <samp>`/'</samp> преобразуется
  в пустую и строку, и, таким образом, количество имен файлов на выходе функции может
  не совпадать с количеством имен файлов, переданных ей на вход.
  К сожалению, мы пока не видим лучшей альтернативы.
  Результатом следующего примера: 

<pre>$(notdir src/foo.c hacks)
</pre>

будет строка <samp>`foo.c hacks'</samp>.

</dd><dt><code>$(suffix <var>имена</var>...)</code>
    
</dt><dd>
<a name="IDX528"></a>
<a name="IDX529"></a>
<a name="IDX530"></a>

    Из каждого имени файла, перечисленного в <var>именах</var>, выделяется
    его суффикс. 
    Если имя файла содержит точку, суффиксом имени считается строка, начинающаяся
    с последнего встреченного символа точки. В противном случае (имя не содержит точек),
    суффиксом считается пустая строка. 
    Из-за этого, во многих случаях результатом функции может быть пустая строка,
    хотя список <var>имен</var> был непуст.
    Вдобавок, список имен файлов, полученный на выходе функции, может оказаться 
    "короче" чем список, переданный ей на вход.
    Например, результатом следующего выражения: 

<pre>$(suffix src/foo.c src-1.0/bar.c hacks)
</pre>

будет строка <samp>`.c .c'</samp>.

</dd><dt><code>$(basename <var>имена</var>...)</code>
    
</dt><dd>
<a name="IDX531"></a>
<a name="IDX532"></a>
<a name="IDX533"></a>

        Из каждого имени файла, перечисленного в <var>именах</var>, 
  выделяет так называемое "базовое имя" (basename) - все то, что не относится к суффиксу.
  Если имя файла содержит точку, то базовым именем считается все, что находится
  до последнего символа точки (не включая ее). 
  Точки, которые находятся внутри имени каталога, игнорируются. 
  Если рассматриваемое имя файла не содержит точек, оно целиком считается базовым именем.
  Результатом следующего примера: 

<pre>$(basename src/foo.c src-1.0/bar hacks)
</pre>

будет строка <samp>`src/foo src-1.0/bar hacks'</samp>.

</dd><dt><code>$(addsuffix <var>суффикс</var>,<var>имена</var>...)</code>
    

</dt><dd>
<a name="IDX534"></a>
<a name="IDX535"></a>
<a name="IDX536"></a>

        Аргумент 
  <var>имена</var> рассматривается как последовательность разделенных пробелами имен;
  аргумент <var>суффикс</var> рассматривается как строка. 
  Результатом работы этой функции является список имен (разделенных одиночными символами
  пробелов), каждое из которых получено из соответствующего "исходного" имени, в конец
  которого добавлен суффикс <var>суффикс</var>.
  Результатом следующего примера: 

<pre>$(addsuffix .c,foo bar)
</pre>

будет строка <samp>`foo.c bar.c'</samp>.

</dd><dt><code>$(addprefix <var>префикс</var>,<var>имена</var>...)</code>
    
</dt><dd>
<a name="IDX537"></a>
<a name="IDX538"></a>
<a name="IDX539"></a>

        Аргумент 
  <var>имена</var> рассматривается как последовательность разделенных пробелами имен;
  аргумент <var>префикс</var> рассматривается как строка. 
  Результатом этой функции является список имен (разделенных одиночными символами
  пробелов), каждое из которых получено из соответствующего "исходного" имени, в начало
  которого добавлен префикс <var>префикс</var>.
  Например, результатом следующего выражения: 

<pre>$(addprefix src/,foo bar)
</pre>

будет строка <samp>`src/foo src/bar'</samp>.

</dd><dt><code>$(join <var>список1</var>,<var>список2</var>)</code>
    
</dt><dd>
<a name="IDX540"></a>
<a name="IDX541"></a>
<a name="IDX542"></a>

        "Пословно" объединяет оба аргумента:
  первые два слова (по одному из каждого аргумента) объединяются в первое слово результата; 
  вторые два слова (второе слово каждого из аргументов) объединяются во второе слово результата
  и так далее.
  Таким образом <var>n</var>-ное слово результата строится из
  <var>n</var>-ного слова каждого из аргументов. Если один из аргументов содержит
  большее количество слов чем другой, "избыточные" слова копируются в 
  результат без изменений.
  Например, результатом выражения: <samp>`$(join a b,.c .o)'</samp> будет 
  строка <samp>`a.c b.o'</samp>. 
  "Оригинальные" пробелы между словами списка не сохраняются - они заменяются на одиночный 
  символ пробела.
  Применив <code>join</code> к результатам работы функций 
  <code>dir</code> и <code>notdir</code>, можно получить "исходный" список файлов.

</dd><dt><code>$(word <var>n</var>,<var>текст</var>)</code> 
    
</dt><dd>
<a name="IDX543"></a>
<a name="IDX544"></a>
<a name="IDX545"></a>

        Возвращает
  <var>n</var>-ное слово <var>текста</var>. Допустимые значения <var>n</var> 
  начинаются с 1. Если значение <var>n</var> превышает количество слов в
  <var>тексте</var>, результатом работы фунции будет пустая строка. 
  В следующий примере: 

<pre>$(word 2, foo bar baz)
</pre>

будет получена строка <samp>`bar'</samp>.

</dd><dt><code>$(wordlist <var>s</var>,<var>e</var>,<var>текст</var>)</code> 
    
</dt><dd>
<a name="IDX546"></a>
<a name="IDX547"></a>
<a name="IDX548"></a>

    Возвращает список слов 
  <var>текста</var>, начиная со слова номер <var>s</var> и заканчивая
  словом номер
  <var>e</var> (включительно). Допустимые значения <var>s</var> и
  <var>e</var> начинаются с 1. Если <var>s</var> превышает количество слов
  в
  <var>тексте</var>, возращается пустая строка. Если <var>e</var> превышается
  количество слов в
  <var>тексте</var>, возвращаются все слова до конца <var>текста</var>.
  Если величина <var>s</var> превышает <var>e</var>, также 
  возвращается пустая строка.
  В следующем примере: 

<pre>$(wordlist 2, 3, foo bar baz)
</pre>

будет получен результат <samp>`bar baz'</samp>.

</dd><dt><code>$(words <var>текст</var>)</code>
    
</dt><dd>
<a name="IDX549"></a>
<a name="IDX550"></a>

        Возвращает число слов в
  <var>тексте</var>. Таким образом, последнее слово <var>текста</var> можно
  получить с помощью выражения <code>$(word 
  $(words <var>текст</var>),<var>текст</var>)</code>.

</dd><dt><code>$(firstword <var>имена</var>...)</code>
   
</dt><dd>
<a name="IDX551"></a>
<a name="IDX552"></a>

        Аргумент <var>имена</var> рассматривается как последовательность имен, разделенных
    пробелами. Результатом функции является первое имя из списка. Остальные имена
    игнорируются. 
    Например, результатом выражения: 

<pre>$(firstword foo bar)
</pre>

будет строка <samp>`foo'</samp>.  

Хотя выражение <code>$(firstword 
  <var>текст</var>)</code> и эквивалентно <code>$(word 1,<var>текст</var>)</code>,
  использование функции <code>firstword</code> может повысить удобочитаемость
  make-файла.

</dd><dt><code>$(wildcard <var>шаблон</var>)</code>
    
</dt><dd>
<a name="IDX553"></a>
<a name="IDX554"></a>

        Аргумент <var>шаблон</var> является 
  шаблоном имени файла и, обычно, содержит шаблонные символы (такие же как
  в шаблонах имен файлов интерпретатора командной строки). 
  Результатом функции <code>wildcard</code> является список 
  разделенных пробелами 
  имен
  существующих в данный момент файлов, удовлетворяющих
  указанному шаблону. 
  Смотрите раздел <a href="#SEC22">
  Использование шаблонных символов в именах файлов</a>.

</dd></dl>



<h2><a name="SEC79" href="#TOC79">Функция <code>foreach</code></a></h2>

<p>
<a name="IDX555"></a>
<a name="IDX556"></a>

</p>

<p> Функция <code>foreach</code> сильно отличается от других функций. При ее
использовании, некоторый фрагмент текста используется многократно,
каждый раз с "подстановкой" в него нового значения.
Это напоминает команду <code>for</code> командного 
интерпретатора <code>sh</code> или команду <code>foreach</code> оболочки
<code>csh</code>. </p>

<p> Синтаксис функции <code>foreach</code> выглядит следующим 
образом: </p>

<pre>$(foreach <var>переменная</var>,<var>список</var>,<var>текст</var>)
</pre>

<p> Сначала, вычисляются значения первых двух аргументов - <var>переменной</var> и 
<var>списка</var>; последний аргумент, <var>текст</var>, пока <strong>не</strong>
вычисляется. 
Далее, каждое слово из вычисленного значения аргумента 
<var>список</var> поочередно подставляется в переменную с (заранее вычисленным) именем
<var>переменная</var> и производится "расширение" текста <var>текст</var>. Как правило,
<var>текст</var> содержит ссылку на эту переменную, поэтому при каждой новой подстановке
получаются разные результаты. </p>

<p> Затем, полученные таким образом результаты "расширений" <var>текста</var> 
(их количество равно количеству разделенных пробелами слов в аргументе
<var>список</var>) "соединяются" вместе (с вставкой пробела между ними).
Полученная таким образом строка и является результатом работы функции
<code>foreach</code>. </p>

<p> В следующем примере, в переменную <samp>`files'</samp> заносится
список всех файлов, находящихся в каталогах, которые перечислены в переменной 
<samp>`dirs'</samp>: </p>

<pre>dirs := a b c d
files := $(foreach dir,$(dirs),$(wildcard $(dir)/*))
</pre>

<p> Здесь, аргументом <var>текст</var> является выражение 
<samp>`$(wildcard $(dir)/*)'</samp>. При первой итерации,
переменная <code>dir</code> получает значение 
<samp>`a'</samp>, что производит эффект, аналогичный
<samp>`$(wildcard a/*)'</samp>; вторая интерация даст результат, аналогичный
 <samp>`$(wildcard b/*)'</samp>; и, наконец, третья итерация даст результат, 
 как от выражения 
<samp>`$(wildcard c/*)'</samp>. </p>

<p> Таким образом, приведенный выше пример даст результат, аналогичный (за исключением
установки переменной <samp>`dirs'</samp>) 
выражению: </p>

<pre>files := $(wildcard a/* b/* c/* d/*)
</pre>

<p> Когда выражение <var>текст</var> достаточно сложно, вы можете повысить удобочитаемость
make-файла, поместив его в отдельную дополнительную
переменную: </p>

<pre>find_files = $(wildcard $(dir)/*)
dirs := a b c d
files := $(foreach dir,$(dirs),$(find_files))
</pre>

<p> Для подобной цели в приведенном выше примере использована переменная 
<code>find_files</code>. Для ее определения как рекурсивно вычисляемой переменной,
мы использовали обычный оператор
<samp>`='</samp>. Вследствие этого, ее значение (содержащее ссылку на функцию
<code>wildcard</code>), будет вычисляться многократно, под управлением 
функции 
<code>foreach</code>; с упрощенно вычисляемой переменной этого бы не произошло, 
поскольку функция 
<code>wildcard</code> была бы выполнена лишь однажды, во время
определении переменной
<code>find_files</code>. </p>

<p> Работа функции <code>foreach</code> не оказывает "необратимого" влияния на
<var>переменную</var>; ее значение и "разновидность" после выполнения функции 
<code>foreach</code> 
остаются неизменными (такими же, как и до выполнения этой функции).
Другие значения, которые берутся из 
<var>списка</var>, "действуют" только временно, на период работы 
функции 
<code>foreach</code>. Во время работы функции <code>foreach</code>, 
<var>переменная</var> считается упрощенно вычисляемой.
Если до выполнения функции <code>foreach</code>, <var>переменная</var> не была
определена, она остается неопределенной и после вызова этой функции.
Смотрите раздел <a href="#SEC59">Две разновидности переменных</a>. </p>

<p> Следует быть осторожным при использовании сложных выражений, вычисляющих имя
используемой переменной, поскольку допустимым именем переменной могут считаться достаточно
странные вещи.
Например, следующее 
выражение: </p>

<pre>files := $(foreach Esta escrito en espanol!,b c ch,$(find_files))
</pre>

<p> по-видимому, может оказаться полезным только в том случае, если 
<code>find_files</code> будет содержать ссылку на переменную с именем
<samp>`Esta escrito en espanol!'</samp> (нет ли у вас такой переменной?).
Но, скорее всего, вы просто ошиблись. </p>



<h2><a name="SEC80" href="#TOC80">Функция <code>if</code></a></h2>

<p>
<a name="IDX557"></a>
<a name="IDX558"></a>
</p>

<p>
Функция <code>if</code> обеспечивает поддержку для условного
вычисления выражений
(не путайте с поддерживаемыми GNU <code>make</code> 
условными конструкциями наподобие
<code>ifeq</code>, которые "действуют" на уровне make-файла; 
смотрите раздел <a href="#SEC73">Синтаксис условных конструкций</a>).
</p>

<p>
При вызове функции <code>if</code>, ей передается два или
три аргумента:
</p>

<pre>$(if <var>условие</var>,<var>фрагмент-для-выполненного-условия</var>[,<var>фрагмент-для-невыполненного-условия</var>])
</pre>

<p>
Сначала из первого аргумента, <var>условия</var>, удаляются начальные 
и конечные пробелы, затем он вычисляется.
Если в результате получается любая непустая строка, то условие считается
"истинным".
При получении пустой строки, условие считается "ложным".
</p>

<p>
Если условие выполняется, вычисляется второй аргумент, 
<var>фрагмент-для-выполненного-условия</var>, и полученный результат
становится результатом вычисления всей функции
<code>if</code>.
</p>

<p>
Если условие не выполняется, вычисляется третий аргумент,
<var>фрагмент-для-невыполненного-условия</var>, и полученный результат
становится результатом вычисления всей функции
<code>if</code>.
При отсутствии третьего аргумента, 
результатом выполнения функции <code>if</code> становится пустая
строка.
</p>

<p>
Обратите внимание, что всегда вычисляется только один из фрагментов - либо
<var>фрагмент-для-выполненного-условия</var>, либо
<var>фрагмент-для-невыполненного-условия</var>. 
Поэтому, оба из них могут производить какие-либо "побочные" эффекты
(например, вызывать функцию <code>shell</code>). 
</p>


<h2><a name="SEC81" href="#TOC81">Функция <code>call</code></a></h2>

<p>
<a name="IDX559"></a>
<a name="IDX560"></a>
<a name="IDX561"></a>
</p>

<p>
Функция <code>call</code> уникальна тем, что с ее помощью вы можете
определять свои собственные функции с параметрами.
Вы можете запомнить сложное выражение в качестве значения
переменной, а затем использовать функцию 
<code>call</code> для его вычисления с разными параметрами.
</p>

<p>
Для функции <code>call</code> используется следующий синтаксис:

</p>

<pre>$(call <var>переменная</var>,<var>параметр</var>,<var>параметр</var>,...)
</pre>

<p>
При вычислении этой функции, <code>make</code> помещает каждый из <var>параметров</var> во
временные переменные <code>$(1)</code>, <code>$(2)</code> и так далее.  
Переменная
<code>$(0)</code> будет содержать имя <var>переменной</var>. На максимальное
число параметров ограничения нет. Нет ограничения и на минимальное число параметров,
однако, нет особого смысла в использовании 
<code>call</code> без параметров.
</p>

<p>
Далее, значение <var>переменной</var> вычисляется "в контексте" этих
временных переменных.
Так, любая ссылка на <code>$(1)</code> в значении
<var>переменной</var> будет ссылаться на первый <var>параметр</var>, переданный при
вызове <code>call</code>.
</p>

<p>
Обратите внимание, что <var>переменная</var> - это <em>имя</em> переменной, а не
<em>ссылка</em> на эту переменную.  Поэтому, как правило, вам не потребуется
использовать 
<samp>`$'</samp> или скобки при описании этого аргумента.  (Вы можете, однако,
использовать внутри имени ссылку на другую переменную, если вы хотите, чтобы
имя не было "константным".)
</p>

<p>
Если <var>переменная</var> представляет собой имя "встроенной" функции,
то вызывается именно она 
(даже если существует переменная с таким же именем).
</p>

<p>
Перед тем, как присвоить значения временным переменным, функция <code>call</code> 
вычисляет значения всех <var>параметров</var>.
Это означает, что значения <var>переменной</var>, содержащие ссылки на
встроенные функции, имеющие специальные правила вычисления (наподобие 
<code>foreach</code> или <code>if</code>), могут работать не так, как 
вы ожидали.
</p>

<p>
Вот несколько примеров использования функции <code>call</code>.
</p>

<p>
Следующая функция "переставляет" свои аргументы в обратном порядке:
</p>

<pre>reverse = $(2) $(1)

foo = $(call reverse,a,b)
</pre>

<p>
Переменная <var>foo</var> будет содержать <samp>`b a'</samp>.
</p>

<p>
Следующий пример более интересен: здесь определяется функция, которая
производит поиск указанной программы в каталогах, перечисленных в <code>PATH</code>:
</p>

<pre>pathsearch = $(firstword $(wildcard $(addsufix /$(1),$(subst :, ,$(PATH)))))

LS := $(call pathsearch,ls)
</pre>

<p>
Переменная LS будет содержать <code>/bin/ls</code> или что-нибудь подобное.
</p>

<p>
Функция <code>call</code> может быть "вложенной".  Каждый рекурсивный вызов
получит свои собственные локальные копии
<code>$(1)</code> и прочих переменных, которые "замаскируют" своих "тезок" из
<code>call</code> более "высокого" уровня.  Вот пример реализации функции
<strong>map</strong>:
</p>

<pre>map = $(foreach a,$(2),$(call $(1),$(a)))
</pre>

<p>
Теперь, с помощью функции <var>map</var>, вы можете "за один шаг" вызывать функции, имеющие
только один параметр (наподобие
<code>origin</code>), сразу для нескольких значений. Так, в следующем примере: 
</p>

<pre>o = $(call map,origin,o map MAKE)
</pre>

<p>
переменная <var>o</var> будет содержать нечто вроде <samp>`file file default'</samp>.
</p>

<p>
И последнее предупреждение: будьте осторожны при добавлении пробелов к
аргументам функции
<code>call</code>.  Как и с другими функциями, любые пробелы, содержащиеся во втором
и последующих аргументах, сохраняются; это может привести к весьма странным результатам.
Надежнее всего, удалять все "дополнительные" пробелы, указывая параметры для
функции
<code>call</code>.
</p>



<h2><a name="SEC82" href="#TOC82">Функция <code>origin</code></a></h2>

<p>
<a name="IDX562"></a>
<a name="IDX563"></a>
<a name="IDX564"></a>
</p>

<p> В отличие от других функций, функция <code>origin</code> не оперирует значениями
переменных; вместо этого, она позволяет вам получить некоторую информацию 
<em>о самой</em> 
переменной.
Точнее, она позволяет узнать, откуда "взялась" рассматриваемая переменная. </p>

<p> Синтаксис функции <code>origin</code> следующий: </p>

<pre>$(origin <var>переменная</var>)
</pre>

<p> Обратите внимание, что <var>переменная</var> является <em>именем</em> переменной,
а не 
<em>ссылкой</em> на нее. Таким образом, вам, как правило, не придется использовать
символ
<samp>`$'</samp> или скобки при написании этого аргумента. (Однако, внутри имени
переменной может находится ссылка на другую переменную, если вы хотите, чтобы 
имя переменной не было "фиксированным".) </p>

<p> Результатом этой функции будет строка, указывающая на то, каким образом
переменная
<var>переменная</var> была определена: </p>

<p></p>
<dl compact="compact">

<dt><samp>`undefined'</samp>
  </dt><dd>  Если <var>переменная</var> не была определена.

</dd><dt><samp>`default'</samp>
  </dt><dd>  Если <var>переменная</var> была определена по умолчанию (как, например, переменная
  <code>CC</code> и ей подобные). 
  Смотрите раздел 
  <a href="#SEC96">Используемые в неявных правилах переменные</a>. 
  Обратите внимание, что если вы переопределили переменную, имеющую значение
  по умолчанию,
  функция <code>origin</code> возвратит информацию о более позднем переопределении.

</dd><dt><samp>`environment'</samp>
  </dt><dd>  Если <var>переменная</var> была создана из соответствующей переменной
  среды и опция 
  <samp>`-e'</samp> <em>не была </em> включена (смотрите раздел 
  <a href="#SEC92">Обзор опций</a>).

</dd><dt><samp>`environment override'</samp>
  </dt><dd>  Если <var>переменная</var> была создана из соответствующей переменной
  среды и опция 
  <samp>`-e'</samp> <em>была</em> включена (смотрите раздел 
  <a href="#SEC92">Обзор опций</a>).

</dd><dt><samp>`file'</samp>
  </dt><dd>  Если <var>переменная</var> была определена внутри make-файла.

</dd><dt><samp>`command line'</samp>
  </dt><dd>  Если <var>переменная</var> была определена с помощью командной строки. 

</dd><dt><samp>`override'</samp>
  </dt><dd>  Если <var>переменная</var> была определена в make-файле с 
  с использованием директивы <code>override</code> 
  (смотрите раздел <a href="#SEC66">Директива <code>override</code></a>). 

</dd><dt><samp>`automatic'</samp>
  </dt><dd>  Если <var>переменная</var> является автоматической переменной,
  определяемой во время выполнения команд каждого правила 
  (смотрите раздел
  <a href="#SEC101">Автоматические переменные</a>).  
</dd></dl>

<p> Помимо "праздного любопытства", подобная информация может быть полезна, 
в первую очередь, для того, чтобы
определить, насколько вы можете "доверять" значению, содержащемуся в рассматриваемой
переменной.
Предположим, для примера, что у вас имеется make-файл
<tt>`foo'</tt>, который включает в себя другой make-файл
<tt>`bar'</tt>. Вы хотите, чтобы при запуске команды <samp>`make -f bar'</samp>,
переменная
<code>bletch</code> была определена в make-файле
<tt>`bar'</tt> даже в том случае, если аналогичная переменная
<code>bletch</code> будет содержаться в операционном окружении. 
Однако, если переменная <code>bletch</code> уже была определена в make-файле
<tt>`foo'</tt> (до подключения make-файла <tt>`bar'</tt>), вы бы не хотели "переопределять"
эту переменную в <tt>`bar'</tt>.
Это можно было бы сделать, используя в файле <tt>`foo'</tt> директиву 
<code>override</code>: в этом случае определение переменной, данное
в файле <tt>`foo'</tt> имело бы приоритет перед более поздним ее определением в
файле
<tt>`bar'</tt>. К сожалению, директива 
<code>override</code> также "перекрыла" бы любое определение этой переменное, заданное
в командной строке.
Решение может выглядеть следующим образом 
(фрагмент make-файла <tt>`bar'</tt>): </p>
 
<pre>ifdef bletch
ifeq "$(origin bletch)" "environment"
bletch = barf, gag, etc.
endif
endif
</pre>

<p> Здесь, переменная <code>bletch</code> будет переопределена, если она 
была определена из соответствующей переменной среды. </p>

<p> Если вы хотите "перекрыть" определение <code>bletch</code>, пришедшее
из программного окружения, даже при наличии опции 
<samp>`-e'</samp>, то можно 
написать: </p>

<pre>ifneq "$(findstring environment,$(origin bletch))" ""
bletch = barf, gag, etc.
endif
</pre>

<p> Здесь, переопределение произойдет, если выражение <samp>`$(origin bletch)'</samp> 
вернет любую из строк -
<samp>`environment'</samp> или <samp>`environment override'</samp>. Смотрите
раздел <a href="#SEC77">Функции анализа и подстановки строк</a>. </p>



<h2><a name="SEC83" href="#TOC83">Функция <code>shell</code></a></h2>

<p>
<a name="IDX565"></a>
<a name="IDX566"></a>
<a name="IDX567"></a>
<a name="IDX568"></a>

</p>

<p> В отличие от большинства других функций 
(кроме, пожалуй, функции <code>wildcard</code>; смотрите раздел 
<a href="#SEC25">Функция <code>wildcard</code></a>),
функция <code>shell</code> служит для "общения" <code>make</code> с внешним миром. </p>

<p> Функция <code>shell</code> работает аналогично символу
<samp>``'</samp> в большинстве интерпретаторов командной строки: она производит подстановку
результата выполнения команды. 
Это означает, что в качестве аргумента она принимает команду интерпретатора командной
строки, а в качестве результата возвращает "выходные данные" этой команды.
Единственным преобразованием полученного результата, которое выполняет <code>make</code> 
перед подстановкой его в окружающий текст, является преобразование символов перевода строки 
(или пар перевод-строки/возврат-каретки) в одиночные пробелы.
Также производится удаление "конечных" (находящихся в конце данных) символов 
перевода строки (или пар перевод-строки/возврат-каретки). </p>

<p> Команды, указанные в <code>shell</code>, запускаются в момент вычисления
этой функции.
Как правило, это происходит в момент чтения make-файла.
Исключение составляет случай, когда эта функция <code>shell</code> используется в командах 
правила. В этом
случае она будет вычисляться (будут выполняться указанные в ней команды) во время работы 
команд правила. </p>

<p> Вот несколько примеров использования функции 
<code>shell</code>: </p>

<pre>contents := $(shell cat foo)
</pre>

<p> В этом примере, в переменную <code>contents</code> записывается содержимое
файла <tt>`foo'</tt> (видоизмененное таким образом, что все символы перевода строки
заменены в нем на пробелы). В следующем примере: </p>
 
<pre>files := $(shell echo *.c)
</pre>

<p> в переменную <code>files</code> записывается список файлов, полученных по 
маске <samp>`*.c'</samp>. Скорее всего (если только вы не имеете какой-нибудь очень
странный командный интерпретатор), результат будет аналогичен использованию 
выражения <samp>`$(wildcard *.c)'</samp>. </p>



<h2><a name="SEC84" href="#TOC84">Функции управления сборкой</a></h2>

<p>
<a name="IDX569"></a>
<a name="IDX570"></a>

</p>

<p>
Эти функции управляют ходом сборки.  В основном, они используются
для выдачи некоторой информации пользователю make-файла или для завершения
работы <code>make</code> при обнаружении каких-либо проблем в "окружающей среде".

</p>
<dl compact="compact">

<dt><code>$(error <var>текст</var>...)</code>

</dt><dd>
<a name="IDX571"></a>
<a name="IDX572"></a>
<a name="IDX573"></a>

Генерирует "фатальную" ошибку с сообщением  
<var>текст</var>.  Обратите внимание, что ошибка генерируется в 
момент вычисления функции.
Соответственно, если вы вызываете эту функцию внутри команд правила или
в правой части оператора присваивания для рекурсивной переменной, ошибка
будет генерироваться не сразу.
Перед генерацией ошибки <var>сообщение</var> "расширяется".

В следующем примере:


<pre>ifdef ERROR1
$(error error is $(ERROR1))
endif
</pre>

во время чтения make-файла будет генерироваться фатальная ошибка
если была определена переменная
<code>ERROR1</code>. Здесь:


<pre>ERR = $(error found an error!)

.PHONY: err
err: ; $(ERR)
</pre>

фатальная ошибка будет генерироваться при обработке
цели 
<code>err</code>.

</dd><dt><code>$(warning <var>текст</var>...)</code>

</dt><dd>
<a name="IDX574"></a>
<a name="IDX575"></a>
<a name="IDX576"></a>

Эта функция работает подобно описанной выше функции <code>error</code>,
но, в отличии от нее, не вызывает завершения работы <code>make</code>. 
Сообщение <var>текст</var> "расширяется" и выводится, после чего обработка
make-файла продолжается.
Возвращаемое значение этой функции - пустая строка.
</dd></dl>



<h1><a name="SEC85" href="#TOC85">Запуск <code>make</code></a></h1>

<p> Make-файл, описывающий, каким образом следует перекомпилировать программу, может
использоваться по-разному. В простейшем случае, он используется для перекомпиляции
всех "устаревших" файлов программы. 
Обычно, make-файлы пишутся таким образом, чтобы при запуске без параметров,
<code>make</code> выполняла именно это действие. </p>

<p> Однако, у вас может возникнуть потребность выполнить какие-нибудь другие 
действия, например: обновить только некоторые из файлов,
использовать другой компилятор или другие опции компиляции. Наконец, у вас может
появиться желание просто узнать какие из файлов нуждаются в обновлении без того,
чтобы в действительности их обновлять. </p>

<p> Указывая дополнительные параметры при запуске <code>make</code>, вы сможете 
выполнить эти и многие другие действия. </p>

<p> По окончанию работы <code>make</code>, код завершения программы представляет собой одно из
трех возможных значений:

</p><dl compact="compact">

<dt><code>0</code>
  </dt><dd>  Код завершения равен нулю если работа <code>make</code> завершена успешно.

</dd><dt><code>2</code>
  </dt><dd>  Код завершения равен двум если в ходе работы <code>make</code> возникли какие-то
  ошибки. Суть происшедших ошибок описана в выдаваемых <code>make</code> сообщениях.

</dd><dt><code>1</code>
  </dt><dd>  Код завершения равен одному, если при запуске <code>make</code> 
  была указана опция <samp>`-q'</samp> и <code>make</code> определила, что
  некоторые цели нуждаются в обновлении. 
  Смотрите раздел
  <a href="#SEC88">Вместо исполнения команд</a>.  
</dd></dl>



<h2><a name="SEC86" href="#TOC86">Аргументы для задания make-файла</a></h2>
<p>
<a name="IDX577"></a>
<a name="IDX578"></a>
<a name="IDX579"></a>

</p>

<p> Для указания имени make-файла, который следует интерпретировать, служат опции 
<samp>`-f'</samp> и 
<samp>`--file'</samp> (также работает опция <samp>`--makefile'</samp>). Например,
<samp>`-f altmake'</samp> указывает на необходимость использования <tt>`altmake'</tt> в 
качестве make-файла. </p>

<p> При задании сразу нескольких опций <samp>`-f'</samp> с аргументом,  
все указанные
make-файлы будут использованы (логически "объединяясь" в один make-файл). </p>

<p> При отсутствии опций <samp>`-f'</samp> или <samp>`--file'</samp>, по умолчанию,
<code>make</code> пытается найти файлы с именами
<tt>`GNUmakefile'</tt>, <tt>`makefile'</tt>, и
<tt>`Makefile'</tt> (в указанном порядке). Первый же найденный файл, который существует
или может быть построен, используется как make-файл для работы
(смотрите раздел <a href="#SEC12">Создание make-файлов</a>). </p>



<h2><a name="SEC87" href="#TOC87">Аргументы для задания главной цели (goal)</a></h2>
<p>
<a name="IDX580"></a>

</p>

<p> <strong>Главная цель (goal)</strong> - это цель которую стремится 
достичь <code>make</code> в результате своей работы.
Прочие цели make-файла обновляеются только в том случае, если они прямо или
косвенно являются пререквизитами главной цели. </p>

<p> По умолчанию, главной целью становится первая цель make-файла (кроме целей,
чьи имена начинаются с точки).
Поэтому, обычно, make-файлы пишутся таким образом, чтобы первая цель
описывала процесс компиляции программы или набора программ, для сборки
которых предназначается make-файл.
Если первое правило make-файла описывает сразу несколько целей,
только первая из целей (а не все описываемые цели) становится главной целью по умолчанию. </p>

<p> Вы можете задать <code>make</code> главную цель (или несколько главных целей),
указав ее (или их) имя в качестве аргументов. 
При задании сразу нескольких главных целей,
<code>make</code> будет обрабатывать их поочередно, в том порядке, как они
были перечислены. </p>

<p> В качестве главной цели может быть указана любая цель make-файла 
(за исключением целей, чье имя начинается с символа
<samp>`-'</samp> или содержит символ <samp>`='</samp>, поскольку такая
цель будет "воспринята" как задание опции или определение переменной).
Можно задать даже такую цель, которая не описана в make-файле; в этом случае 
<code>make</code> попытается ее достичь, используя имеющиеся у нее неявные правила. </p>

<p>
<a name="IDX581"></a>
<a name="IDX582"></a>

    Список главных целей, указанных вами в командной строке, <code>make</code> 
записывает в специальную переменную
<code>MAKECMDGOALS</code>.
Если в командной строке не было задано ни одной цели, эта переменная
остается пустой.
Обратите внимание, что эта переменная должна использоваться только в особых 
случаях. </p>

<p> Следующий пример демонстрирует "надлежащее" использование переменной 
<code>MAKECMDGOALS</code>. Она используется для того, чтобы избежать подключения
файлов <tt>`.d'</tt>,
когда в  
командной строке указывается цель <code>clean</code> (смотрите раздел 
<a href="#SEC43">Автоматическая генерация списка пререквизитов</a>),
так что <code>make</code> не будет пытаться создать эти файлы только для
того, чтобы тут же их удалить: </p>
 
<pre>sources = foo.c bar.c

ifneq ($(MAKECMDGOALS),clean)
include $(sources:.c=.d)
endif
</pre>

<p> Явное указание главной цели полезно, если вы хотите перекомпилировать только
часть программы или только одну из нескольких программ.
В таком случае, укажите в качестве главной цели все файлы, которые вы хотели
бы обновить.
Пусть, например, у вас имеется каталог, содержащий сразу несколько программ и
make-файл, который начинается примерно так: </p>
 
<pre>.PHONY: all
all: size nm ld ar as
</pre>

<p> Если вы работаете над программой <code>size</code>, удобно запускать
<samp>`make size'</samp> чтобы перекомпилировались только файлы, относящиеся к
этой программы. </p>

<p> Явное задание цели может применяться для построения тех файлов, которые при 
"обычной" работе 
не строятся. Это, например, может быть файл с отладочной информацией или специальная
тестовая версия программы, для которых в make-файле имеется свое правило, но которые
не являются пререквизитами главной цели, выбираемой по умолчанию. </p>

<p> Явное указание главной цели может использоваться для запуска команд,
ассоциированных с абстрактной  
(смотрите раздел <a href="#SEC33">Абстрактные цели</a>) 
или пустой (смотрите раздел 
<a href="#SEC35">Использование пустых целей для фиксации событий</a>) 
целью. Например, во многих make-файлах есть абстрактная цель 
<tt>`clean'</tt>, которая очищает каталог, удаляя все файлы, кроме файлов с
исходными текстами. Естественно, это делается только по вашему требованию
<samp>`make clean'</samp>. 
Ниже приведен список типичных абстрактных и пустых целей. Смотрите раздел 
<a href="#SEC121">Стандартные имена целей для пользователей</a>, 
где описываются все "стандартные" имена целей, используемые в программах GNU. </p>

<dl compact="compact">

<dt><tt>`all'</tt>
</dt><dd>
<a name="IDX583"></a>
  Построить все "высокоуровневые" цели make-файла.

</dd><dt><tt>`clean'</tt>
</dt><dd>
<a name="IDX584"></a>
  Удалить все файлы, которые, обычно, создаются в результате работы 
  <code>make</code>. 

</dd><dt><tt>`mostlyclean'</tt>
</dt><dd>
<a name="IDX585"></a>
  Работает аналогично <samp>`clean'</samp>, но может воздержаться от удаления
  некоторых файлов, которые, как правило, не желательно перекомпилировать. 
  Например, в make-файле, описывающем сборку компилятора GCC, цель
  <samp>`mostlyclean'</samp> не удаляет файл
  <tt>`libgcc.a'</tt>, поскольку его перекомпиляция требуется редко и занимает
  много времени.

</dd><dt><tt>`distclean'</tt>
</dt><dd>
<a name="IDX586"></a>
</dd><dt><tt>`realclean'</tt>
</dt><dd>
<a name="IDX587"></a>
</dd><dt><tt>`clobber'</tt>
</dt><dd>
<a name="IDX588"></a>
    Любая из этих целей может быть определена для удаления 
  <em>большего</em> числа файлов, чем это делает <samp>`clean'</samp>. 
  Так, например, могли бы удаляться конфигурационные файлы или линки, которые 
  создаются при подготовке к компиляции (не обязательно самим make-файлом).

</dd><dt><tt>`install'</tt>
</dt><dd>
<a name="IDX589"></a>
    Скопировать исполняемый файл в каталог, где обычно хранятся исполняемые
    файлы программ;
    скопировать дополнительные файлы, используемые исполняемым файлом, 
    в нужные каталоги (где исполняемый файл ожидает их найти).

</dd><dt><tt>`print'</tt>
</dt><dd>
<a name="IDX590"></a>
   Печать листингов всех исходных файлов, которые были модифицированы. 

</dd><dt><tt>`tar'</tt>
</dt><dd>
<a name="IDX591"></a>
  Создает tar-архив с файлами исходных текстов. 

</dd><dt><tt>`shar'</tt>
</dt><dd>
<a name="IDX592"></a>
  Создать самораспаковывающийся архив (shar-файл) из
  исходных файлов. 

</dd><dt><tt>`dist'</tt>
</dt><dd>
<a name="IDX593"></a>
    Создать из исходных файлов дистрибутив. 
    Это может быть 
    tar-файл, shar-файл, сжатые их версии или что-нибудь другое.

</dd><dt><tt>`TAGS'</tt>
</dt><dd>
<a name="IDX594"></a>
  Обновить таблицу тегов для этой программы.

</dd><dt><tt>`check'</tt>
</dt><dd>
<a name="IDX595"></a>
</dd><dt><tt>`test'</tt>
</dt><dd>
<a name="IDX596"></a>
  Выполнить самотестирование программ, построенных этим make-файлом.
</dd></dl>



<h2><a name="SEC88" href="#TOC88">Вместо исполнения команд</a></h2>
<p>
<a name="IDX597"></a>
<a name="IDX598"></a>

</p>

<p> Make-файл указывает программе <code>make</code>, как определить - нуждается ли
цель в обновлении и каким образом ее следует обновлять.
Однако, не всегда вам требуется именно обновление цели.
Указывая подходящие опции, можно заставить <code>make</code> выполнять
другие действия. </p>

<dl compact="compact">

<dt><samp>`-n'</samp>
</dt><dd>
</dd><dt><samp>`--just-print'</samp>
</dt><dd>
</dd><dt><samp>`--dry-run'</samp>
</dt><dd>
</dd><dt><samp>`--recon'</samp>
</dt><dd>
<a name="IDX599"></a>
<a name="IDX600"></a>
<a name="IDX601"></a>
<a name="IDX602"></a>

    "Нет операции". Будут печататься (без реального выполнения) команды, 
    которые бы выполнила <code>make</code> для обновления целей.

</dd><dt><samp>`-t'</samp>
</dt><dd>
</dd><dt><samp>`--touch'</samp>
</dt><dd>
<a name="IDX603"></a>
<a name="IDX604"></a>
<a name="IDX605"></a>
<a name="IDX606"></a>

    Цели помечаются как "обновленные" без реального их изменения.
    Иначе говоря, <code>make</code> просто "делает вид" что скомпилировала
    нужные цели, на самом деле не изменяя их.

</dd><dt><samp>`-q'</samp>
</dt><dd>
</dd><dt><samp>`--question'</samp>
</dt><dd>
<a name="IDX607"></a>
<a name="IDX608"></a>
<a name="IDX609"></a>

        "Проверка". Делается проверка - нуждаются ли цели в обновлении, но
        никаких команд не исполняется.
        Никакой компиляции и никакого вывода сообщений при этом не производится.

</dd><dt><samp>`-W <var>файл</var>'</samp>
</dt><dd>
</dd><dt><samp>`--what-if=<var>файл</var>'</samp>
</dt><dd>
</dd><dt><samp>`--assume-new=<var>файл</var>'</samp>
</dt><dd>
</dd><dt><samp>`--new-file=<var>файл</var>'</samp>
</dt><dd>
<a name="IDX610"></a>
<a name="IDX611"></a>
<a name="IDX612"></a>
<a name="IDX613"></a>
<a name="IDX614"></a>
<a name="IDX615"></a>

        "Что если?". За каждой опцией
  <samp>`-W'</samp> следует имя файла. Для указанных таким образом файлов,
  <code>make</code> предполагает, что их время модификации равно текущему 
  времени (при этом, реальное время модификации этих файлов не меняется).
  Совместно используя опции
  <samp>`-W'</samp> и <samp>`-n'</samp>, можно увидеть, какие действия
  предпримет <code>make</code>, если перечисленные файлы действительно будут
  модифицированы. 

</dd></dl>

<p> При наличии опции <samp>`-n'</samp>, <code>make</code> только печатает
команды, без реального их выполнения. </p>

<p> Эффект опции <samp>`-t'</samp> состоит в том, что <code>make</code> 
игнорирует команды, указанные в правилах и использует вместо них
команду
<code>touch</code> для всех целей, нуждающихся в обновлении.
Печатается также команда <code>touch</code>, если только не
были указаны опции <samp>`-s'</samp> или <code>.SILENT</code>. 
В действительности, для увеличения скорости, <code>make</code> 
не вызывает программу <code>touch</code>, а выполняет всю требуемую работу 
"напрямую". </p>

<p> При наличии опции <samp>`-q'</samp>, <code>make</code> ничего не печатает и 
не исполняет никаких команд, а просто возвращает соответствующий код возврата.
Нулевой код возврата означает, что цели не нуждаются в обновлении.
Код возврата, равный единице, означает, что какие-то из целей нуждаются в обновлении.
И, наконец, код возврата, равный двум, означает, что 
произошла ошибка (таким образом, вы можете отличить ошибочную ситуацию от случая,
когда цели нуждаются в обновлении). </p>

<p> При вызове <code>make</code>, можно указать только одну из трех вышеперечисленных 
опций - задание сразу нескольких опций считается ошибкой. </p>

<p> Опции <samp>`-n'</samp>, <samp>`-t'</samp> и <samp>`-q'</samp> не влияют
на командные строки, начинающиеся с
<samp>`+'</samp>, а также строки, содержащие 
<samp>`$(MAKE)'</samp> или <samp>`${MAKE}'</samp>. Обратите внимание, что
при наличии вышеперечисленных опций будут запускаться только строки, начинающиеся с
<samp>`+'</samp> или содержащие
<samp>`$(MAKE)'</samp> или <samp>`${MAKE}'</samp> - другие строки тех же
правил не будут запускаться 
(смотрите раздел <a href="#SEC51">Как работает переменная <code>MAKE</code></a>). </p>

<p> Опцию <samp>`-W'</samp> можно использовать двумя путями: </p>

<ul>
  <li>  При наличии опций <samp>`-n'</samp> или <samp>`-q'</samp>, 
  вы можете
  увидеть, какие действия предпринила бы
  <code>make</code>, если бы вы модифицировали указанные файлы.

  </li><li>  При отсутствии опций <samp>`-n'</samp> или <samp>`-q'</samp>,
  опции <samp>`-W'</samp> заставят 
  <code>make</code>  
  вести себя во время выполнения команд так, как если бы указанные 
  файлы были модифицированы (хотя, на самом деле, они и не
  были модифицированы). 
</li></ul>

<p> Другую информацию о <code>make</code> и используемых make-файлах 
вы можете получить с помощью опций <samp>`-p'</samp> и <samp>`-v'</samp>
(смотрите раздел <a href="#SEC92">Обзор опций</a>). </p>



<h2><a name="SEC89" href="#TOC89">Предотвращение перекомпиляции некоторых файлов</a></h2>
<p>
<a name="IDX616"></a>
<a name="IDX617"></a>
<a name="IDX618"></a>
<a name="IDX619"></a>
<a name="IDX620"></a>
<a name="IDX621"></a>

</p>
<p> Иногда, после изменения исходного файла, вам хотелось бы избежать перекомпиляции
всех файлов, которые от него зависят.
Предположим, что вы добавили макрос или прототип функции в заголовочный
файл, от которого зависят многие исходные файлы.
Будучи "консервативной",
<code>make</code> предполагает что любые изменения, внесенные в заголовочные
файлы, требуют перекомпиляции всех файлов, которые от них зависят. Вы, однако, понимаете,
что, в данном случае, нет необходимости в подобной перекомпиляции и не хотели бы
тратить время, ожидая ее завершения. </p>

<p> Если вы заранее предвидели эту проблему и еще не внесли изменения в заголовочный
файл, вы можете воспользоваться опцией 
<samp>`-t'</samp>. Эта опция заставит <code>make</code> не исполняя команд,
пометить все цели как "обновленные", изменив время их последней модификации.
Поступая так, вам следует придерживаться следующей процедуры: </p>

<ol>
  <li>  Используйте команду <samp>`make'</samp> для перекомпиляции всех 
  файлов, которые действительно в этом нуждаются.

  </li><li>  Внесите изменения в заголовочные файлы. 
  </li><li>  Используйте команду <samp>`make -t'</samp>, чтобы пометить все
  объектные файлы как "обновленные".
  При следующем запуске <code>make</code>, внесенные в заголовочные 
  файлы изменения, уже не вызовут перекомпиляции программы.
</li></ol>

<p> Однако, если вы уже внесли изменения в заголовочный файл, в то время как у вас
еще имеются другие файлы, нуждающиеся в обновлении,
использовать приведенную выше процедуру уже поздно. 
Вместо этого, вы можете воспользоваться опцией <samp>`-o 
<var>файл</var>'</samp> дабы указанный файл рассматривался как "старый" (смотрите раздел
<a href="#SEC92">Обзор опций</a>). 
В таком случае ни этот файл, ни зависящие от него файлы обновляться не будут. 
Придерживайтесь следующей процедуры: </p>

<ol>
  <li>  Перекомпилируйте все исходные файлы, которые нуждаются в компиляции по причинам,
  не связанным с вашей модификацией заголовочного файла, используя
  <samp>`make -o 
  <var>имя_заголовочного_файла</var>'</samp>. Если вы изменили несколько заголовочных
  файлов, используйте отдельные опции 
  <samp>`-o'</samp> для каждого из них.

  </li><li>  Обновите время модификации всех объектных файлов, используя  
  <samp>`make -t'</samp>.  
</li></ol>



<h2><a name="SEC90" href="#TOC90">"Перекрытие" (overriding) переменных</a></h2>
<p>
<a name="IDX622"></a>
<a name="IDX623"></a>
<a name="IDX624"></a>
<a name="IDX625"></a>

</p>


<p> Аргумент командной строки, содержащий <samp>`='</samp> определяет значение переменной: 
запись <samp>`<var>v</var>=<var>x</var>'</samp> означает, что переменная
<var>v</var> получит значение <var>x</var>. Если значение переменной было задано
подобным образом, то все "обычные" присваивания этой переменной нового значения
внутри make-файла будут игнорироваться; 
мы говорим что они будут <strong>перекрыты (overridden)</strong> аргументом 
командной строки. </p>

<p> Чаще всего, данное средство используется для 
передачи дополнительных опций компилятору.
Например, в "правильно" написанном make-файле
переменная <code>CFLAGS</code> используется при каждом вызове компилятора Си,
так что исходный файл
<tt>`foo.c'</tt>  мог бы компилироваться приблизительно 
так: </p>


<pre>cc -c $(CFLAGS) foo.c
</pre>

<p> Таким образом, значение, хранящееся в <code>CFLAGS</code>, будет влиять на
любой процесс компиляции.
Вполне возможно, что в make-файле определяется некоторое "обычное" значение
для переменной
<code>CFLAGS</code>, например: </p>

<pre>CFLAGS=-g
</pre>

<p> Каждый раз, запуская <code>make</code>, вы, при желании, можете "перекрыть"
это значение переменной <code>CFLAGS</code>.
Например, при вызове <samp>`make CFLAGS='-g -O''</samp>, каждая компиляция будет 
осуществляться с помощью 
<samp>`cc -c -g -O'</samp>. (Этот пример также иллюстрирует, как вы можете
включать пробелы и другие специальные символы в значение переменной при ее 
перекрытии.) </p>

<p> Переменная <code>CFLAGS</code> - лишь одна из многих "стандартных" переменных,
существующих только для того, чтобы вы могли изменять их подобным образом.
Смотрите раздел
<a href="#SEC96">Используемые в неявных правилах переменные</a>, где приведен
полный список таких переменных. </p>

<p> В вашем make-файле вы можете использовать и свои собственные переменные,
давая пользователю возможность влиять на ход работы make-файла путем изменения 
этих переменных. </p>

<p> Когда вы "перекрываете" значение переменной с помощью командной строки,
вы можете определить как рекурсивно вычисляемую, так и упрощенно вычисляемую
переменную. В приведенном выше примере создавалась рекурсивно вычисляемая
переменная; для определения упрощенно вычисляемой переменной, достаточно
вместо <samp>`='</samp> использовать оператор <samp>`:='</samp>.
С другой стороны, если указанное в командной строке значение переменной не будет ссылаться
на другие переменные или функции, тип создаваемой переменной не имеет значения. </p>

<p> Имеется один способ, с помощью которого внутри make-файла можно
изменить значение переменной, заданное с помощью командной строки.
Для этого нужно использовать директиву <code>override</code>, которая выглядит
следующим образом: <samp>`override <var>переменная</var> = 
<var>значение</var>'</samp> (смотрите раздел 
<a href="#SEC66">Директива <code>override</code></a>). </p>



<h2><a name="SEC91" href="#TOC91">Проверка компиляции программы</a></h2>

<p>
<a name="IDX626"></a>
<a name="IDX627"></a>

</p>

<p> Обычно, при возникновении ошибки во время исполнения какой-либо команды,
<code>make</code> немедленно прекращает работу, возвращая ненулевой
код возврата. Никаких команд, обновляющих какие-либо цели, после этого более
не выполняется.
Возникновение ошибки означает, что
главная цель не может быть корректно обновлена и 
<code>make</code> сообщает об этой ситуации сразу же, как только это становится 
ясным. </p>

<p> Однако, при компиляции программы, которую вы только что модифицировали,
такое поведение <code>make</code> не слишком удобно. 
Скорее, вам хотелось бы, чтобы <code>make</code> попробовала скомпилировать
все модифицированные вами файлы дабы обнаружить как можно большее число ошибок. </p>

<p>
<a name="IDX628"></a>
<a name="IDX629"></a>

    В такой ситуации следует использовать опции
<samp>`-k'</samp> или <samp>`--keep-going'</samp>. При этом 
<code>make</code> будет продолжать обработку других пререквизитов рассматриваемой
цели, обновляя их при необходимости. Только после этого <code>make</code> завершит
работу с возвратом ненулевого статуса.
Например, при возникновении ошибки во время компиляции объектного файла, <samp>`make 
-k'</samp> продолжит компиляции других объъектных файлов, хотя уже
и понятно, что скомпоновать готовую программу будет невозможно.
В дополнении к этому,
<samp>`make -k'</samp> будет пытаться продолжать работу как можно дольше
и после того, как станет ясно что <code>make</code> не знает, как можно обновить
рассматриваемую цель или пререквизит.
В этом случае будет выдано соответствующее сообщение об ошибке, но <code>make</code>
попытается продолжить работу (в то время, как без опции
<samp>`-k'</samp> такая ошибка считалась бы фатальной; смотрите раздел 
<a href="#SEC92">Обзор опций</a>). </p>

<p> Обычно, <code>make</code> исходит из того, что ваша задача - получить новую
версию главной цели; как только 
<code>make</code> понимает что это невозможно, она сообщает об этом сразу же.
Запуск с опцией <samp>`-k'</samp> говорит, что, на самом деле, ваша задача - 
протестировать максимальное количество внесенных вами изменений (все обнаруженные
таким образом проблемы можно было исправить "сразу", до следующей попытки компиляции).
Вот почему, кстати, при выполнении команды <kbd>M-x compile</kbd> редактор Emacs
по умолчанию использует опцию <samp>`-k'</samp>. </p>



<h2><a name="SEC92" href="#TOC92">Обзор опций</a></h2>

<p>
<a name="IDX630"></a>
<a name="IDX631"></a>
<a name="IDX632"></a>

</p>

<p> Вот полный список опций, распознаваемых программой <code>make</code>: </p>

<dl compact="compact">

<dt><samp>`-b'</samp>
</dt><dd>
<a name="IDX633"></a>
</dd><dt><samp>`-m'</samp>
</dt><dd>
<a name="IDX634"></a>
    Эти опции оставлены для совместимости с другими версиями
  <code>make</code>. При работе они игнорируются.

</dd><dt><samp>`-C <var>каталог</var>'</samp>
</dt><dd>
<a name="IDX635"></a>
</dd><dt><samp>`--directory=<var>каталог</var>'</samp>
</dt><dd>
<a name="IDX636"></a>
  Перед чтением make-файла перейти в каталог <var>каталог</var>.
  При наличии сразу нескольких опций <samp>`-C'</samp>, каждая из них
  рассматривается относительно предыдущей: так, <samp>`-C / -C etc'</samp>
  эквивалентно <samp>`-C /etc'</samp>. Обычно, это используется при рекурсивном
  вызове
  <code>make</code> (смотрите раздел 
  <a href="#SEC50">Рекурсивный вызов <code>make</code></a>). 

</dd><dt><samp>`-d'</samp>
</dt><dd>
<a name="IDX637"></a>

    В дополнение к основной работе, выводить отладочную информацию. 
    Отладочная информация содержит в себе много интересного: например, какие файлы 
    <code>make</code> считает необходимым обновить, для каких файлов
    сравнивается их время изменения и каков полученный результат, какие
    неявные правила рассматриваются в качестве кандидатов на исполнение и
    какие из них действительно выполняются и так далее.

Опция <code>-d</code> эквивалентна использованию опции
<samp>`--debug=a'</samp> (смотрите ниже).

</dd><dt><samp>`--debug[=<var>опции</var>]'</samp>
</dt><dd>
<a name="IDX638"></a>

    В дополнение к основной работе, выводить отладочную информацию. При выводе 
   отладочной информации можно выбрать нужный ее тип и степень "подробности". 
    При отсутствии аргументов, выбирается "базовый" уровень отладочной информации.
Ниже перечислены все возможные аргументы; при "разборе" аргументов учитывается
только первый символ названия. При задании нескольких аргументов, они должны разделяться 
пробелами или запятыми.

<dl compact="compact">

<dt><code>a (<i>all</i>)</code>
</dt><dd>
Выдача всей имеющейся отладочной информации ("максимальный уровень").  
Эквивалентно использованию опции
<samp>`-d'</samp>.

</dd><dt><code>b (<i>basic</i>)</code>
</dt><dd>
"Базовый уровень" отладочной информации: печатаются все цели, которые
были найдены "устаревшими" и информация об успешности или неуспешности
попытки их обновления. 

</dd><dt><code>v (<i>verbose</i>)</code>
</dt><dd>
Следующий уровень после "базового"; дополнительно выдается
информация о том, какие make-файлы обрабатываются, какие пререквизиты
не нуждаются в обновлении и так далее.
Включение этой опции также приводит к выдаче отладочной информации
"базового" уровня.

</dd><dt><code>i (<i>implicit</i>)</code>
</dt><dd>
Выдается информация о процессе поиска подходящих неявных правил для
каждой из целей. 
Включение этой опции также приводит к выдаче отладочной информации
"базового" уровня.

</dd><dt><code>j (<i>jobs</i>)</code>
</dt><dd>
Выдача информации о вызове некоторых команд.

</dd><dt><code>m (<i>makefile</i>)</code>
</dt><dd>
По умолчанию, описанная выше отладочная информация не выдается на стадии,
когда <code>make</code> пробует обновить make-файлы. Данная опция разрешает
выдачу отладочной информации в процессе обновления make-файлов.
Обратите внимание, что <samp>`all'</samp> также включает данную опцию.  
Эта опция также разрешает выдачу отладочных сообщений "базового" уровня.

</dd></dl>

</dd><dt><samp>`-e'</samp>
</dt><dd>
<a name="IDX639"></a>
</dd><dt><samp>`--environment-overrides'</samp>
</dt><dd>
<a name="IDX640"></a>
  Дает переменным, созданным из соответствующих переменных среды
  "приоритет" перед переменными, определенными внутри make-файла.
  Смотрите раздел
  <a href="#SEC68">Переменные из операционного окружения</a>. 

</dd><dt><samp>`-f <var>файл</var>'</samp>
</dt><dd>
<a name="IDX641"></a>
</dd><dt><samp>`--file=<var>файл</var>'</samp>
</dt><dd>
<a name="IDX642"></a>
</dd><dt><samp>`--makefile=<var>файл</var>'</samp>
</dt><dd>
<a name="IDX643"></a>
  Указанный <var>файл</var> рассматривается в качестве make-файла. Смотрите 
  раздел <a href="#SEC12">Создание make-файлов</a>.

</dd><dt><samp>`-h'</samp>
</dt><dd>
<a name="IDX644"></a>
</dd><dt><samp>`--help'</samp>
</dt><dd>
<a name="IDX645"></a>

    Напоминает вам список опций, распознаваемых <code>make</code> и 
    завершает работу.

</dd><dt><samp>`-i'</samp>
</dt><dd>
<a name="IDX646"></a>
</dd><dt><samp>`--ignore-errors'</samp>
</dt><dd>
<a name="IDX647"></a>
    Игнорировать все ошибки, возникающие в любых командах, исполняемых
    для обновления файлов.
    Смотрите раздел <a href="#SEC48">Ошибки при исполнении команд</a>.

</dd><dt><samp>`-I <var>каталог</var>'</samp>
</dt><dd>
<a name="IDX648"></a>
</dd><dt><samp>`--include-dir=<var>каталог</var>'</samp>
</dt><dd>
<a name="IDX649"></a>
    Указывает <var>каталог</var> для поиска включаемых
    make-файлов. Смотрите раздел <a href="#SEC15">Подключение других make-файлов</a>. 
    При наличии нескольких опций <samp>`-I'</samp>, поиск в указанных каталогах
    производится в том порядке, как они были перечислены.

</dd><dt><samp>`-j [<var>число_заданий</var>]'</samp>
</dt><dd>
<a name="IDX650"></a>
</dd><dt><samp>`--jobs[=<var>число_заданий</var>]'</samp>
</dt><dd>
<a name="IDX651"></a>
    Указывает количество одновременно выполняемых заданий (команд).
    При отсутствии аргумента, число одновременно выполняемых заданий
    не ограничено.
    При наличии сразу нескольких опций <samp>`-j'</samp>, будет 
    действовать только последняя из перечисленных. 
    Смотрите раздел <a href="#SEC47">Параллельное исполнение команд</a>, 
    где подробно описан процесс запуска команд. Обратите внимание, что
    при работе в операционной системе
    MS-DOS, эта опция игнорируется. 

</dd><dt><samp>`-k'</samp>
</dt><dd>
<a name="IDX652"></a>
</dd><dt><samp>`--keep-going'</samp>
</dt><dd>
<a name="IDX653"></a>
    После возникновения ошибки, продолжить, насколько это возможно, обработку
    make-файла. Хотя цель, при обновлении которой произошла ошибка, уже не 
    сможет быть корректно обновлена, и, следовательно, не могут быть правильно
    обновлены и все цели, зависящие от нее, <code>make</code> попробует 
    обработать другие пререквизиты этих целей.
    Смотрите раздел 
    <a href="#SEC91">Проверка компиляции программы</a>.

</dd><dt><samp>`-l [<var>загрузка</var>]'</samp>
</dt><dd>
<a name="IDX654"></a>
</dd><dt><samp>`--load-average[=<var>загрузка</var>]'</samp>
</dt><dd>
<a name="IDX655"></a>
</dd><dt><samp>`--max-load[=<var>загрузка</var>]'</samp>
</dt><dd>
<a name="IDX656"></a>
    Указывает, что новые задания (команды) не должны запускаться если
    уже имеется хотя бы одно запущенная задание и загрузка системы 
    равна или превышает значение 
    <var>загрузка</var> (число с плавающей точкой). При отсутствии аргумента,
    ограничение на максимальную загрузку снимается.
    Смотрите раздел <a href="#SEC47">Параллельное исполнение команд</a>. 

</dd><dt><samp>`-n'</samp>
</dt><dd>
<a name="IDX657"></a>
</dd><dt><samp>`--just-print'</samp>
</dt><dd>
<a name="IDX658"></a>
</dd><dt><samp>`--dry-run'</samp>
</dt><dd>
<a name="IDX659"></a>
</dd><dt><samp>`--recon'</samp>
</dt><dd>
<a name="IDX660"></a>

    Печатать команды, которые должны выполняться, но не исполнять их.
    Смотрите раздел <a href="#SEC88">Вместо исполнения команд</a>.

</dd><dt><samp>`-o <var>файл</var>'</samp>
</dt><dd>
<a name="IDX661"></a>
</dd><dt><samp>`--old-file=<var>файл</var>'</samp>
</dt><dd>
<a name="IDX662"></a>
</dd><dt><samp>`--assume-old=<var>файл</var>'</samp>
</dt><dd>
<a name="IDX663"></a>
    Не обновлять <var>файл</var> даже если он "старше" своих пререквизитов 
    и при обработке других файлов не принимать в рассчет возможные изменения
    в этом
    файле. По существу, этот файл обрабатывается как "очень старый" и
    его правила игнорируются.
    Смотрите раздел
    <a href="#SEC89">Предотвращение перекомпиляции некоторых файлов</a>.

</dd><dt><samp>`-p'</samp>
</dt><dd>
<a name="IDX664"></a>
</dd><dt><samp>`--print-data-base'</samp>
</dt><dd>
<a name="IDX665"></a>
<a name="IDX666"></a>
<a name="IDX667"></a>
    Перед началом основной работы, распечатать базу данных 
    (правила и значения переменных), полученную в результате чтения 
    make-файла. 
    Печатается также информация о номере версии  
    (аналогично опции <samp>`-v'</samp>, смотрите ниже).
    Для того, чтобы просто распечатать базу данных, не обновляя при этом
    никаких файлов, используйте 
    <samp>`make -qp'</samp>.  
    Для распечатки базы данных с предопределенными правилами и переменными,
    используйте <samp>`make -p -f /dev/null'</samp>.  
    Помимо всего прочего, выводимая информация содержит имя файла и номер строки,
    где было дано определение правила или переменной. Это может оказаться
    ценным
    подспорьем для отладки сложных make-файлов.

</dd><dt><samp>`-q'</samp>
</dt><dd>
<a name="IDX668"></a>
</dd><dt><samp>`--question'</samp>
</dt><dd>
<a name="IDX669"></a>
  "Режим проверки". Никаких команд не выполняется и не печатается никаких
  сообщений. Вся работа <code>make</code> заключается в возврате соответствующего
  кода завершения. В случае, если указанная цель не нуждается в обновлении,
  возвращается нулевой код. В случае, если обновление требуется, возвращается
  код, равный единице. При возникновении каких-либо ошибок ошибок, возвращается
  код, равный двум. 
  Смотрите раздел 
  <a href="#SEC88">Вместо исполнения команд</a>.

</dd><dt><samp>`-r'</samp>
</dt><dd>
<a name="IDX670"></a>
</dd><dt><samp>`--no-builtin-rules'</samp>
</dt><dd>
<a name="IDX671"></a>
  Отключает использование встроенных неявных правил (смотрите 
  раздел 
  <a href="#SEC93">Использование неявных правил</a>). 
  Однако, вы по-прежнему можете задать свои собственные неявные правила 
  с помощью шаблонных правил (смотрите 
  раздел 
  <a href="#SEC98">Определение и переопределение шаблонных правил</a>). 
  Опция <samp>`-r'</samp> также очищает используемый по умолчанию список суффиксов для 
  суффиксных правил.
  (смотрите раздел 
  <a href="#SEC106">Устаревшие суффиксные правила</a>). 
  По-прежнему, вы можете использовать специальную цель 
  <code>.SUFFIXES</code> для определения своего собственного
  списка суффиксов. Далее, эти суффиксы можно будет использовать в своих суффиксных 
  правилах.
  Обратите внимание, что опция <code>-r</code> воздействует только 
  на 
  <em>правила</em> и никак не влияет на используемые по умолчанию переменные 
  (смотрите раздел
  <a href="#SEC96">Используемые в неявных правилах переменные</a>);
  смотрите описание опции <samp>`-R'</samp>.

</dd><dt><samp>`-R'</samp>
</dt><dd>
<a name="IDX672"></a>
</dd><dt><samp>`--no-builtin-variables'</samp>
</dt><dd>
<a name="IDX673"></a>
Отключает использование встроенных переменных, используемых
неявными правилами
(смотрите раздел <a href="#SEC96">Используемые в неявных правилах переменные</a>).  
Разумеется, вы по-прежнему можете определять свои собственные переменные.
Включение опции <samp>`-R'</samp> автоматически приводит к включению опции
<samp>`-r'</samp> (смотрите выше), поскольку нет смысла 
в наличии неявных правил без наличия переменных, которые в них используются.

</dd><dt><samp>`-s'</samp>
</dt><dd>
<a name="IDX674"></a>
</dd><dt><samp>`--silent'</samp>
</dt><dd>
<a name="IDX675"></a>
</dd><dt><samp>`--quiet'</samp>
</dt><dd>
<a name="IDX676"></a>

    "Бесшумный режим". Отключается печать исполняемых команд.
    Смотрите раздел 
    <a href="#SEC45">Отображение исполняемых команд</a>.

</dd><dt><samp>`-S'</samp>
</dt><dd>
<a name="IDX677"></a>
</dd><dt><samp>`--no-keep-going'</samp>
</dt><dd>
<a name="IDX678"></a>
</dd><dt><samp>`--stop'</samp>
</dt><dd>
<a name="IDX679"></a>

    Отменяет опцию <samp>`-k'</samp>. Как правило, это может потребоваться
    только при рекурсивном использовании <code>make</code>, когда опция
    <samp>`-k'</samp> может быть "унаследована" через переменную 
    <code>MAKEFLAGS</code> от <code>make</code> "верхнего уровня" 
    (смотрите раздел 
    <a href="#SEC50">Рекурсивный вызов <code>make</code></a>) 
    или в случае, если эта опция была установлена через 
    переменную среду <code>MAKEFLAGS</code>.

</dd><dt><samp>`-t'</samp>
</dt><dd>
<a name="IDX680"></a>
</dd><dt><samp>`--touch'</samp>
</dt><dd>
<a name="IDX681"></a>

  Не выполняя команд, просто обновляет время последней модификации файлов
  (в действительности не изменяя их). Таким образом, <code>make</code> 
  "делает вид" что все необходимые команды были выполнены, дабы
  "обмануть" последующие запуски <code>make</code>.
  Смотрите раздел
  <a href="#SEC88">Вместо исполнения команд</a>.

</dd><dt><samp>`-v'</samp>
</dt><dd>
<a name="IDX682"></a>
</dd><dt><samp>`--version'</samp>
</dt><dd>
<a name="IDX683"></a>
  Выдает информацию о версии программы <code>make</code>, ее авторах, авторских
  правах, замечание об отсутствии гарантий и завершает работу.

</dd><dt><samp>`-w'</samp>
</dt><dd>
<a name="IDX684"></a>
</dd><dt><samp>`--print-directory'</samp>
</dt><dd>
<a name="IDX685"></a>
    Печатать сообщение с именем текущего каталога до и после обработки 
    make-файла. 
    Это может оказаться полезным при поиске нетривиальных ошибок, связанных
    с рекурсивным вызовом 
    <code>make</code>. Смотрите 
    раздел <a href="#SEC50">Рекурсивный вызов <code>make</code></a>. 
    (На практике, вам редко когда понадобится указывать эту опцию, 
    поскольку, во многих случаях, <code>make</code> включает
    ее автоматически; смотрите раздел
    <a href="#SEC54">Опция <samp>`--print-directory'</samp></a>.)

</dd><dt><samp>`--no-print-directory'</samp>
</dt><dd>
<a name="IDX686"></a>
  Отменить печать рабочего каталога (опции
  <code>-w</code>). Эта опция может оказаться полезной в тех случаях, когда
  <code>make</code> автоматически включает опцию <code>-w</code>, а вы не хотели 
  бы получать дополнительные сообщения.
  Смотрите раздел 
  <a href="#SEC54">Опция <samp>`--print-directory'</samp></a>.

</dd><dt><samp>`-W <var>файл</var>'</samp>
</dt><dd>
<a name="IDX687"></a>
</dd><dt><samp>`--what-if=<var>файл</var>'</samp>
</dt><dd>
<a name="IDX688"></a>
</dd><dt><samp>`--new-file=<var>файл</var>'</samp>
</dt><dd>
<a name="IDX689"></a>
</dd><dt><samp>`--assume-new=<var>файл</var>'</samp>
</dt><dd>
<a name="IDX690"></a>
    "Притвориться", что цель <var>файл</var> только что была модифицирована.
    Будучи использована совместно с опцией <samp>`-n'</samp>, покажет,
    какие действия будут выполнены если этот файл действительно будет 
    модифицирован. 
    Без опции <samp>`-n'</samp>, эффект сходен
    с выполнением команды <code>touch</code> для указанного файла с 
    последующим запуском 
    <code>make</code>, за исключеним того, что время последней модификации
    этого файла происходит только в "воображении"
    <code>make</code>. Смотрите раздел 
    <a href="#SEC88">Вместо исполнения команд</a>.

</dd><dt><samp>`--warn-undefined-variables'</samp>
</dt><dd>
<a name="IDX691"></a>
<a name="IDX692"></a>
<a name="IDX693"></a>
  Когда <code>make</code> будет встречать ссылки на неопределенные переменные, будут 
  выдаваться соответствующие предупреждающие сообщения. 
  Это может оказаться полезным при отладке
  make-файлов, в которых переменные используются нетривиальным образом.
</dd></dl>



<h1><a name="SEC93" href="#TOC93">Использование неявных правил (implicit rules)</a></h1>

<p>
<a name="IDX694"></a>
<a name="IDX695"></a>

</p>
<p> Некоторые "стандартные" способы обновления целевых файлов используются 
очень часто. 
Например, одним из типичных способов порождения объектного файла является
его получение из соответствующего исходного файла на языке Си с использованием 
программы <code>cc</code> (компилятора языка Си). </p>

<p> <strong>Неявные правила (implicit rules)</strong> указывают <code>make</code> на 
некоторые "стандартные"
приемы обработки файлов, дабы пользователь мог использовать их, не занимаясь
каждый раз детальным описанием способа обработки.
Так, например, имеется неявное правило для компиляции исходных файлов на языке Си.
Вопрос о запуске тех или иных правил решается исходя из имен обрабатываемых файлов.
Как правило, например, при компиляции программ на Си, из "входного" файла
с расширением 
<tt>`.c'</tt> получается файл с расширением <tt>`.o'</tt>. Таким образом,
при наличии подобной комбинации расширений файлов, <code>make</code> 
может применить к ним неявное правило для компиляции Си-программ. </p>

<p> Неявные правила могут применяться последовательно, связываюсь 
в "цепочки"; так например, 
<code>make</code> может получить файл <tt>`.o'</tt> из файла <tt>`.y'</tt>, используя
"промежуточный" файл
<tt>`.c'</tt>. Смотрите раздел 
<a href="#SEC97">"Цепочки" неявных правил</a>. </p>

<p> Во встроенных неявных правилах используются некоторые переменные, изменяя
которые, можно влиять на работу этих правил. 
Так, например, в неявном правиле для компиляции Си-программ используется
переменная <code>CFLAGS</code>, содержащая передаваемые 
компилятору опции.
Смотрите раздел 
<a href="#SEC96">Используемые в неявных правилах переменные</a>. </p>

<p> Вы можете определить свои собственные неявные правила с помощью 
<strong>шаблонных правил (pattern rules)</strong>.
Смотрите раздел <a href="#SEC98">Определение и переопределение шаблонных правил</a>. </p>

<p> <strong>Суффиксные правила (suffix rules)</strong> - более ограниченный 
(и устаревший) механизм
задания неявных правил.
Механизм шаблонных правил является более общим и понятным, однако суффиксные правила
по-прежнему поддерживаются из соображений обеспечения совместимости.
Смотрите раздел <a href="#SEC106">Устаревшие суффиксные правила</a>. </p>



<h2><a name="SEC94" href="#TOC94">Использование неявных правил (implicit rules)</a></h2>
<p>
<a name="IDX696"></a>
<a name="IDX697"></a>

</p>

<p> Для того, чтобы предоставить <code>make</code> возможность использовать 
"общепринятую" методику для обновления целевого файла, достаточно
воздержаться от самостоятельного задания команд.
Для этого, можно либо задать правило, не содержащее команд, либо вообще не
задавать правила. 
Исходя из имеющихся в наличии исходных файлов, 
<code>make</code> решит, каким неявным правилом следует воспользоваться. </p>

<p> Представьте себе такой фрагмент make-файла: </p>

<pre>foo : foo.o bar.o
        cc -o foo foo.o bar.o $(CFLAGS) $(LDFLAGS)
</pre>

<p> Поскольку, вы упомянули файл <tt>`foo.o'</tt>, но не указали правила для
его создания,
<code>make</code> автоматически попробует найти неявное правило, с помощью
которого можно этот файл обновить.
Такая попытка будет произведена независимо от того, существует ли в данный
момент файл <tt>`foo.o'</tt> или нет. </p>

<p> В случае, если неявное правило найдено, из него могут быть получены
как нужные команды, так и пререквизиты (исходные файлы).
Для задания дополнительных пререквизитов, 
которые не могут быть получены из неявного правила (например, 
заголовочных файлов), вы можете 
написать дополнительное правило
для 
<tt>`foo.o'</tt> без указания команд. </p>

<p> Каждое неявное правило имеет шаблон цели и шаблоны пререквизитов.
Один и тот же шаблон цели может фигурировать сразу в нескольких неявных правилах.
Например, сразу несколько правил описывают создание файлов
<samp>`.o'</samp>: одно - из файлов <samp>`.c'</samp> с помощью компилятора языка Си; 
другое - из файлов <samp>`.p'</samp> с помощью компилятора языка Паскаль; 
и так далее.
В действительности, будет использовано то правило, чьи пререквизиты существуют
или могут быть получены.
Так, если у вас имеется файл <tt>`foo.c'</tt>, <code>make</code> запустит
компилятор Си; в противном случае, если у вас есть файл <tt>`foo.p'</tt>, 
<code>make</code> 
запустит компилятор Паскаля; и так далее. </p>

<p> Разумеется, составляя make-файл, вы заранее представляете, какие именно
неявные правила вы хотели бы использовать.
Ваша уверенность, что <code>make</code> выберет нужные правила, основана на
том, что вы знаете, какие именно файлы пререквизитов реально существуют.
Смотрите раздел 
<a href="#SEC95">Перечень имеющихся неявных правил</a>, 
где приведен полный список встроенных неявных правил. </p>

<p> Выше, мы уже сказали, что неявное правило может быть использовано в том случае, если
его пререквизиты "существуют или могут быть построены".
Считается, что файл "может быть построен", если
его имя упоминается в make-файле в качестве цели или 
пререквизита, или же для его 
построения может быть использовано подходящее неявное правило.
В случае, когда пререквизит одного неявного правила является
результатом работы другого неявного правила, мы говорим, 
что эти правила связаны в <strong>цепочку</strong> (происходит <strong>chaining</strong>).
Смотрите раздел 
<a href="#SEC97">"Цепочки" неявных правил</a>. </p>

<p> В общем случае, <code>make</code> производит поиск подходящих неявных 
правил для каждой цели и каждого правила с двойным двоеточием,
которые не имеют команд. 
Файлы, упоминаемые только в качестве пререквизитов,
расматриваются как цели, описанные в "пустых" правилах (без пререквизитов
и команд), поэтому к таким файлам также могут быть применены неявные
правила.
Смотрите раздел 
<a href="#SEC107">Алгоритм поиска неявных правил</a>, 
где детально описана процедура поиска подходящих неявных правил. </p>

<p> Заметьте, что явное указание пререквизитов не влияет на процедуру
поиска неявных правил.
Рассмотрим, например, следующее явное
правило: </p>


<pre>foo.o: foo.p
</pre>

<p> Наличие пререквизита <tt>`foo.p'</tt> не означает, что 
для получения объектного файла <tt>`foo.o'</tt> 
<code>make</code> обязательно будет использовать неявное правило,
описывающее получение
файла <tt>`.o'</tt> из исходного файла <tt>`.p'</tt> на языке Паскаль.
Например, при наличии файла <tt>`foo.c'</tt>, вместо неявного правила компиляции
исходных файлов на Паскале, будет
использовано правило для компиляции исходных файлов
на Си, поскольку в списке предопределенных неявных правил оно находится ближе
к началу списка 
(смотрите раздел 
<a href="#SEC95">Перечень имеющихся неявных правил</a>). </p>

<p> Если вы не хотите, чтобы неявное правило было использовано для
цели, не имеющей команд, задайте для этой цели пустую команду с
помощью символа <samp>';'</samp> 
(смотрите раздел <a href="#SEC56">Пустые команды</a>). </p>



<h2><a name="SEC95" href="#TOC95">Перечень имеющихся неявных правил</a></h2>
<p>
<a name="IDX698"></a>
<a name="IDX699"></a>

</p>
<p> Ниже приведен полный список предопределенных неявных правил. 
Эти правила доступны всегда, если только make-файл явно не заменяет или не отменяет
их.
Смотрите раздел
<a href="#SEC104">Отмена действия неявных правил</a>, 
где обсуждается вопрос перекрытия и отмены действия неявных правил.
Опции <samp>`-r'</samp> и <samp>`--no-builtin-rules'</samp> отменяют 
все предопределенные правила. </p>

<p> Даже в отсутствие опции <samp>`-r'</samp>, не всегда все эти правила являются
определенными.
Дело в том, что многие из них реализованы в <code>make</code> в виде
суффиксных правил, поэтому список действительно определенных правил будет
зависеть от используемого <strong>списка суффиксов</strong> (списка пререквизитов
специальной цели
<code>.SUFFIXES</code>). По умолчанию используется следующий список
суффиксов: 

<code>.out</code>, <code>.a</code>, <code>.ln</code>, <code>.o</code>, <code>.c</code>, <code>.cc</code>,
<code>.C</code>, <code>.p</code>, <code>.f</code>, <code>.F</code>, <code>.r</code>, <code>.y</code>,
<code>.l</code>, <code>.s</code>, <code>.S</code>, <code>.mod</code>, <code>.sym</code>, <code>.def</code>,
<code>.h</code>, <code>.info</code>, <code>.dvi</code>, <code>.tex</code>, <code>.texinfo</code>,
<code>.texi</code>, <code>.txinfo</code>, <code>.w</code>, <code>.ch</code> <code>.web</code>,
<code>.sh</code>, <code>.elc</code>, <code>.el</code>.  

Все описанные ниже неявные правила, чьи пререквизиты имеют одно из перечисленных
расширений, на самом деле являются суффиксными правилами.
Если вы модифицируете список суффиксов, "в силе" останутся только те предопределенные
правила, чьи суффиксы остались в этом списке;
прочие правила будут "отключены". Смотрите
раздел <a href="#SEC106">Устаревшие суффиксные правила</a>, где подробно
описаны суффиксные правила. </p>

<dl compact="compact">

  <dt>  Компиляция программ на языке Си
</dt><dd>
<a name="IDX700"></a>
<a name="IDX701"></a>
<a name="IDX702"></a>
<a name="IDX703"></a>
<a name="IDX704"></a>

        <tt>`<var>n</var>.o'</tt> автоматически получается
  из <tt>`<var>n</var>.c'</tt> при помощи команды 
  <samp>`$(CC) -c $(CPPFLAGS) $(CFLAGS)'</samp>.

  </dd><dt>  Компиляция программ на языке C++ 
</dt><dd>
<a name="IDX705"></a>
<a name="IDX706"></a>
<a name="IDX707"></a>
<a name="IDX708"></a>

        <tt>`<var>n</var>.o'</tt> автоматически получается из
  <tt>`<var>n</var>.cc'</tt> или <tt>`<var>n</var>.C'</tt> с помощью команды
  <samp>`$(CXX) -c $(CPPFLAGS) $(CXXFLAGS)'</samp>. Мы рекомендуем вам
  пользоваться суффиксом 
  <samp>`.cc'</samp> (вместо
  <samp>`.C'</samp>).


  </dd><dt>  Компиляция программ на языке Паскаль 
</dt><dd>
<a name="IDX709"></a>
<a name="IDX710"></a>
<a name="IDX711"></a>

        <tt>`<var>n</var>.o'</tt> автоматически получается из
  <tt>`<var>n</var>.p'</tt> с помощью команды <samp>`$(PC) -c $(PFLAGS)'</samp>.


  </dd><dt>  Компиляция программ на языках Фортран и Ратфор 
</dt><dd>
<a name="IDX712"></a>
<a name="IDX713"></a>
<a name="IDX714"></a>
<a name="IDX715"></a>
<a name="IDX716"></a>
<a name="IDX717"></a>

        <tt>`<var>n</var>.o'</tt> автоматически получается из 
  <tt>`<var>n</var>.r'</tt>, <tt>`<var>n</var>.F'</tt> или 
  <tt>`<var>n</var>.f'</tt> при помощи компилятора Фортрана. При
  этом, используются следующие команды:

<dl compact="compact">

<dt><samp>`.f'</samp>
</dt><dd>
<samp>`$(FC) -c $(FFLAGS)'</samp>.
</dd><dt><samp>`.F'</samp>
</dt><dd>
<samp>`$(FC) -c $(FFLAGS) $(CPPFLAGS)'</samp>.
</dd><dt><samp>`.r'</samp>
</dt><dd>
<samp>`$(FC) -c $(FFLAGS) $(RFLAGS)'</samp>.
</dd></dl>

  </dd><dt>  Препроцессорная обработка программ на языках Фортран и Ратфор
</dt><dd>

  <tt>`<var>n</var>.f'</tt> автоматически получается из
  <tt>`<var>n</var>.r'</tt> или <tt>`<var>n</var>.F'</tt>. 
  При этом, исходный текст на Ратфоре или Фортране пропускается через
  препроцессор для получения 
  "обычной" фортрановской программы.
  Для этого, используются следующие команды:

<dl compact="compact">

<dt><samp>`.F'</samp>
</dt><dd>
<samp>`$(FC) -F $(CPPFLAGS) $(FFLAGS)'</samp>.
</dd><dt><samp>`.r'</samp>
</dt><dd>
<samp>`$(FC) -F $(FFLAGS) $(RFLAGS)'</samp>.
</dd></dl>

  </dd><dt>  Компиляция программ на языке Modula-2 
</dt><dd>
<a name="IDX718"></a>
<a name="IDX719"></a>
<a name="IDX720"></a>
<a name="IDX721"></a>
<a name="IDX722"></a>

        <tt>`<var>n</var>.sym'</tt> получается из
  <tt>`<var>n</var>.def'</tt> с помощью команды <samp>`$(M2C) 
  $(M2FLAGS) $(DEFFLAGS)'</samp>. <tt>`<var>n</var>.o'</tt> получается из
  <tt>`<var>n</var>.mod'</tt> с помощью команды <samp>`$(M2C) $(M2FLAGS) 
  $(MODFLAGS)'</samp>.


  </dd><dt>  Ассемблирование и препроцессорная обработка ассемблерных программ
</dt><dd>
<a name="IDX723"></a>
<a name="IDX724"></a>
<a name="IDX725"></a>

        <tt>`<var>n</var>.o'</tt> автоматически получается из
  <tt>`<var>n</var>.s'</tt> путем запуска ассемблера (<code>as</code>). 
  Для этого используется команда
  <samp>`$(AS) $(ASFLAGS)'</samp>.

<a name="IDX726"></a>

  <tt>`<var>n</var>.s'</tt> автоматически получается из
  <tt>`<var>n</var>.S'</tt> с помощью препроцессора языка Си (<code>cpp</code>). 
  При этом используется команда
  <samp>`$(CPP) $(CPPFLAGS)'</samp>.

  </dd><dt>  Компоновка одиночного объектного файла
</dt><dd>
<a name="IDX727"></a>
<a name="IDX728"></a>
<a name="IDX729"></a>

        <tt>`<var>n</var>'</tt> автоматически получается из
  <tt>`<var>n</var>.o'</tt> путем запуска компоновщика (обычно,
  <code>ld</code>) с помощью компилятора Си. Для этого используется 
  команда <samp>`$(CC) 
  $(LDFLAGS) <var>n</var>.o $(LOADLIBES) $(LDLIBS)'</samp>.

  Это правило будет работать правильно как в простейшем случае, когда
  текст программы состоит только из одного исходного файла, так и в более
  сложной ситуации, когда программа состоит из нескольких объектных файлов,
  один из которых имеет имя, соответствующее имени исполняемого файла. 
  Таким образом, обрабока правила 

<pre>x: y.o z.o
</pre>

при наличии файлов <tt>`x.c'</tt>, <tt>`y.c'</tt> и <tt>`z.c'</tt>,
вызовет выполнение команд:


<pre>cc -c x.c -o x.o
cc -c y.c -o y.o
cc -c z.c -o z.o
cc x.o y.o z.o -o x
rm -f x.o
rm -f y.o
rm -f z.o
</pre>

    В более сложных ситуациях, когда, например, отсутствует объектный файл,
    чье имя соответствует имени исполняемого файла, вам придется задать
    явное правило для компоновки программы. 
    Все типы файлов, автоматически преобразуемые в объектные файлы
    <samp>`.o'</samp>,
    автоматически компонуются путем вызова
  соответствующего компилятора

  (<samp>`$(CC)'</samp>, <samp>`$(FC)'</samp> или <samp>`$(PC)'</samp>; 
  компилятора Си <samp>`$(CC)'</samp> для ассемблирования файлов <samp>`.s'</samp>)
  без опции <samp>`-c'</samp>. Для ускорения работы, компиляция и
  компоновка делается за один шаг (вместо того, чтобы использовать
  объектные файлы
  <samp>`.o'</samp> в качестве промежуточных).

  </dd><dt>  Генерация программы на Си с помощью Yacc
</dt><dd>
<a name="IDX730"></a>
<a name="IDX731"></a>
<a name="IDX732"></a>

        <tt>`<var>n</var>.c'</tt> автоматически получается из
  <tt>`<var>n</var>.y'</tt> путем запуска программы Yacc с помощью команды <samp>`$(YACC) 
  $(YFLAGS)'</samp>.


  </dd><dt>  Генерация программы на Си с помощью Lex 
</dt><dd>
<a name="IDX733"></a>
<a name="IDX734"></a>
<a name="IDX735"></a>

        <tt>`<var>n</var>.c'</tt> автоматически получается из
  <tt>`<var>n</var>.l'</tt> с помощью программы Lex. При этом, используется команда
  <samp>`$(LEX) $(LFLAGS)'</samp>.


  </dd><dt>  Генерация программы на Ратфоре с помощью Lex 
</dt><dd>

  <tt>`<var>n</var>.r'</tt> автоматически получается из
  <tt>`<var>n</var>.l'</tt> с помощью программы Lex. Для этого используется
  команда 
  <samp>`$(LEX) $(LFLAGS)'</samp>. Соглашение об использовании
  суффикса
  <samp>`.l'</samp> для всех Lex-файлов, независимо от 
  того, должны ли они преобразовываться в код на языках Си
  или Ратфор, 
  делает невозможным автоматическое 
  определение используемого в данном случае языка.
  При необходимости получения объектного файла
  из файла
  <samp>`.l'</samp>, программа <code>make</code> должна решить - какой компилятор
  нужно использовать. Она
  будет использовать компилятор Си, поскольку он более 
  распространен.
  Если вы используете язык Ратфор, убедитесь в том, что
  <code>make</code> знает об 
  этом.  Для этого достаточно, чтобы нужный файл <tt>`<var>n</var>.r'</tt> был
  упомянут в make-файле.
  Или, если вы пользуетесь исключительно Ратфором и не используете Си,
  удалите 
  <samp>`.c'</samp> из списка суффиксов для неявных правил: 

<pre>.SUFFIXES:
.SUFFIXES: .o .r .f .l ...
</pre>

  </dd><dt>  Получение Lint-библиотек из исходных файлов на Си, Yacc или Lex
</dt><dd>
<a name="IDX736"></a>
<a name="IDX737"></a>
<a name="IDX738"></a>

        <tt>`<var>n</var>.ln'</tt> получается из
  <tt>`<var>n</var>.c'</tt> путем запуска <code>lint</code>. При этом, используется
  команда
  <samp>`$(LINT) $(LINTFLAGS) $(CPPFLAGS) -i'</samp>. Эта же команда используется
  для Си-программ, полученных из
  <tt>`<var>n</var>.y'</tt> или
  <tt>`<var>n</var>.l'</tt>.


  </dd><dt>  Файлы программ TeX и Web 
</dt><dd>
<a name="IDX739"></a>
<a name="IDX740"></a>
<a name="IDX741"></a>
<a name="IDX742"></a>
<a name="IDX743"></a>
<a name="IDX744"></a>
<a name="IDX745"></a>
<a name="IDX746"></a>
<a name="IDX747"></a>
<a name="IDX748"></a>
<a name="IDX749"></a>
<a name="IDX750"></a>

  <tt>`<var>n</var>.dvi'</tt> получается из 
  <tt>`<var>n</var>.tex'</tt> с помощью команды <samp>`$(TEX)'</samp>. 
  <tt>`<var>n</var>.tex'</tt> получается из <tt>`<var>n</var>.web'</tt> 
  с помощью
  <samp>`$(WEAVE)'</samp>, или из <tt>`<var>n</var>.w'</tt> (и из 
  <tt>`<var>n</var>.ch'</tt> если такой файл существует или
  может быть получен) с помощью
  <samp>`$(CWEAVE)'</samp>. <tt>`<var>n</var>.p'</tt> получается из
  <tt>`<var>n</var>.web'</tt> с помощью <samp>`$(TANGLE)'</samp> и 
  <tt>`<var>n</var>.c'</tt> получается из <tt>`<var>n</var>.w'</tt> 
  (и из
  <tt>`<var>n</var>.ch'</tt> если такой существует или может
  быть создан) с помощью
  <samp>`$(CTANGLE)'</samp>.



  </dd><dt>  Файлы программ Texinfo и Info 
</dt><dd>
<a name="IDX751"></a>
<a name="IDX752"></a>
<a name="IDX753"></a>
<a name="IDX754"></a>
<a name="IDX755"></a>
<a name="IDX756"></a>
<a name="IDX757"></a>
<a name="IDX758"></a>

        <tt>`<var>n</var>.dvi'</tt> получается из
  <tt>`<var>n</var>.texinfo'</tt>, <tt>`<var>n</var>.texi'</tt>, или
  <tt>`<var>n</var>.txinfo'</tt>, с помощью команды <samp>`$(TEXI2DVI) 
  $(TEXI2DVI_FLAGS)'</samp>. <tt>`<var>n</var>.info'</tt> получается из
  <tt>`<var>n</var>.texinfo'</tt>, <tt>`<var>n</var>.texi'</tt>, или
  <tt>`<var>n</var>.txinfo'</tt>, с помощью команды <samp>`$(MAKEINFO) 
  $(MAKEINFO_FLAGS)'</samp>.



</dd><dt>RCS
</dt><dd>
<a name="IDX759"></a>
<a name="IDX760"></a>
<a name="IDX761"></a>

        Любой файл
  <tt>`<var>n</var>'</tt> при необходимости может быть извлечен из RCS-файла с
  именем 
  <tt>`<var>n</var>,v'</tt> или <tt>`RCS/<var>n</var>,v'</tt>. Для этого используется
  команда <samp>`$(CO) $(COFLAGS)'</samp>. Если файл <tt>`<var>n</var>'</tt> уже 
  существует, он не будет извлекаться из RCS-файла, даже если этот RCS-файл является
  более "новым". 
  Правила для RCS являются терминальными (смотрите раздел 
  <a href="#SEC103">Шаблонные правила с призвольным соответствием</a>), 
  поэтому RCS-файлы не могут быть получены из других файлов - 
  они должны действительно существовать.


</dd><dt>SCCS
</dt><dd>
<a name="IDX762"></a>
<a name="IDX763"></a>
<a name="IDX764"></a>

        Любой файл
  <tt>`<var>n</var>'</tt> при необходимости может быть извлечен SCCS-файла
  с именем 
  <tt>`s.<var>n</var>'</tt> или <tt>`SCCS/s.<var>n</var>'</tt>. 
  Для этого используется команда
  <samp>`$(GET) $(GFLAGS)'</samp>. Правила для SCCS 
  являются терминальными (смотрите раздел 
  <a href="#SEC103">Шаблонные правила с призвольным соответствием</a>), 
  поэтому SCCS-файлы не могут быть получены из других файлов - 
  они должны в действительности существовать.

<a name="IDX765"></a>

  При работе с системой SCCS, файл с именем <tt>`<var>n</var>.sh'</tt>
  извлекается в файл 
  <tt>`<var>n</var>'</tt> и его атрибуты устанавливаются как "исполняемый всеми (everyone)".
  Это делается для нормальной работы скриптов, помещаемых в  
  SCCS. При работе с системой RCS подобных манипуляций не производится, 
  поскольку она запоминает атрибуты помещаемых в нее файлов.
  Мы не рекомендуем вам использовать систему SCCS. Общепризнано, что RCS
  более совершенна и, к тому же, является свободным программным 
  обеспечением. Используя свободное программное обеспечение вместо 
  аналогичного или даже худшего "закрытого" 
  (proprietary) программного обеспечения, вы, тем самым, поддерживаете движение за свободное
  программное обеспечение.
   
</dd></dl>

<p> Как правило, у вас может возникнуть необходимость в изменении только 
упоминаемых выше переменных (все они перечислены в следующем разделе). </p>

<p> Однако, на самом деле, для выполнения команд, предопределенные
неявные правила
используют такие переменные, как
<code>COMPILE.c</code>, <code>LINK.p</code>, и <code>PREPROCESS.S</code>, 
которые содержат указанные выше команды. </p>

<p> <code>make</code> следует соглашению, согласно которому,
правило, описывающее процесс компиляции исходного файла
<tt>`.<var>x</var>'</tt>, использует переменную
<code>COMPILE.<var>x</var></code>. Аналогично, правило для получения
исполняемого файла из файла
<tt>`.<var>x</var>'</tt> использует переменную <code>LINK.<var>x</var></code>, а
правило для препроцессорной обработки файла <tt>`.<var>x</var>'</tt> использует
переменную <code>PREPROCESS.<var>x</var></code>. </p>

<p>
<a name="IDX766"></a>

Каждое правило, создающее объектный файл, использует
переменную
<code>OUTPUT_OPTION</code>. В зависимости от опций, с которыми была
скомпилирована программа <code>make</code>, она определяет эту переменную как
содержащую строку
<samp>`-o $@'</samp> или как пустую.
Опция <samp>`-o'</samp> нужна для того, чтобы выходные файлы помещались
в нужное место, если исходные файлы находятся в других каталогах (например,
при использовании
<code>VPATH</code>; смотрите раздел 
<a href="#SEC26">Поиск пререквизитов по каталогам</a>). 
Однако, компиляторы в некоторых системах не допускают
использования опции 
<samp>`-o'</samp> для объектных файлов. Если у вас именно такая система и
вы используете
<code>VPATH</code>, некоторые скопилированные файлы могут быть 
помещены в "неверные" каталоги.
Для обхода этой проблемы, поместите в 
переменную 
<code>OUTPUT_OPTION</code> строку <samp>`; mv $*.o $@'</samp>. </p>



<h2><a name="SEC96" href="#TOC96">Используемые в неявных правилах переменные</a></h2>
<p>
<a name="IDX767"></a>

</p>

<p> Команды, содержащиеся во "встроенных" неявных правилах, широко
используют некоторые предопределенные переменные.
Вы можете изменять эти переменные внутри make-файла, с помощью аргументов,
передаваемых программе <code>make</code> или с помощью переменных среды, 
влияя, таким образом,
на работу неявных правил.  
Переменные, используемые неявными правилами, могут быть "отключены" с
помощью опций  
<samp>`-R'</samp> или
<samp>`--no-builtin-variables'</samp>.
</p>

<p> Например, команда для компиляции исходных текстов на Си выглядит как
<samp>`$(CC) -c $(CFLAGS) $(CPPFLAGS)'</samp>. По умолчанию, первая переменная
содержит значение 
<samp>`cc'</samp>, остальные - пустое значение. В результате, используется команда
<samp>`cc -c'</samp>. Присвоив переменной <samp>`CC'</samp> значение <samp>`ncc'</samp>, 
вы заставите <code>make</code> использовать 
<samp>`ncc'</samp> для всех компиляций Си-программ, выполняемых предопределенными
неявными правилами. 
Задав переменной <samp>`CFLAGS'</samp> значение <samp>`-g'</samp>, вы можете
включить опцию <samp>`-g'</samp> для всех выполняемых неявными правилами компиляций.
<em>Все</em> 
неявные правила, выполняющие компиляцию программ на Си, используют 
переменную <samp>`$(CC)'</samp>
для получения имени используемого компилятора и переменную  
<samp>`$(CFLAGS)'</samp> для передачи компилятору требуемых опций. </p>

<p> Переменные, используемые в неявных правилах, можно разделить на два класса: 
переменные для хранения имен
программ (такие, как <code>CC</code>) и переменные для передачи аргументов
(такие, как <code>CFLAGS</code>). ("Имя программы", на самом деле, может включать
в себя какие-то дополнительные аргументы, но в любом случае оно должно начинаться 
с имени исполняемого файла программы.)
Если значение переменной содержит более одного аргумента, они должны быть 
разделены пробелами. </p>

<p> Вот список переменных, используемых в неявных правилах
для хранения имен программ: 
</p>

<dl compact="compact">

<dt><code>AR</code>
</dt><dd>
<a name="IDX768"></a>
  Программа работы с архивами; по умолчанию, <samp>`ar'</samp>. 
<a name="IDX769"></a>

</dd><dt><code>AS</code>
</dt><dd>
<a name="IDX770"></a>
  Ассемблер; по умолчанию, <samp>`as'</samp>. 
<a name="IDX771"></a>

</dd><dt><code>CC</code>
</dt><dd>
<a name="IDX772"></a>
  Компилятор Си; по умолчанию, <samp>`cc'</samp>. 
<a name="IDX773"></a>

</dd><dt><code>CXX</code>
</dt><dd>
<a name="IDX774"></a>
    Компилятор C++; по умолчанию, <samp>`g++'</samp>. 
<a name="IDX775"></a>

</dd><dt><code>CO</code>
</dt><dd>
<a name="IDX776"></a>
  Программа для извлечения файлов из RCS; 
  по умолчанию,
  <samp>`co'</samp>. 
<a name="IDX777"></a>

</dd><dt><code>CPP</code>
</dt><dd>
<a name="IDX778"></a>
    Препроцессор языка Си, выдающий результат на стандартный вывод; 
    по умолчанию, <samp>`$(CC) -E'</samp>. 

</dd><dt><code>FC</code>
</dt><dd>
<a name="IDX779"></a>
    Препроцессор и компилятор для Фортрана и Ратфора; 
    по умолчанию, <samp>`f77'</samp>. 
<a name="IDX780"></a>

</dd><dt><code>GET</code>
</dt><dd>
<a name="IDX781"></a>
    Программа для извлечения файлов из SCCS; 
    по умолчанию, <samp>`get'</samp>. 
<a name="IDX782"></a>

</dd><dt><code>LEX</code>
</dt><dd>
<a name="IDX783"></a>
    Программа для преобразования Lex-грамматики в
    текст на языках Си или Ратфор;
    по умолчанию - <samp>`lex'</samp>. 
<a name="IDX784"></a>

</dd><dt><code>PC</code>
</dt><dd>
<a name="IDX785"></a>
  Компилятор Паскаля; по умолчанию, <samp>`pc'</samp>. 
<a name="IDX786"></a>

</dd><dt><code>YACC</code>
</dt><dd>
<a name="IDX787"></a>
    Программа для преобразования Yacc-грамматики в текст
    на Си; 
    по умолчанию - <samp>`yacc'</samp>. 
<a name="IDX788"></a>

</dd><dt><code>YACCR</code>
</dt><dd>
<a name="IDX789"></a>
    Программа для преобразования Yacc-грамматики в текст
    на языке Ратфор;
    по умолчанию - <samp>`yacc -r'</samp>. 

</dd><dt><code>MAKEINFO</code>
</dt><dd>
<a name="IDX790"></a>
    Программа для преобразования исходного файла формата 
    Texinfo в файл формата Info; по умолчанию, <samp>`makeinfo'</samp>. 
<a name="IDX791"></a>

</dd><dt><code>TEX</code>
</dt><dd>
<a name="IDX792"></a>
    Программа для преобразования исходных файлов на TeX в файлы формата DVI; 
    по умолчанию - 
    <samp>`tex'</samp>. 
<a name="IDX793"></a>

</dd><dt><code>TEXI2DVI</code>
</dt><dd>
<a name="IDX794"></a>
    Программа, преобразующая исходные файлы в формате
    Texinfo, в DVI-файлы программы
    TeX; 
    по умолчанию - <samp>`texi2dvi'</samp>. 
<a name="IDX795"></a>

</dd><dt><code>WEAVE</code>
</dt><dd>
<a name="IDX796"></a>
    Программа, преобразующая текст из формата Web в формат TeX; 
    по умолчанию -
  <samp>`weave'</samp>. 
<a name="IDX797"></a>

</dd><dt><code>CWEAVE</code>
</dt><dd>
<a name="IDX798"></a>
    Программа, преобразующая текст на Си-Web в формат TeX; по умолчанию
    - 
  <samp>`cweave'</samp>. 
<a name="IDX799"></a>

</dd><dt><code>TANGLE</code>
</dt><dd>
<a name="IDX800"></a>
    Программа, преобразующая текст на Web в Паскаль; 
    по умолчанию -
  <samp>`tangle'</samp>. 
<a name="IDX801"></a>

</dd><dt><code>CTANGLE</code>
</dt><dd>
<a name="IDX802"></a>
    Программа, преобразующая текст на Си-Web в текст на Си; 
    по умолчанию -
  <samp>`ctangle'</samp>. 
<a name="IDX803"></a>

</dd><dt><code>RM</code>
</dt><dd>
<a name="IDX804"></a>
    Команда удаления файла; по умолчанию, <samp>`rm -f'</samp>.
<a name="IDX805"></a>
</dd></dl>

<p> Ниже приведена таблица переменных, содержащих
дополнительные параметры для перечисленных выше программ.
По умолчанию, значением этих переменных является пустая строка (если
не указано другое). </p>

<dl compact="compact">

<dt><code>ARFLAGS</code>
</dt><dd>
<a name="IDX806"></a>
  Опции, передаваемые программе, манипулирующей с архивными файлам; 
  по умолчанию
  <samp>`rv'</samp>. 

</dd><dt><code>ASFLAGS</code>
</dt><dd>
<a name="IDX807"></a>
  Дополнительные параметры, передаваемые ассемблеру (при его явном вызове для
  файлов <samp>`.s'</samp> и <samp>`.S'</samp>).

</dd><dt><code>CFLAGS</code>
</dt><dd>
<a name="IDX808"></a>
  Дополнительные параметры, передаваемые компилятору Си.

</dd><dt><code>CXXFLAGS</code>
</dt><dd>
<a name="IDX809"></a>
  Дополнительные параметры, передаваемые компилятору C++.

</dd><dt><code>COFLAGS</code>
</dt><dd>
<a name="IDX810"></a>
    Дополнительные параметры, передаваемые программе <code>co</code> (входящей
    в систему RCS). 

</dd><dt><code>CPPFLAGS</code>
</dt><dd>
<a name="IDX811"></a>
    Дополнительные параметры, передаваемые препроцессору языка
    Си и программам, его использующим (компиляторам Си и Фортрана).

</dd><dt><code>FFLAGS</code>
</dt><dd>
<a name="IDX812"></a>
    Дополнительные параметры для компилятора Фортрана.

</dd><dt><code>GFLAGS</code>
</dt><dd>
<a name="IDX813"></a>
    Дополнительные параметры, передаваемые программе <code>get</code> (входящей
    в систему SCCS). 

</dd><dt><code>LDFLAGS</code>
</dt><dd>
<a name="IDX814"></a>
    Дополнительные параметры, передаваемые компиляторам, когда
    предполагается вызов компоновщика
    <samp>`ld'</samp>. 

</dd><dt><code>LFLAGS</code>
</dt><dd>
<a name="IDX815"></a>
  Дополнительные параметры, передаваемые программе Lex.

</dd><dt><code>PFLAGS</code>
</dt><dd>
<a name="IDX816"></a>
    Дополнительные параметры, передаваемые компилятору Паскаля.

</dd><dt><code>RFLAGS</code>
</dt><dd>
<a name="IDX817"></a>
  Дополнительные параметры, передаваемые
  компилятору Фортрана при компиляции программ на Ратфоре.

</dd><dt><code>YFLAGS</code>
</dt><dd>
<a name="IDX818"></a>
    Дополнительные параметры, передаваемые программе Yacc. </dd>
</dl>



<h2><a name="SEC97" href="#TOC97">"Цепочки" (chains) неявных правил</a></h2>

<p>
<a name="IDX819"></a>
<a name="IDX820"></a>

    В некоторых случаях, файл может быть получен путем последовательного
    применения нескольких неявных правил.
Например, файл <tt>`<var>n</var>.o'</tt> может быть получен из
<tt>`<var>n</var>.y'</tt> с помощью программы Yacc и последующего
запуска компилятора
<code>cc</code>. Подобная последовательность называется 
<strong>цепочкой (chain)</strong>. </p>

<p> Если файл <tt>`<var>n</var>.c'</tt> существует или упоминается 
в make-файле, то ситуация проста - 
<code>make</code> "догадается" что объектный файл может быть построен
путем компиляции из файла <tt>`<var>n</var>.c'</tt>; далее, при рассмотрении
способа получения <tt>`<var>n</var>.c'</tt>, будет использовано правило
для запуска
Yacc. В результате, оба файла - <tt>`<var>n</var>.c'</tt> и
<tt>`<var>n</var>.o'</tt>, будут обновлены. </p>

<p>
<a name="IDX821"></a>
<a name="IDX822"></a>

    Однако, даже если файл
<tt>`<var>n</var>.c'</tt> не существует и не упоминается в make-файле,
<code>make</code> знает, как "восстановить" недостающее звено между 
<tt>`<var>n</var>.o'</tt> 
и <tt>`<var>n</var>.y'</tt>! В этом случае, <tt>`<var>n</var>.c'</tt> 
называется 
<strong>промежуточным (intermediate) файлом</strong>. 
Как только <code>make</code> решит воспользоваться
промежуточным файлов, он будет занесен в "базу данных" также, как если бы он
упоминался в make-файле. Туда же добавляется неявное правило, описывающее процесс
создания промежуточного файла. </p>

<p> Промежуточные файлы порождаются практически также, как и 
"обычные" файлы. 
Имеется, однако, два отличия. </p>

<p> Первое отличие проявляется в случае, когда
промежуточный файл не существует.
Если "обычный" файл <var>b</var> не существует и <code>make</code> рассматривает
цель, зависящую от <var>b</var>, всегда сначала будет создан файл <var>b</var>, а затем 
будет обновлена зависящая от него цель. Однако, если <var>b</var> является
промежуточным файлом, 
<code>make</code> может оставить "все как есть". Она не будет беспокоиться
об обновлении 
<var>b</var> или рассматриваемой цели, если только какой-нибудь из пререквизитов
<var>b</var> не являются "более новым", чем цель, или имеются какие-либо другие
причины для обновления цели. </p>

<p> Второе отличие состоит в том, что если <code>make</code> <em>создала</em> 
промежуточный файл
<var>b</var> для того, чтобы обновить что-нибудь еще, 
файл <var>b</var> будет потом удален (когда он станет больше не нужен).
Таким образом, если до запуска 
<code>make</code> промежуточный файл не существовал, его не будет и после 
завершения работы <code>make</code>. 
Программа <code>make</code> сообщит вам об удалении, печатая
для каждого удаляемого файла соответствующую команду <samp>`rm -f'</samp>. </p>

<p> Обычно, файл не может считаться промежуточным, если он
упоминается в make-файле в качестве цели или пререквизита.
Однако, вы можете явно пометить файл как промежуточный, указав его
в качестве пререквизита специальной цели
<code>.INTERMEDIATE</code>. Это сработает даже в том случае,
если рассматриваемый файл тем или иным образом упоминается "явно". </p>

<p>
<a name="IDX823"></a>
<a name="IDX824"></a>
<a name="IDX825"></a>

    Вы можете предотвратить автоматическое удаление промежуточного файла,
пометив его как 
<strong>вторичный (secondary)</strong>
Для этого, укажите нужный файл в качестве пререквизита
специальной цели
<code>.SECONDARY</code>. Когда файл считается вторичным, <code>make</code> не будет 
создавать его без крайней необходимости, и, в тоже время, не будет 
автоматически удалять его. 
Помечая файл как вторичный, вы также
помечаете его как промежуточный. </p>

<p> Указав шаблон неявного правила 
(например, <samp>`%.o'</samp>) 
в качестве
пререквизита специальной цели <code>.PRECIOUS</code>, 
можно предотвратить автоматическое удаление
промежуточных файлов, полученных с помощью
неявных правил, чьи цели подходят под этот 
шаблон;
смотрите раздел 
<a href="#SEC49">Прерывание или принудительное завершение  
<code>make</code></a>.

<a name="IDX826"></a>
<a name="IDX827"></a>
</p>

<p> "Цепочка" может состоять более чем из двух неявных правил.
Например, файл
<tt>`foo'</tt> может быть получен из <tt>`RCS/foo.y,v'</tt> путем последовательного
запуска RCS, Yacc 
и <code>cc</code>. В этом случае, оба файла <tt>`foo.y'</tt> и <tt>`foo.c'</tt> 
считаются промежуточными и будут в конце удалены. </p>

<p> Ни одно из неявных правил не может использоваться в цепочке правил более 
одного раза.
Это, например, означает, что 
<code>make</code> даже не будет пытаться получить  
файл <tt>`foo'</tt> из <tt>`foo.o.o'</tt> путем двухкратного запуска компоновщика.
Помимо всего прочего, это ограничение предотвращает возможное зацикливание в процессе
поиска подходящих неявных правил для построения цепочки.  </p>

<p> Несколько специальных неявных правил предназначены для оптимизации
распространенных случаев,
которые, в противном случае, обрабатывались бы
с помощью цепочки правил. 
Например, файл <tt>`foo'</tt> может быть получен из
<tt>`foo.c'</tt> путем поочередной компиляции и компоновки 
с использованием отдельных правил, связанных в цепочку (при этом, 
<tt>`foo.o'</tt> будет рассматриваться как промежуточный файл). 
На самом деле, для этого случая существует специальное правило, осуществляющее
компиляцию и компоновку за "один шаг", однократным вызовом
команды <code>cc</code>. 
Оптимизированное правило используется вместо цепочки правил, 
поскольку находится ближе к началу списка правил. </p>



<h2><a name="SEC98" href="#TOC98">Определение и переопределение шаблонных правил (pattern rules)</a></h2>

<p> Вы можете задать неявное правило, написав 
<strong>шаблонное правило (pattern rule)</strong>. Шаблонное
правило выглядит подобно обычному правилу, за исключением того, 
что имя его цели содержит специальный шаблонный символ
<samp>`%'</samp> (в точности один). Цель рассматривается как шаблон имени
файлов; символ <samp>`%'</samp> может соответствовать любой непустой
подстроке, прочие символы должны совпадать. 
В именах пререквизитов также используется символ
<samp>`%'</samp>, показывающий, как их имена связаны с
именем цели. </p>

<p> Так, шаблонное правило <samp>`%.o : %.c'</samp> показывает, как
файлы с именами 
<tt>`<var>основа</var>.o'</tt> могут быть получены из соответствующих
файлов с именами <tt>`<var>основа</var>.c'</tt>. 
</p>

<p> Обратите внимание, что "расширение" символа <samp>`%'</samp> в шаблонном
правиле прозводится
<strong>после</strong> вычисления всех переменных и функций 
(что имеет место в момент чтения make-файла). Смотрите раздел 
<a href="#SEC57">Использование переменных</a> и 
раздел <a href="#SEC75">Функции преобразования текста</a>. </p>




<h3><a name="SEC99" href="#TOC99">Введение в шаблонные правила (pattern rules)</a></h3>
<p>
<a name="IDX828"></a>
<a name="IDX829"></a>

</p>

<p> Шаблонное правило содержит в имени цели символ <samp>`%'</samp> 
(в точности один); в остальном, оно выглядит как обычное правило. Цель является
шаблоном, с которым сверяются
имена файлов; символ <samp>`%'</samp> может соответствовать любой непустой
строке, другие символы должны в точности совпадать.

<a name="IDX830"></a>
<a name="IDX831"></a>
</p>

<p> Например, шаблону <samp>`%.c'</samp> удовлетворяют все имена
файлов, оканчивающиеся на 
<samp>`.c'</samp>. Под шаблон <samp>`s.%.c'</samp> подходят все имена файлов,
которые начинаются с 
<samp>`s.'</samp>, заканчиваются на <samp>`.c'</samp> и имеют длину по крайней мере
пять символов.
(Требуется, по крайней мере, один символ для сопоставления с
<samp>`%'</samp>.) Подстрока, которая соответствует символу<samp>`%'</samp>,
называется 
<strong>основой (stem)</strong>. </p>

<p> Символ <samp>`%'</samp> в пререквизите шаблонного правила
означает ту же основу, которая соответствует символу
<samp>`%'</samp> в имени цели. Для того, чтобы шаблонное правило могло быть
применено к рассматриваемому файлу, имя этого файла должно подходить под шаблон цели,
а из шаблонов пререквизитов должны получиться имена файлов, которые существуют или
могут быть получены.
Эти файлы станут пререквизитами рассматриваемого целевого файла.

<a name="IDX832"></a>

</p>

<p> Таким образом, правило вида </p>

<pre>%.o : %.c ; <var>команда</var>...
</pre>

<p> указывает, как файл <tt>`<var>n</var>.o'</tt> может быть получен  
из файла
<tt>`<var>n</var>.c'</tt>, являющегося его пререквизитом, при условии, что
<tt>`<var>n</var>.c'</tt> существует или может быть создан. </p>

<p> В шаблонном правиле также могут присутствовать пререквизиты,
не использующие шаблонный символ  
<samp>`%'</samp>; такие пререквизиты
будут добавлены к каждому файлу, полученному с помощью
этого шаблонного правила. Такие "константные" пререквизиты иногда могут
оказаться полезными. </p>

<p> Шаблонное правило не обязано содержать пререквизитов с <samp>`%'</samp>. 
Более того, оно вообще не обязано иметь каких-либо пререквизитов. 
Такое правило можно рассматривать как "обобщенный" шаблон. 
Оно будет описывать способ получения любых файлов, подходящих под
шаблон цели. 
Смотрите раздел 
<a href="#SEC105">Определение правил "последнего шанса"</a>. </p>

<p> Шаблонные правила могут иметь несколько целей. Однако, в отличие от обычных
правил, такой случай не рассматривается как несколько правил с одними и теми же 
пререквизитами и командами. 
Наличие в шаблонном правиле нескольких целей,
означает для <code>make</code>, что указанные в правиле команды обновляют сразу
все перечисленные цели. 
Команды правила исполняются только один раз, вызывая обновление всех целей.
Когда выполняется поиск подходящего шаблонного правила для обрабатываемой цели,
прочие присутствующие в правиле шаблоны целей не принимаются во внимание:
для <code>make</code> существенны лишь указанные в правиле пререквизиты и команды 
рассматриваемой
цели. 
Однако, после выполнения команд, обновляющих эту цель, все прочие цели, перечисленные
в шаблонном правиле, также помечаются как обновленные.

<a name="IDX833"></a>
<a name="IDX834"></a>

</p>

<p> Порядок следования шаблонных правил в make-файле является существенным,
посколько именно в этом порядке они рассматриваются.
Из нескольких подходящих правил будет использовано только первое из найденных.
Написанные вами правила имеют "приоритет" над предопределенными
правилами.
Помните, однако, что правила, чьи пререквизиты
в действительности существуют или могут быть построены, всегда имеют больший приоритет,
нежели правила, чьи пререквизиты, для своего построения, требуют использовать 
цепочки неявных правил.

<a name="IDX835"></a>
<a name="IDX836"></a>

</p>


<h3><a name="SEC100" href="#TOC100">Примеры шаблонных правил</a></h3>

<p> Вот несколько примеров шаблонных правил, в действительности  
предопределенных в <code>make</code>. 
Сперва, правило, компилирующее файлы <samp>`.c'</samp> в файлы
<samp>`.o'</samp>: </p>

<pre>%.o : %.c
        $(CC) -c $(CFLAGS) $(CPPFLAGS) $&lt; -o $@
</pre>

<p> С помощью этого правила, любой файл
<tt>`<var>x</var>.o'</tt> может быть получен из соответствующего файла
<tt>`<var>x</var>.c'</tt>. Для того, чтобы при каждом применении этого правила,
использовались правильные имена 
целевого и исходного файлов, его команда использует автоматические переменные
<samp>`$@'</samp> и <samp>`$&lt;'</samp>
(смотрите раздел <a href="#SEC101">Автоматические переменные</a>). </p>

<p> Вот другое встроенное правило: </p> 

<pre>% :: RCS/%,v
        $(CO) $(COFLAGS) $&lt;
</pre>

<p> С его помощью, любой файл <tt>`<var>x</var>'</tt> может быть получен из
соответствующего файла <tt>`<var>x</var>,v'</tt>, находящегося в подкаталоге
<tt>`RCS'</tt>. Так как в качестве имени цели указан шаблон <samp>`%'</samp>, 
это правило может быть применено к любому файлу, имеющему подобный пререквизит.
Двойное двоеточие определяет это правило как
<strong>терминальное (terminal)</strong>, вследствие чего, его пререквизит не
может быть промежуточным файлом.
(смотрите раздел 
<a href="#SEC103">Шаблонные правила с призвольным соответствием</a>). </p>

<p> Следующее правило имеет две цели: </p> 

<pre>%.tab.c %.tab.h: %.y
        bison -d $&lt;
</pre>

<p> Правило говорит о том, что выполнение команды <samp>`bison -d 
<var>x</var>.y'</samp> приведет к созданию обоих файлов - <tt>`<var>x</var>.tab.c'</tt> 
и
<tt>`<var>x</var>.tab.h'</tt>. 

Например, если файл <tt>`foo'</tt> зависит от файлов
<tt>`parse.tab.o'</tt> и <tt>`scan.o'</tt>, а файл <tt>`scan.o'</tt> 
зависит от файла <tt>`parse.tab.h'</tt>, то при изменении <tt>`parse.y'</tt>, 
команда <samp>`bison -d parse.y'</samp> будет запущена только один раз,
в результате чего пререквизиты обоих файлов 
<tt>`parse.tab.o'</tt> и <tt>`scan.o'</tt>, будут обновлены. 
(Предполагается, что файл <tt>`parse.tab.o'</tt> будет скомпилирован из
<tt>`parse.tab.c'</tt>, а файл <tt>`scan.o'</tt> - из файла <tt>`scan.c'</tt>. 
В свою очередь, <tt>`foo'</tt> компонуется из <tt>`parse.tab.o'</tt>, <tt>`scan.o'</tt> 
и прочих, после чего успешно работает.) </p>



<h3><a name="SEC101" href="#TOC101">Автоматические переменные</a></h3>

<p>
<a name="IDX837"></a>
<a name="IDX838"></a>
<a name="IDX839"></a>

</p>

<p> Предположим, вы хотите написать шаблонное правило для компиляции 
файлов <samp>`.c'</samp> в объектные файлы 
<samp>`.o'</samp>: каким образом вам задать правильное имя исходного файла
для команды <samp>`cc'</samp>?
Вы не можете явно указать
имя файла, поскольку это имя будет различным в каждом случае использования
данного правила. </p>

<p> Здесь, вам придется воспользоваться
так называемыми <strong>автоматическими 
переменными</strong>. Значения этих переменных автоматически вычисляются заново
для каждого исполняемого правила в зависимости от его целей и пререквизитов. 
В приведенном выше примере вам следует использовать 
<samp>`$@'</samp> в качестве имени объектного файла и 
<samp>`$&lt;'</samp> в качестве имени исходного файла. </p>

<p> Вот полный перечень имеющихся автоматических переменных: </p>

<dl compact="compact">

<dt><code>$@</code>
</dt><dd>
<a name="IDX840"></a>
 <a name="IDX841"></a>
 
        Имя файла цели правила.
        Если цель является элементом архива (archive member), то 
        <samp>`$@'</samp> обозначает имя архивного файла. 
        В шаблонном правиле с несколькими целями
        (смотрите раздел
        <a href="#SEC99">Введение в шаблонные правила</a>), 
        <samp>`$@'</samp> обозначает имя цели, которая вызывала запуск
        команд данного правила.

<a name="IDX842"></a>
<a name="IDX843"></a>

</dd><dt><code>$%</code>
</dt><dd>
  Для целей, являющихся элементами архива, обозначает имя этого элемента. Смотрите раздел
  <a href="#SEC108">Использование <code>make</code> для обновления архивов</a>. 
  Например, для цели
  <tt>`foo.a(bar.o)'</tt> переменная <samp>`$%'</samp> принимает значение <tt>`bar.o'</tt>,
  а переменная
  <samp>`$@'</samp> - значение <tt>`foo.a'</tt>. Если цель не является элементом
  архива, <samp>`$%'</samp> имеет пустое значение.


<a name="IDX844"></a>
<a name="IDX845"></a>

</dd><dt><code>$&lt;</code>
</dt><dd>
  Имя первого пререквизита. В случае, если выполняемые команды
  относятся к неявному правилу, первым пререквизитом является тот, 
  который был указан в неявном правиле. 
  (смотрите раздел <a href="#SEC93">Использование неявных правил</a>).


<a name="IDX846"></a>
<a name="IDX847"></a>
</dd><dt><code>$?</code>
</dt><dd>
  Имена всех пререквизитов (разделенные пробелами), которые 
  являются "более новыми", чем цель.
  Для членов архива, используется имя самого элемента
  (смотрите раздел
  <a href="#SEC108">Использование <code>make</code> для обновления архивов</a>).

<a name="IDX848"></a>
<a name="IDX849"></a>

<a name="IDX850"></a>
<a name="IDX851"></a>
</dd><dt><code>$^</code>
</dt><dd>
  Имена всех пререквизитов (разделенные пробелами). Для пререквизитов,
  которые являются элементами архивов, используются только имена элементов
  (смотрите раздел 
  <a href="#SEC108">Использование <code>make</code> для обновления архивов</a>). 
  Независимого от того,
  сколько раз конкретный файл был указан в списке пререквизитов, цель
  будет иметь только одну зависимость от этого файла.
  Таким образом, если в списке пререквизитов одно и то же имя файла будет 
  фигурировать несколько раз, 
  переменная <code>$^</code> все равно будет содержать только одну
  копию этого имени.
<a name="IDX852"></a>
<a name="IDX853"></a>

<a name="IDX854"></a>
<a name="IDX855"></a>
</dd><dt><code>$+</code>
</dt><dd>
  Аналогично <samp>`$^'</samp>, но пререквизиты, перечисленные более, чем 
  один раз, также будут продублированы (в том порядке, как они были указаны 
  в make-файле).
  В основном, эта переменная может быть полезна в командах компоновки,
  где порядок следования библиотек и их возможное дублирование является
  существенным. 

<a name="IDX856"></a>
<a name="IDX857"></a>
</dd><dt><code>$*</code>
</dt><dd>
  Основа (stem), с которой было сопоставлено неявное правило
  (смотрите раздел <a href="#SEC102">Процедура сопоставления с шаблоном</a>). 
  Например, для цели <tt>`dir/a.foo.b'</tt> и шаблона цели
  <tt>`a.%.b'</tt>, основой будет строка <tt>`dir/foo'</tt>. Основа имени
  может быть полезной для конструирования имен взаимосвязанных файлов. 

<a name="IDX858"></a>

  В статическом шаблонном правиле,
  основой является часть имени файла, соотвествующая символу <samp>`%'</samp>  
  в шаблоне цели. Для явного правила такое определение неприменимо,
  поэтому 
  <samp>`$*'</samp> вычисляется по-другому. В случае явного правила, если
  имя цели имеет один из "известных" суффиксов
  (смотрите раздел <a href="#SEC106">Устаревшие суффиксные правила</a>), 
  в переменную <samp>`$*'</samp> записывается имя цели без этого суффикса.
  Например, для цели <samp>`foo.c'</samp>, переменная 
  <samp>`$*'</samp> будет установлена в <samp>`foo'</samp>, поскольку
  <samp>`.c'</samp> является одним из "известных" суффиксов.
  Программа GNU <code>make</code> поступает столь причудливым образом лишь
  по соображениям совместимости с другими версиями 
  <code>make</code>. Мы рекомендуем вам избегать использования переменной
  <samp>`$*'</samp> где-либо, кроме неявных или статических шаблонных
  правил. В случае, если цель явного правила не имеет один известных
  <code>make</code> суффиксов, для данного правила значением переменной 
  <samp>`$*'</samp> является
  пустая строка. 

</dd></dl>

<p> Переменная <samp>`$?'</samp> может оказаться полезна даже в явных 
правилах, когда вы хотите работать только с пререквизитами, которые были
изменены. 
Представьте, например, что архивный файл
<tt>`lib'</tt> содержит копии некоторых объектных файлов.
Следующее правило запишет в архив копии только изменившихся
объектных файлов: </p>

<pre>lib: foo.o bar.o lose.o win.o
        ar r lib $?
</pre>

<p> Из всех перечисленных выше переменных, четыре переменные представляют собой
одиночные имена файлов, а две переменные - списки имен файлов.
Каждая из указанных шести переменных имеет варианты, позволяющие
получить вместо полного имени файла только имя каталога, где он расположен,
или же только имя файла внутри каталога.  
Имена этих дополнительных вариантов переменных образуются путем
добавления к "основному" имени переменной символов <samp>`D'</samp> и 
<samp>`F'</samp>, соответственно. В GNU 
<code>make</code> эти варианты переменных можно считать устаревшими, 
поскольку вместо них лучше использовать функции <code>dir</code> и <code>notdir</code> 
(смотрите раздел <a href="#SEC78">Функции для обработки имен файлов</a>). 
Заметьте, однако что <samp>`D'</samp>-варианты переменных не содержат
конечного <samp>'/'</samp>, который всегда присутствует на выходе функции
<code>dir</code>. Вот список дополнительных вариантов автоматических
переменных: </p>


<dl compact="compact">
<dt><samp>`$(@D)'</samp>
</dt><dd>
<a name="IDX859"></a>
 <a name="IDX860"></a>
 
        Часть имени файла, определяющее имя каталога, где он расположен
    (без конечного символа <samp>'/'</samp>). Например, если значением
  <samp>`$@'</samp> является <tt>`dir/foo.o'</tt>, то <samp>`$(@D)'</samp>  
  получит значение <tt>`dir'</tt>. В случае, если <samp>`$@'</samp> не 
  содержит символов <samp>'/'</samp>, переменная <samp>`$(@D)'</samp> будет содержать
  <tt>`.'</tt>.

<a name="IDX861"></a>
<a name="IDX862"></a>

</dd><dt><samp>`$(@F)'</samp>
</dt><dd>
  Имя файла без имени каталога. Например, если значением
  <samp>`$@'</samp> является <tt>`dir/foo.o'</tt>, то <samp>`$(@F)'</samp> 
  будет содержать <tt>`foo.o'</tt>. Выражение <samp>`$(@F)'</samp> 
  эквивалентно <samp>`$(notdir $@)'</samp>.


<a name="IDX863"></a>
<a name="IDX864"></a>
</dd><dt><samp>`$(*D)'</samp>
</dt><dd>
<a name="IDX865"></a>
<a name="IDX866"></a>
</dd><dt><samp>`$(*F)'</samp>
</dt><dd>
  Часть основы, определяющая имя каталога и имя файла внутри каталога,
  соответственно; 
  в данном примере, это будут строки <tt>`dir'</tt> и <tt>`foo'</tt>. 

<a name="IDX867"></a>
<a name="IDX868"></a>
</dd><dt><samp>`$(%D)'</samp>
</dt><dd>
<a name="IDX869"></a>
<a name="IDX870"></a>
</dd><dt><samp>`$(%F)'</samp>
</dt><dd>
  Для целей, являющихся элементами архивов, определяет
  имя каталога и имя файла элемента архива. 
  Эти переменные имеют смысл только целей, которые являются элементами
  архива (имеющих форму
  <tt>`<var>архив</var>(<var>элемент</var>)'</tt>) и полезны только в случае,
  если 
  <var>элемент</var> может содержать имя каталога. (Смотрите раздел 
  <a href="#SEC109">Использование элементов архива в качестве целей</a>.)

<a name="IDX871"></a>
<a name="IDX872"></a>
</dd><dt><samp>`$(&lt;D)'</samp>
</dt><dd>
<a name="IDX873"></a>
<a name="IDX874"></a>
</dd><dt><samp>`$(&lt;F)'</samp>
</dt><dd>
  Имя каталога и имя файла (внутри каталога) первого пререквизита. 

<a name="IDX875"></a>
<a name="IDX876"></a>
</dd><dt><samp>`$(^D)'</samp>
</dt><dd>
<a name="IDX877"></a>
<a name="IDX878"></a>
</dd><dt><samp>`$(^F)'</samp>
</dt><dd>
  Список каталогов и имен файлов всех пререквизитов.

<a name="IDX879"></a>
<a name="IDX880"></a>
</dd><dt><samp>`$(?D)'</samp>
</dt><dd>
<a name="IDX881"></a>
<a name="IDX882"></a>
</dd><dt><samp>`$(?F)'</samp>
</dt><dd>
  Список каталогов и имен файлов всех пререквизитов, которые являются 
  "более новыми", чем цель.
</dd></dl>

<p> Вы можете обратить внимание на то, что при ссылке на автоматические 
переменные, чьи имена состоят из одного символа, мы используем запись вида 
<samp>$имя_переменной</samp>, а не <samp>$(имя_переменной)</samp>, как 
это практикуется для "обычных" переменных. На самом деле,
это лишь ничего не значащее стилистическое соглашение. С тем же успехом, мы
могли бы писать <samp>`$(&lt;)'</samp> вместо <samp>`$&lt;'</samp>. </p>


<h3><a name="SEC102" href="#TOC102">Процедура сопоставления с шаблоном</a></h3>

<p>
<a name="IDX883"></a>

    Шаблон цели состоит из символа <samp>`%'</samp>, заключенного между
префиксом и суффиксом, каждый из которых (или оба сразу) может быть пустым.
Имя файла будет подходить под указанный шаблон только если оно
начинается с указанного префикса и заканчивается указанным суффиксом
(причем, префикс и суффикс не могут перекрываться). 
Текст, заключенный между префиксом и суффиксом, называется
<strong>основой (stem)</strong>. Таким образом, файл <tt>`test.o'</tt> удовлетворяет 
шаблону <samp>`%.o'</samp> и его основой является строка
<samp>`test'</samp>. Пререквизиты шаблонного правила
преобразуются в имена конкретных файлов,
путем подстановки основы
вместо символа 
<samp>`%'</samp>. Так, в приведенном выше примере,
из пререквизита
<samp>`%.c'</samp>, будет получено имя файла <samp>`test.c'</samp>. </p>

<p> Если шаблон цели не содержит символа <samp>'/'</samp> (так, обычно, и происходит),
то имя каталога будет удалено из имени рассматриваемого файла, перед тем,
как оно будет сравниваться с префиксом и суффиксом шаблона.

Далее, после сравнения имени файла с шаблоном, это имя каталога будет опять 
добавлено к уже 
сгенерированным именам пререквизитов (имя каталога удалялось лишь 
для нахождения подходящего неявного правила).

Так, имя <tt>`src/eat'</tt> подойдет под шаблон <samp>`e%t'</samp>, а его
основой будет являться
<samp>`src/a'</samp>. Далее, при получении имен пререквизитов,
имя каталога, содержащегося в выделенной основе, будет добавляться в начало каждого
пререквизита, а оставшаяся часть основы будет подставляться вместо 
символа 
<samp>`%'</samp>. Например, основа <samp>`src/a'</samp> в комбинации 
с шаблоном пререквизита <samp>`c%r'</samp>, даст имя файла
<tt>`src/car'</tt>. </p>



<h3><a name="SEC103" href="#TOC103">Шаблонные правила с призвольным (match-anything) соответствием</a></h3>

<p>
<a name="IDX884"></a>
<a name="IDX885"></a>

    Когда в качестве цели шаблонного правила выступает шаблон
<samp>`%'</samp>, ему может соответствовать любое имя файла. 
Такие правила мы называем 
<strong>правилами с произвольным (match-anything) соответствием</strong>.
Зачастую, они весьма полезны, но, к сожалению, могут требовать очень много
времени для своей обработки, поскольку 
<code>make</code> должна будет рассмотреть возможность их применения к
любому файлу, указанному в качестве цели или пререквизита. </p>

<p> Допустим, что в make-файле упоминается имя <tt>`foo.c'</tt>. Для такой
цели 
<code>make</code> должна будет рассмотреть возможность компоновки ее из
объектного файла
<tt>`foo.c.o'</tt>, возможность использования компилятора Си для компиляции и 
компоновки ее из файла
<tt>`foo.c.c'</tt>, возможность использования компилятора Паскаля для
компиляции и компоновки ее из файла
<tt>`foo.c.p'</tt>, и множество других аналогичных возможностей. </p>

<p> Конечно, мы знаем, что подобные сценарии бессмыслены, поскольку <tt>`foo.c'</tt> 
является исходным текстом на языке Си, а не исполняемым файлом.
В конце концов <code>make</code> также отвергнет подобные возможности, поскольку
файлы
<tt>`foo.c.o'</tt> и <tt>`foo.c.p'</tt> не будут существовать. Однако, 
из-за большого числа разнообразных возможностей,
<code>make</code> придется затратить очень много
времени на их проверку. </p>

<p> Для ускорения работы, мы внесли некоторые ограничения в
процесс обработки программой <code>make</code>
шаблонных правил с произвольным соответствием.
Существуют два возможных вида ограничений. Каждый раз, при задании правила
с произвольным соответствие, вы должны выбрать один или другой вид ограничения. </p>

<p> Один из вариантов - пометить такое правила как <strong>терминальное</strong>,
задав его с помощью двойного двоеточия.
Если правило является терминальным, оно может быть применено только в том случае,
когда его пререквизит реально существуют. 
Случаи, когда пререквизит "может быть получен", не рассматриваются.
Иными словами, терминальное правило не может служить "окончанием" цепочки правил. </p>

<p> Например, встроенные неявные правила для извлечения 
исходных файлов из файлов RCS и
SCCS, являются терминальными. В результате, например, при отсутствии файла <tt>`foo.c,v'</tt>,
<code>make</code> не будет пытаться получить его из файлов
<tt>`foo.c,v.o'</tt> или 
<tt>`RCS/SCCS/s.foo.c,v'</tt>. Как правило, файлы RCS и SCCS являются действительно 
"исходными",
и не могут быть получены из любых других файлов; таким образом,
<code>make</code> может сэкономить массу времени, не пытаясь найти способ
для их обновления. </p>

<p> Если вы не помечаете правило с произвольным соответствием как терминальное,
оно будет считаться нетерминальным. Для таких правил существует другое ограничение -
они не могут быть применены к файлам, имеющим некоторые "известные" типы.
Такими "известными" типами считаются все типы, которые подходят
под шаблон цели любого из неявных правил (кроме правил с произвольным 
соответствием). </p>

<p> Так, например, файл <tt>`foo.c'</tt> подходит под шаблон цели 
неявного правила
<samp>`%.c : %.y'</samp> (правила для запуска Yacc). Независимо от того, применимо ли
в данном случае это правило 
(это зависит от существования файла
<tt>`foo.y'</tt>), самого факта наличия правила с такой целью, достаточно,
чтобы предотвратить попытки применения любых нетерминальных правил с произвольным
соответствием к файлу
<tt>`foo.c'</tt>. Таким образом, <code>make</code> даже не будет рассматривать 
возможность получения
файла
<tt>`foo.c'</tt> из таких файлов, как <tt>`foo.c.o'</tt>, 
<tt>`foo.c.c'</tt>, <tt>`foo.c.p'</tt> и так далее. </p>

<p> Смысл этого ограничения состоит в том, что нетерминальные
правила с произвольным соответствием используются для создания файлов, содержащих
определенный вид данных (например, исполняемых файлов), а файлы с
"известными" суффиксами содержат какие-то другие специфические виды
данных (например, исходные файлы на Си). </p>

<p> На самом деле, <code>make</code> содержит большое число специальных
шаблонных правил-"пустышек", единственное назначение которых - распознать
определенные имена файлов, дабы нетерминальные правила с произвольным
соответствием к таким файлам не применялись.
Эти правила-"пустышки" не содержат ни команд, ни пререквизитов, и, будучи 
"бесполезны",
игнорируются во всех других случаях.
Так, например, встроенное неявное правило </p>
 
<pre>%.p :
</pre>

<p> существует только для того, чтобы 
файлы с исходными текстами на Паскале (например, <tt>`foo.p'</tt>) сопоставлялись
с определенным шаблоном цели, и, соответственно, не тратилось время на
поиск файлов 
<tt>`foo.p.o'</tt>, <tt>`foo.p.c'</tt> и тому подобных. </p>

<p> Аналогичные шаблонные правила-"пустышки" существуются для
всех суффиксов, которые используются в суффиксных правилах
(смотрите раздел <a href="#SEC106">Устаревшие суффиксные правила</a>). </p>



<h3><a name="SEC104" href="#TOC104">Отмена действия неявных правил</a></h3>

<p> Вы можете "перекрыть" встроенное неявное правило (или ваше собственное правило), 
задав новое шаблонное правило, имеющее такую же цель и пререквизиты, но другие команды. 
При определении нового правила, встроенное правило будет заменено.
"Позиция" нового правила в списке неявных правил, будет зависеть от 
месторасположения его определения. </p>

<p> Вы можете отменить встроенное неявное правило,
определив собственное шаблонное правило с такой же целью и пререквизитами, но  
не имеющее команд.
Так, например, для отключения правила, запускающего ассемблер, 
достаточно написать: </p>
 
<pre>%.o : %.s
</pre>



<h2><a name="SEC105" href="#TOC105">Определение правил "последнего шанса" (last-resort rules)</a></h2>

<p>
<a name="IDX886"></a>
<a name="IDX887"></a>

</p>

<p> Вы можете определить правило "последнего шанса" (last-resort rule), написав
терминальное правило с произвольным соответствием, не имеющее пререквизитов
(смотрите раздел
<a href="#SEC103">Шаблонные правила с призвольным соответствием</a>).
Такое правило является обычным шаблонным правилом; единственная его
особенность заключается в том, что с ним может быть "сопоставлена" любая цель.
Таким образом, команды из этого правила будут использованы для всех
целей и пререквизитов, не имеющих своих собственных команд и к которым 
не подходит ни одно из имеющихся неявных правил. </p>

<p> Например, при тестировании работы make-файла, обычно, важен лишь сам
факт наличия требуемых исходных файлов, а не их реальное содержимое.
Написав, в таком случае, следующее правило: </p>
 
<pre>%::
        touch $@
</pre>

<p> вы получите эффект, что все требуемые (в качестве пререквизитов) исходные файлы,
при необходимости, будут созданы автоматически. </p>

<p>
<a name="IDX888"></a>

Возможен и другой подход - вы можете задать команды, которые будут использованы
для целей, не имеющих подходящих правил (даже правил без команд).
Для этого надо задать правило со специальной целью
<code>.DEFAULT</code>. Команды из этого правила будут использованы для
всех пререквизитов, не имеющих явных правил и к которым не может быть применено
ни одно из неявных правил.
Естественно, по умолчанию правила с целью 
<code>.DEFAULT</code> не существует. Такое правило нужно писать самостоятельно. </p>

<p> Правило для цели <code>.DEFAULT</code>, не имеющее пререквизитов и
команд: </p>

<pre>.DEFAULT:
</pre>

<p> очищает список команд, ранее определенных для <code>.DEFAULT</code>. Далее,
<code>make</code> работает так, как если бы <code>.DEFAULT</code> никогда
не определялась. </p>

<p> Если вы не хотите, чтобы для цели были использованы команды
из шаблонного правила с произвольным (match-anything) соответствием или
из правила для цели <code>.DEFAULT</code> и, в то же время, вы не хотите,
чтобы для цели запускались какие-либо команды, вы можете использовать для нее
пустые команды (смотрите раздел 
<a href="#SEC56">Пустые команды</a>). </p>

<p> Вы можете использовать правило "последнего шанса" 
для "перекрытия" части другого make-файла. Смотрите
раздел<a href="#SEC18">"Перекрытие" части make-файла</a>. </p>



<h2><a name="SEC106" href="#TOC106">Устаревшие суффиксные правила (suffix rules)</a></h2>

<p>
<a name="IDX889"></a>
<a name="IDX890"></a>

</p>

<p> <strong>Суффиксные правила (suffix rules)</strong> являются устаревшим способом задания 
неявных (implicit) 
правил. Поскольку механизм шаблонных (pattern) правил является более
"общим" и понятным, суффиксные правила можно считать устаревшими.
Программа GNU <code>make</code> поддерживает их только по соображениям 
совместимости со "старыми" make-файлами. 
Суффиксные правила разделяются на два вида: с 
<strong>одиночным суффиксом (single-suffix)</strong> 
и с <strong>двойным суффиксом (double-suffix)</strong>. </p>

<p> Правило с двойным суффиксом содержит в себе пару суффиксов: один для цели 
и один для пререквизита.
Под него подходит любая цель, чье имя имеет указанный суффикс цели.
Соответствующее имя пререквизита получается путем замены суффикса
цели на суффикс пререквизита в имени обрабатываемого файла.
Правило с двойным суффиксом, чей суффикс цели <samp>`.o'</samp> и 
суффикс пререквизита <samp>`.c'</samp>, эквивалентно шаблонному правилу 
<samp>`%.o : %.c'</samp>. </p>

<p> Правило с одиночным суффиксом определяет только суффикс исходного
файла.
Под это правило может подойти любое имя файла, а имя соответствующего
пререквизита получается путем добавления указанного суффикса исходного
файла. 
Так, правило с одиночным суффиксом 
<samp>`.c'</samp> эквивалентно шаблонному правилу <samp>`% : %.c'</samp>. 
</p>

<p> Суффиксное правило распознается путем сравнения цели
каждого правила с определенным в данный момент списком "известных" суффиксов.
Когда <code>make</code> видит правило, чья цель является одним из
"известных" суффиксов, это правило рассматривается как суффиксное правило с
одиночных суффиксом.
Если <code>make</code> видит правило, чья цель представляет собой конкатенацию
(сцепление) двух "известных" суффиксов, такое правило рассматривается как
суффиксное правило с двойным суффиксом. </p>

<p> Например, оба суффикса - <samp>`.c'</samp> и <samp>`.o'</samp> присутствуют
в используемом по умолчанию списке "известных" суффиксов.
Следовательно, при наличии у правила цели
<samp>`.c.o'</samp>, <code>make</code> будет рассматривать его как
суффиксное правило с двумя суффиксами. При этом, 
<samp>`.c'</samp> будет являться исходным суффиксом, а <samp>`.o'</samp> будет 
суффиксом цели. Вот пример устаревшего способа, которым можно задать правило, 
компилирующее
файлы с исходными текстами на языке Си: </p>
 
<pre>.c.o:
        $(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $&lt;
</pre>

<p> Суффиксные правила не могут иметь собственных пререквизитов. Более того,
при наличии пререквизитов, суффиксное правило будет рассматриваться как обычное
правило со "странным" именем целевого файла.
Так, например, правило: </p>
 
<pre>.c.o: foo.h
        $(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $&lt;
</pre>

<p> описывает процесс получения файла <tt>`.c.o'</tt> из пререквизита
<tt>`foo.h'</tt>, а не рассматривается как шаблонное правило: </p>
 
<pre>%.o: %.c foo.h
        $(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $&lt;
</pre>

<p> которое задает способ получения файлов <samp>`.o'</samp> 
из файлов <samp>`.c'</samp> и указывает
на зависимость всех файлов <samp>`.o'</samp>, полученных с помощью
этого шаблонного правила, от файла
<tt>`foo.h'</tt>. </p>

<p> Суффиксные правила без команд также не имеют смысла, поскольку
не отменяют действие ранее определенных правил (как это делают шаблонные правила,
не имеющие команд; смотрите раздел 
<a href="#SEC104">Отмена действия неявных правил</a>). 
Такие правила просто добавляют в базу данных свой суффикс (или пару сцепленных суффиксов)
в качестве цели. </p>

<p>
<a name="IDX891"></a>

    "Известные суффиксы" являются просто списком
пререквизитов специальной цели
<code>.SUFFIXES</code>. Вы можете добавить в этот список новые суффиксы,
указав их в правиле для цели
<code>.SUFFIXES</code>, например: </p>


<pre>.SUFFIXES: .hack .win
</pre>

<p> Здесь, суффиксы <samp>`.hack'</samp> и <samp>`.win'</samp> добавляются
в конец списка "известных" суффиксов. </p>

<p> Если вы хотите задать свой собственный список суффиксов, а не добавлять
свои суффиксы к существующему списку, используйте 
правило с целью 
<code>.SUFFIXES</code>, не имеющее пререквизитов. 
Такое правило обрабатывается специальным образом и очищает список "известных" суффиксов.
Далее, вы можете написать еще одно правило для добавления нужных вам суффиксов.
Например: </p>


<pre>.SUFFIXES:            # Delete the default suffixes
.SUFFIXES: .c .o .h   # Define our suffix list
</pre>

<p> Задание опций <samp>`-r'</samp> или <samp>`--no-builtin-rules'</samp> приводит
к тому, что используемый по умолчанию список суффиксов, будет пуст. </p>

<p>
<a name="IDX892"></a>

    Определенный по умолчанию список "известных" суффиксов (который был
определен до того, как <code>make</code> начнет обрабатывать make-файлы) заносится
в переменную 
<code>SUFFIXES</code>.
Далее, вы можете менять список суффиксов с помощью правил для специальной
цели
<code>.SUFFIXES</code>, но это не будет отражаться на значении этой переменной. </p>



<h2><a name="SEC107" href="#TOC107">Алгоритм поиска неявных правил</a></h2>
<p>
<a name="IDX893"></a>
<a name="IDX894"></a>

</p>


<p> Ниже приведен алгоритм, которому следует <code>make</code> в процессе 
поиска подходящего неявного правила для цели
<var>t</var>. Эта процедура выполняется для всех
правил с двойным двоеточием, у которых нет команд. Она также выполняется для каждой цели 
обычных правил, если ни в одном из этих правил не указано команд. Этот же 
алгоритм поиска применяется для всех пререквизитов, не являющихся целями ни одного
из правил make-файла, а также рекурсивно выполняется для пререквизитов
неявных правил в процессе поиска возможных "цепочек" неявных правил. </p>

<p> Суффиксные правила не упоминаются в этом алгоритме, поскольку преобразуются
в эквивалентные им шаблонные правила во время чтения make-файла.  </p>

<p> Для целей, которые являются элементами архива (имеют форму
<samp>`<var>архив</var>(<var>элемент</var>)'</samp>), указанный ниже алгоритм 
применяется дважды; 
первый раз - с использованием полного имени цели <var>t</var>, и во второй раз
- используя 
<samp>`(<var>элемент</var>)'</samp> в качестве цели <var>t</var> (если при первом
проходе подходящее правило найдено не было). </p>


<ol>
<li>

  Разделить имя цели <var>t</var> на две части 
  - имя каталога (<var>d</var>), 
  и остаток строки (без имени каталога) 
  <var>n</var> . Например, если имя <var>t</var> представляет собой строку
  <samp>`src/foo.o'</samp>, то частью <var>d</var> будет <samp>`src/'</samp>, а 
  частью <var>n</var> - фрагмент <samp>`foo.o'</samp>.

</li><li>

  Составить список шаблонных правил, 
  чьи цели могут быть сопоставлены с 
  <var>t</var> или <var>n</var>. Если шаблон цели содержит символ
  <samp>'/'</samp>, он будет сравниваться с 
  <var>t</var>; в противном случае, шаблон будет сравниваться с <var>n</var>.

</li><li>

  Если хотя бы одно правило из этого списка, 
  <em>не</em> 
  является правилом с произвольным соответствием, удалить из списка
  все нетерминальные правила с произвольным соответствием.

</li><li>

  Удалить из списка все правила, не имеющие команд.

</li><li>

  Для каждого шаблонного правила из списка: 

<ol>
<li>

    Ищется основа <var>s</var>, которая представляет из себя
    непустую часть <var>t</var> 
    или <var>n</var>, соответствующую символу <samp>`%'</samp> в шаблоне цели.

</li><li>

    Путем подстановки основы <var>s</var> вместо 
    <samp>`%'</samp>, вычисляются имена пререквизитов; 
    Если шаблон цели не содержит символа <samp>'/'</samp>, 
    добавить 
    <var>d</var> в начало имени каждого из пререквизитов.

</li><li>

      Проверить, все ли пререквизиты существуют или должны существовать.
    (Мы говорим, что файл "должен существовать", если он упоминается в
    make-файле в качестве цели или явно указанного пререквизита.)
    Если все пререквизиты существуют или должны существовать,
    или, если в правиле нет пререквизитов, это правило применяется.

</li></ol>

</li><li>

   Если подходящее шаблонное правило до сих пор не найдено, производится
   вторая попытка - для каждого шаблонного правила из списка: 

<ol>
<li>

    Если правило является терминальным, 
    пропустить его и перейти к следующему правилу.

</li><li>

    Вычислить имена пререквизитов (также, как это делалось ранее, 
    во время первого прохода).

</li><li>

    Проверить, все ли пререквизиты существуют или
    могут быть созданы.

</li><li>

    Рекурсивно используя описываемый алгоритм поиска,  
    для каждого несуществующего пререквизита определить, может ли он быть 
    создан с помощью подходящего неявного правила. 

</li><li>

    Если все пререквизиты существуют, должны существовать, или
    могут быть получены с помощью неявных правил, рассматриваемое
    правило применяется.
</li></ol>

</li><li>

  Если ни одно из неявных правил не может быть применено,
  используется правило для цели <code>.DEFAULT</code> (если
  такое правило существует).
  В этом случае, для цели <var>t</var> выполняются те же команды, какие
  указаны для цели
  <code>.DEFAULT</code>. Иначе, считается, что для цели <var>t</var>
  нет команд.

</li></ol>

<p> Как только подходящее правило будет найдено, 
для каждого шаблона цели (кроме того, который был сопоставлен с  
<var>t</var> или <var>n</var>), символ
<samp>`%'</samp> заменяется на <var>s</var> и получившееся имя
запоминается до тех пор, пока не будут выполнены команды,
обновляющие <var>t</var>. 
После выполнения этих команд, все запомненные имена файлов добавляются
в "базу данных" и помечаются как обновленные (информация о статусе обновления,
при этом, заимствуется из файла <var>t</var>). </p>

<p> При выполнении команд шаблонного правила для цели <var>t</var>, автоматические
переменные получают значения, соответствующие 
данной цели и пререквизитам. 
Смотрите раздел <a href="#SEC101">Автоматические переменные</a>. </p>



<h1><a name="SEC108" href="#TOC108">Использование <code>make</code> для обновления архивов</a></h1>

<p>
<a name="IDX895"></a>
</p>

<p> <strong>Архивные файлы</strong> представляют из себя файлы, содержащие внутри
себя набор файлов. Эти "внутренние" файлы называются <strong>элементами (members)</strong>.
Для работы с архивными файлами используется программа <code>ar</code>. Одно из
основных применений архивных файлов - хранение библиотеки подпрограмм, используемых
при компоновке программы. </p>



<h2><a name="SEC109" href="#TOC109">Использование элементов архива в качестве целей</a></h2>

<p>
<a name="IDX896"></a>

</p>

<p> Отдельные элементы архивного файла могут быть использованы
в качестве целей или пререквизитов.
Указать элемент <var>элемент</var> архива
<var>архив</var> можно с помощью конструкции: </p>

<pre><var>архив</var>(<var>элемент</var>)
</pre>

<p> Эту конструкцию можно использовать только в именах целей и пререквизитов,
но не в командах!
Большинство программ не поддерживают такой синтаксис и не могут "напрямую" 
работать с элементами архивов.
Только программа <code>ar</code> и другие программы, специально спроектированные
для работы с архивами, могут это делать. 
Поэтому, как правило, все команды для обновления цели, являющейся элементом архива,
так или иначе будут использовать программу
<code>ar</code>. Например, следующее правило создает элемент
<tt>`hack.o'</tt> архива <tt>`foolib'</tt> путем копирования в архив файла
<tt>`hack.o'</tt>: </p>


<pre>foolib(hack.o) : hack.o
        ar cr foolib hack.o
</pre>

<p> На самом деле, практически все цели, являющиеся элементами архивов, обновляются
подобным образом; для этого даже существует соответствующее неявное правило. 
<strong>Обратите внимание</strong> на необходимость задания для программы
<code>ar</code> опции
<samp>`c'</samp> в том случае, если архивный файл пока не существует. </p>

<p> Для задания сразу нескольких элементов одного архива,
можно написать имена всех элементов "вместе" внутри скобок.
Так, следующий пример: </p>

<pre>foolib(hack.o kludge.o)
</pre>

<p>эквивалентен: </p>

<pre>foolib(hack.o) foolib(kludge.o)
</pre>

<p>
<a name="IDX897"></a>


    При задании имен элементов архивов можно также 
    использовать шаблонные символы "в стиле" командного интерпретатора.
Смотрите раздел <a href="#SEC22">Использование шаблонных символов в именах файлов</a>. 
Например, <samp>`foolib(*.o)'</samp> будет ссылаться
на все существующие элементы архива <tt>`foolib'</tt>, чьи имена заканчиваются
на
<samp>`.o'</samp>; возможно, это будут элементы 
<samp>`foolib(hack.o) foolib(kludge.o)'</samp>. </p>



<h2><a name="SEC110" href="#TOC110">Неявные правила для целей - элементов архива</a></h2>

<p> Вспомните, что цель вида <tt>`<var>a</var>(<var>m</var>)'</tt>,
означает
элемент <var>m</var> архивного файла <var>a</var>. </p>

<p> Когда <code>make</code> подбирает подходящее неявное правило для
подобной цели, наряду с правилами, которые могут соответствовать цели
<tt>`<var>a</var>(<var>m</var>)'</tt>, она рассматривает также и правила,
которые могут быть применены к цели <tt>`(<var>m</var>)'</tt>. </p>

<p> При этом, будет запущено специальное правило с целью <tt>`(%)'</tt>. 
Это правило обновляет цель
<tt>`<var>a</var>(<var>m</var>)'</tt> путем копирования
файла <var>m</var> в архив. Например, это правило сможет
обновить цель
<tt>`foo.a(bar.o)'</tt> путем копирования <em>файла</em> 
<tt>`bar.o'</tt> в архив <tt>`foo.a'</tt> в качестве <em>элемента</em> с именем
<tt>`bar.o'</tt>. </p>

<p> Будучи связанным в цепочку с другими, это правило может сослужить хорошую
службу.
Так, при наличии файла <tt>`bar.c'</tt>, команды 
<samp>`make "foo.a(bar.o)"'</samp> (здесь, кавычки использованы для
предотвращения специальной интерпретации символов
<samp>`('</samp> и <samp>`)'</samp> интерпретатором командной строки) будет 
достаточно
для запуска такой последовательности команд (при этом, даже не потребуется 
make-файла): </p>

<pre>cc -c bar.c -o bar.o
ar r foo.a bar.o
rm -f bar.o
</pre>

<p> В этом примере, <code>make</code> использовала файл <tt>`bar.o'</tt> 
в качестве промежуточного. Смотрите раздел 
<a href="#SEC97">"Цепочки" неявных правил</a>. </p>

<p> Подобные неявные правила пишутся с использованием 
автоматической переменной
<samp>`$%'</samp>. Смотрите раздел 
<a href="#SEC101">Автоматические переменные</a>. </p>

<p> Имя каталога не может содержаться в имени элемента архива, но его 
можно использовать в make-файле для получения аналогичного эффекта. 
Например, цель 
<tt>`foo.a(dir/file.o)'</tt> будет автоматически обновляться <code>make</code> 
с помощью команды: </p>

<pre>ar r foo.a dir/file.o
</pre>

<p> которая будет копировать файл <tt>`dir/file.o'</tt> в элемент 
<tt>`file.o'</tt> архива <tt>foo.a</tt>. В подобных случаях, могут быть полезны
автоматические переменные
<code>%D</code> и <code>%F</code>. </p>




<h3><a name="SEC111" href="#TOC111">Обновление каталога символов архивного файла</a></h3>

<p>
<a name="IDX898"></a>
<a name="IDX899"></a>
<a name="IDX900"></a>
<a name="IDX901"></a>
<a name="IDX902"></a>

</p>

<p> Архивный файл, используемый в качестве библиотеки, как правило,
содержит специальный элемент с именем
<tt>`__.SYMDEF'</tt>, содержащий каталог всех внешних символов, на которые ссылаются
другие элементы этого архива. 
После обновления любого другого элемента архива, вам потребуется
обновить 
<tt>`__.SYMDEF'</tt>, дабы он содержал актуальную информацию.
Это делается путем запуска программы 
<code>ranlib</code>: </p>

<pre>ranlib <var>файл_архива</var>
</pre>

<p> Обычно, эта команда помещается в правило для
архивного файла, пререквизитами которого являются все элементы этого архива.
Например,
</p>


<pre>libfoo.a: libfoo.a(x.o) libfoo.a(y.o) ...
        ranlib libfoo.a
</pre>

<p> Здесь, при обновлении любого из элементов архива (<tt>`x.o'</tt>, 
<tt>`y.o'</tt>, и так далее), будет запущена программа <code>ranlib</code>,
которая обновит каталог архива - элемент 
<tt>`__.SYMDEF'</tt>. В приведенном выше фрагменте, правила, обновляющие
элементы архива, не показаны;
в большинстве ситуаций, вы можете не указывать их явно, положившись
на встроенное неявное правило, копирующее файлы в архив (это правило обсуждалось
в предыдущем разделе). </p>

<p> Программа GNU <code>ar</code> 
автоматически обновляет элемент 
<tt>`__.SYMDEF'</tt>,  вследствие чего, необходимость в подобного рода
правилах, отпадает. </p>



<h2><a name="SEC112" href="#TOC112">Проблемы при использовании архивов</a></h2>
<p>
<a name="IDX903"></a>
<a name="IDX904"></a>
<a name="IDX905"></a>
<a name="IDX906"></a>

</p>

<p> Следует быть осторожным при одновременном использовании параллельного
исполнения команд  
(опция 
<code>-j</code>; смотрите раздел 
<a href="#SEC47">Параллельное исполнение команд</a>) и архивных файлов. 
При работе сразу нескольких программ <code>ar</code> с одним и тем же
архивным файлов, этот файл может быть поврежден, поскольку эти программы
ничего не знают друг о друге и никак не синхронизируют между собой свою 
работу. </p>

<p> Возможно, будущие версии <code>make</code> будут иметь какой-либо 
механизм для обхода этой проблемы, например, с помощью "сериализации" 
все команд, оперирующих с одним и тем же архивным файлом.
В настоящее время, однако, вам либо придется писать свои make-файлы таким образом,
чтобы избежать подобной проблемы, либо отказаться от использования
опции
<code>-j</code>. </p>



<h2><a name="SEC113" href="#TOC113">Суффиксные правила для архивных файлов</a></h2>

<p>
<a name="IDX907"></a>
<a name="IDX908"></a>
<a name="IDX909"></a>
<a name="IDX910"></a>

</p>

<p> Для работы с архивными файлами, вы можете использовать суффиксное правило
специального вида.
Смотрите раздел <a href="#SEC106">Устаревшие суффиксные правила</a>, 
где подробно обсуждаются суффиксные правила. Суффиксные правила для
архивных файлов можно считать устаревшими, поскольку поддерживаемые в
GNU <code>make</code> шаблонные правила для архивов являются более
"общим" механизмом
(смотрите раздел 
<a href="#SEC110">Неявные правила для целей - элементов архива</a>). 
Однако, суффиксные правила для архивов по-прежнему поддерживаются из
соображений совместимости с другими реализациями
<code>make</code>. </p>

<p> Суффиксное правило для архивов пишется с использованием
целевого суффикса
<samp>`.a'</samp> (это обычный суффикс архивных файлов). 
Вот пример устаревшей записи - суффиксное правило для обновления библиотеки
(которая является архивным файлом) из исходных файлов на языке 
Си: </p>


<pre>.c.a:
        $(CC) $(CFLAGS) $(CPPFLAGS) -c $&lt; -o $*.o
        $(AR) r $@ $*.o
        $(RM) $*.o
</pre>

<p> Это будет работать аналогично следующему шаблонному првилу: </p>

<pre>(%.o): %.c
        $(CC) $(CFLAGS) $(CPPFLAGS) -c $&lt; -o $*.o
        $(AR) r $@ $*.o
        $(RM) $*.o
</pre>

<p> На самом деле, <code>make</code> именно так и поступает, видя
суффиксное правило с целевым 
суффиксом <samp>`.a'</samp>. Любое правило с двойным суффиксом 
вида
<samp>`.<var>x</var>.a'</samp>, преобразуется <code>make</code> в соответствующее
шаблонное правило с шаблоном цели
<samp>`(%.o)'</samp> и шаблоном пререквизита
<samp>`%.<var>x</var>'</samp>. </p>

<p> Поскольку вы вправе использовать суффикс <samp>`.a'</samp> для совершенно
произвольных файлов
(а не только для архивов), 
<code>make</code> также преобразует подобное суффиксное правило в шаблонное
правило и "обычным" способом
(смотрите раздел <a href="#SEC106">Устаревшие суффиксные правила</a>). 
Так, суффиксное правило  <samp>`.<var>x</var>.a'</samp> 
будет преобразовано в два шаблонных правила: 
<samp>`(%.o): %.<var>x</var>'</samp> и <samp>`%.a: 
%.<var>x</var>'</samp>. </p>



<h1><a name="SEC114" href="#TOC114">Возможности GNU <code>make</code></a></h1>

<p>
<a name="IDX911"></a>
<a name="IDX912"></a>
<a name="IDX913"></a>

</p>

<p> Ниже приведен обзор возможностей программы GNU <code>make</code> 
в сравнении с другими версиями
<code>make</code> и указано, откуда 
были "позаимствованы" те или иные функции. В качестве "базовой", мы рассматриваем
версию 
<code>make</code> из состава операционной системы BSD 4.2. 
Если вы стремитесь к написанию
"переносимых" make-файлов, вам 
следует использовать только те возможности <code>make</code>, 
которые не перечислены здесь, а также в разделе
<a href="#SEC115">Несовместимость и нереализованные функции</a>. </p>

<p> Многие возможности были позаимствованы из версии программы <code>make</code>,
имевшейся в System V. </p>

<ul>
<li>

  Переменная <code>VPATH</code> 
  и ее специальное значение. 
  Смотрите раздел <a href="#SEC26">Поиск пререквизитов по каталогам </a>. 
  Такая возможность существовала в <code>make</code> из System V,
  однако не была документирована. Она была документирована в
  <code>make</code>, входившей в состав BSD 4.3
  (в документации говорилось, что она имитирует соответствующие возможности
  <code>make</code> из System V).

</li><li>

  Включаемые make-файлы. 
  Смотрите раздел 
  <a href="#SEC15">Подключение других make-файлов</a>. 
    Возможность подключения нескольких файлов
    в одной директиве, является особенностью GNU <code>make</code>.

</li><li>

  Переменные могут читаться из операционного окружения 
  и передаваться
  через него. 
  Смотрите раздел
  <a href="#SEC68">Переменные из операционного окружения</a>.

</li><li>

  При рекурсивном вызове, опции передаются 
  через переменную 
  <code>MAKEFLAGS</code> в <code>make</code> "нижнего уровня".
  Смотрите раздел 
  <a href="#SEC53">Передача опций в make "нижнего уровня"</a>.

</li><li>

  При работе с архивом, в автоматическую переменную
  <code>$%</code> заносится имя элемента архива.
    Смотрите раздел 
    <a href="#SEC101">Автоматические переменные</a>.

</li><li>

  Автоматические переменные <code>$@</code>, <code>$*</code>, 
  <code>$&lt;</code>, <code>$%</code>, и <code>$?</code> имеют
  "родственные" формы вида
  <code>$(@F)</code> и <code>$(@D)</code>. 
  Подобные же две формы имеет и переменная
  <code>$^</code> - это было "само собой напрашивающееся" расширение. 
  Смотрите раздел 
  <a href="#SEC101">Автоматические переменные</a>.

</li><li>

  Ссылка на переменную с заменой. 
  Смотрите раздел
  <a href="#SEC58">Обращение к переменным</a>.

</li><li>

  Опции командной строки <samp>`-b'</samp> и <samp>`-m'</samp>, 
  принимаются, но игнорируются (хотя в 
  <code>make</code> из System V они выполняют какие-то действия).

</li><li>

  Выполнение рекурсивных команд для запуска <code>make</code> 
  через
  переменную 
  <code>MAKE</code>, даже при наличии опций <samp>`-n'</samp>, <samp>`-q'</samp> или
  <samp>`-t'</samp>. Смотрите раздел 
  <a href="#SEC50">Рекурсивный вызов <code>make</code></a>.

</li><li>

  Поддержка суффикса <samp>`.a'</samp> в суффиксных правилах. 
  Смотрите раздел 
  <a href="#SEC113">Суффиксные правила для архивных файлов</a>. 
  В GNU <code>make</code> подобную возможность можно считать устаревшей,
  поскольку обычного шаблонного правила вполне достаточно: остальную работу
  берет на себя обобщенный механизм "цепочек" неявных правил
  (смотрите раздел <a href="#SEC97">"Цепочки" неявных правил</a>) и
  шаблонное правило для занесения элементов в архивы 
  (смотрите раздел 
  <a href="#SEC110">Неявные правила для целей - элементов архива</a>).

</li><li>

  "Оригинальный" вид команд (как они записаны в make-файле),
  включая расположение строк и комбинаций "<samp>\</samp>, перевод строки",
  при печати команд сохраняется (за исключением начальных пробелов).

</li></ul>

<p> Следующие возможности "навеяны" различными версиями
<code>make</code>. В некоторых случаях, мы затрудняемся сказать, откуда именно были
"позаимствованы" те или иные возможности. </p>


<ul>
<li>

  Шаблонные правила с использованием шаблонного символа <samp>`%'</samp>. 
    Это было реализовано в нескольких различных версиях
    <code>make</code>. Трудно сказать, кто именно является
    изобретателем подобной конструкции, однако, она распространилась
    довольно широко. 
    Смотрите раздел <a href="#SEC98">Определение и переопределение шаблонных 
    правил</a>.

</li><li>

  Связывание правил в цепочки и промежуточные файлы. 
  Это было реализовано Stu 
  Feldman в его версии <code>make</code> для AT&amp;T Eighth Edition 
  Research Unix, и, позднее,  Andrew Hume из AT&amp;T Bell Labs в его
  программе <code>mk</code> (он использовал термин "transitive closure"). 
  Мы затрудняемся сказать, была ли подобная возможность
  "позаимствована" нами из этих программ или же мы независимо "изобрели" ее сами.
  Смотрите раздел 
  <a href="#SEC97">"Цепочки" неявных правил</a>.

</li><li>

  Автоматическая переменная <code>$^</code>, содержащая список
  всех пререквизитов текущей цели.
    Мы не знаем, чье это "изобретение", но уж точно - не наше.
    Смотрите раздел <a href="#SEC101">Автоматические переменные</a>. 
    Автоматическая переменная <code>$+</code> является просто "расширением"
    <code>$^</code>.

</li><li>

  Опция "что, если" 
  (<samp>`-W'</samp> в GNU <code>make</code>) была 
  (насколько  
  нам известно) придумана Andrew Hume для программы <code>mk</code>. 
  Смотрите раздел <a href="#SEC88">Вместо исполнения команд</a>.

</li><li>

  Концепция одновременного выполнения нескольких команд
  (параллелизм) существует во многих версиях
  <code>make</code> и ей подобных программ. Однако, в реализациях
  <code>make</code> из 
  System V и BSD, такой возможности нет. Смотрите раздел 
  <a href="#SEC46">Исполнение команд</a>.

</li><li>

  модифицированный вариант ссылки на переменную 
  с возможностью замены, "пришел"
  из SunOS 4. 
  Смотрите раздел <a href="#SEC58">Обращение к переменным</a>. 
  До тех пор, пока этот альтернативный синтаксис не был поддержан
  в GNU 
  <code>make</code> (для обеспечения совместимости с SunOS 4), подобная 
  функциональность достигалась с использованием функции <code>patsubst</code>.
  Сложно сказать, что здесь явилось "первоисточником", поскольку функция
  <code>patsubst</code> существовала в GNU <code>make</code> еще
  до того, как была реализована система 
  SunOS 4.

</li><li>

  Специальное значение символа <samp>`+'</samp> 
  в начале строки,
  содержащей команды 
  (смотрите раздел <a href="#SEC88">Вместо исполнения команд</a>), 
  определено стандартом <cite>IEEE Standard 
  1003.2-1992</cite> (POSIX.2).


</li><li>

  Синтаксис оператора <samp>`+='</samp>, добавляющего значение к переменной,
  "позаимствован" из  <code>make</code> системы 
  SunOS 4. Смотрите раздел 
  <a href="#SEC65">Добавление текста к переменной</a>.

</li><li>

  Синтаксис <samp>`<var>архив</var>(<var>элемент1</var> 
  <var>элемент2</var>...)'</samp> для указания нескольких элементов 
  одного архивного файла,
  взят из <code>make</code>, входящей в  SunOS 4. Смотрите раздел 
  <a href="#SEC109">Использование элементов архива в качестве целей</a>.

</li><li>

  Директива <code>-include</code>, позволяющая подключать
   make-файлы с игнорированием несуществующих, была взята
   из 
    программы <code>make</code> операционной системы 
    SunOS 4.
    (Заметьте, однако, что SunOS 
  4 <code>make</code> не допускала перечисления
  нескольких файлов в одной директиве
  <code>-include</code>.) Аналогичная возможность (под именем
  <code>sinclude</code>) присутствует в версиях <code>make</code> от SGI и,
  возможно, других системах.  

</li></ul>

<p> Остальные возможности являются нововведениями GNU <code>make</code>: </p>

<ul>
<li>

  Использование опций <samp>`-v'</samp> и <samp>`--version'</samp> 
  для вывода
  информации о версии и авторских правах.

</li><li>
  Использование опций <samp>`-h'</samp> и <samp>`--help'</samp> 
  для вывода подсказки о воспринимаемых 
  программой <code>make</code> опциях.

</li><li>
  Упрощенно вычисляемые переменные. 
  Смотрите раздел
  <a href="#SEC59">Две разновидности переменных</a>.

</li><li>
  При рекурсивном использовании <code>make</code>, 
  определение переменной,
  производимое с помощью командной строки, автоматически передается в
  <code>make</code> "нижнего уровня" через переменную 
  <code>MAKE</code>. Смотрите раздел 
  <a href="#SEC50">Рекурсивный вызов 
  <code>make</code></a>.

</li><li>
  Использование опций <samp>`-C'</samp> и <samp>`--directory'</samp> 
  для
  смены рабочего каталога. 
  Смотрите раздел <a href="#SEC92">Обзор опций</a>.

</li><li>
  Определение многострочных переменных с помощью конструкции <code>define</code>. 
  Смотрите раздел
  <a href="#SEC67">Многострочные переменные</a>.
</li><li>
  Явное объявление абстрактных целей
  с использование специальной цели 
  <code>.PHONY</code>. 
  Подобная возможность (но с другим синтаксисом) была реализована также Andrew 
  Hume из AT&amp;T Bell Labs в его программе 
  <code>mk</code>. По-видимому, это может считаться примером независимого
  "параллельного" изобретения.
  Смотрите раздел 
  <a href="#SEC33">Абстрактные цели</a>.
</li><li>
  Манипуляции с текстом путем вызова функций. 
  Смотрите раздел 
  <a href="#SEC75">Функции преобразования текста</a>.
</li><li>
  Использование опций <samp>`-o'</samp> и <samp>`--old-file'</samp> 
  для имитации того, что время модификации файла является "старым".
  Смотрите раздел <a href="#SEC89">Предотвращение перекомпиляции некоторых файлов</a>.

</li><li>
  Условные конструкции. 
  Подобная возможность реализовывалась многократно
  в различных версиях 
  <code>make</code>; она, скорее, выглядит логичным расширением "в духе" 
  препроцессора языка Си и аналогичных макроязыков, нежели "революционной"
  концепцией.
  Смотрите раздел 
  <a href="#SEC71">Условные части make-файла</a>.

</li><li>
  Возможность задания путей поиска для подключаемых файлов.
  Смотрите раздел 
  <a href="#SEC15">Подключение других make-файлов</a>.

</li><li>
  Возможность указания дополнительных make-файлов 
  с помощью
  переменной среды. Смотрите раздел
  <a href="#SEC16">Переменная
  <code>MAKEFILES</code></a>.

</li><li>
  Удаление начальной последовательности <samp>`./'</samp> из имен файлов,
  дабы 
  <tt>`./<var>файл</var>'</tt> и <tt>`<var>файл</var>'</tt> рассматривались
  как один и тот же файл.
</li><li>
  Использование специального метода поиска для пререквизитов,
  которые являются библиотеками и записаны в форме
  <samp>`-l<var>имя</var>'</samp>. Смотрите раздел 
  <a href="#SEC32">Поиск в каталогах для подключаемых библиотек</a>.
</li><li>
  Суффиксы (для суффиксных правил) могут содержать произвольные символы 
  (смотрите раздел 
  <a href="#SEC106">Устаревшие суффиксные правила</a>). Во многих других версиях 
  <code>make</code>, суффиксы обязательно должны начинаться с <samp>`.'</samp> 
  и не должны содержать символов
  <samp>`/'</samp>.

</li><li>
  Отслеживание текущего "уровня вложенности" 
  при рекурсивном вызове
  <code>make</code>, с помощью переменной
  <code>MAKELEVEL</code>. Смотрите раздел 
  <a href="#SEC50">Рекурсивный вызов <code>make</code></a>.

</li><li>
  Занесение имен всех целей, заданных через командную строку,
  в переменную 
  <code>MAKECMDGOALS</code>. Смотрите раздел 
  <a href="#SEC87">Аргументы для задания главной цели</a>.

</li><li>
  Статические шаблонные правила. 
  Смотрите раздел <a href="#SEC39">Статические шаблонные правила</a>.

</li><li>
  "Выборочный" поиск с помощью директивы <code>vpath</code>. 
  Смотрите раздел 
  <a href="#SEC26">Поиск пререквизитов по каталогам</a>. 

</li><li>
  Вычисляемые имена переменных. 
  Смотрите раздел
  <a href="#SEC58">Обращение к переменным</a>. 

</li><li>
  Автоматическое обновление make-файлов. 
  Смотрите раздел <a href="#SEC17">Автоматическое обновление make-файлов</a>.
  Программа <code>make</code> из состава System V <code>make</code>,
  в сильно "усеченном" виде имела подобную функциональность (умела 
  обновлять make-файлы, получая их новые версии из системы 
  SCCS.

</li><li>
  Новые встроенные неявные правила. Смотрите раздел 
  <a href="#SEC95">Перечень имеющихся неявных правил</a>.

</li><li>
  Встроенная переменная <samp>`MAKE_VERSION'</samp>, содержащая 
  номер версии программы
  <code>make</code>. 
</li></ul>



<h1><a name="SEC115" href="#TOC115">Несовместимость и нереализованные функции</a></h1>
<p>
<a name="IDX914"></a>
<a name="IDX915"></a>
<a name="IDX916"></a>

</p>

<p> Не все возможности, имеющиеся в различных версиях <code>make</code>
реализованы в
GNU <code>make</code>. Однако, среди нет таких, которые требовались
бы стандартом POSIX.2 
(<cite>IEEE Standard 1003.2-1992</cite>). </p>

<ul>

<li>
  Цель, записанная как <samp>`<var>файл</var>((<var>имя_символа</var>))'</samp>,
  означает элемент архивного файла <var>файл</var>. Однако, будучи объектным файлом,
  элемент выбирается не
  по своему имени, а по наличию определенного внутри него символьного имени 
  <var>имя_символа</var>. 
  Мы не стали добавлять такую возможность в программу GNU <code>make</code>, 
  поскольку
  это потребовало бы от нее знания формата "внутреннего" представления таблицы
  символов, хранящейся внутри архивного файла, что противоречило бы 
  принципам модульности.
  Смотрите раздел <a href="#SEC111">Обновление каталога символов архивного файла</a>.

</li><li>
  Суффиксы 
  (используемые в суффиксных правилах), которые оканчиваются
  символом 
  <samp>`~'</samp>, имеют специальное значение в 
  <code>make</code> из System V; они ссылаются на 
  файл SCCS, соответствующий файлу, чьим именем является имя суффикса без
  конечного
  <samp>`~'</samp>. Так, например, суффиксное правило <samp>`.c~.o'</samp> 
  будет описывать процесс получения
  файлов <tt>`<var>n</var>.o'</tt> из SCCS-файлов
  <tt>`s.<var>n</var>.c'</tt>. Для полного охвата всех возможных случаев,
  потребуется целый набор подобных суффиксных правил.
  Смотрите раздел <a href="#SEC106">Устаревшие суффиксные правила</a>. 
  В GNU <code>make</code>, все подобные ситуации обрабатываются с помощью
  двух шаблонных правил для извлечения файлов из SCCS и "обобщенного"
  механизма связывания правил в цепочки.
  Смотрите раздел 
  <a href="#SEC97">"Цепочки" неявных правил</a>. 

</li><li>
  В <code>make</code> из System V, запись <samp>`$$@'</samp> 
  имеет
  достаточно странный смысл:
  в пререквизитах правила с несколькими целями, она
  означает конкретную цель, которая в данный момент обрабатывается.
  Такая возможность не предусмотрена в 
  GNU <code>make</code>, поскольку <samp>`$$'</samp> всегда означает просто
  <samp>`$'</samp>. Подобную функциональность можно получить с
  помощью статических шаблонных правил
  (смотрите раздел 
  <a href="#SEC39">Статические шаблонные правила</a>). 
  Например, правило для <code>make</code> из 
  System V: 

<pre>$(targets): $$@.o lib.a
</pre>

может быть заменено на статическое шаблонное правило для
GNU <code>make</code>: 


<pre>$(targets): %: %.o lib.a
</pre>

</li><li>
  В реализациях <code>make</code> для System V и BSD 4.3,
  файлы, найденные в процессе поиска по каталогам с использованием
  <code>VPATH</code> (смотрите раздел 
  <a href="#SEC26">Поиск пререквизитов по каталогам</a>),
  меняют свои имена внутри командных строк.
    Нам кажется, что намного проще всегда использовать 
    автоматические переменные, а подобную возможность считать
    "устаревшей".
</li><li>
  В реализациях <code>make</code> для некоторых вариантов
  Unix, автоматическая переменная <code>$*</code>,
  будучи указана в качестве пререквизита правила, получает весьма странное 
  значение, а именно - полное имя <em>цели данного правила</em>.
  Мы затрудняемся сказать, зачем это могло понадобиться разработчикам
  этих вариантов
  <code>make</code>; в действительности, это совершенно не согласуется с 
  "нормальным" определением 
  <code>$*</code>. 

<a name="IDX917"></a>

</li><li>
  В некоторых реализациях <code>make</code>, поиск неявных правил 
  (смотрите раздел <a href="#SEC93">Использование неявных правил</a>),
  по-видимому, производится для <em>всех</em> целей, а не только для
  тех, которые не имеют команд.
  Это, например, означает, что при наличии одного лишь правила: 

<pre>foo.o:
        cc -c foo.c
</pre>

    <code>make</code> "догадается" о зависимости файла <tt>`foo.o'</tt> от
  <tt>`foo.c'</tt>. Нам это кажется неправильным. Свойства пререквизитов в
  <code>make</code> определены достаточно хорошо (по крайней мере, в 
  GNU <code>make</code>), 
  а подобные вещи плохо "укладываются" в общую модель.
</li><li>
  GNU <code>make</code> не содержит встроенных неявных правил
  для компиляции или препроцессорной обработки 
  программ на языке
  EFL. Если мы узнаем, что кто-то использует этот язык,
  мы с удовольствием добавим нужные правила.

</li><li>
  По всей видимости, реализация <code>make</code> из системы
  SVR4 поддерживает суффиксные правила без команд, но рассматривает их
  как правила с пустыми командами 
  (смотрите раздел
  <a href="#SEC56">Пустые команды</a>). Так, например, правило: 


<pre>.c.a:
</pre>

"перекроет" встроенное суффиксное правило для <tt>`.c.a'</tt>. Нам кажется
    более "естественным", чтобы правила без команд просто добавляли к цели указанные 
    в них пререквизиты.
    Для получения аналогичного эффекта, приведенный выше пример для
    GNU <code>make</code> можно переписать так: 


<pre>.c.a: ;
</pre>

</li><li>
  Некоторые версии <code>make</code> всегда вызывают командный интерпретатор
  с опцией 
  <samp>`-e'</samp>, за исключением тех случаев, когда <code>make</code>
  была запущена с опцией <samp>`-k'</samp> (смотрите раздел 
  <a href="#SEC91">Проверка компиляции программы</a>). 
  Опция <samp>`-e'</samp> инструктирует командный интерпретатор завершать
  работу сразу же, как только любая из запущенных им программ вернет ненулевой код
  возврата.
  Нам кажется более естественным помещать каждую командную строку для оболочки на
  отдельную строку make-файла и не использовать такую специальную возможность.
</li></ul>



<h1><a name="SEC116" href="#TOC116">Принятые соглашения для make-файлов</a></h1>
<p>
<a name="IDX918"></a>
<a name="IDX919"></a>
<a name="IDX920"></a>

</p>


<p> В этом разделе описаны соглашения, принятые для make-файлов программ GNU.
Пакет Automake может помочь вам в создании make-файлов, следующих этим
соглашениям.
</p>



<h2><a name="SEC117" href="#TOC117">Общие соглашения для make-файлов</a></h2>

<p> Каждый make-файл должен содержать строку: </p>

<pre>SHELL = /bin/sh
</pre>

<p> во избежании проблем при работе в системах, где  переменная <code>SHELL</code> 
может быть "унаследована" из операционного окружения.
(Для GNU 
<code>make</code>, однако, это не составляет проблемы.) </p>

<p> Различные варианты программы <code>make</code> имеют разный набор суффиксов
и суффиксных правил - иногда это может
служить источником недоразумений и ошибок. 
Поэтому, "хорошей идеей" является явное задание списка суффиксов, содержащего
только те суффиксы, которые используются в данном
конкретном make-файле, например: </p>

<pre>.SUFFIXES:
.SUFFIXES: .c .o
</pre>

<p> Первая строка очищает используемый список суффиксов, вторая строка -
добавляет в него нужные суффиксы, используемые в данном
make-файле. </p>

<p> Не следует предполагать, что <tt>`.'</tt> находится в пути поиска
исполняемых команд. Когда вам нужно запустить программу, являющуюся частью
вашего пакета, используйте 
<tt>`./'</tt> если эта программа строится в ходе обработки make-файла или
<tt>`$(srcdir)/'</tt> если запускаемый файл является "неизменной" частью
и его можно отнести к исходному коду.
Если нет ни одного из этих префиксов, будет использован текущий
путь поиска. </p>

<p> Разница между <tt>`./'</tt> (директория, где происходит сборка проекта) и
<tt>`$(srcdir)/'</tt> (директория с <em>исходными текстами</em>) существенна,
поскольку пользователь может запустить компиляцию в отдельной директории,  
указав опцию 
<samp>`--srcdir'</samp> для
<tt>`configure'</tt>. Например, правило вида: </p>


<pre>foo.1 : foo.man sedscript
        sed -e sedscript foo.man &gt; foo.1
</pre>

<p>не будет работать, если сборка проекта происходит не в директории с исходными файлами,
поскольку файлы
<tt>`foo.man'</tt> и <tt>`sedscript'</tt> находятся именно там. </p>

<p> При использовании GNU <code>make</code>, можно полагаться на <samp>`VPATH'</samp>
при наличии единственного файла пререквизита, 
поскольку автоматическая переменная <samp>`$&lt;'</samp> укажет на исходный файл,
где бы он ни находился. (Многие версии <code>make</code> устанавливают
<samp>`$&lt;'</samp> только для неявных правил.) 
Таким образом, для корректной работы <samp>`VPATH'</samp>, 
вместо </p>

<pre>foo.o : bar.c
        $(CC) -I. -I$(srcdir) $(CFLAGS) -c bar.c -o foo.o
</pre>

<p>следует писать </p>

<pre>foo.o : bar.c
        $(CC) -I. -I$(srcdir) $(CFLAGS) -c $&lt; -o $@
</pre>

<p> При наличии нескольких пререквизитов, проще всего, явно указывать
префикс <samp>`$(srcdir)'</samp>.
Так, приведенный выше пример для <tt>`foo.1'</tt>, лучше всего 
записать следующим образом: </p>

<pre>foo.1 : foo.man sedscript
        sed -e $(srcdir)/sedscript $(srcdir)/foo.man &gt; $@
</pre>

<p> При использовании GNU <code>make</code>, можно полагаться на <samp>`VPATH'</samp>
при наличии единственного файла пререквизита, 
поскольку автоматическая переменная <samp>`$&lt;'</samp> укажет на исходный файл,
где бы он ни находился. (Многие версии <code>make</code> устанавливают
<samp>`$&lt;'</samp> только для неявных правил.) 
Таким образом, для корректной работы <samp>`VPATH'</samp>, 
вместо </p>

<pre>foo.o : bar.c
        $(CC) -I. -I$(srcdir) $(CFLAGS) -c bar.c -o foo.o
</pre>

<p>следует писать </p>

<pre>foo.o : bar.c
        $(CC) -I. -I$(srcdir) $(CFLAGS) -c $&lt; -o $@
</pre>

<p> При наличии нескольких пререквизитов, проще всего, явно указывать
префикс <samp>`$(srcdir)'</samp>.
Так, приведенный выше пример для <tt>`foo.1'</tt>, лучше всего 
записать следующим образом: </p>

<pre>foo.1 : foo.man sedscript
        sed -e $(srcdir)/sedscript $(srcdir)/foo.man &gt; $@
</pre>

<p> Пакеты GNU, обычно, содержат некоторые файлы,
не являющиеся исходными, например, файлы в формате 
Info, выходные файлы программ Autoconf, Automake, Bison или Flex.
Поскольку, как правило, эти файлы располагаются в директории с исходными текстами,
они и должны всегда располагаться там, а не 
в директории, где происходит сборка проекта.
Таким образом, правила make-файла, обновляющие эти файлы, должны помещать их
в директорию с исходными текстами. </p>

<p> Однако, если файл не входит в состав дистрибутива,
make-файле не должен помещать его в директорию с исходными текстами, поскольку,
в обычных условиях, процесс сборки не должен модифицировать 
каталог с исходными текстами.  </p>

<p> Желательно, также, попробовать добиться корректной работы make-файла
(по крайней мере, для целей сборки и инсталляции) при запуске
<code>make</code> в параллельном режиме. </p>



<h2><a name="SEC118" href="#TOC118">Использование утилит</a></h2>

<p> Команды, указываемые в make-файле (включая скрипты, 
такие как <code>configure</code>), следует писать
в рассчете на интерпретатор
<code>sh</code>, а не <code>csh</code>. 
Не используйте специфические возможности оболочек <code>ksh</code> или <code>bash</code>. </p>

<p> Скрипт <code>configure</code> и указанные в make-файле правила для
сборки и инсталляции не должны напрямую использовать никаких утилита, 
за исключением: </p>


<pre>cat cmp cp diff echo egrep expr false grep install-info
ln ls mkdir mv pwd rm rmdir sed sleep sort tar test touch true
</pre>

<p> В правиле <code>dist</code>, для компрессирования можно использовать
программу <code>gzip</code>. </p>

<p> Для этих программ следует пользоваться только "общепринятыми" опциями.
Например, не используйте
<samp>`mkdir -p'</samp>, поскольку эта опция поддерживается лишь в немногих
системах. </p>

<p> По возможности, следует избегать создания make-файлом символических связей,
поскольку в некоторых системах они не поддерживаются. </p>

<p> Для сборки и инсталляции, make-файл может пользоваться
компиляторами и другими необходимыми программами, однако, это следует делать 
через определенные в 
<code>make</code> переменные, дабы пользователь мог указать свою альтернативу.
Вот некоторые из программ, которые мы имели 
ввиду: </p>


<pre>ar bison cc flex install ld ldconfig lex
make makeinfo ranlib texi2dvi yacc
</pre>

<p> Для запуска этих программ следует использовать следующие переменные 
<code>make</code>: </p>

<pre>$(AR) $(BISON) $(CC) $(FLEX) $(INSTALL) $(LD) $(LDCONFIG) $(LEX)
$(MAKE) $(MAKEINFO) $(RANLIB) $(TEXI2DVI) $(YACC)
</pre>

<p> Если вы используете программы <code>ranlib</code> или <code>ldconfig</code>, убедитесь,
что не произойдет ничего плохо при отсутствии этих программ в системе.
Перед выполнением такой команды, выдайте сообщение для пользователя,
что отсутствие этих команд не является проблемой, а ошибку, которая может
возникнуть при попытке выполнения, проигнорируйте.
(Здесь, может помочь макрос <samp>`AC_PROG_RANLIB'</samp> программы
Autoconf.) </p>

<p> При использовании символических ссылок, вы должны предусмотреть 
"запасной вариант" для систем, где они не поддерживаются. </p>

<p> Вот список дополнительных утилит, которые можно использовать через
соответствующие переменные <code>make</code>: </p>
 

<pre>chgrp chmod chown mknod
</pre>

<p> Все прочие утилиты возможно использовать во фрагментах make-файлов (или скриптах),
используемых только для определенных систем, где эти утилиты действительно 
существуют. </p>



<h2><a name="SEC119" href="#TOC119">Переменные для имен команд</a></h2>

<p> Make-файлы должны предоставлять переменные, с помощью которых можно 
изменять определенные опции, команды и тому подобное. </p>

<p> В частности, большинство утилит нужно запускать
с помощью соответствующих переменных.
Так,
при использовании программы 
Bison, следует использовать переменную <code>BISON</code>, чье значение,
по умолчанию, устанавливается как
<samp>`BISON = bison'</samp>, и использовать переменную
<code>$(BISON)</code> при каждом запуске Bison. </p>

<p> Вызов утилит, манипулирующих с файлами (таких, как <code>ln</code>, <code>rm</code>, 
<code>mv</code> и им подобных), может производится без использования переменных,
поскольку пользователям нет необходимости заменять эти утилиты другими 
программами. </p>

<p> Для каждой переменной, содержащая имя программы, должна иметься соответствующая
переменная для хранения опций, которые будут передаваться
этой программе.
Для получения имени этой переменной, добавьте <samp>`FLAGS'</samp> к имени
перенной, ссылающейся на соответствующую программу. Так, например,
опции для 
<code>BISON</code> должны храниться в переменной
<code>BISONFLAGS</code>.
(Имена <code>CFLAGS</code> для компилятора Си,
<code>YFLAGS</code> для программы yacc и <code>LFLAGS</code> для lex, являются
исключениями, используемыми только в силу их "стандартности".)
Используйте 
<code>CPPFLAGS</code> для любых команд, использующих препроцессор
и переменную
<code>LDFLAGS</code> во всех командах, производящих компоновку или компиляцию
с последующей компоновкой. </p>

<p> Если имеются какие-то опции компилятора Си, которые <em>должны</em> быть
использованы для правильной компиляции определенных файлов, не следует
включать их в 
<code>CFLAGS</code>. Пользователи вправе ожидать, что они самостоятельно
могут указать любое желаемое значение
<code>CFLAGS</code>. Вместо этого, передавайте необходимые опции "в обход"
<code>CFLAGS</code>, например, "прямо" указывая их в команде компиляции или
используя какую-нибудь другую переменную, наподобие: </p>


<pre>CFLAGS = -g
ALL_CFLAGS = -I. $(CFLAGS)
.c.o:
        $(CC) -c $(CPPFLAGS) $(ALL_CFLAGS) $&lt;
</pre>

<p> Напротив, опцию <samp>`-g'</samp> вполне можно включить в <code>CFLAGS</code>, 
поскольку она 
<em>не требуется</em> для успешной компиляции. Ее можно рассматривать как значение 
по умолчанию, которое лишь рекомендуется.
Если, по умолчанию, предполагается, что пакет будет компилироваться с помощью 
компилятора 
GCC, в начальное значение <code>CFLAGS</code> можно также включить опцию 
<samp>`-O'</samp>. </p>

<p> Помещайте ссылку на <code>CFLAGS</code> в конец строки с командой компиляции,
после других переменных, содержащих опции компиляции, дабы пользователь
мог использовать 
<code>CFLAGS</code> для "перекрытия" этих опций. </p>

<p> Переменная <code>CFLAGS</code> должна использоваться при любом вызове компилятора
Си (как для компиляции, так и для компоновки). </p>

<p> Каждый make-файл должен определять переменную <code>INSTALL</code>, 
которая является базовой командой для инсталляции файлов в систему. </p>

<p> Каждый make-файл должен определять переменные <code>INSTALL_PROGRAM</code> 
и <code>INSTALL_DATA</code>. (По умолчанию, они должны иметь значение
<code>$(INSTALL)</code>.) Далее, эти переменные должны использоваться
для инсталляции, соответственно, 
исполняемых и неисполняемых файлов.
Эти переменные используются примерно таким 
способом: </p>

<pre>$(INSTALL_PROGRAM) foo $(bindir)/foo
$(INSTALL_DATA) libfoo.a $(libdir)/libfoo.a
</pre>

<p>
К имени целевого файла вы можете, дополнительно, добавить
значение переменной <code>DESTDIR</code>.
Сделав это, вы дадите возможность инсталлятору получить "слепок" инсталляции, который,
в дальнейшем, может быть использован для реальной инсталляции в систему.
Не пытайтесь установить значение 
<code>DESTDIR</code> самостоятельно, из своего make-файла.
С поддержкой <code>DESTDIR</code>, приведенный выше пример можно переписать так:
</p>

<pre>$(INSTALL_PROGRAM) foo $(DESTDIR)$(bindir)/foo
$(INSTALL_DATA) libfoo.a $(DESTDIR)$(libdir)/libfoo.a
</pre>

<p> Никогда не используйте имя каталога в качестве второго аргумента 
команды инсталляции - используйте имя конкретного файла.
Используйте отдельную команду для
каждого инсталлируемого файла. </p>



<h2><a name="SEC120" href="#TOC120">Переменные для имен каталогов инсталляции</a></h2>

<p> Каталоги, куда происходит инсталляция всегда должны именоваться с
использованием переменных, дабы пакет легко мог быть установлен в
"нестандартное" место.
Ниже приведены стандартные имена
для таких переменных. 
Они базируются на "общепринятой" (в Unix) структуре файловой системы;
ее варианты используются в
SVR4, 4.4BSD, Linux, Ultrix v4 и других современных операционных системах. </p>

<p> Следующие две переменные определяют корневые каталоги для
всего процесса инсталляции. Все прочие каталоги, куда будет происходить
инсталляция, должны быть подкаталогами одного из них. 
Процесс инсталляции не должен помещать каких-либо файлов непосредственно в эти 
корневые каталоги. </p>

<dl compact="compact">

<dt><samp>`prefix'</samp>
</dt><dd>
  Префикс, используемый для конструирования
  значений по умолчанию для перечисленных ниже
  переменных.
  По умолчанию, значением <code>prefix</code> должно быть
  <tt>`/usr/local'</tt>. При построении полной GNU-системы "с нуля", этот
  префикс будет содержать пустое значение, а 
  <tt>`/usr'</tt> будет символической ссылкой на <tt>`/'</tt>. 
  (При использовании
  Autoconf, записывается как <samp>`@prefix@'</samp>.)

Запуск <samp>`make install'</samp> со значением <code>prefix</code>,
отличным от того, который использовался для сборки пакета,  
<var>не</var> должен приводить к перекомпиляции этого пакета.

</dd><dt><samp>`exec_prefix'</samp>
</dt><dd>
  Префикс, используемый при конструировании значений по умолчанию для
  некоторых из перечисленных ниже переменных.
  По умолчанию, значением <code>exec_prefix</code> должно быть
  <code>$(prefix)</code>. (При использовании Autoconf, записывается как
  <samp>`@exec_prefix@'</samp>.) В основном, <code>$(exec_prefix)</code> 
  используется для каталогов, содержащих машинно-зависимые файлы
  (например, исполняемые файлы и файлы библиотек), в то время как
  для остальных каталогов
  используется <code>$(prefix)</code>.  

Запуск <samp>`make install'</samp> со значением <code>exec_prefix</code>,
отличным от того, который использовался для сборки пакета,  
<var>не</var> должен приводить к перекомпиляции этого пакета.
</dd></dl>

<p> Исполняемые файлы должны инсталлироваться в одну из
следующих директорий. </p>

<dl compact="compact">

<dt><samp>`bindir'</samp>
</dt><dd>
  Каталог для инсталляции исполняемых программ, 
  которые могут быть
  запущены пользователем.
  Обычно, это 
  <tt>`/usr/local/bin'</tt>, но вам следует использовать запись
  <tt>`$(exec_prefix)/bin'</tt>. (При использовании Autoconf, пишется 
  как <samp>`@bindir@'</samp>.)


</dd><dt><samp>`sbindir'</samp>
</dt><dd>
  Каталог для инсталляции исполняемых программ, которые могут быть запущены
  из командного интерпретатора, но полезны, в основном, только для 
  администраторов системы. 
  Обычно, это директория
  <tt>`/usr/local/sbin'</tt>, но вам следует использовать запись
  <tt>`$(exec_prefix)/sbin'</tt>. (При использовании Autoconf, пишется как
  <samp>`@sbindir@'</samp>.)

</dd><dt><samp>`libexecdir'</samp>
</dt><dd>
  Каталог для инсталляции исполняемых программ, которые запускаются не
  пользователями, а другими программами.
  Обычно, это каталог
  <tt>`/usr/local/libexec'</tt>, но вам следует использовать запись
  <tt>`$(exec_prefix)/libexec'</tt>. (При использовании Autoconf, записывается как
  <samp>`@libexecdir@'</samp>.)  

</dd></dl>

<p> Файлы данных, используемые программами, можно классифицировать двумя различными
способами. </p>

<ul>
<li>
  В ходе "обычной" работы пакета, некоторые файлы могут модифицироваться,
  другие же никогда не модифицируются
  (хотя некоторые из них и могут редактироваться пользователем).

</li><li>
  Одни файлы являются архитектурно-независимыми 
  и
  могут использоваться на любых машинах; другие файлы являются архитектурно-зависимыми
  и могут использоваться только на машинах одной архитектуры; третьи файлы
  могут являться специфичными для конкретной машины.
</li></ul>

<p> Таким образом, получается шесть возможных случаев.
Однако, мы не рекомендуем вам использовать каких-либо архитектурно-зависимых
файлов кроме объектных и библиотечных файлов.
Все прочие файлы данных, лучше всего, сохранять
архитектурно-независимыми и это, в общем, не так уж и сложно. </p>

<p> Вот список переменных, которые должны использоваться в make-файлах 
для задания каталогов: </p>

<dl compact="compact">

<dt><samp>`datadir'</samp>
</dt><dd>
  Директория, куда инсталлируются файлы данных, используемые только 
  для чтения и независимые от архитектуры.
  Обычно, это каталог <tt>`/usr/local/share'</tt>, но вы должны
  использовать запись <tt>`$(prefix)/share'</tt>. (При использовании Autoconf, 
  записывается как
  <samp>`@datadir@'</samp>.) Ниже рассматривается специальное исключение -
  каталоги <tt>`$(infodir)'</tt> 
  и <tt>`$(includedir)'</tt>.

</dd><dt><samp>`sysconfdir'</samp>
</dt><dd>
  Каталог, куда инсталлируются файлы с неизменяемыми данных, 
  относящиеся только к конкретной машине (грубо говоря, файлы конфигурации 
  хоста). Примерами могут служить конфигурационные файлы почтовой программы и
  сетевой поддержки, <tt>`/etc/passwd'</tt> и тому подобное.
  Все файлы, помещаемые в эту директорию, должны быть обычными текстовыми
  ASCII файлами. Как правило, это каталог
  <tt>`/usr/local/etc'</tt>, но вам следует использовать запись 
  <tt>`$(prefix)/etc'</tt>. (При использовании Autoconf, пишется как
  <samp>`@sysconfdir@'</samp>.) Не помещайте в эту директорию исполняемых 
  файлов 
  (их, скорее всего, следует поместить в <tt>`$(libexecdir)'</tt> или 
  <tt>`$(sbindir)'</tt>). Также, не помещайте в этот каталог файлов, которые
  модифицируются в ходе "обычной" работы
  (разумеется, мы не рассматриваем случаи использования программ, 
  предназначенных для изменения конфигурационных файлов).
  Изменяемые файлы следует помещать
  в 
  <tt>`$(localstatedir)'</tt>.

</dd><dt><samp>`sharedstatedir'</samp>
</dt><dd>
  Каталог для инсталляции архитектурно-независимых 
  файлов данных, которые модифицируются в ходе работы пакета.
  Обычно, это будет
  <tt>`/usr/local/com'</tt>, но вам следует использовать запись 
  <tt>`$(prefix)/com'</tt>. (При использовании 
  Autoconf, пишется как <samp>`@sharedstatedir@'</samp>.)


</dd><dt><samp>`localstatedir'</samp>
</dt><dd>
  Каталог для инсталляции файлов с модифицируемыми данными, относящимися
  к конкретной машине.
  У пользователей не должно возникать необходимости в модификации 
  файлов из этого каталога для конфигурирования пакета; информацию 
  о конфигурации следует помещать в отдельные файлы, расположенные
  в каталогах 
  <tt>`$(datadir)'</tt> 
  или <tt>`$(sysconfdir)'</tt>. Переменная <tt>`$(localstatedir)'</tt> обычно будет
  содержать значение
  <tt>`/usr/local/var'</tt>, но вам следует использовать запись <tt>`$(prefix)/var'</tt>. 
  (При использовании
  Autoconf, записывается как <samp>`@localstatedir@'</samp>.)


</dd><dt><samp>`libdir'</samp>
</dt><dd>
  Каталог для размещения объектных файлов и
  библиотек объектных файлов.
  Не помещайте сюда исполняемые файлы - инсталлируйте их в
  директорию 
  <tt>`$(libexecdir)'</tt>. Как правило, значением <code>libdir</code> будет
  <tt>`/usr/local/lib'</tt>, но вам следует использовать запись
  <tt>`$(exec_prefix)/lib'</tt>. (При использовании Autoconf, пишется как
  <samp>`@libdir@'</samp>.)

</dd><dt><samp>`infodir'</samp>
</dt><dd>
  Каталог, куда будут помещаться Info файлы вашего пакета. По умолчанию,
  это будет 
  <tt>`/usr/local/info'</tt>, но вам следует использовать запись
  <tt>`$(prefix)/info'</tt>. (При использовании Autoconf, записывается как
  <samp>`@infodir@'</samp>.)


</dd><dt><samp>`lispdir'</samp>
</dt><dd>
  Директория, куда помещаются все Lisp-файлы для редактора Emacs,
  входящие в состав вашего пакета. Как правило, это
  <tt>`/usr/local/share/emacs/site-lisp'</tt>, но вам следует 
  использовать запись
  <tt>`$(prefix)/share/emacs/site-lisp'</tt>. При использовании
  Autoconf, это записывается как <samp>`@lispdir@'</samp>. Для того, чтобы
  запись
  <samp>`@lispdir@'</samp> сработала, в вашем
  <tt>`configure.in'</tt> должна быть следующая 
  строка: 


<pre>lispdir='${datadir}/emacs/site-lisp'
AC_SUBST(lispdir)
</pre>

</dd><dt><samp>`includedir'</samp>
</dt><dd>
  Каталог, куда будут помещаться заголовочные файлы,
  предназначенные для включения в пользовательские программы с помощью
  директивы
  <samp>`#include'</samp> препроцессора Си. Обычно, это
  каталог <tt>`/usr/local/include'</tt>, но вам следует использовать запись
  <tt>`$(prefix)/include'</tt>. (При использовании Autoconf, записывается как
  <samp>`@includedir@'</samp>.) Кроме GCC, большинство других компиляторов
  не выполняют поиск заголовочных файлов в каталоге
  <tt>`/usr/local/include'</tt>, так что помещение их в данный каталог имеет
  смысл только при использовании компилятора
  GCC. Зачастую, это не является проблемой, поскольку многие библиотеки
  ориентированы на работу только с 
  GCC. Однако, некоторые библиотеки могут работать и с другими компиляторами,
  поэтому их заголовочные файлы следует помещать сразу в два места - 
  каталоги <code>includedir</code> и 
  <code>oldincludedir</code>.


</dd><dt><samp>`oldincludedir'</samp>
</dt><dd>
  Каталог для заголовочных файлов <samp>`#include'</samp>, предназначенных 
  для компиляторов, отличных от 
  GCC. Обычно, это каталог
  <tt>`/usr/include'</tt>. (При использовании Autoconf, записывается как
  <samp>`@oldincludedir@'</samp>.) Указанные в make-файле команды инсталляции
  должны проверять значение
  <code>oldincludedir</code>. Если это значение пусто, процесс инсталляции не 
  должен пытаться его использовать, а должен отменить "вторую" инсталляцию 
  заголовочных файлов. 
  Пакет не должен замещать заголовочных файлов, находящихся в этой
  директории, если только они не взяты из этого же пакета.
  Так, если в пакете Foo имеется заголовочный файл
  <tt>`foo.h'</tt>, то при инсталляции он должен помещаться в каталог
  <code>oldincludedir</code> только если (1) там нет файла
  <tt>`foo.h'</tt> или (2) файл <tt>`foo.h'</tt> 
  существует и был ранее установлен пакетом 
  Foo. Для проверки того, что <tt>`foo.h'</tt> был установлен именно 
  пакетом Foo, поместите в этот файл (как часть комментария) строку с 
  определенной сигнатурой, по которой файл можно будет "опознать" с помощью  
  программы <code>grep</code>.

</dd></dl>

<p> Файлы помощи в стиле Unix (man-страницы, man pages) должны 
размещаться в одном из следующих каталогов: </p>

<dl compact="compact">

<dt><samp>`mandir'</samp>
</dt><dd>
  Корневая директория для размещения файлов помощи (если такие
  имеются) 
  вашего пакета.
  Обычно, это будет <tt>`/usr/local/man'</tt>, но вам следует 
  использовать запись
  it as <tt>`$(prefix)/man'</tt>. (При использовании Autoconf, записывается
  как <samp>`@mandir@'</samp>.)


</dd><dt><samp>`man1dir'</samp>
</dt><dd>
  Каталог для установки man-страниц, относящихся к разделу 1. Следует
  записывать как
  <tt>`$(mandir)/man1'</tt>.

</dd><dt><samp>`man2dir'</samp>
</dt><dd>
  Директория для man-страниц, относящихся к разделу 2. Следует
  записывать как
  <tt>`$(mandir)/man2'</tt>

</dd><dt><samp>`...'</samp>
</dt><dd>
  <strong>    Не используйте формат man-страничек как основной формат документации
  для программ GNU. 
  Пишите документацию в формате Texinfo. Man-странички пригодны только для людей,
  использующих программы 
  GNU в Unix-подобных операционных системах.
  </strong>


</dd><dt><samp>`manext'</samp>
</dt><dd>
  Расширение имени файла для инсталлируемых man-страничек.
  Оно должно начинаться с точки за которой следует соответствующая
  цифра; 
  обычно, это будет
  <samp>`.1'</samp>.


</dd><dt><samp>`man1ext'</samp>
</dt><dd>
  Расширение имени файла для инсталляции man-страничек, относящихся к секции 1.

</dd><dt><samp>`man2ext'</samp>
</dt><dd>
  Расширение имени файла для инсталляции man-страничек, относящихся к секции 2.

</dd><dt><samp>`...'</samp>
</dt><dd>
  Используйте эти имена вместо <samp>`manext'</samp>, если 
  пакет нуждается в инсталляции man-страничек, относящихся
  к нескольким секциям. 
  
</dd></dl>

<p> И, наконец, вы должны установить следующую переменную: </p>

<dl compact="compact">

<dt><samp>`srcdir'</samp>
</dt><dd>
  Каталог с исходными файлами компилируемого пакета.
  Значение этой переменной, обычно, устанавливается
  скриптом <code>configure</code>. 
  (При использовании
  Autconf, используйте запись <samp>`srcdir = @srcdir@'</samp>.)  

</dd></dl>

<p> Пример: </p>

<pre># Общий префикс для инсталляционных каталогов.
# Примечание: Этот каталог должен существовать еще до начала инсталляции.
prefix = /usr/local
exec_prefix = $(prefix)
# Сюда будет помещаться исполняемый файл команды `gcc'.
bindir = $(exec_prefix)/bin
# Сюда будут помещаться каталоги, используемые компилятором.
libexecdir = $(exec_prefix)/libexec
# Сюда будут помещаться Info-файлы.
infodir = $(prefix)/info
</pre>

<p> Если ваша программа устанавливает большое количество файлов
в один из "стандартных" каталогов, определенных пользователем,
можно сгруппировать их в отдельный подкаталог, относящийся
к данному пакету.
Такие подкаталоги должны создаваться правилом
<code>install</code>. </p>

<p> Не следует ожидать, что устанавливаемые пользователем значения указанных
выше переменных, будут содержать имена конкретных подкаталогов (соответствующих 
данному пакету).
Смысл наличия "унифицированного" набора имен переменных состоит в том,
чтобы пользователь мог задать одинаковые значения для нескольких 
разных пакетов 
GNU-программ. Пакеты должны быть спроектированы таким образом,
чтобы правильно использовать задаваемые пользователем 
значения. </p>



<h2><a name="SEC121" href="#TOC121">Стандартные имена целей для пользователей</a></h2>

<p> Все GNU-программы должны иметь в своем make-файле 
следующие цели: </p>

<dl compact="compact">

<dt><samp>`all'</samp>
</dt><dd>
  Компиляция всей программы. По умолчанию, именно эта цель должна 
  являться главной целью.
  Эта цель не должна пересобирать файлы документации;
  Info-файлы должны иметься в составе дистрибутива, а
  файлы DVI должны создаваться только по специальному запросу.
  По умолчанию, компиляция и компоновка должна выполняться с опцией
  <samp>`-g'</samp>, дабы исполняемые файлы имели отладочную информацию.
  Пользователи, которые не бояться оказаться в трудной ситуации, могут,
  при желании, потом убрать эту отладочную информацию.


</dd><dt><samp>`install'</samp>
</dt><dd>
  Компиляция программы и копирование исполняемых файлов,
  файлов библиотек и прочих файлов в те места, где они должны, в действительности,
  располагаться в системе. 
  При наличии какого-нибудь простого теста, проверяющего правильность
  инсталляции пакета, такой тест должен запускаться.
  Не убирайте отладочную информацию из исполняемых файлов во время 
  их инсталляции. Озабоченные наличием такой информации пользователи,
  могут использовать <code>install-strip</code>. Будучи запущенной
  сразу после <samp>`make all'</samp>, 
  <code>install</code>, по возможности, не должна ничего модифицировать в 
  каталоге, где собиралась программа. 
  Дело в том, что сборка программного пакета и его инсталляция очень
  часто выполняются под разными именами пользователей.
  Если каталогов, куда инсталлируются файлы пакета, не существует, они должны
  создаваться (в том числе и каталоги, указанные в  
  <code>prefix</code> и <code>exec_prefix</code>).
  Для этого можно использовать правило 
  <code>installdirs</code> (описано ниже). Используйте <samp>`-'</samp> 
  во всех командах, инсталлирующих man-странички, дабы
  игнорировать любые ошибки, которые могут
  возникать в системах, не имеющих документации в формате
  man-страничек.
  Файлы Info инсталлируются путем копирования их в
  каталог <tt>`$(infodir)'</tt> при помощи <code>$(INSTALL_DATA)</code> 
  (смотрите раздел <a href="#SEC119">Переменные для имен команд</a>), 
  с последующим запуском <code>install-info</code> 
  (если эта программа задана).
  Переменная <code>install-info</code> содержит имя программы, которая редактирует
  файл <tt>`dir'</tt> (каталог Info-файлов), добавляя или обновляя 
  записи об инсталлированных Info-файлах;
  эта программа является частью пакета Texinfo. Вот пример правила для
  инсталляции Info-файла: 


<pre>$(DESTDIR)$(infodir)/foo.info: foo.info
        $(POST_INSTALL)
# В каталоге . может находится более новая версия info-файла, чем в srcdir.
        -if test -f foo.info; then d=.; \
         else d=$(srcdir); fi; \
        $(INSTALL_DATA) $$d/foo.info $(DESTDIR)$@; \
# Запускаем install-info только при его наличии.
# Используем `if' вместо начального `-' 
# чтобы не пропустить ошибку, которую может вернуть install-info.
# Мы используем `$(SHELL) -c', поскольку некоторые оболочки
# завершаются не вполне корректно, встретив неизвестную команду.
        if $(SHELL) -c 'install-info --version' \
           &gt;/dev/null 2&gt;&amp;1; then \
          install-info --dir-file=$(DESTDIR)$(infodir)/dir \
                       $(DESTDIR)$(infodir)/foo.info; \
        else true; fi
</pre>

    При описании цели <code>install</code>, вы должны отнести все ее
    команды к одной из трех категорий:
    обычные (normal), команды <strong>пред-инсталляции (pre-installation)</strong> 
    и команды <strong>пост-инсталляции (post-installation)</strong>. Смотрите раздел 
    <a href="#SEC122">"Категории" команд инсталляции</a>.


</dd><dt><samp>`uninstall'</samp>
</dt><dd>
  Удалить все инсталлированные файлы - копии файлов, созданные при
  выполнении <samp>`install'</samp>.
  Это правило не должно модифицировать каталоги, где осуществлялась сборка
  пакета - можно модифицировать только каталоги с инсталлированными
  файлами.
  Команды деинсталляции также, как и команды инсталляции, делятся
  на три категории.
  Смотрите раздел <a href="#SEC122">"Категории" команд инсталляции</a>.


</dd><dt><samp>`install-strip'</samp>
</dt><dd>
  Аналогично <code>install</code>, но в процессе инсталляции из исполняемых
  файлов удаляется отладочная информация.
  Во многих случаях, определение этой цели может быть очень 
  простым: 


<pre>install-strip:
        $(MAKE) INSTALL_PROGRAM='$(INSTALL_PROGRAM) -s' \
                install
</pre>

Обычно, мы не рекомендуем удалять из исполняемых файлов отладочную информацию,
    если только вы не уверены, что программа не содержит ошибок.
    Однако, вполне разумно инсталлировать исполняемые файлы без отладочной информации,
    сохранив где-нибудь (на случай ошибки) их "оригинальные" версии с отладочной информацией.


</dd><dt><samp>`clean'</samp>
</dt><dd>
  Удалить из текущей директории все файлы, созданные
  в ходе сборки программы.
  Файлы с конфигурацией, при этом, удаляться не должны.
  Не должны также удаляться файлы, которые, хотя и могут быть
  созданы заново, но, как правило,
  не создаются, так как имеются в пакете уже в "готовом виде".
  Напротив, файлы <tt>`.dvi'</tt> следует удалить, если только они не в входят
  в дистрибутив пакета.


</dd><dt><samp>`distclean'</samp>
</dt><dd>
  Удаляет все файлы из текущей директории, созданные в процессе 
  конфигурировании или сборки пакета.  
  Если вы распаковали исходные файлы и собрали программу, не
  создавая никаких дополнительных файлов,
  после команды <samp>`make distclean'</samp>,
  в каталоге должны остаться только файлы, входящие в исходный
  дистрибутив пакета.


</dd><dt><samp>`mostlyclean'</samp>
</dt><dd>
  Подобно <samp>`clean'</samp>, но может воздержаться
  от удаления некоторых файлов, которые, обычно, "нежелательно" 
  перекомпилировать. 
  Так, например,
  <samp>`mostlyclean'</samp> для компилятора GCC не удаляет файл
  <tt>`libgcc.a'</tt>, 
  поскольку необходимость в его перекомпиляции возникает
  редко, а занимает она много времени.


</dd><dt><samp>`maintainer-clean'</samp>
</dt><dd>
  Удаляет из текущей директории практически все, что может
  быть построено с помощью make-файла.
  В этот список, обычно, входят все файлы, удаляемые с помощью 
  <code>distclean</code>, а также: Си-программы, полученные с помощью
  Bison, таблицы тегов,
  Info-файлы и тому подобное. Мы сказали "практически все", потому
  что команда
  <samp>`make maintainer-clean'</samp> не должна удалять скрипт
  <tt>`configure'</tt>, даже если если для него имеется правило 
  в make-файле, с помощью которого <tt>`configure'</tt> может быть создан заново. 
  В общем, команда <samp>`make maintainer-clean'</samp> не должна удалять ничего,
  что необходимо для запуска <tt>`configure'</tt> и последующей 
  сборки пакет.
  Это и является единственным исключением;
  все остальные файлы, которые могут быть построены заново,
  команда <code>maintainer-clean</code> должна удалять.
  Предполагается, что <samp>`maintainer-clean'</samp> будет использоваться
  только лицом, сопровождающим данный пакет, а не обычными пользователями.
  Вполне возможно, что для получения некоторых файлов,
  удаленных при помощи 
  <samp>`make maintainer-clean'</samp>, могут потребоваться какие-то специальные
  программы, не включенные в состав дистрибутива.  
  Поскольку, все нужные для сборки пакета файлы входят в дистрибутив, нам
  нет смысла беспокоиться о том, насколько прост процесс их создания.
  Так что, если после команды <samp>`make maintainer-clean'</samp> окажется,
  что для сборки пакета вам придется заново распаковывать дистрибутив - не жалуйтесь.
  Для того, чтобы предупредить пользователя о возможных проблемах,
  правило для цели
  <code>maintainer-clean</code> должно начинаться следующими
  командами:


<pre>@echo 'This command is intended for maintainers to use; it'
@echo 'deletes files that may need special tools to rebuild.'
</pre>

    ('Эта команда предназначена для использования только лицом, 
    сопровождающим данный пакет; она удаляет некоторые файлы, для создания
    которых требуются специальные программы.')

</dd><dt><samp>`TAGS'</samp>
</dt><dd>
  Обновляет таблицу тегов (tags table) для программы.

</dd><dt><samp>`info'</samp>
</dt><dd>
  Сгенерировать все необходимые Info-файлы. 
  Один из лучших способов определить подобное правило - использовать
  запись,
  наподобие: 


<pre>info: foo.info

foo.info: foo.texi chap1.texi chap2.texi
        $(MAKEINFO) $(srcdir)/foo.texi
</pre>

В make-файле вы должны определить переменную <code>MAKEINFO</code>. 
    Она должна запускать 
    программу <code>makeinfo</code>, входящую в состав пакета Texinfo. 
    Как правило, пакеты программ GNU имеют в своем дистрибутиве
    все необходимые Info-файлы, а это означает, что Info-файлы
    находятся в каталоге с исходными файлами. 
    Таким образом, команды, обновляющие info-файлы,
    должны обновлять их в директории с исходными файлами.
    Обычно, при сборке пользователем пакета программ, обновления
    Info-файлов не происходит, поскольку в дистрибутиве они находятся в
    "готовом виде" и не нуждаются в обновлении.


</dd><dt><samp>`dvi'</samp>
</dt><dd>
  Сгенерировать DVI-файлы для всей документации в 
  формате Texinfo. Например: 


<pre>dvi: foo.dvi

foo.dvi: foo.texi chap1.texi chap2.texi
        $(TEXI2DVI) $(srcdir)/foo.texi
</pre>

В make-файле вы должны определить переменную <code>TEXI2DVI</code>.
    Она должна запускать программу
    <code>texi2dvi</code>, которая входит в состав пакета Texinfo.
    <a name="DOCF3" href="#FOOT3">(3)</a> 
    Как альтернатива, в правиле можно перечислить только пререквизиты,
    предоставив GNU <code>make</code> возможность самостоятельно
    выполнить нужные команды.

</dd><dt><samp>`dist'</samp>
</dt><dd>
  Создать дистрибутивный tar-файл для этой программы. 
  Tar-файл должен быть построен таким образом, чтобы имена содержащихся
  в нем файлов начинались с имени каталога, отражающим название пакета,
  для которого предназначается данный дистрибутив.
  Это имя
  может включать в себя номер версии пакета.
  Например, дистрибутивный tar-файл компилятора GCC 
  версии 1.40 распаковывается в подкаталог с именем <tt>`gcc-1.40'</tt>. 
  Проще всего это сделать, создав подкаталог с нужным именем и поместить 
  туда нужные файлы с помощью
  <code>ln</code> или <code>cp</code>. Далее, для этого каталога надо выполнить
  команду 
  <code>tar</code> и сжать полученный архивный файл программой
  <code>gzip</code>. Например, дистрибутивный файл для GCC версии
  1.40 называется <tt>`gcc-1.40.tar.gz'</tt>. Цель <code>dist</code> 
  должна иметь явные зависимости от всех файлов, которые не являются исходными,
  но, вместе с тем, должны входить в дистрибутив. В этом случае, будет 
  уверенность, что все такие файлы имеют самую свежую версию и 
  попадут в состав дистрибутива.
  Смотрите раздел `Making 
  Releases' документа <cite>GNU Coding Standards</cite>.


</dd><dt><samp>`check'</samp>
</dt><dd>
  Выполнить самотестирование программы (если оно предусмотрено).
  Перед запуском тестов, пользователь должен осуществить сборку программы, но
  не обязан ее инсталлировать; вы должны писать тесты таким
  образом, чтобы для своей работы они не требовали инсталляции проверяемого
  пакета. 
</dd></dl>

<p> Там, где это уместно, рекомендуется использовать цели
со следующими именами: </p>

<dl compact="compact">

<dt><code>installcheck</code>
</dt><dd>
  Проверить правильность инсталляции (если подобный тест предусмотрен). 
  Перед запуском теста, пользователь должен собрать и инсталлировать
  пакет. 
  Не следует предполагать, что каталог
  <tt>`$(bindir)'</tt> находится в пути поиска.


</dd><dt><code>installdirs</code>
</dt><dd>
  В make-файле полезно иметь цель <samp>`installdirs'</samp>, создающую
  все каталоги (включая и родительские), которые используются для инсталляции 
  файлов пакета.
  В составе пакета Texinfo имеется скрипт 
  <tt>`mkinstalldirs'</tt>, который удобно использовать для
  подобной цели.
  Используя этот скрипт,
  соответствующее правило можно записать 
  так: 

<pre># Убедиться в том, что все требуемые для инсталляции каталоги (например, $(bindir)) 
# действительно существуют и, при необходимости, создать их.
installdirs: mkinstalldirs
        $(srcdir)/mkinstalldirs $(bindir) $(datadir) \
                                $(libdir) $(infodir) \
                                $(mandir)
</pre>

Подобное правило не должно модифицировать каталогов,
    где осуществлялась сборка пакета.
    Это правило не должно делать ничего, кроме создания
    каталогов для инсталляции.  

</dd></dl>



<h2><a name="SEC122" href="#TOC122">"Категории" команд инсталляции</a></h2>

<p>
<a name="IDX921"></a>
<a name="IDX922"></a>

    При описании цели <code>install</code>,
вы должны отнести указываемые команды к одной из
трех категорий: обычные (normal) команды,
команды <strong>пред-инсталляции (pre-installation)</strong> и команды 
<strong>пост-инсталляции (post-installation)</strong>. 
</p>

<p> "Обычные" команды помещают файлы в нужное место и устанавливают
для них необходимые аттрибуты доступа.
Они не должны модифицировать никаких файлов, кроме
тех, которые взяты из данного пакет. </p>

<p> Команды пред-инсталляции и пост-инсталляции могут изменять другие 
файлы; в частности, модифицировать "глобальные" конфигурационные файлы или
файлы записей. </p>

<p> Обычно, команды пред-инсталляции исполняются
до "обычных" команд инсталляции, а команды пост-инсталляции - после "обычных" 
команд. </p>

<p> Чаще всего, команды пост-инсталляции используются для
запуска
<code>install-info</code>. Для этого не могут быть использованы обычные команды,
поскольку при этом изменяется содержимое файла
(Info-директории), который не является частью инсталлируемого пакета.
Для этого нужно использовать команды пост-инсталляции, потому что подобное
действие должно выполняться после завершения работы "обычных" команд, которые
инсталлируют необходимые Info-файлы пакета. </p>

<p> Большинство программ не нуждается в командах пред-инсталляции, но, на всякий случай,
мы предусмотрели и подобную возможность. </p>

<p> Для того, чтобы отнести команды правила <code>install</code> к одной из трех 
возможных категорий, перед ними надо вставить соответствующую строку
с именем категории (<strong>category lines</strong>). 
Эта строка задаст категорию для следующих за нею команд. </p>

<p> Строка с указанием категории состоит из символа табуляции, за которым
следует ссылка на специальную переменную; в конце строки может находится комментарий.
Всего существует три таких специальных переменных - по одной на каждую
категорию команд; каждое имя указывает свою категорию.
При "обычном" исполнении, строки с категориями не выполняют никаких операций, 
поскольку соответствующие переменные,
обычно, не определены 
(и вы <em>не должны</em> определять их в своем make-файле). </p>

<p> Ниже перечислены все три возможных 
категории: </p>


<pre>        $(PRE_INSTALL)     # Далее следуют команды пред-инсталляции.
        $(POST_INSTALL)    # Далее следуют команды пост-инсталляции.
        $(NORMAL_INSTALL)  # Далее следуют "обычные" команды.
</pre>

<p> При отсутствии строки с категорией в начале правила
<code>install</code>, все командные строки от начала правила до 
первой строки с категорией, будут рассматриваться как "обычные".
При отсутствии каких-либо строк с категориями, 
все команды правила будут рассматриваться как "обычные". </p>

<p> Аналогично, имеется три категории команд для правила 
<code>uninstall</code>: </p>


<pre>        $(PRE_UNINSTALL)     # Далее следуют команды пред-деинсталляции.
        $(POST_UNINSTALL)    # Далее следуют команды пост-деинсталляции.
        $(NORMAL_UNINSTALL)  # Далее следуют "обычные" команды.
</pre>

<p> Обычно, команды пред-деинсталляции используются для
удаления записей (о деинсталлируемых Info-файлах) из Info-директории. </p>

<p> При наличии у целей <code>install</code> или <code>uninstall</code> любых 
пререквизитов, работающих как "подпрограммы" инсталляции, для <em>каждой</em> строки 
с командой в этих пререквизитах должна быть указана ее категория. Команды 
для "главной" цели, также должны начинаться со строки категории. 
Только в этом случае можно быть уверенным, что все команды попадут в нужную категорию,
независимо от того, какие из пререквизитов обрабатывались. </p>

<p> Команды пред-инсталляции и пост-инсталляции не
должны запускать каких-либо программ, 
кроме: </p>

<pre>[ basename bash cat chgrp chmod chown cmp cp dd diff echo
egrep expand expr false fgrep find getopt grep gunzip gzip
hostname install install-info kill ldconfig ln ls md5sum
mkdir mkfifo mknod mv printenv pwd rm rmdir sed sort tee
test touch true uname xargs yes
</pre>

<p>
<a name="IDX923"></a>

    Необходимость разделения команд на категории возникает из-за необходимости
уметь инсталлировать "бинарные" дистрибутивы пакетов.   
Как правило, такой пакет содержит все необходимые файлы (в том числе и исполняемые)
в готовом виде и использует свой собственный метод их инсталляции. 
Таким образом, ему не требуется запускать "обычные" команды инсталляции.
Однако, при инсталляции бинарного пакета, нужно выполнить команды пред-инсталляции
и пост-инсталляции. </p>

<p> Программы для сборки бинарных пакетов работают, "извлекая" команды
пред-инсталляции и пост-инсталляции.
Вот один из возможных способов извлечения команд
пред-инсталляции: </p>

<pre>make -n install -o all \
      PRE_INSTALL=pre-install \
      POST_INSTALL=post-install \
      NORMAL_INSTALL=normal-install \
  | gawk -f pre-install.awk
</pre>

<p> Здесь, файл <tt>`pre-install.awk'</tt> может содержать что-нибудь, 
наподобие: </p>

<pre>$0 ~ /^\t[ \t]*(normal_install|post_install)[ \t]*$/ {on = 0}
on {print $0}
$0 ~ /^\t[ \t]*pre_install[ \t]*$/ {on = 1}
</pre>

<p> В результате получается файл с командами пред-инсталляции, который, затем,
выполняется командным интерпретатором в процессе инсталляции бинарного пакета. </p>




<h1><a name="SEC123" href="#TOC123">Справочник</a></h1>

<p> В данном приложении перечислены все директивы, функции 
и специальные переменные, распознаваемые программой 
GNU <code>make</code>. Смотрите также разделы
<a href="#SEC36">Имена специальных целей</a>, 
<a href="#SEC95">Перечень имеющихся неявных правил</a>, 
и <a href="#SEC92">Обзор опций</a>. </p>

<p> Вот перечень директив, распознаваемых GNU <code>make</code>: </p>

<dl compact="compact">

  <dt><code>define <var>имя_переменной</var></code> 
</dt><dd>
</dd><dt><code>endef</code>
</dt><dd>
  Определить многострочную, рекурсивно-вычисляемую
  переменную.<br>
  Смотрите раздел <a href="#SEC55">Именованные командные последовательности</a>. 

  </dd><dt><code>ifdef <var>переменная</var></code> 
</dt><dd>
  </dd><dt><code>ifndef <var>переменная</var></code> 
</dt><dd>
</dd><dt><code>ifeq (<var>a</var>,<var>b</var>)</code>
</dt><dd>
</dd><dt><code>ifeq "<var>a</var>" "<var>b</var>"</code>
</dt><dd>
</dd><dt><code>ifeq '<var>a</var>' '<var>b</var>'</code>
</dt><dd>
</dd><dt><code>ifneq (<var>a</var>,<var>b</var>)</code>
</dt><dd>
</dd><dt><code>ifneq "<var>a</var>" "<var>b</var>"</code>
</dt><dd>
</dd><dt><code>ifneq '<var>a</var>' '<var>b</var>'</code>
</dt><dd>
</dd><dt><code>else</code>
</dt><dd>
</dd><dt><code>endif</code>
</dt><dd>
  Условно обработать часть make-файла.<br>
  Смотрите раздел <a href="#SEC71">Условные части make-файла</a>. 

</dd><dt><code>include <var>файл</var></code>
</dt><dd>
</dd><dt><code>-include <var>файл</var></code>
</dt><dd>
</dd><dt><code>sinclude <var>файл</var></code>
</dt><dd>
  Подключить другой make-файл.<br> 
  Смотрите раздел <a href="#SEC15">Подключение других make-файлов</a>. 

  </dd><dt><code>override <var>имя_переменной</var> = <var>значение</var></code> 
</dt><dd>
  </dd><dt><code>override <var>имя_переменной</var> := <var>значение</var></code> 
</dt><dd>
  </dd><dt><code>override <var>имя_переменной</var> += <var>значение</var></code> 
</dt><dd>
</dd><dt><code>override <var>имя_переменной</var> ?= <var>значение</var></code>
</dt><dd>
  </dd><dt><code>override define <var>имя_переменной</var></code> 
</dt><dd>
</dd><dt><code>endef</code>
</dt><dd>
  Определить переменную с "перекрытием" предыдущего ее определения
  (в том числе и заданного с помощью командной строки). <br>
  Смотрите раздел <a href="#SEC66">Директива <code>override</code></a>.

</dd><dt><code>export</code>
</dt><dd>
  Инструктирует <code>make</code> экспортировать, по умолчанию,
  все переменные в дочерние процессы.
  <br>Смотрите раздел 
  <a href="#SEC52">Связь с <code>make</code> "нижнего уровня" через переменные</a>.

  </dd><dt><code>export <var>переменная</var></code> 
</dt><dd>
  </dd><dt><code>export <var>переменная</var> = <var>значение</var></code> 
</dt><dd>
  </dd><dt><code>export <var>переменная</var> := <var>значение</var></code> 
</dt><dd>
  </dd><dt><code>export <var>переменная</var> += <var>значение</var></code> 
</dt><dd>
</dd><dt><code>export <var>переменная</var> ?= <var>значение</var></code>
</dt><dd>
  </dd><dt><code>unexport <var>переменная</var></code> 
</dt><dd>
  Включить или отключить экспорт конкретной переменной
  в дочерние процессы.
  <br>
  Смотрите раздел 
  <a href="#SEC52">Связь с <code>make</code> "нижнего уровня" через 
  переменные</a>

  </dd><dt><code>vpath <var>шаблон</var> <var>путь</var></code> 
</dt><dd>
  Задать путь поиска для файлов, подходящих под указанный шаблон (с символом 
  <samp>%</samp>).
  <br>  Смотрите раздел <a href="#SEC28">Директива <code>vpath</code></a>.


  </dd><dt><code>vpath <var>шаблон</var></code> 
</dt><dd>
  Удалить все пути поиска, заданные ранее для
  указанного шаблона. 

</dd><dt><code>vpath</code>
</dt><dd>
  Удалить все пути поиска, заданные ранее с помощью
  директив 
  <code>vpath</code>. </dd>

</dl>

<p> Далее приведен список функций, манипулирующих с текстом
(смотрите раздел <a href="#SEC75">Функции преобразования текста</a>): </p>

<dl compact="compact">

  <dt><code>$(subst <var>исходная_строка</var>,<var>конечная_строка</var>,<var>текст</var>)</code>
</dt><dd>
  Заменить 
  <var>исходную_строку</var> на <var>конечную_строку</var> 
  в указанном <var>тексте</var>.<br>
  Смотрите раздел
  <a href="#SEC77">Функции анализа и подстановки строк</a>.

  </dd><dt><code>$(patsubst <var>шаблон</var>,<var>замена</var>,<var>текст</var>)</code> 
</dt><dd>
  Заменить все слова, подходящие под <var>шаблон</var>, на <var>замену</var> в
  указанном <var>тексте</var>.<br>
  Смотрите раздел 
  <a href="#SEC77">Функции анализа и подстановки строк</a>.

  </dd><dt><code>$(strip <var>строка</var>)</code> 
</dt><dd>
  Удалить из указанной <var>строки</var> избыточные пробелы.<br>
  Смотрите раздел
  <a href="#SEC77">Функции анализа и подстановки строк</a>.

  </dd><dt><code>$(findstring <var>искомая_строка</var>,<var>текст</var>)</code> 
</dt><dd>
  Найти <var>искомую_строку</var> в указанном <var>тексте</var>.<br>
  Смотрите раздел 
  <a href="#SEC77">Функции анализа и подстановки строк</a>.

  </dd><dt><code>$(filter <var>шаблон</var>...,<var>текст</var>)</code> 
</dt><dd>
  Выбрать из указанного <var>текста</var> все слова, подходящие под 
  <var>шаблон(ы)</var>.<br>
  Смотрите раздел 
  <a href="#SEC77">Функции анализа и подстановки строк</a>.

  </dd><dt><code>$(filter-out <var>шаблон</var>...,<var>текст</var>)</code> 
</dt><dd>
  Выбрать из <var>текста</var> слова, <em>не подходящие</em> 
  ни под один из указанных 
  <var>шаблонов</var>.<br>
  Смотрите раздел 
  <a href="#SEC77">Функции анализа и подстановки строк</a>.

  </dd><dt><code>$(sort <var>список</var>)</code> 
</dt><dd>
  Отсортировать слова из <var>списка</var> в лексикографическом 
  порядке, удалив дубликаты.<br>
  Смотрите раздел <a href="#SEC77">Функции анализа и подстановки строк</a>.

  </dd><dt><code>$(dir <var>имена</var>...)</code>
</dt><dd>
  Из указанных имен файлов выделяет части, определяющие
  имена каталогов.<br>
  Смотрите раздел
  <a href="#SEC78">Функции для обработки имен файлов</a>.


  </dd><dt><code>$(notdir <var>имена</var>...)</code> 
</dt><dd>
  Из каждого указанного имени файла выделить часть, 
  которая не является именем каталога.<br>
  Смотрите раздел
  <a href="#SEC78">Функции для обработки имен файлов</a>.

  </dd><dt><code>$(suffix <var>имена</var>...)</code> 
</dt><dd>
  Из каждого имени файла выделить суффикс 
  (последний <samp>`.'</samp> и следующие за ним символы).<br>
  Смотрите раздел
  <a href="#SEC78">Функции для обработки имен файлов</a>.

  </dd><dt><code>$(basename <var>имена</var>...)</code> 
</dt><dd>
  Выделяет "базовое имя" (часть имени без суффикса) из каждого 
  имени файла.<br>
  Смотрите раздел
  <a href="#SEC78">Функции для обработки имен файлов</a>.

  </dd><dt><code>$(addsuffix <var>суффикс</var>,<var>имена</var>...)</code> 
</dt><dd>
  Добавляет <var>суффикс</var> к каждому из указанных <var>имен</var>.<br>
  Смотрите раздел
  <a href="#SEC78">Функции для обработки имен файлов</a>.

  </dd><dt><code>$(addprefix <var>префикс</var>,<var>имена</var>...)</code> 
</dt><dd>
  Предваряет <var>префиксом</var> каждое из указанных <var>имен</var>.<br>
  Смотрите раздел
  <a href="#SEC78">Функции для обработки имен файлов</a>.

  </dd><dt><code>$(join <var>список1</var>,<var>список2</var>)</code> 
</dt><dd>
  Объединяет два "параллельных" списка слов.<br>
  Смотрите раздел
  <a href="#SEC78">Функции для обработки имен файлов</a>.

  </dd><dt><code>$(word <var>n</var>,<var>текст</var>)</code> 
</dt><dd>
  Выделяет <var>n</var>-ное слово (счет начинается с единицы) из 
  указанного <var>текста</var>.<br>
  Смотрите раздел
  <a href="#SEC78">Функции для обработки имен файлов</a>.


  </dd><dt><code>$(words <var>текст</var>)</code> 
</dt><dd>
  Подсчитывает количество слов в указанном <var>тексте</var>.<br>
  Смотрите раздел
  <a href="#SEC78">Функции для обработки имен файлов</a>.

</dd><dt><code>$(wordlist <var>от</var>,<var>до</var>,<var>текст</var>)</code>
</dt><dd>
Возвращает список слов из указанного <var>текста</var> 
с номерами <var>от</var> и <var>до</var>.<br>
Смотрите раздел <a href="#SEC78">Функции для обработки имен файлов</a>.

  </dd><dt><code>$(firstword <var>имена</var>...)</code> 
</dt><dd>
  Выделяет первое слово из указанного списка <var>имен</var>.<br>
  Смотрите раздел
  <a href="#SEC78">Функции для обработки имен файлов</a>.

  </dd><dt><code>$(wildcard <var>шаблон</var>...)</code> 
</dt><dd>
  Получить список файлов, чьи имена подходят под
  указанный шаблон (шаблон записывает в формате интерпретатора
  командной строки, а <em>не</em>  
  <samp>`%'</samp>-шаблона).<br>
  Смотрите раздел 
  <a href="#SEC25">Функция <code>wildcard</code></a>.

</dd><dt><code>$(error <var>сообщение</var>...)</code>
</dt><dd>
При вычислении этой функции, <code>make</code> генерирует
фатальную ошибку с указанным 
<var>сообщением</var>.<br>
Смотрите раздел <a href="#SEC84">Функции управления сборкой</a>.

</dd><dt><code>$(warning <var>сообщение</var>...)</code>
</dt><dd>
При вычислении этой функции, <code>make</code> выдает
предупреждение (warning) с указанным 
<var>сообщением</var>.<br>
Смотрите раздел <a href="#SEC84">Функции управления сборкой</a>.


  </dd><dt><code>$(shell <var>команда</var>)</code> 
</dt><dd>
  Выполнить команду оболочки и возвратить выведенную ей
  информацию.
  <br>Смотрите раздел
  <a href="#SEC83">Функция <code>shell</code></a>.


  </dd><dt><code>$(origin <var>переменная</var>)</code> 
</dt><dd>
  Вернуть строку, описывающую, каким образом
  была определена переменная <code>make</code> 
  <var>переменная</var>.<br>
  Смотрите раздел 
  <a href="#SEC82">Функция <code>origin</code></a>.

  </dd><dt><code>$(foreach <var>переменная-аргумент</var>,<var>слова</var>,<var>текст</var>)</code> 
</dt><dd>
  Вычислить значение <var>текста</var>, поочередно подставляя в 
  <var>переменную-аргумент</var> слова из списка
  <var>слова</var>, и объединить полученные результаты.<br>
  Смотрите раздел 
  <a href="#SEC79">Функция <code>foreach</code></a>. 

</dd><dt><code>$(call <var>переменная</var>,<var>параметр</var>,...)</code>
</dt><dd>
Вычислить и вернуть значение <var>переменной</var>, заменяя ссылки <code>$(1)</code>,
<code>$(2)</code> на значения первого, второго и так далее <var>параметров</var>.<br>
Смотрите раздел <a href="#SEC81">Функция <code>call</code></a>.
</dd></dl>

<p> Вот список имеющихся автоматических переменных. Смотрите раздел 
<a href="#SEC101">Автоматические переменные</a>, где они описаны  
подробно. </p>

<dl compact="compact">

<dt><code>$@</code>
</dt><dd>
  Имя файла цели.

</dd><dt><code>$%</code>
</dt><dd>
  Имя элемента для целей, являющихся элементами архива.

</dd><dt><code>$&lt;</code>
</dt><dd>
  Имя первого пререквизита из списка пререквизитов

</dd><dt><code>$?</code>
</dt><dd>
  Имена всех пререквизитов (разделенные пробелами), которые являются более новыми, 
  чем цель. 
  Для пререквизитов, являющихся элементами архивов, используются только имена
  элементов 
  (смотрите раздел 
  <a href="#SEC108">Использование <code>make</code> для обновления архивов</a>).

</dd><dt><code>$^</code>
</dt><dd>
</dd><dt><code>$+</code>
</dt><dd>
  Имена всех пререквизитов, разделенные пробелами. 
  Для пререквизитов, являющихся элементами архивов, используются только
  имена элементов
  (смотрите раздел 
  <a href="#SEC108">Использование <code>make</code> для обновления архивов</a>). 
  Значение переменной <code>$^</code> 
  не содержит дубликатов пререквизитов, в то время как <code>$+</code> 
  сохраняет дубликаты и "оригинальный" порядок следования пререквизитов.


</dd><dt><code>$*</code>
</dt><dd>
  Основа имени (stem), с которой было сопоставлено 
  неявное правило (смотрите раздел 
  <a href="#SEC102">Процедура сопоставления с шаблоном</a>).

</dd><dt><code>$(@D)</code>
</dt><dd>
</dd><dt><code>$(@F)</code>
</dt><dd>
  Части имени <code>$@</code>, которые представляют собой имя каталога и
  имя файла внутри каталога, соответственно.

</dd><dt><code>$(*D)</code>
</dt><dd>
</dd><dt><code>$(*F)</code>
</dt><dd>
  Части имени <code>$*</code>, которые представляют собой имя каталога и
  имя файла внутри каталога, соответственно.

</dd><dt><code>$(%D)</code>
</dt><dd>
</dd><dt><code>$(%F)</code>
</dt><dd>
  Части имени <code>$%</code>, которые представляют собой имя каталога и
  имя файла внутри каталога, соответственно.

</dd><dt><code>$(&lt;D)</code>
</dt><dd>
</dd><dt><code>$(&lt;F)</code>
</dt><dd>
  Части имени <code>$&lt;</code>, которые представляют собой имя каталога и
  имя файла внутри каталога, соответственно.

</dd><dt><code>$(^D)</code>
</dt><dd>
</dd><dt><code>$(^F)</code>
</dt><dd>
  Части имени <code>$^</code>, которые представляют собой имя каталога и
  имя файла внутри каталога, соответственно.

</dd><dt><code>$(+D)</code>
</dt><dd>
</dd><dt><code>$(+F)</code>
</dt><dd>
  Части имени <code>$+</code>, которые представляют собой имя каталога и
  имя файла внутри каталога, соответственно.

</dd><dt><code>$(?D)</code>
</dt><dd>
</dd><dt><code>$(?F)</code>
</dt><dd>
  Части имени <code>$?</code>, которые представляют собой имя каталога и
  имя файла внутри каталога, соответственно.

</dd></dl>

<p> Следующие переменные GNU <code>make</code> использует специальным образом: </p>

<dl compact="compact">

<dt><code>MAKEFILES</code>
</dt><dd>
  Make-файлы, которые будут считываться при каждом
  вызове <code>make</code>.<br>
  Смотрите раздел
  <a href="#SEC16">Переменная <code>MAKEFILES</code></a>.


</dd><dt><code>VPATH</code>
</dt><dd>
  Путь поиска для файлов, которые не могут быть
  найдены в текущем каталоге.<br>
  Смотрите раздел
    <a href="#SEC27">Переменная <code>VPATH</code>: список каталогов для поиска 
  пререквизитов</a>.

</dd><dt><code>SHELL</code>
</dt><dd>
  Имя используемого по умолчанию командного интерпретатора,
  обычно
  <tt>`/bin/sh'</tt>. В своем make-файле вы можете установить
  для переменной <code>SHELL</code> новое значение, изменив, тем самым, 
  командный интерпретатор, который будет использоваться для
  вызова команд.
  Смотрите раздел <a href="#SEC46">Исполнение команд</a>.


</dd><dt><code>MAKESHELL</code>
</dt><dd>
  Используется только при работе в системе MS-DOS и содержит 
  имя командного интерпретатора, который будет использоваться
  <code>make</code>. Это значение имеет приоритет перед
  значением переменной <code>SHELL</code>. 
  Смотрите раздел 
  <a href="#SEC46">Исполнение команд</a>.


</dd><dt><code>MAKE</code>
</dt><dd>
  Имя, с помощью которого была вызвана <code>make</code>. Использование
  этой переменной в командах имеет специальное значение.
  Смотрите раздел 
  <a href="#SEC51">Как работает переменная <code>MAKE</code></a>.


</dd><dt><code>MAKELEVEL</code>
</dt><dd>
  Текущий "уровень вложенности" <code>make</code> при рекурсивном вызове.<br>
  Смотрите раздел
  <a href="#SEC52">Связь с <code>make</code> "нижнего уровня" через переменные</a>.


</dd><dt><code>MAKEFLAGS</code>
</dt><dd>
  Опции, заданные для <code>make</code>. Вы можете установить 
  эту переменную из операционной среды или присвоить ей нужное
  значение внутри make-файла.<br>
  Смотрите раздел <a href="#SEC53">Передача опций 
  в <code>make</code> "нижнего уровня"</a>.

<em>Никогда</em> не задавайте значение <code>MAKEFLAGS</code> 
непосредственно в командной строке: в командный интерпретатор 
это значение может быть передано
некорректно. 
Никогда не препятствуйте рекурсивно вызванным экземплярам
<code>make</code> в получении значения этой переменной через
операционную среду.

</dd><dt><code>MAKECMDGOALS</code>
</dt><dd>
  Цели, заданные <code>make</code> в командной строке. Присваивание
  этой переменной другого значения не
  влияет на работу <code>make</code>.<br>
  Смотрите раздел
  <a href="#SEC87">Аргументы для задания главной цели</a>.

</dd><dt><code>CURDIR</code>
</dt><dd>
  Имя текущего рабочего каталога (после того, как
  были обработаны все опции <code>-C</code>, если такие были
  заданы). Присваивание этой переменной другого значения, не
  влияет на работу 
  <code>make</code>.<br>
  Смотрите раздел
  <a href="#SEC50">Рекурсивный вызов <code>make</code></a>.


</dd><dt><code>SUFFIXES</code>
</dt><dd>
  Список используемых по умолчанию (до того, как <code>make</code> 
  начнет интерпретировать make-файлы) суффиксов для суффиксных правил.


</dd><dt><code>.LIBPATTERNS</code>
</dt><dd>
Определяет способ именования и порядок следования библиотек, поиск 
которых проводит <code>make</code>.<br>
Смотрите раздел <a href="#SEC32">Поиск в каталогах для подключаемых библиотек</a>.
</dd></dl>



<h1><a name="SEC124" href="#TOC124">Сообщения об ошибках</a></h1>

<p> Далее, приведен список наиболее распространенных ошибок, выдаваемых
программой <code>make</code>, с информации о том, что они означают,
и как их можно исправить. </p>

<p> Иногда, ошибки <code>make</code> не являются фатальными, особенно
при наличии префикса
<code>-</code> в командах или опции <code>-k</code> 
в аргументах командной строки. Ошибки, являющиеся фатальными, предваряются строчкой
<code>***</code>. </p>

<p> Сообщения об ошибки также предваряются именем
программы (обычно,
<samp>`make'</samp>), или, если ошибка произошла в конкретном make-файле,
то именем этого файла и номером строки, где была обнаружена ошибка. </p>

<p> В приведенной ниже таблице такого рода общие "префиксы" опущены. </p>

<dl compact="compact">

<dt><samp>`[<var>foo</var>] Error <var>NN</var>'</samp>
</dt><dd>
</dd><dt><samp>`[<var>foo</var>] <var>описание сигнала</var>'</samp>
</dt><dd>
  Эти ошибки не являются ошибками <code>make</code>. Они означают,
  что программа, запущенная <code>make</code> в качестве команды,
  вернула ненулевой код возврата (<samp>`Error <var>NN</var>'</samp>), который
  интерпретируется <code>make</code> как ошибка, либо эта программа была 
  аварийно завершена (например, получив соответствующий сигнал). 
Смотрите раздел <a href="#SEC48">Ошибки при исполнении команд</a>.
  
  Отсутствие в начале сообщения об ошибке строки <code>***</code> означает,
  что <code>make</code> игнорировала данную ошибку из-за наличия 
  в команде префикса
  <code>-</code>.


</dd><dt><samp>`missing separator.  Stop.'</samp>
</dt><dd>
</dd><dt><samp>`missing separator (did you mean TAB instead of 8 spaces?).  Stop.'</samp>
</dt><dd>
    Данные сообщения означают, что <code>make</code> не смогла разобраться
    в "типе" очередной считанное строки.
Для определения типа очередной строки, GNU <code>make</code> проверяет 
наличие в ней нескольких возможных разделителей
(<code>:</code>, <code>=</code>, символ табуляции и так далее).
Данное сообщение означает,
что не найден ни один из возможных разделителей.
  Зачастую, появление
  таких ошибок связано с использованием текстовых редакторов,
  которые, при выравнивании строк, вместо символа табуляции используют
  последовательность пробелов (этим отличаются многие текстовые
  редакторы для
  MS-Windows).
  В таких случаях <code>make</code> будет использовать
  второй вариант сообщения об ошибке.
  Помните, что каждая команда в make-файле должна начинаться с символа
  табуляции. Восемь пробелов не заменяют один символ табуляции.
Смотрите раздел <a href="#SEC21">Синтаксис правил</a>.


</dd><dt><samp>`commands commence before first target.  Stop.'</samp>
</dt><dd>
</dd><dt><samp>`missing rule before commands.  Stop.'</samp>
</dt><dd>

  Это означает, что make-файл, похоже, начинается
  с командных строк: 
  в начале идет символ табуляции, 
  а следующая за ним конструкция не является
  допустимой командой 
  <code>make</code> (такой, например, как оператор присваивания). Командные
  строки всегда должны относиться к какой-то цели.
  Второй вариант сообщения об ошибке используется в том случае,
  когда первым непробельным символом в строке является 
  двоеточие; <code>make</code>
  интерпретирует эту ситуацию как отсутствие левой части
  правила "цель: пререквизит".

Смотрите раздел <a href="#SEC21">Синтаксис правил</a>.

</dd><dt><samp>`No rule to make target `<var>xxx</var>'.'</samp>
</dt><dd>
</dd><dt><samp>`No rule to make target `<var>xxx</var>', needed by `<var>yyy</var>'.'</samp>
</dt><dd>
  Это означает, что программа <code>make</code> решила 
  обновить указанную цель, но не может найти никаких подходящих для
  этого правил (ни явных, ни неявных, включая встроенные неявные правила).
  Если вы хотите, чтобы этот файл был создан, вам нужно добавить в make-файл
  соответствующее правило, описывающее процесс достижения подобной цели.
  Зачастую, такая ошибка является следствием простой описки
  (неправильно записанного имени файла) или повреждения каталога
  с исходными файлами (когда <code>make</code> попытается построить
  недостающие исходные файлы).

</dd><dt><samp>`No targets specified and no makefile found.  Stop.'</samp>
</dt><dd>
</dd><dt><samp>`No targets.  Stop.'</samp>
</dt><dd>
  Первое сообщение означает, что вы не задали никаких целей в командной строке и
  <code>make</code> не может найти ни одного make-файла для обработки.
  Второе сообщение означает, что был найден некоторый
  make-файл, однако он не содержит ни одной цели, которую можно было бы выбрать
  по умолчанию, а в командной строке вы тоже не указали ни одной цели.
  В такой ситуации GNU <code>make</code> не может сделать ничего полезного.

Смотрите раздел <a href="#SEC86">Аргументы для задания make-файла</a>.

</dd><dt><samp>`Makefile `<var>xxx</var>' was not found.'</samp>
</dt><dd>
</dd><dt><samp>`Included makefile `<var>xxx</var>' was not found.'</samp>
</dt><dd>
    Программа <code>make</code> не может найти make-файл,
    указанный в командной строке (сообщение первого вида), или подключаемый
    make-файл (сообщение второго вида).


</dd><dt><samp>`warning: overriding commands for target `<var>xxx</var>''</samp>
</dt><dd>
</dd><dt><samp>`warning: ignoring old commands for target `<var>xxx</var>''</samp>
</dt><dd>
  Для каждой цели, GNU <code>make</code> позволяет задать лишь один
  набор команд 
  (исключением являются правила с двойным двоеточием). 
  Такое предупреждающее сообщение выдается при попытке задать команды для цели, 
  которая ранее уже была определена
  как имеющая команды; при этом, первый набор команд будет "перекрыт"
  вторым заданным набором.

Смотрите раздел <a href="#SEC38">Несколько правил с одной целью</a>.

</dd><dt><samp>`Circular <var>xxx</var> &lt;- <var>yyy</var> dependency dropped.'</samp>
</dt><dd>
  Это означает, что <code>make</code> обнаружила циклическую
  зависимость: 
  пререквизит <var>yyy</var> цели <var>xxx</var> (возможно, через
  цепочку других пререквизитов) опять зависит от цели
  <var>xxx</var>.

</dd><dt><samp>`Recursive variable `<var>xxx</var>' references itself (eventually).  Stop.'</samp>
</dt><dd>
  Означает, что вы определили обычную (рекурсивно вычисляемую)
  переменную 
  <var>xxx</var>, которая, при попытке ее вычисления, ссылается на
  саму себя (<var>xxx</var>). 
  Это является ошибкой; вам нужно использовать либо упрощенно-вычисляемую
  переменную (<code>:=</code>), либо оператор
  добавления
  (<code>+=</code>).

Смотрите раздел <a href="#SEC57">Использование переменных</a>.

</dd><dt><samp>`Unterminated variable reference.  Stop.'</samp>
</dt><dd>
  Означает, что вы забыли указать закрывающиеся круглые или фигурные 
  скобки при ссылке на переменную или функцию.


</dd><dt><samp>`insufficient arguments to function `<var>xxx</var>'.  Stop.'</samp>
</dt><dd>
  Это означает, что вы не задали необходимого числа параметров 
  для указанной функции.
  Смотрите документацию на эту функцию, где указан список требуемых аргументов.

Смотрите раздел <a href="#SEC75">Функции преобразования текста</a>.

</dd><dt><samp>`missing target pattern.  Stop.'</samp>
</dt><dd>
</dd><dt><samp>`multiple target patterns.  Stop.'</samp>
</dt><dd>
</dd><dt><samp>`target pattern contains no `%'.  Stop.'</samp>
</dt><dd>
  Эти ошибки возникают при неправильном составлении 
  статических шаблонных правил. Первая ошибка 
  означает, что в правиле нет шаблона цели. Вторая ошибка означает,
  что в разделе целей указано сразу несколько шаблонов.
  Третья ошибка означает, что имя цели не содержит шаблонного
  символа 
  (<code>%</code>). 
   
Смотрите раздел <a href="#SEC40">Синтаксис статических шаблонных правил</a>.

</dd><dt><samp>`warning: -jN forced in submake: disabling jobserver mode.'</samp>
</dt><dd>
Это и описанное ниже сообщение генерируется в том случае, если
<code>make</code> обнаруживает проблему, связанную с "параллельным" 
режимом работы в системе, где такой режим поддерживается и 
<code>make</code> "нижнего уровня" могут "общаться" между собой
(смотрите раздел <a href="#SEC53">Передача опций в <code>make</code> "нижнего уровня"</a>).  
Данное предупреждение генерируется в том случае, если 
<code>make</code> "нижнего уровня" была запущена
с аргументом <samp>`-j<var>N</var>'</samp> (где <var>N</var> больше единицы).
Такое может произойти, например, если вы самостоятельно
установите переменную среды <code>MAKE</code> и присвоите ей значение 
<samp>`make -j2'</samp>.  В этом случае, рекурсивно вызванные копии 
<code>make</code> не будут пытаться "связаться" с другими копиями <code>make</code>,
а будут работать исходя из того, что они могут запускать не более двух заданий
одновременно.

</dd><dt><samp>`warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.'</samp>
</dt><dd>

Для того, чтобы запущенные копии <code>make</code> могли "общаться" между собой,
родительская копия передает в дочернюю копию некоторую дополнительную информацию. 
Это может вызвать проблемы, если дочерний процесс не является, на самом
деле, программой <code>make</code>. Поэтому, родительский процесс 
<code>make</code> передает эту дополнительную информацию в дочерний процесс, если
только он уверен, что дочерний процесс действительно является программой <code>make</code>.
Для этого используется "обычный" алгоритм
(смотрите раздел <a href="#SEC51">Как работает переменная <code>MAKE</code></a>).  
Если make-файл построен таким образом, что родительская копия <code>make</code>
не уверена, что дочерний процесс является программой <code>make</code>, 
в дочерний процесс будет передана лишь часть необходимой информации.
В этом случае, дочерний процесс выдает предупреждающее сообщение и выполняет
работу 
в "последовательном" режиме.

</dd></dl>



<h1><a name="SEC125" href="#TOC125">Пример "сложного" make-файла</a></h1>

<p> Вот пример make-файла, используемого для сборки программы GNU <code>tar</code>. 
Это - относительно сложный make-файл. </p>

<p> По умолчанию, главной целью становится первая цель <samp>`all'</samp>. 
Интересной особенностью данного make-файла является то, что
исходный файл <tt>`testpad.h'</tt> автоматически создается
программой <code>testpad</code>, которая, в свою очередь, компилируется из
<tt>`testpad.c'</tt>. </p>

<p> При выполнении команды <samp>`make'</samp> или <samp>`make all'</samp>, 
будет создан исполняемый файл <tt>`tar'</tt>, демон <tt>`rmt'</tt>,
обеспечивающий удаленный доступ и Info-файл
<tt>`tar.info'</tt>. </p>

<p> При выполнении команды <samp>`make install'</samp>, <code>make</code> 
не только создаст файлы
<tt>`tar'</tt>, <tt>`rmt'</tt>, и <tt>`tar.info'</tt>, но и инсталлирует
их в систему. </p>

<p> При выполнении <samp>`make clean'</samp>, <code>make</code> удаляет все
файлы <samp>`.o'</samp>, а также файлы <tt>`tar'</tt>, <tt>`rmt'</tt>, 
<tt>`testpad'</tt>, <tt>`testpad.h'</tt>, и <tt>`core'</tt>. </p>

<p> При выполнении команды <samp>`make distclean'</samp>, помимо файлов,
удаляемых в <samp>`make clean'</samp>, <code>make</code> также 
удалит файлы <tt>`TAGS'</tt>, <tt>`Makefile'</tt>, и <tt>`config.status'</tt>. 
(В данном случае, make-файл (и файл <tt>`config.status'</tt>) 
генерируется пользователем
с помощью программы <code>configure</code>, которая входит
в дистрибутив <code>tar</code>. Эта программа здесь не показана.) </p>

<p> При выполнении <samp>`make realclean'</samp>, наряду с файлами, удаляемыми по
команде <samp>`make distclean'</samp>, <code>make</code> также
удаляет Info-файлы, полученные из
<tt>`tar.texinfo'</tt>. </p>

<p> В make-файле также имеются две цели для создания дистрибутивов:
<code>shar</code> и <code>dist</code>.


</p><pre># Сгенерирован автоматически из Makefile.in с помощью configure.
# Un*x make-файл для программы GNU tar.
# Copyright (C) 1991 Free Software Foundation, Inc.

# This program is free software; you can redistribute
# it and/or modify it under the terms of the GNU
# General Public License ...
...
...

SHELL = /bin/sh

#### Начало раздела конфигурации. ####

srcdir = .

# При использовании gcc, вы должны либо запустить скрипт
# fixincludes, поставляемый с этим компилятором, либо использовать
# gcc с опцией -traditional.  Иначе, вызов ioctl
# может быть неправильно скомпилирован в некоторых системах.
CC = gcc -O
YACC = bison -y
INSTALL = /usr/local/bin/install -c
INSTALLDATA = /usr/local/bin/install -c -m 644

#  Опции, которые можно задать для DEFS:
# -DSTDC_HEADERS        Если у вас имеются стандартные ANSI C заголовочные
#                       файлы и библиотеки.
# -DPOSIX               Если у вас имеются стандартные POSIX.1 заголовочные
#                       файлы и библиотеке.
# -DBSD42               Если у вас имеется sys/dir.h (кроме случаев,
#                       когда вы используете -DPOSIX), sys/file.h,
#                       и st_blocks в `struct stat'.
# -DUSG                 Если у имеются System V/ANSI C
#                       функции для работы со строками и памятью,
#                       соответствующие заголовочные файлы, sys/sysmacros.h,
#                       fcntl.h, getcwd, нет valloc 
#                       и есть ndir.h (если вы только не 
#                       используете -DDIRENT).
# -DNO_MEMORY_H         В случаях, когда USG или STDC_HEADERS, но 
#                       не включать файл memory.h.
# -DDIRENT              В случае USG, но вместо ndir.h у вас 
#                       имеется dirent.h.
# -DSIGTYPE=int         Если ваши обработчики сигналов
#                       возвращают int, а не void.
# -DNO_MTIO             Если у вас нет sys/mtio.h
#                       (ioctl для магнитной ленты).
# -DNO_REMOTE           Если у вас нет удаленной оболочки или
#                       rexec.
# -DUSE_REXEC           Использовать rexec для удаленных операций с
#                       лентой вместо запуска
#                       rsh или remsh через fork.
# -DVPRINTF_MISSING     Если ваша система не имеет функции vprintf
#                       (но имеет _doprnt).
# -DDOPRNT_MISSING      Если ваша система не имеет функции _doprnt.
#                       Надо также определить
#                       -DVPRINTF_MISSING.
# -DFTIME_MISSING       Если ваша система не поддерживает системный вызов ftime.
# -DSTRSTR_MISSING      Если ваша система не имеет функции strstr.
# -DVALLOC_MISSING      Если ваша система не имеет функции valloc.
# -DMKDIR_MISSING       Если ваша система не поддерживает системых вызовов mkdir
#                       и rmdir.
# -DRENAME_MISSING      Если ваша система не поддерживает системный вызов rename.
# -DFTRUNCATE_MISSING   Если система не поддерживает системный вызов ftruncate. 
# -DV7                  Для Version 7 Unix (давно не
#                       тестировалось).
# -DEMUL_OPEN3          Если у вас нет версии open с тремя аргументами
#                       и вы хотите, чтобы эта функция эмулировалась  
#                       с помощью имеющихся у вас системных вызовов.
# -DNO_OPEN3            Если у вас нет версии open с тремя аргументами
#                       и вы хотите отключить опцию tar -k  
#                       вместо того, чтобы эмулировать нужную функцию open.
# -DXENIX               Если у вас имеется sys/inode.h
#                       и нужно, чтобы он был 94 для своего подключения.

DEFS =  -DSIGTYPE=int -DDIRENT -DSTRSTR_MISSING \
        -DVPRINTF_MISSING -DBSD42
# Установите для этой переменной значение rtapelib.o или, если вы определили NO_REMOTE,
# установите для нее пустое значение.
RTAPELIB = rtapelib.o
LIBS =
DEF_AR_FILE = /dev/rmt8
DEFBLOCKING = 20

CDEBUG = -g
CFLAGS = $(CDEBUG) -I. -I$(srcdir) $(DEFS) \
        -DDEF_AR_FILE=\"$(DEF_AR_FILE)\" \
        -DDEFBLOCKING=$(DEFBLOCKING)
LDFLAGS = -g

prefix = /usr/local
# Префикс для каждой инсталлируемой программы,
# обычно пустой или содержит `g'.
binprefix =

# Каталог, куда будет инсталлироваться программа tar.
bindir = $(prefix)/bin

# Каталог, куда будут инсталлироваться Info-файлы.
infodir = $(prefix)/info

#### Конец раздела конфигурации. ####

SRC1 =  tar.c create.c extract.c buffer.c \
        getoldopt.c update.c gnu.c mangle.c
SRC2 =  version.c list.c names.c diffarch.c \
        port.c wildmat.c getopt.c
SRC3 =  getopt1.c regex.c getdate.y
SRCS =  $(SRC1) $(SRC2) $(SRC3)
OBJ1 =  tar.o create.o extract.o buffer.o \
        getoldopt.o update.o gnu.o mangle.o
OBJ2 =  version.o list.o names.o diffarch.o \
        port.o wildmat.o getopt.o
OBJ3 =  getopt1.o regex.o getdate.o $(RTAPELIB)
OBJS =  $(OBJ1) $(OBJ2) $(OBJ3)
AUX =   README COPYING ChangeLog Makefile.in  \
        makefile.pc configure configure.in \
        tar.texinfo tar.info* texinfo.tex \
        tar.h port.h open3.h getopt.h regex.h \
        rmt.h rmt.c rtapelib.c alloca.c \
        msd_dir.h msd_dir.c tcexparg.c \
        level-0 level-1 backup-specs testpad.c

all:    tar rmt tar.info

tar:    $(OBJS)
        $(CC) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)

rmt:    rmt.c
        $(CC) $(CFLAGS) $(LDFLAGS) -o $@ rmt.c

tar.info: tar.texinfo
        makeinfo tar.texinfo

install: all
        $(INSTALL) tar $(bindir)/$(binprefix)tar
        -test ! -f rmt || $(INSTALL) rmt /etc/rmt
        $(INSTALLDATA) $(srcdir)/tar.info* $(infodir)

$(OBJS): tar.h port.h testpad.h
regex.o buffer.o tar.o: regex.h
# getdate.y has 8 shift/reduce conflicts.

testpad.h: testpad
        ./testpad

testpad: testpad.o
        $(CC) -o $@ testpad.o

TAGS:   $(SRCS)
        etags $(SRCS)

clean:
        rm -f *.o tar rmt testpad testpad.h core

distclean: clean
        rm -f TAGS Makefile config.status

realclean: distclean
        rm -f tar.info*

shar: $(SRCS) $(AUX)
        shar $(SRCS) $(AUX) | compress \
          &gt; tar-`sed -e '/version_string/!d' \
                     -e 's/[^0-9.]*\([0-9.]*\).*/\1/' \
                     -e q
                     version.c`.shar.Z

dist: $(SRCS) $(AUX)
        echo tar-`sed \
             -e '/version_string/!d' \
             -e 's/[^0-9.]*\([0-9.]*\).*/\1/' \
             -e q
             version.c` &gt; .fname
        -rm -rf `cat .fname`
        mkdir `cat .fname`
        ln $(SRCS) $(AUX) `cat .fname`
        tar chZf `cat .fname`.tar.Z `cat .fname`
        -rm -rf `cat .fname` .fname

tar.zoo: $(SRCS) $(AUX)
        -rm -rf tmp.dir
        -mkdir tmp.dir
        -rm tar.zoo
        for X in $(SRCS) $(AUX) ; do \
            echo $$X ; \
            sed 's/$$/^M/' $$X \
            &gt; tmp.dir/$$X ; done
        cd tmp.dir ; zoo aM ../tar.zoo *
        -rm -rf tmp.dir
</pre>



<h1><a name="SEC126" href="#TOC126">Индекс</a></h1>

<p>
</p><h2>#</h2>
<dir>
<li><a href="#IDX269"><code>#</code> (комментарий), в командах</a>
</li><li><a href="#IDX56">
<code>#</code> (комментарий), в make-файле</a> 
</li><li><a href="#IDX257">
<code>#include</code></a>
</li></dir>

<h2>$</h2>
<dir>
<li><a href="#IDX489">
<code>$</code>, при вызове функции</a> 
</li><li><a href="#IDX127">
<code>$</code>, в правилах</a> 
</li><li><a href="#IDX455">
<code>$</code>, в имени переменной</a> 
</li><li><a href="#IDX421">
<code>$</code>, в ссылке на переменную</a> 
</li></dir>
<h2>%</h2>
<dir>
<li><a href="#IDX831">
<code>%</code>, в шаблонных правилах</a> 
</li><li><a href="#IDX242">
<code>%</code>, отмена специального значения символа в статическом шаблоне</a> 
</li><li><a href="#IDX496">
<code>%</code>, отмена специального значения символа в функции <code>patsubst</code></a> 
</li><li><a href="#IDX159">
<code>%</code>, отмена специального значения символа в директиве <code>vpath</code></a> 
</li><li><a href="#IDX160">
<code>%</code>, отмена специального значения символа с помощью <code>\</code></a>,
<a href="#IDX243">
<code>%</code>, отмена специального значения символа с помощью <code>\</code></a>, 
<a href="#IDX497">
<code>%</code>, отмена специального значения символа с помощью <code>\</code></a> 
</li></dir>
<h2>*</h2>
<dir>
<li><a href="#IDX134">
<code>*</code> (шаблонный символ)</a>  
</li></dir>
<h2>+</h2>
<dir>
<li><a href="#IDX410">
+, и <code>define</code></a> 
</li><li><a href="#IDX464">+=</a>
</li><li><a href="#IDX100">+=, вычисление</a>, 
<a href="#IDX103">+=, вычисление</a>
</li></dir>
<h2>,</h2>
<dir>
<li><a href="#IDX761">
,v (расширение имени RCS-файла)</a>  
</li></dir>
<h2>-</h2>
<dir>
<li><a href="#IDX315">
<code>-</code> (в командах)</a> 
</li><li><a href="#IDX409">
-, и <code>define</code></a> 
</li><li><a href="#IDX612">
<code>--assume-new</code></a>, <a href="#IDX690"><code>--assume-new</code></a>
</li><li><a href="#IDX372">
<code>--assume-new</code>, и рекурсия</a> 
</li><li><a href="#IDX618">
<code>--assume-old</code></a>, 
<a href="#IDX663"><code>--assume-old</code></a>
</li><li><a href="#IDX371">
<code>--assume-old</code>, и рекурсия</a> 
</li><li><a href="#IDX638">
<code>--debug</code></a>
</li><li><a href="#IDX337">
<code>--directory</code></a>, <a href="#IDX636"><code>--directory</code></a>
</li><li><a href="#IDX368">
<code>--directory</code>, и рекурсия</a> 
</li><li><a href="#IDX396">
<code>--directory</code>, и <code>--print-directory</code></a> 
</li><li><a href="#IDX277">
<code>--dry-run</code></a>, <a href="#IDX600">
<code>--dry-run</code></a>, <a href="#IDX659">
<code>--dry-run</code></a>
</li><li><a href="#IDX640">
<code>--environment-overrides</code></a>
</li><li><a href="#IDX66">
<code>--file</code></a>, <a href="#IDX577">
<code>--file</code></a>, <a href="#IDX642">
<code>--file</code></a>
</li><li><a href="#IDX369">
<code>--file</code>, и рекурсия</a> 
</li><li><a href="#IDX645">
<code>--help</code></a>
</li><li><a href="#IDX318"><code>--ignore-errors</code></a>, 
<a href="#IDX647"><code>--ignore-errors</code></a>
</li><li><a href="#IDX82"><code>--include-dir</code></a>, 
<a href="#IDX649"><code>--include-dir</code></a>
</li><li><a href="#IDX303"><code>--jobs</code></a>, 
<a href="#IDX651"><code>--jobs</code></a>
</li><li><a href="#IDX379">
<code>--jobs</code>, и рекурсия</a> 
</li><li><a href="#IDX276"><code>--just-print</code></a>, 
<a href="#IDX599"><code>--just-print</code></a>, 
<a href="#IDX658"><code>--just-print</code></a>
</li><li><a href="#IDX321"><code>--keep-going</code></a>, 
<a href="#IDX629"><code>--keep-going</code></a>, 
<a href="#IDX653"><code>--keep-going</code></a>
</li><li><a href="#IDX311"><code>--load-average</code></a>, 
<a href="#IDX655"><code>--load-average</code></a>
</li><li><a href="#IDX67"><code>--makefile</code></a>, 
<a href="#IDX578"><code>--makefile</code></a>, 
<a href="#IDX643"><code>--makefile</code></a>
</li><li><a href="#IDX310"><code>--max-load</code></a>, 
<a href="#IDX656"><code>--max-load</code></a>
</li><li><a href="#IDX613"><code>--new-file</code></a>, 
<a href="#IDX689"><code>--new-file</code></a>
</li><li><a href="#IDX373">
<code>--new-file</code>, и рекурсия</a> 
</li><li><a href="#IDX671"><code>--no-builtin-rules</code></a>
</li><li><a href="#IDX673"><code>--no-builtin-variables</code></a>
</li><li><a href="#IDX678"><code>--no-keep-going</code></a>
</li><li><a href="#IDX402"><code>--no-print-directory</code></a>, 
<a href="#IDX686"><code>--no-print-directory</code></a>
</li><li><a href="#IDX617"><code>--old-file</code></a>, 
<a href="#IDX662"><code>--old-file</code></a>
</li><li><a href="#IDX370">
<code>--old-file</code>, и рекурсия</a> 
</li><li><a href="#IDX665"><code>--print-data-base</code></a>
</li><li><a href="#IDX685"><code>--print-directory</code></a>
</li><li><a href="#IDX401">
<code>--print-directory</code>, и рекурсия</a> 
</li><li><a href="#IDX403">
<code>--print-directory</code>, отключение</a> 
</li><li><a href="#IDX400">
<code>--print-directory</code>, и <code>--directory</code></a> 
</li><li><a href="#IDX607"><code>--question</code></a>, 
<a href="#IDX669"><code>--question</code></a>
</li><li><a href="#IDX281"><code>--quiet</code></a>, 
<a href="#IDX676"><code>--quiet</code></a>
</li><li><a href="#IDX278"><code>--recon</code></a>, 
<a href="#IDX601"><code>--recon</code></a>, 
<a href="#IDX660"><code>--recon</code></a>
</li><li><a href="#IDX280"><code>--silent</code></a>, 
<a href="#IDX675"><code>--silent</code></a>
</li><li><a href="#IDX679"><code>--stop</code></a>
</li><li><a href="#IDX603"><code>--touch</code></a>, 
<a href="#IDX681"><code>--touch</code></a>
</li><li><a href="#IDX343">
<code>--touch</code>, и рекурсия</a> 
</li><li><a href="#IDX683"><code>--version</code></a>
</li><li><a href="#IDX691"><code>--warn-undefined-variables</code></a>
</li><li><a href="#IDX610"><code>--what-if</code></a>, <a href="#IDX688"><code>--what-if</code></a>
</li><li><a href="#IDX633"><code>-b</code></a>
</li><li><a href="#IDX336"><code>-C</code></a>, <a href="#IDX635"><code>-C</code></a>
</li><li><a href="#IDX364">
<code>-C</code>, и рекурсия</a> 
</li><li><a href="#IDX395">
<code>-C</code>, и <code>-w</code></a> 
</li><li><a href="#IDX637"><code>-d</code></a>
</li><li><a href="#IDX639"><code>-e</code></a>
</li><li><a href="#IDX260">
<code>-e</code> (опция командной оболочки)</a> 
</li><li><a href="#IDX65"><code>-f</code></a>, 
<a href="#IDX579"><code>-f</code></a>, 
<a href="#IDX641"><code>-f</code></a>
</li><li><a href="#IDX365">
<code>-f</code>, и рекурсия</a> 
</li><li><a href="#IDX644"><code>-h</code></a>
</li><li><a href="#IDX81"><code>-I</code></a>, <a href="#IDX648"><code>-I</code></a>
</li><li><a href="#IDX317"><code>-i</code></a>, <a href="#IDX646"><code>-i</code></a>
</li><li><a href="#IDX302"><code>-j</code></a>, <a href="#IDX650"><code>-j</code></a>
</li><li><a href="#IDX906">
<code>-j</code>, и обновление архива</a> 
</li><li><a href="#IDX378">
<code>-j</code>, и рекурсия</a> 
</li><li><a href="#IDX320">
<code>-k</code></a>, 
<a href="#IDX628"><code>-k</code></a>, <a href="#IDX652"><code>-k</code></a>
</li><li><a href="#IDX654"><code>-l</code></a>
</li><li><a href="#IDX183">
<code>-l</code> (поиск библиотек)</a> 
</li><li><a href="#IDX309">
<code>-l</code> (средняя загрузка)</a> 
</li><li><a href="#IDX634"><code>-m</code></a>
</li><li><a href="#IDX258">
<code>-M</code> (для компилятора)</a> 
</li><li><a href="#IDX261">
<code>-MM</code> (для компилятора GNU)</a> 
</li><li><a href="#IDX275"><code>-n</code></a>, 
<a href="#IDX602"><code>-n</code></a>, <a href="#IDX657"><code>-n</code></a>
</li><li><a href="#IDX616"><code>-o</code></a>, <a href="#IDX661"><code>-o</code></a>
</li><li><a href="#IDX366">
<code>-o</code>, и рекурсия</a> 
</li><li><a href="#IDX664"><code>-p</code></a>
</li><li><a href="#IDX608"><code>-q</code></a>, <a href="#IDX668"><code>-q</code></a>
</li><li><a href="#IDX672"><code>-R</code></a>
</li><li><a href="#IDX670"><code>-r</code></a>
</li><li><a href="#IDX677"><code>-S</code></a>
</li><li><a href="#IDX279"><code>-s</code></a>, <a href="#IDX674"><code>-s</code></a>
</li><li><a href="#IDX606"><code>-t</code></a>, <a href="#IDX680"><code>-t</code></a>
</li><li><a href="#IDX341">
<code>-t</code>, и рекурсия</a> 
</li><li><a href="#IDX682"><code>-v</code></a>
</li><li><a href="#IDX611"><code>-W</code></a>, <a href="#IDX687"><code>-W</code></a>
</li><li><a href="#IDX684"><code>-w</code></a>
</li><li><a href="#IDX367">
<code>-W</code>, и рекурсия</a> 
</li><li><a href="#IDX399">
<code>-w</code>, и рекурсия</a> 
</li><li><a href="#IDX404">
<code>-w</code>, отключение</a> 
</li><li><a href="#IDX398">
<code>-w</code>, и <code>-C</code></a>  
</li></dir>
<h2>.</h2>
<dir>
<li><a href="#IDX910">
<code>.a</code> (архивы)</a> 
</li><li><a href="#IDX707">.C</a>
</li><li><a href="#IDX704">.c</a>
</li><li><a href="#IDX708">.cc</a>
</li><li><a href="#IDX750">.ch</a>
</li><li><a href="#IDX263"><code>.d</code></a>
</li><li><a href="#IDX721">.def</a>
</li><li><a href="#IDX746">.dvi</a>
</li><li><a href="#IDX717">.F</a>
</li><li><a href="#IDX715">.f</a>
</li><li><a href="#IDX756">.info</a>
</li><li><a href="#IDX735">.l</a>
</li><li><a href="#IDX185"><code>.LIBPATTERNS</code>, и подключаемые библиотеки</a>
</li><li><a href="#IDX738">.ln</a>
</li><li><a href="#IDX722">.mod</a>
</li><li><a href="#IDX703">.o</a>, <a href="#IDX729">.o</a>
</li><li><a href="#IDX711">.p</a>
</li><li><a href="#IDX827">
<code>.PRECIOUS</code> промежуточные файлы</a> 
</li><li><a href="#IDX716">.r</a>
</li><li><a href="#IDX726">.S</a>
</li><li><a href="#IDX725">.s</a>
</li><li><a href="#IDX765">.sh</a>
</li><li><a href="#IDX720">.sym</a>
</li><li><a href="#IDX747">.tex</a>
</li><li><a href="#IDX757">.texi</a>
</li><li><a href="#IDX755">.texinfo</a>
</li><li><a href="#IDX758">.txinfo</a>
</li><li><a href="#IDX749">.w</a>
</li><li><a href="#IDX748">.web</a>
</li><li><a href="#IDX732">.y</a>
</li></dir>
<h2>:</h2>
<dir>
<li><a href="#IDX253">
<code>::</code> правила (с двойным двоеточием)</a> 
</li><li><a href="#IDX433">:=</a>, <a href="#IDX462">:=</a>
</li></dir>
<h2>=</h2>
<dir>
<li><a href="#IDX428">=</a>, <a href="#IDX461">=</a>
</li><li><a href="#IDX101">=, вычисление</a>
</li></dir>
<h2>?</h2>
<dir>
<li><a href="#IDX135">
<code>?</code> (шаблонный символ)</a> 
</li><li><a href="#IDX441">?=</a>, <a href="#IDX463">?=</a>
</li><li><a href="#IDX102">?=, вычисление</a>
</li></dir>
<h2>@</h2>
<dir>
<li><a href="#IDX272">
<code>@</code> (в командах)</a> 
</li><li><a href="#IDX408">
@, и <code>define</code></a> 
</li></dir>
<h2>[</h2>
<dir>
<li><a href="#IDX136">
<code>[...]</code> (шаблонные символы)</a>  
</li></dir>
<h2>\</h2>
<dir>
<li><a href="#IDX20">
<code>\</code>, для сцепления строк</a> 
</li><li><a href="#IDX291">
<code>\</code>, в командах</a> 
</li><li><a href="#IDX161">
<code>\</code>, для отключения специального значения <code>%</code></a>, 
<a href="#IDX244">
<code>\</code>, для отключения специального значения <code>%</code></a>, 
<a href="#IDX498">
<code>\</code>, для отключения специального значения <code>%</code></a> 
</li></dir>
<h2>_</h2>
<dir>
<li><a href="#IDX898"><code>__.SYMDEF</code></a>
</li></dir>
<h2>a</h2>
<dir>
<li><a href="#IDX164">
algorithm for directory search (алгоритм поиска в каталогах)</a> 
</li><li><a href="#IDX583">
<code>all</code> (стандартная цель)</a> 
</li><li><a href="#IDX465">
appending to variables (добавление значения к переменной)</a> 
</li><li><a href="#IDX769">ar</a>
</li><li><a href="#IDX895">
archive (архив)</a> 
</li><li><a href="#IDX896">
archive member targets (элемент архива)</a> 
</li><li><a href="#IDX900">
archive symbol directory updating (обновление каталога символов архивного файла)</a> 
</li><li><a href="#IDX905">
archive (архив), и <code>-j</code></a> 
</li><li><a href="#IDX903">
archive (архив), и параллельное выполнение</a> 
</li><li><a href="#IDX908">
archive (архив), суффиксное правило для архивов</a> 
</li><li><a href="#IDX383">
Arg list too long (список аргументов слишком велик)</a> 
</li><li><a href="#IDX491">
arguments of functions (аргументы функций)</a> 
</li><li><a href="#IDX724">as</a>, <a href="#IDX771">as</a>
</li><li><a href="#IDX723">
assembly (ассемблирование), правило для запуска ассемблера</a> 
</li><li><a href="#IDX79">
automatic generation of prerequisites (автоматическая генерация пререквизитов)</a>, 
<a href="#IDX255">
automatic generation of prerequisites (автоматическая генерация пререквизитов)</a> 
</li><li><a href="#IDX837">
automatic variables (автоматические переменные)</a>  
</li></dir>
<h2>b</h2>
<dir>
<li><a href="#IDX567">backquotes</a>
</li><li><a href="#IDX21">
backslash (<code>\</code>), для сцепления строк</a> 
</li><li><a href="#IDX290">
backslash (<code>\</code>), в командах</a> 
</li><li><a href="#IDX162">
backslash (<code>\</code>), для отмены специального значения <code>%</code></a>, 
<a href="#IDX245">
backslash (<code>\</code>), для отмены специального значения <code>%</code></a>, 
<a href="#IDX499">
backslash (<code>\</code>), для отмены специального значения <code>%</code></a> 
</li><li><a href="#IDX150">
backslashes in pathnames and wildcard expansion 
    (символы <code>\</code> в именах файлов и расширение шаблонных символов) </a> 
</li><li><a href="#IDX532">
basename (базовое имя)</a> 
</li><li><a href="#IDX923">
binary packages (бинарный пакет)</a> 
</li><li><a href="#IDX304">
broken pipe (нарушение канала обмена)</a> 
</li><li><a href="#IDX5">
bugs (ошибки), сообщение о</a> 
</li><li><a href="#IDX203">
built-in special targets (встроенные специальные цели)</a>  
</li></dir>
<h2>c</h2>
<dir>
<li><a href="#IDX705">
C++, правило для компиляции</a> 
</li><li><a href="#IDX700">
C, правило для компиляции</a> 
</li><li><a href="#IDX701">cc</a>, <a href="#IDX773">cc</a>
</li><li><a href="#IDX287">
<code>cd</code> (команда оболочки)</a>, 
<a href="#IDX340">
<code>cd</code> (команда оболочки)</a> 
</li><li><a href="#IDX819">
chains of rules (цепочки правил)</a> 
</li><li><a href="#IDX595">
<code>check</code> (стандартная цель)</a> 
</li><li><a href="#IDX584">
<code>clean</code> (стандартная цель)</a> 
</li><li><a href="#IDX25">
<code>clean</code> цель</a>, 
<a href="#IDX47">
    <code>clean</code> цель</a> 
</li><li><a href="#IDX45">
cleaning up (очистка)</a> 
</li><li><a href="#IDX588">
<code>clobber</code> (стандартная цель)</a> 
</li><li><a href="#IDX760">co</a>, <a href="#IDX777">co</a>
</li><li><a href="#IDX44">
combining rules by dependency (комбинирование правил по их пререквизитам)</a> 
</li><li><a href="#IDX361">
command line variable definitions, and recursion (определение 
    переменных с помощью командной строки и рекурсия)</a> 
</li><li><a href="#IDX624">
command line variables (переменные, определенные в командной строке)</a> 
</li><li><a href="#IDX124">
commands (команды)</a> 
</li><li><a href="#IDX288">
commands (команды), символ <code>\</code> в командах</a> 
</li><li><a href="#IDX268">
commands (команды), комментарии в командах</a> 
</li><li><a href="#IDX273">
commands (команды), отображение</a> 
</li><li><a href="#IDX412">
commands (команды), пустые</a> 
</li><li><a href="#IDX313">
commands (команды), ошибки в командах</a> 
</li><li><a href="#IDX283">
commands (команды), исполнение</a> 
</li><li><a href="#IDX298">
commands (команды), параллельное исполнение</a> 
</li><li><a href="#IDX566">
commands (команды), расширение</a> 
</li><li><a href="#IDX264">
commands (команды), написание</a> 
</li><li><a href="#IDX598">
commands (команды), вместо исполнения</a> 
</li><li><a href="#IDX15">
commands (команды), введение в</a> 
</li><li><a href="#IDX289">
commands (команды), разбиение на строки</a> 
</li><li><a href="#IDX406">
commands (команды), последовательности</a> 
</li><li><a href="#IDX267">
comments (комментарии), в командах</a> 
</li><li><a href="#IDX55">
comments (комментарии), в make-файле</a> 
</li><li><a href="#IDX913">
compatibility (совместимость)</a> 
</li><li><a href="#IDX354">
compatibility in exporting (совместимость при экспортировании переменных)</a> 
</li><li><a href="#IDX627">
compilation (компиляция), проверка компиляции</a> 
</li><li><a href="#IDX451">
computed variable name (вычисляемые имена переменных)</a> 
</li><li><a href="#IDX558">
conditional expansion (условное вычисление)</a>
</li><li><a href="#IDX439">
conditional variable assignment (условное присваивание переменной)</a> 
</li><li><a href="#IDX481">
conditionals (условные конструкции)</a> 
</li><li><a href="#IDX19">
continuation lines (сцепление строк)</a> 
</li><li><a href="#IDX570">
controlling make (управление работой make)</a>
</li><li><a href="#IDX919">
conventions for makefiles (соглашения для make-файлов)</a> 
</li><li><a href="#IDX745">
ctangle</a>, <a href="#IDX803">ctangle</a>
</li><li><a href="#IDX742">
cweave</a>, <a href="#IDX799">cweave</a>
</li></dir>
<h2>d</h2>
<dir>
<li><a href="#IDX666">data base of <code>make</code> rules
(база данных правил)</a>
</li><li><a href="#IDX41">
deducing commands (сокращение команд с помощью неявных правил)</a> 
</li><li><a href="#IDX84">
default directries for included makefiles (поиск включаемых файлов в каталогах)</a> 
</li><li><a href="#IDX29">
default goal (главная цель по умолчанию)</a>, 
<a href="#IDX118">
    default goal (главная цель по умолчанию)</a> 
</li><li><a href="#IDX59">
default makefile name (имя make-файла по умолчанию)</a> 
</li><li><a href="#IDX887">
default rules (правила по умолчанию), правила "последнего шанса"</a> 
</li><li><a href="#IDX104">define, вычисление</a>
</li><li><a href="#IDX473">
defining variables verbatim (определение многострочной переменной)</a> 
</li><li><a href="#IDX324">
deletion of target files (удаление целевых файлов)</a>, 
<a href="#IDX329">
    deletion of target files (удаление целевых файлов)</a> 
</li><li><a href="#IDX54">
directive (директива)</a> 
</li><li><a href="#IDX392">
directories (каталоги), печать каталогов</a> 
</li><li><a href="#IDX902">
directories (каталоги), обновление каталога символов архива</a> 
</li><li><a href="#IDX523">
directory part (каталог - часть имени файла)</a> 
</li><li><a href="#IDX156">
directory search (<code>VPATH</code>) (поиск в каталогах)</a> 
</li><li><a href="#IDX172">
directory search (<code>VPATH</code>) (поиск в каталогах), и неявные правила</a> 
</li><li><a href="#IDX180">
directory search (<code>VPATH</code>) (поиск в каталогах), и библиотеки</a> 
</li><li><a href="#IDX170">
directory search (<code>VPATH</code>) (поиск в каталогах), и команды оболочки</a> 
</li><li><a href="#IDX165">
directory search algorithm (алгоритм поиска по каталогам)</a> 
</li><li><a href="#IDX167">
directory search (поиск в каталогах), традиционный</a> 
</li><li><a href="#IDX593">
<code>dist</code> (стандартная цель)</a> 
</li><li><a href="#IDX586">
<code>distclean</code> (стандартная цель)</a> 
</li><li><a href="#IDX490">
dollar sign (<code>$</code>) (символ доллара), в вызове функции</a> 
</li><li><a href="#IDX126">
dollar sign (<code>$</code>) (символ доллара), в правилах</a> 
</li><li><a href="#IDX456">
dollar sign (<code>$</code>) (символ доллара), в имени переменной</a> 
</li><li><a href="#IDX422">
dollar sign (<code>$</code>) (символ доллара), в ссылке на переменную</a> 
</li><li><a href="#IDX250">
double-colon rules (правила с двойным двоеточием)</a> 
</li><li><a href="#IDX518">
duplicate words (дублирующиеся слова), удаление</a> 
</li></dir>
<h2>e</h2>
<dir>
<li><a href="#IDX384">E2BIG</a>
</li><li><a href="#IDX270">
echoing of commands (отображение команд)</a> 
</li><li><a href="#IDX9">
editor (редактор)</a> 
</li><li><a href="#IDX322">
Emacs (<code>M-x компиляция</code>)</a> 
</li><li><a href="#IDX411">
empty commands (пустые команды)</a> 
</li><li><a href="#IDX196">
empty targets (пустые цели)</a> 
</li><li><a href="#IDX476">
environment (операционное окружение)</a> 
</li><li><a href="#IDX345">
environment (операционное окружение), и рекурсия</a> 
</li><li><a href="#IDX297">
environment (операционное окружение), переменная <code>SHELL</code> в операционном окружении</a> 
</li><li><a href="#IDX572">
error (ошибка), остановка при возникновении ошибки</a>
</li><li><a href="#IDX312">
errors (ошибки, в командах)</a> 
</li><li><a href="#IDX147">
errors with wildcards (ошибки при использовании шаблонов)</a> 
</li><li><a href="#IDX300">
execution (выполнение), параллельное</a> 
</li><li><a href="#IDX597">
execution (исполнение), вместо исполнения</a> 
</li><li><a href="#IDX284">
execution (исполнение), команд</a> 
</li><li><a href="#IDX314">
exit status (код возврата)</a> 
</li><li><a href="#IDX50">
explicit rule (явное правило), определение</a> 
</li><li><a href="#IDX113">explicit rule (явное правило), обработка</a>
</li><li><a href="#IDX346">
exporting variables (экспортирование переменных)</a> </li></dir>

<h2>f</h2>
<dir>
<li><a href="#IDX714">f77</a>, <a href="#IDX780">f77</a>
</li><li><a href="#IDX911">
features of GNU <code>make</code> (возможности GNU <code>make</code>)</a>
</li><li><a href="#IDX916">
features (возможности), не реализованные</a> 
</li><li><a href="#IDX521">
file name functions (функции для работы с именами файлов)</a> 
</li><li><a href="#IDX60">
file name of makefile (имя make-файла)</a> 
</li><li><a href="#IDX71">
file name of makefile (имя make-файла), как указать</a> 
</li><li><a href="#IDX539">
file name prefix (префикс имени файла), добавление</a> 
</li><li><a href="#IDX530">
file name suffix (суффикс имени файла)</a> 
</li><li><a href="#IDX536">
file name suffix (суффикс имени файла), добавление</a> 
</li><li><a href="#IDX132">
file name with wildcards (имя файла с шаблонными символами)</a> 
</li><li><a href="#IDX533">
file name (имя файла), основа имени файла</a> 
</li><li><a href="#IDX524">
file name (имя файла), часть имени файла - имя каталога</a> 
</li><li><a href="#IDX526">
file name (имя файла), часть имени файла кроме имени каталога</a> 
</li><li><a href="#IDX615">
files (файлы), предполагать "новыми"</a> 
</li><li><a href="#IDX619">
files (файлы), предполагать "старыми"</a> 
</li><li><a href="#IDX620">
files (файлы), избежание перекомпиляции</a> 
</li><li><a href="#IDX822">
files (файлы), промежуточные</a> 
</li><li><a href="#IDX513">
filtering out words (отфильтровывание слов)</a> 
</li><li><a href="#IDX510">
filtering words (фильтрация слов)</a> 
</li><li><a href="#IDX507">
finding strings (нахождение строк)</a> 
</li><li><a href="#IDX631">
flags (опции)</a> 
</li><li><a href="#IDX767">
flags for compilers (опции компилятора)</a> 
</li><li><a href="#IDX423">
flavors of variables (разновидности переменных)</a> 
</li><li><a href="#IDX194"><code>FORCE</code></a>
</li><li><a href="#IDX192">
force targets (принудительное обновление целей)</a> 
</li><li><a href="#IDX712">
Fortran (Фортран), правило для компиляции</a> 
</li><li><a href="#IDX488">
functions (функции)</a> 
</li><li><a href="#IDX569">
functions, for controlling make</a>
functions (функции), управляющие процессом сборки 
</li><li><a href="#IDX520">
functions (функции), для манипуляций с именами файлов</a> 
</li><li><a href="#IDX493">
functions (функции), для манипуляции с текстом</a> 
</li><li><a href="#IDX492">
functions (функции), синтаксис</a> 
</li><li><a href="#IDX560">functions (функции), определенные пользователем</a>
</li></dir>
<h2>g</h2>
<dir>
<li><a href="#IDX706">g++</a>, <a href="#IDX775">g++</a>
</li><li><a href="#IDX702">gcc</a>
</li><li><a href="#IDX80">
generating prerequisites automatically (автоматическая генерация пререквизитов)</a>, 
<a href="#IDX256">
generating prerequisites automatically (автоматическая генерация пререквизитов)</a> 
</li><li><a href="#IDX763">get</a>, <a href="#IDX782">get</a>
</li><li><a href="#IDX133">
globbing (шаблоны)</a> 
</li><li><a href="#IDX31">
goal (главная цель)</a> 
</li><li><a href="#IDX30">
goal (главная цель), по умолчанию</a>, 
<a href="#IDX119">
goal (главная цель), по умолчанию</a> 
</li><li><a href="#IDX580">
goal (главная цель), задание</a> 
</li></dir>
<h2>h</h2>
<dir>
<li><a href="#IDX139">
home directory (домашний каталог)</a>  
</li></dir>
<h2>i</h2>
<dir>
<li><a href="#IDX2">IEEE Standard 1003.2</a>
</li><li><a href="#IDX105">ifdef, обработка</a>
</li><li><a href="#IDX106">ifeq, обработка</a>
</li><li><a href="#IDX107">ifndef, обработка</a>
</li><li><a href="#IDX108">ifneq, обработка</a>
</li><li><a href="#IDX694">
implicit rule (неявное правило)</a> 
</li><li><a href="#IDX174">
implicit rule (неявное правило), и поиск по каталогам</a> 
</li><li><a href="#IDX175">
implicit rule (неявное правило), и <code>VPATH</code></a> 
</li><li><a href="#IDX52">
implicit rule (неявное правило), определение</a> 
</li><li><a href="#IDX111">
implicit rule (неявное правило), обработка</a> 
</li><li><a href="#IDX696">
implicit rule (неявное правило), использование</a> 
</li><li><a href="#IDX42">
implicit rule (неявное правило), введение</a> 
</li><li><a href="#IDX698">
implicit rule (неявное правило), предопределенное</a> 
</li><li><a href="#IDX893">
implicit rule (неявное правило), алгоритм поиска</a> 
</li><li><a href="#IDX83">
included makefiles (подключаемые make-файлы), каталоги по умолчанию</a> 
</li><li><a href="#IDX89">
including (включение других файлов и переменная <code>MAKEFILES</code>)</a> 
</li><li><a href="#IDX72">
including other makefiles (включение других make-файлов)</a> 
</li><li><a href="#IDX914">
incompatibilities (несовместимости)</a> 
</li><li><a href="#IDX752">
Info, правило для форматирования</a> 
</li><li><a href="#IDX589">
<code>install</code> (стандартная цель)</a> 
</li><li><a href="#IDX821">
intermediate files (промежуточные файлы)</a> 
</li><li><a href="#IDX823">
intermediate files (промежуточные файлы), сохранение</a> 
</li><li><a href="#IDX212">
intermediate targets (промежуточные цели), явные</a> 
</li><li><a href="#IDX327">
interrupt (прерывание)</a> 
</li></dir>
<h2>j</h2>
<dir>
<li><a href="#IDX301">
job slots (слоты заданий)</a> 
</li><li><a href="#IDX381">
job slots (слоты заданий), и рекурсия</a> 
</li><li><a href="#IDX308">
jobs (задание), ограничения количества в зависимости от загрузки</a> 
</li><li><a href="#IDX541">
joining lists of words (объединение списков слов)</a>  
</li></dir>
<h2>k</h2>
<dir>
<li><a href="#IDX332">
killing (принудительное завершение)</a>  
</li></dir>
<h2>l</h2>
<dir>
<li><a href="#IDX886">
last-resort default rules (используемые по умолчанию правила "последнего шанса")</a> 
</li><li><a href="#IDX728">ld</a>
</li><li><a href="#IDX733">lex</a>, <a href="#IDX784">lex</a>
</li><li><a href="#IDX734">
Lex, правило для запуска</a> 
</li><li><a href="#IDX179">
libraries for linking (библиотеки для компоновки), поиск в каталогах</a> 
</li><li><a href="#IDX909">
library archive (библиотечный архив), суффиксное правило для</a> 
</li><li><a href="#IDX307">
limiting jobs based on load (ограничения числа заданий в зависимости от загрузки)</a> 
</li><li><a href="#IDX178">
link libraries (компонуемые библиотеки), и поиск в каталогах</a> 
</li><li><a href="#IDX184">link libraries (компонуемые библиотеки), соответствие шаблону</a>
</li><li><a href="#IDX727">
linking (компоновка), предопределенное правило для компоновки</a> 
</li><li><a href="#IDX736">lint</a>
</li><li><a href="#IDX737">
<code>lint</code>, правило для запуска</a> 
</li><li><a href="#IDX853">
list of all prerequisites (список всех пререквизитов)</a> 
</li><li><a href="#IDX849">
list of changed prerequisites (список модифицированных пререквизитов)</a>
</li><li><a href="#IDX306">
load average (средняя загрузка)</a> 
</li><li><a href="#IDX429">
loops in variable expansion (зацикливание при вычислении переменной)</a> 
</li><li><a href="#IDX142">
<code>lpr</code> (команда оболочки)</a>, 
<a href="#IDX200">
    <code>lpr</code> (команда оболочки)</a>  
</li></dir>
<h2>m</h2>
<dir>
<li><a href="#IDX719">m2c</a>
</li><li><a href="#IDX418">macro</a>
</li><li><a href="#IDX259"><code>make depend</code></a>
</li><li><a href="#IDX581"><code>MAKECMDGOALS</code></a>
</li><li><a href="#IDX7">
makefile (make-файл)</a> 
</li><li><a href="#IDX57">
makefile name (имя make-файла)</a> 
</li><li><a href="#IDX69">
makefile name (имя make-файла), задание</a> 
</li><li><a href="#IDX11">
makefile rule parts (правила make-файла)</a> 
</li><li><a href="#IDX88">
makefile (make-файл), и переменная <code>MAKEFILES</code></a> 
</li><li><a href="#IDX918">
makefile (make-файл), принятые соглашения</a> 
</li><li><a href="#IDX28">
makefile (make-файл), обработка</a> 
</li><li><a href="#IDX48">
makefile (make-файл), написание</a> 
</li><li><a href="#IDX73">
makefile (make-файл), включение</a> 
</li><li><a href="#IDX96">
makefile (make-файл), "перекрытие"</a> 
</li><li><a href="#IDX99">makefile (make-файл), интерпретация</a>
</li><li><a href="#IDX94">
makefile (make-файл), обновление</a> 
</li><li><a href="#IDX18">
makefile (make-файл), простой</a> 
</li><li><a href="#IDX754">makeinfo</a>, <a href="#IDX791">makeinfo</a>
</li><li><a href="#IDX884">
match-anything rule (правило с произвольным соответствием)</a> 
</li><li><a href="#IDX97">
match-anything rule (правило с произвольным соответствием), используемое для "перекрытия"</a> 
</li><li><a href="#IDX915">
missing features (отсутствующая возможность)</a> 
</li><li><a href="#IDX146">
mistakes with wildcards (ошибки при использовании шаблонов)</a> 
</li><li><a href="#IDX443">
modified variable reference (модифицированные варианты ссылки на переменную)</a> 
</li><li><a href="#IDX718">
Modula-2, правило для компиляции</a> 
</li><li><a href="#IDX585">
<code>mostlyclean</code> (стандартная цель)</a> 
</li><li><a href="#IDX228">
multiple rules for one target (несколько правил с одной целью)</a> 
</li><li><a href="#IDX252">
multiple rules (<code>::</code>) for one target (несколько правил с 
                      двойным двоеточием для одной цели)</a> 
</li><li><a href="#IDX223">
multiple targets (несколько целей)</a> 
</li><li><a href="#IDX833">
multiple targets (несколько целей), в шаблонном правиле</a>  
</li></dir>
<h2>n</h2>
<dir>
<li><a href="#IDX58">
name of makefile (имя make-файла)</a> 
</li><li><a href="#IDX70">
name of makefile (имя make-файла), как указать</a> 
</li><li><a href="#IDX450">
nested variable reference (вложенная ссылка на переменную)</a> 
</li><li><a href="#IDX293">
newline (перевод строки), "подавление", в командах</a> 
</li><li><a href="#IDX23">
newline (перевод строки), "подавление" в make-файле</a> 
</li><li><a href="#IDX527">
nondirectory part (часть имени файла кроме имени каталога)</a>  
</li></dir>
<h2>o</h2>
<dir>
<li><a href="#IDX40"><code>OBJ</code></a>
</li><li><a href="#IDX39"><code>obj</code></a>
</li><li><a href="#IDX36"><code>OBJECTS</code></a>
</li><li><a href="#IDX35"><code>objects</code></a>
</li><li><a href="#IDX38"><code>OBJS</code></a>
</li><li><a href="#IDX37"><code>objs</code></a>
</li><li><a href="#IDX889">
old-fashioned suffix rules (устаревшие суффиксные правила)</a> 
</li><li><a href="#IDX630">
options (опции)</a> 
</li><li><a href="#IDX358">
options (опции), и рекурсия</a> 
</li><li><a href="#IDX389">
options (опции), установка из операционной среды</a> 
</li><li><a href="#IDX391">
options (опции), установка в make-файле</a> 
</li><li><a href="#IDX836">
order of pattern rules (порядок следования шаблонных правил)</a> 
</li><li><a href="#IDX564">
origin of variable ("происхождение" переменной)</a>
</li><li><a href="#IDX95">
overriding makefiles ("перекрытие" make-файла)</a> 
</li><li><a href="#IDX622">
overriding variables with arguments ("перекрытие" переменных с помощью аргументов командной строки)</a> 
</li><li><a href="#IDX468">
overriding with <code>override</code> ("перекрытие" с помощью <code>override</code>)</a> 
</li></dir>
<h2>p</h2>
<dir>
<li><a href="#IDX299">
parallel execution (параллельное выполнение)</a> 
</li><li><a href="#IDX904">
parallel execution (параллельное выполнение), и обновление архивов</a> 
</li><li><a href="#IDX222">parallel execution (параллельное выполнение), перекрытие</a>
</li><li><a href="#IDX12">parts of makefile rule (часть make-файла - правила)</a>
</li><li><a href="#IDX709">
Pascal (Паскаль), правило для компиляции</a> 
</li><li><a href="#IDX828">
pattern rule (шаблонное правило)</a> 
</li><li><a href="#IDX112">pattern rule (шаблонные правила), обработка</a>
</li><li><a href="#IDX835">
pattern rules (шаблонные правила), порядок следования</a> 
</li><li><a href="#IDX234">
pattern rules (шаблонные правила), статические</a> 
</li><li><a href="#IDX238">
pattern rules (шаблонные правила), статические, синтаксис</a> 
</li><li><a href="#IDX479">
pattern-specific variables (шаблонно-зависимые значения переменных)</a> 
</li><li><a href="#IDX710">pc</a>, <a href="#IDX786">pc</a>
</li><li><a href="#IDX187">
phony targets (абстрактные цели)</a> 
</li><li><a href="#IDX145">
pitfalls of wildcards (проблемы при использовании шаблонов)</a> 
</li><li><a href="#IDX912">
portability (переносимость)</a> 
</li><li><a href="#IDX1">POSIX</a>
</li><li><a href="#IDX386">POSIX.2</a>
</li><li><a href="#IDX922">
post-installation commands (команды пост-инсталляции)</a> 
</li><li><a href="#IDX921">
pre-installation commands (команды пред-инсталляции)</a> 
</li><li><a href="#IDX209">
precious (сохраняемые) цели</a> 
</li><li><a href="#IDX667">
predefined rules and variables (предопределенные правила и переменные), печать</a>
</li><li><a href="#IDX538">
prefix (префикс), добавление</a> 
</li><li><a href="#IDX117">prerequisite (пререквизит)</a>
</li><li><a href="#IDX832">prerequisite pattern (шаблон пререквизита), неявный</a>
</li><li><a href="#IDX241">prerequisite pattern (шаблон пререквизита), статический</a>
</li><li><a href="#IDX110">prerequisite (пререквизит), обработка</a>
</li><li><a href="#IDX129">prerequisites (пререквизиты)</a>
</li><li><a href="#IDX78">
prerequisites (пререквизиты), автоматическая генерация</a>, 
<a href="#IDX254">
prerequisites (пререквизиты), автоматическая генерация</a> 
</li><li><a href="#IDX14">prerequisites (пререквизиты), введение</a>
</li><li><a href="#IDX852">prerequisites (пререквизиты), список всех</a>
</li><li><a href="#IDX848">prerequisites (пререквизиты), список измененных</a>
</li><li><a href="#IDX236">prerequisites (пререквизиты), варьирование в статических шаблонах</a>
</li><li><a href="#IDX824">
preserving intermediate files (сохранение промежуточных файлов)</a> 
</li><li><a href="#IDX210">
preserving (сохранение) с помощью <code>.PRECIOUS</code></a>, 
<a href="#IDX826">
preserving (сохранение) с помощью <code>.PRECIOUS</code></a> 
</li><li><a href="#IDX215">
preserving (сохранение) с помощью <code>.SECONDARY</code></a> 
</li><li><a href="#IDX590">
<code>print</code> (стандартная цель)</a> 
</li><li><a href="#IDX141">
<code>print</code>, цель </a>, 
<a href="#IDX199">
<code>print</code>, цель </a> 
</li><li><a href="#IDX393">
printing directories (печать каталогов)</a> 
</li><li><a href="#IDX274">
printing of commands (печать команд)</a> 
</li><li><a href="#IDX576">
printing user warnings (вывод "пользовательских" предупреждений)</a>

</li><li><a href="#IDX6">
problems and bugs (проблемы и ошибки), сообщение</a> 
</li><li><a href="#IDX148">
problems with wildcards (проблемы при использовании шаблонов)</a> 
</li><li><a href="#IDX27">
processing a makefile (обработка make-файла)</a>  
</li></dir>
<h2>q</h2>
<dir>
<li><a href="#IDX609">
question mode (режим проверки)</a> 
</li><li><a href="#IDX246">
quoting (отключение специального значения) <code>%</code>, в статических шаблонах</a> 
</li><li><a href="#IDX500">
quoting (отключение специального значения) <code>%</code>, в <code>patsubst</code></a> 
</li><li><a href="#IDX163">
quoting (отключение специального значения) <code>%</code>, в <code>vpath</code></a> 
</li><li><a href="#IDX292">
quoting ("отключение" перевода строки), в командах</a> 
</li><li><a href="#IDX22">
quoting ("отключение" перевода строки), в make-файле</a>  
</li></dir>
<h2>r</h2>
<dir>
<li><a href="#IDX713">
Ratfor (Ратфор), правило для компиляции</a> 
</li><li><a href="#IDX759">
RCS, правило для извлечения</a> 
</li><li><a href="#IDX98">reading makefiles (чтение make-файла)</a>
</li><li><a href="#IDX64"><code>README</code></a>
</li><li><a href="#IDX587">
<code>realclean</code> (стандартная цель)</a> 
</li><li><a href="#IDX8">
recompilation (перекомпиляция)</a> 
</li><li><a href="#IDX621">
recompilation (перекомпиляция), избежание</a> 
</li><li><a href="#IDX198">
recording events with empty targets (фиксация событий с помощью пустых целей)</a> 
</li><li><a href="#IDX334">
recursion (рекурсия)</a> 
</li><li><a href="#IDX374">
recursion (рекурсия), и <code>-C</code></a> 
</li><li><a href="#IDX375">
recursion (рекурсия), и <code>-f</code></a> 
</li><li><a href="#IDX380">
recursion (рекурсия), и <code>-j</code></a> 
</li><li><a href="#IDX376">
recursion (рекурсия), и <code>-o</code></a> 
</li><li><a href="#IDX342">
recursion (рекурсия), и <code>-t</code></a> 
</li><li><a href="#IDX377">
recursion (рекурсия), и <code>-W</code></a> 
</li><li><a href="#IDX397">
recursion (рекурсия), и <code>-w</code></a> 
</li><li><a href="#IDX363">
recursion (рекурсия), и определения переменных, заданные в командной строке</a> 
</li><li><a href="#IDX349">
recursion (рекурсия), и операционная среда</a> 
</li><li><a href="#IDX339">
recursion (рекурсия), и переменная <code>MAKE</code></a> 
</li><li><a href="#IDX91">
recursion (рекурсия), и переменная <code>MAKEFILES</code></a> 
</li><li><a href="#IDX359">
recursion (рекурсия), и опции</a> 
</li><li><a href="#IDX394">
recursion (рекурсия), и печать каталогов</a> 
</li><li><a href="#IDX350">
recursion (рекурсия), и переменные</a> 
</li><li><a href="#IDX356">
recursion (рекурсия), уровень "вложенности"</a> 
</li><li><a href="#IDX416">
recursive variable expansion (рекурсивное вычисление переменной)</a>, 
<a href="#IDX424">
    recursive variable expansion (рекурсивное вычисление переменной)</a> 
</li><li><a href="#IDX426">
recursively expanded variables (рекурсивно вычисляемая переменная)</a> 
</li><li><a href="#IDX420">
reference to variables (ссылка на переменную)</a>, 
<a href="#IDX442">
    reference to variables (ссылка на переменную)</a> 
</li><li><a href="#IDX32">
relinking (перекомпоновка)</a> 
</li><li><a href="#IDX93">
remaking makefiles (обновление make-файлов)</a> 
</li><li><a href="#IDX325">
removal of target files (удаление целевых файлов)</a>, 
<a href="#IDX330">
    removal of target files  (удаление целевых файлов)</a> 
</li><li><a href="#IDX517">
removing duplicate words  (удаление дубликатов слов)</a> 
</li><li><a href="#IDX217">
removing targets on failure (удаление целей при возникновении ошибки)</a>
</li><li><a href="#IDX46">
removing (удаление), для очистки</a> 
</li><li><a href="#IDX4">
reporting bugs (сообщение об ошибках)</a> 
</li><li><a href="#IDX805">rm</a>
</li><li><a href="#IDX26">
<code>rm</code> (команда оболочки)</a>, 
<a href="#IDX140">
<code>rm</code> (команда оболочки)</a>, 
<a href="#IDX190">
<code>rm</code> (команда оболочки)</a>, 
<a href="#IDX316">
<code>rm</code> (команда оболочки)</a> 
</li><li><a href="#IDX265">
rule commands (команды правила)</a> 
</li><li><a href="#IDX130">rule prerequisites (пререквизиты правила)</a>
</li><li><a href="#IDX120">
rule syntax (синтаксис правила)</a> 
</li><li><a href="#IDX123">
rule targets (цели правила)</a> 
</li><li><a href="#IDX128">
rule (правила), и <code>$</code></a> 
</li><li><a href="#IDX251">
rule (правило), с двойным двоеточием (<code>::</code>)</a> 
</li><li><a href="#IDX49">
rule (правило), явное, задание</a> 
</li><li><a href="#IDX115">
rule (правило), написание</a> 
</li><li><a href="#IDX695">
rule (правило), неявное</a> 
</li><li><a href="#IDX176">
rule (правило), неявное, и поиск в каталогах</a> 
</li><li><a href="#IDX177">
rule (правило), неявное, и <code>VPATH</code></a> 
</li><li><a href="#IDX820">
rule (правила), неявные, цепочки</a> 
</li><li><a href="#IDX51">
rule (правило), неявное, задание</a> 
</li><li><a href="#IDX697">
rule (правила), неявные, использование</a> 
</li><li><a href="#IDX43">
rule (правила), неявные, введение в</a> 
</li><li><a href="#IDX699">
rule (правило), неявное, предопределенное</a> 
</li><li><a href="#IDX10">
rule (правила), введение в</a> 
</li><li><a href="#IDX230">
rule (правила), несколько правил с одной целью</a> 
</li><li><a href="#IDX195">
rule (правило), без команд и пререквизитов</a> 
</li><li><a href="#IDX829">
rule (правило), шаблонное</a> 
</li><li><a href="#IDX233">
rule (правила), статическое шаблонное</a> 
</li><li><a href="#IDX248">
rule (правила), сравнение статических шаблонных правил и неявных правил</a> 
</li><li><a href="#IDX226">
rule (правило), с несколькими целями</a>  
</li></dir>
<h2>s</h2>
<dir>
<li><a href="#IDX764">
s. (префикс файлов SCCS)</a> 
</li><li><a href="#IDX762">
SCCS, правило для извлечения</a> 
</li><li><a href="#IDX894">
search algorithm (алгоритм поиска), неявных правил</a> 
</li><li><a href="#IDX155">
search path for prerequisites (путь поиска для пререквизитов - <code>VPATH</code>)</a>
</li><li><a href="#IDX173">
search path for prerequisites (путь поиска для пререквизитов - <code>VPATH</code>), и неявные правила</a> 
</li><li><a href="#IDX182">
search path for prerequisites (путь поиска для пререквизитов - <code>VPATH</code>), и подключаемые библиотеки</a>
</li><li><a href="#IDX506">
searching for strings (поиск строк)</a> 
</li><li><a href="#IDX825">
secondary files (вторичные файлы)</a> 
</li><li><a href="#IDX214">
secondary targets (вторичные цели)</a> 
</li><li><a href="#IDX262">
<code>sed</code> (команда оболочки)</a> 
</li><li><a href="#IDX545">
selecting a word (выборка слова)</a> 
</li><li><a href="#IDX548">
selecting word lists (выборка списка слов)</a> 
</li><li><a href="#IDX405">
sequences of commands (последовательность команд)</a> 
</li><li><a href="#IDX388">
setting options from environment (установка опций из операционной среды)</a> 
</li><li><a href="#IDX390">
setting options in makefiles (установка опций в make-файле)</a>
</li><li><a href="#IDX459">
setting variables (установка переменных)</a>
</li><li><a href="#IDX229">
several rules for one target (несколько правил для одной цели)</a> 
</li><li><a href="#IDX224">
several targets in a rule (несколько целей в правиле)</a> 
</li><li><a href="#IDX592">
<code>shar</code> (стандартная цель)</a> 
</li><li><a href="#IDX24">
shell command (команда оболочки)</a> 
</li><li><a href="#IDX169">
shell command (команды оболочки), и поиск в каталогах</a> 
</li><li><a href="#IDX285">
shell command (команда оболочки), выполнение</a> 
</li><li><a href="#IDX568">
shell command (команда оболочки), функция для вызова команд оболочки</a>
</li><li><a href="#IDX75">
shell file name pattern (шаблоны имен файлов в <code>include</code>)</a>
</li><li><a href="#IDX76">
shell wildcards (шаблоны в <code>include</code>)</a> 
</li><li><a href="#IDX296">
<code>SHELL</code>, MS-DOS специфика</a> 
</li><li><a href="#IDX328">
signal (сигнал)</a> 
</li><li><a href="#IDX271">
silent operation (отключение отображения)</a> 
</li><li><a href="#IDX17">
simple makefile (простой make-файл)</a> 
</li><li><a href="#IDX417">
simple variable expansion (простое расширение переменной)</a> 
</li><li><a href="#IDX34">
simplifying with variables (упрощение с помощью переменных)</a> 
</li><li><a href="#IDX431">
simply expanded variables (упрощенно вычисляемые переменные)</a> 
</li><li><a href="#IDX516">
sorting words (сортировка слов)</a> 
</li><li><a href="#IDX436">
spaces (пробелы), в значении переменной</a> 
</li><li><a href="#IDX503">
spaces (пробелы), удаление</a> 
</li><li><a href="#IDX202">
special targets (специальные цели)</a> 
</li><li><a href="#IDX68">
specifying makefile name (задание имени make-файла)</a> 
</li><li><a href="#IDX305">
standard input (стандартный ввод)</a> 
</li><li><a href="#IDX3">
standards conformance (соответствие стандартам)</a> 
</li><li><a href="#IDX920">
standards for makefiles (стандарты для make-файлов)</a> 
</li><li><a href="#IDX232">
static pattern rule (статическое шаблонное правило)</a> 
</li><li><a href="#IDX237">
static pattern rule (статическое шаблонное правило),  синтаксис</a> 
</li><li><a href="#IDX249">
static pattern rule (статическое шаблонное правило), сравнение с неявными правилами</a> 
</li><li><a href="#IDX240">
stem (основа имени)</a>, 
<a href="#IDX883">
    stem (основа имени)</a> 
</li><li><a href="#IDX858">
stem (основа имени), переменная для основы имени</a> 
</li><li><a href="#IDX573">stopping make (остановка сборки)</a>
</li><li><a href="#IDX508">
strings (строки), поиск</a> 
</li><li><a href="#IDX501">
stripping whitespace (удаление пробелов)</a> 
</li><li><a href="#IDX344">
sub-<code>make</code> (<code>make</code> "нижнего" уровня при рекурсивном вызове</a> 
</li><li><a href="#IDX335">
subdirectories (подкаталоги), рекурсия</a> 
</li><li><a href="#IDX444">
substitution variable reference (ссылка на переменную с заменой)</a> 
</li><li><a href="#IDX890">
suffix rule (суффиксное правило)</a> 
</li><li><a href="#IDX907">
suffix rule (суффиксное правило), для архивов</a> 
</li><li><a href="#IDX535">
suffix (суффикс), добавление</a> 
</li><li><a href="#IDX529">
suffix (суффикс), функция для поиска</a> 
</li><li><a href="#IDX448">
suffix (суффикс), подстановка в переменных</a> 
</li><li><a href="#IDX632">
switches (опции)</a> 
</li><li><a href="#IDX901">
symbol directories (каталог символов), обновление в архивах</a> 
</li><li><a href="#IDX121">
syntax of rules (синтаксис правил)</a>  
</li></dir>
<h2>t</h2>
<dir>
<li><a href="#IDX125">
tab character (символ табуляции в командах)</a> 
</li><li><a href="#IDX16">
tabs in rules (символы табуляции в правилах)</a> 
</li><li><a href="#IDX594">
<code>TAGS</code> (стандартная цель)</a> 
</li><li><a href="#IDX744">
tangle</a>, <a href="#IDX801">tangle</a>
</li><li><a href="#IDX591">
<code>tar</code> (стандартная цель)</a> 
</li><li><a href="#IDX116">
target (цель)</a> 
</li><li><a href="#IDX830">
target pattern (шаблон цели), в неявных правилах</a> 
</li><li><a href="#IDX239">
target pattern, static (not implicit)</a>
target pattern (шаблон цели), в статическом правиле 
</li><li><a href="#IDX326">
target (цель), удаление при возникновении ошибок</a> 
</li><li><a href="#IDX331">
target (цель), удаление при прерывании работы</a> 
</li><li><a href="#IDX109">
target (цель), обработка</a>
</li><li><a href="#IDX834">
target (цель), несколько целей в шаблонном правиле</a> 
</li><li><a href="#IDX231">
target (цель), несколько правил для одной цели</a> 
</li><li><a href="#IDX605">
target (цель), обновление времени модификации (touching)</a> 
</li><li><a href="#IDX477">
target-specific variables (целе-зависимые переменные)</a> 
</li><li><a href="#IDX122">
targets (цели)</a> 
</li><li><a href="#IDX189">
targets without a file (цели, не ссылающиеся на файлы)</a>
</li><li><a href="#IDX204">
targets (цели), специальные встроенные</a> 
</li><li><a href="#IDX197">
targets (цели), пустые</a> 
</li><li><a href="#IDX193">
targets (цели), принудительное обновление</a> 
</li><li><a href="#IDX13">
targets (цели), введение в</a> 
</li><li><a href="#IDX225">
targets (цели), несколько</a> 
</li><li><a href="#IDX188">
targets (цели), абстрактная (phony)</a> 
</li><li><a href="#IDX885">
terminal rule (терминальное правило)</a> 
</li><li><a href="#IDX596">
<code>test</code> (стандартная цель)</a> 
</li><li><a href="#IDX626">
testing compilation (проверка компиляции)</a> 
</li><li><a href="#IDX741">tex</a>, <a href="#IDX793">tex</a>
</li><li><a href="#IDX739">
TeX, правило для запуска</a> 
</li><li><a href="#IDX753">texi2dvi</a>, <a href="#IDX795">texi2dvi</a>
</li><li><a href="#IDX751">
Texinfo, правило для форматирования</a> 
</li><li><a href="#IDX138">
tilde (<code>~</code>)</a>
</li><li><a href="#IDX143">
<code>touch</code> (команда оболочки)</a>, 
<a href="#IDX201">
<code>touch</code> (команда оболочки)</a> 
</li><li><a href="#IDX604">
touching files (обновление времени модификации файлов)</a> 
</li><li><a href="#IDX166">
traditional directory search (традиционная схема поиска в каталогах)</a> </li></dir>

<h2>u</h2>
<dir>
<li><a href="#IDX693">
undefined variables (неопределенные переменные), предупреждающее сообщение</a> 
</li><li><a href="#IDX899">
updating archive symbol directories (обновление каталога символов архивного файла)</a>
</li><li><a href="#IDX92">
updating makefiles (обновление make-файлов)</a>  
</li><li><a href="#IDX561">user defined functions (определенная пользователем функция)</a>
</li></dir>
<h2>v</h2>
<dir>
<li><a href="#IDX415">
value (значение)</a> 
</li><li><a href="#IDX458">
value (значение), как переменные получают значения</a> 
</li><li><a href="#IDX414">
variable (переменная)</a> 
</li><li><a href="#IDX53">
variable definition (определение переменной)</a> 
</li><li><a href="#IDX33">
variables (переменные)</a> 
</li><li><a href="#IDX454">
variables (переменные), символ <samp>`$'</samp> в именах</a> 
</li><li><a href="#IDX839">
variables (переменные), и неявные правила</a> 
</li><li><a href="#IDX466">
variables (переменные), добавление значения</a> 
</li><li><a href="#IDX838">
variables (переменные), автоматические</a> 
</li><li><a href="#IDX625">
variables (переменные), заданные в командной строке</a> 
</li><li><a href="#IDX362">
variables (переменные), заданные в командной строке, и рекурсия</a> 
</li><li><a href="#IDX452">
variables (переменные), вычисляемые имена</a> 
</li><li><a href="#IDX440">
variables (переменные), условное присваивание</a> 
</li><li><a href="#IDX474">
variables (переменные), определение многострочных переменных</a> 
</li><li><a href="#IDX347">
variables (переменные), из операционной среды</a>, 
<a href="#IDX475">
    variables (переменные), из операционной среды</a> 
</li><li><a href="#IDX348">
variables (переменные), экспорт</a> 
</li><li><a href="#IDX425">
variables (переменные), разновидности</a> 
</li><li><a href="#IDX457">
variables (переменные), как переменные получают значения</a> 
</li><li><a href="#IDX419">
variables (переменные), как сослаться на переменную</a> 
</li><li><a href="#IDX430">
variables (переменные), зацикливание при вычислении</a> 
</li><li><a href="#IDX445">
variables (переменные), модифицированные варианты ссылки</a> 
</li><li><a href="#IDX453">
variables (переменные), вложенные ссылки</a> 
</li><li><a href="#IDX563">
variables (переменные), "происхождение"</a> 
</li><li><a href="#IDX469">
variables (переменные), "перекрытие"</a> 
</li><li><a href="#IDX623">
variables (переменные), "перекрытие" с помощью аргументов командной строки</a> 
</li><li><a href="#IDX480">
variables (переменные), шаблонно-зависимые</a> 
</li><li><a href="#IDX427">
variables (переменные), рекурсивно вычисляемые</a> 
</li><li><a href="#IDX460">
variables (переменные), установка</a> 
</li><li><a href="#IDX432">
variables (переменные), упрощенно вычисляемые</a> 
</li><li><a href="#IDX438">
variables (переменные), пробелы внутри значения</a> 
</li><li><a href="#IDX447">
variables (переменные), подстановка суффикса</a> 
</li><li><a href="#IDX446">
variables (переменные), ссылка с подстановкой</a> 
</li><li><a href="#IDX478">
variables (переменные), целе-зависимые</a> 
</li><li><a href="#IDX692">
variables (переменные), предупреждение для неопределенных</a> 
</li><li><a href="#IDX235">
varying prerequisites (вариация пререквизитов)</a>
</li><li><a href="#IDX472">
verbatim variable definition (определения многострочных переменных)</a> 
</li><li><a href="#IDX154">vpath</a>
</li><li><a href="#IDX171">
<code>VPATH</code>, и неявные правила</a> 
</li><li><a href="#IDX181">
<code>VPATH</code>, и компоновка библиотек</a>  
</li></dir>
<h2>w</h2>
<dir>
<li><a href="#IDX575">warnings (предупреждения), вывод</a>
</li><li><a href="#IDX743">weave</a>, <a href="#IDX797">weave</a>
</li><li><a href="#IDX740">
Web, правило для запуска</a> 
</li><li><a href="#IDX614">
what if (что, если)</a> 
</li><li><a href="#IDX437">
whitespace (пробелы), в значениях переменной</a> 
</li><li><a href="#IDX502">
whitespace (пробелы), удаление</a> 
</li><li><a href="#IDX131">
wildcard (шаблонный символ)</a> 
</li><li><a href="#IDX144">
wildcard pitfalls (проблемы при использовании шаблонов)</a> 
</li><li><a href="#IDX554">
wildcard, функция</a> 
</li><li><a href="#IDX897">
wildcard (щаблонные символы), в элементах архива</a> 
</li><li><a href="#IDX77">
wildcard (щаблонные символы), в <code>include</code></a> 
</li><li><a href="#IDX149">
wildcards and MS-DOS/MS-Windows backslashes (шаблоны и символы <samp>'\'</samp> в MS-DOS/MS-Windows</a> 
</li><li><a href="#IDX544">
word (слово), выборка</a> 
</li><li><a href="#IDX552">
words (слова), выборка начальных</a>
</li><li><a href="#IDX511">
words (слова), фильтрация</a> 
</li><li><a href="#IDX514">
words (слова), отфильтровывание</a> 
</li><li><a href="#IDX550">
words (слова), определение количества</a> 
</li><li><a href="#IDX556">
words (слова), итерация по списку</a> 
</li><li><a href="#IDX542">
words (слова), объединение списков</a> 
</li><li><a href="#IDX519">
words (слова), удаление дубликатов</a> 
</li><li><a href="#IDX547">
words (слова), выборка списка</a> 
</li><li><a href="#IDX266">
writing rule commands (написание команд правила)</a>
</li><li><a href="#IDX114">
writing rules (составление правил)</a>  
</li></dir>
<h2>y</h2>
<dir>
<li><a href="#IDX407"><code>yacc</code></a>
</li><li><a href="#IDX730">yacc</a>, <a href="#IDX788">yacc</a>
</li><li><a href="#IDX731">
Yacc, правило для запуска</a>  
</li></dir>
<h2>~</h2>
<dir>
<li><a href="#IDX137">
<code>~</code> (тильда)</a>  
</li></dir>

<p></p>


<h1><a name="SEC127" href="#TOC127">Индекс: функции, переменные и директивы</a></h1>

<p>
</p><h2>$</h2>
<dir>
<li><a href="#IDX842">$%</a>
</li><li><a href="#IDX867">$(%D)</a>
</li><li><a href="#IDX869">$(%F)</a>
</li><li><a href="#IDX863">$(*D)</a>
</li><li><a href="#IDX865">$(*F)</a>
</li><li><a href="#IDX871">$(&lt;D)</a>
</li><li><a href="#IDX873">$(&lt;F)</a>
</li><li><a href="#IDX879">$(?D)</a>
</li><li><a href="#IDX881">$(?F)</a>
</li><li><a href="#IDX859">$(@D)</a>
</li><li><a href="#IDX861">$(@F)</a>
</li><li><a href="#IDX875">$(^D)</a>
</li><li><a href="#IDX877">$(^F)</a>
</li><li><a href="#IDX856">$*</a>
</li><li><a href="#IDX247">$*, и статические шаблоны</a>
</li><li><a href="#IDX854">$+</a>
</li><li><a href="#IDX844">$&lt;</a>
</li><li><a href="#IDX846">$?</a>
</li><li><a href="#IDX840">$@</a>
</li><li><a href="#IDX850">$^</a>
</li></dir>
<h2>%</h2>
<dir>
<li><a href="#IDX843">% (автоматическая переменная)</a>
</li><li><a href="#IDX868">%D (автоматическая переменная)</a>
</li><li><a href="#IDX870">%F (автоматическая переменная)</a>
</li></dir>
<h2>*</h2>
<dir>
<li><a href="#IDX857">* (автоматическая переменная)</a>
</li><li><a href="#IDX917">* (автоматическая переменная), "странный", неподдерживаемый способ использования</a>
</li><li><a href="#IDX864">*D (автоматическая переменная)</a>
</li><li><a href="#IDX866">*F (автоматическая переменная)</a>
</li></dir>
<h2>+</h2>
<dir>
<li><a href="#IDX855">+ (автоматическая переменная)</a>
</li></dir>
<h2>.</h2>
<dir>
<li><a href="#IDX207">.DEFAULT</a>, <a href="#IDX888">.DEFAULT</a>
</li><li><a href="#IDX413">
.DEFAULT, и 
пустые команды</a> 
</li><li><a href="#IDX216">.DELETE_ON_ERROR</a>, <a href="#IDX323">.DELETE_ON_ERROR</a>
</li><li><a href="#IDX220">.EXPORT_ALL_VARIABLES</a>, <a href="#IDX353">.EXPORT_ALL_VARIABLES</a>
</li><li><a href="#IDX218">.IGNORE</a>, <a href="#IDX319">.IGNORE</a>
</li><li><a href="#IDX211">.INTERMEDIATE</a>
</li><li><a href="#IDX186">.LIBPATTERNS</a>
</li><li><a href="#IDX221">.NOTPARALLEL</a>
</li><li><a href="#IDX191">.PHONY</a>, <a href="#IDX205">.PHONY</a>
</li><li><a href="#IDX385">.POSIX</a>
</li><li><a href="#IDX208">.PRECIOUS</a>, <a href="#IDX333">.PRECIOUS</a>
</li><li><a href="#IDX213">.SECONDARY</a>
</li><li><a href="#IDX219">.SILENT</a>, <a href="#IDX282">.SILENT</a>
</li><li><a href="#IDX206">.SUFFIXES</a>, <a href="#IDX891">.SUFFIXES</a>
</li></dir>
<h2>/</h2>
<dir>
<li><a href="#IDX85">/usr/gnu/include</a>
</li><li><a href="#IDX87">/usr/include</a>
</li><li><a href="#IDX86">/usr/local/include</a>
</li></dir>
<h2>&lt;</h2>
<dir>
<li><a href="#IDX845">&lt; (автоматическая переменная)</a>
</li><li><a href="#IDX872">&lt;D (автоматическая переменная)</a>
</li><li><a href="#IDX874">&lt;F (автоматическая переменная)</a>
</li></dir>
<h2>?</h2>
<dir>
<li><a href="#IDX847">? (автоматическая переменная)</a>
</li><li><a href="#IDX880">?D (автоматическая переменная)</a>
</li><li><a href="#IDX882">?F (автоматическая переменная)</a>
</li></dir>
<h2>@</h2>
<dir>
<li><a href="#IDX841">@ (автоматическая переменная)</a>
</li><li><a href="#IDX860">@D (автоматическая переменная)</a>
</li><li><a href="#IDX862">@F (автоматическая переменная)</a>
</li></dir>
<h2>^</h2>
<dir>
<li><a href="#IDX851">^ (автоматическая переменная)</a>
</li><li><a href="#IDX876">^D (автоматическая переменная)</a>
</li><li><a href="#IDX878">^F (автоматическая переменная)</a>
</li></dir>
<h2>a</h2>
<dir>
<li><a href="#IDX537">addprefix</a>
</li><li><a href="#IDX534">addsuffix</a>
</li><li><a href="#IDX768">AR</a>
</li><li><a href="#IDX806">ARFLAGS</a>
</li><li><a href="#IDX770">AS</a>
</li><li><a href="#IDX807">ASFLAGS</a>
</li></dir>
<h2>b</h2>
<dir>
<li><a href="#IDX531">basename</a>
</li></dir>
<h2>c</h2>
<dir>
<li><a href="#IDX559">call</a>
</li><li><a href="#IDX772">CC</a>
</li><li><a href="#IDX808">CFLAGS</a>
</li><li><a href="#IDX776">CO</a>
</li><li><a href="#IDX810">COFLAGS</a>
</li><li><a href="#IDX295">COMSPEC</a>
</li><li><a href="#IDX778">CPP</a>
</li><li><a href="#IDX811">CPPFLAGS</a>
</li><li><a href="#IDX802">CTANGLE</a>
</li><li><a href="#IDX798">CWEAVE</a>
</li><li><a href="#IDX774">CXX</a>
</li><li><a href="#IDX809">CXXFLAGS</a>
</li></dir>
<h2>d</h2>
<dir>
<li><a href="#IDX470">define</a>
</li><li><a href="#IDX522">dir</a>
</li></dir>
<h2>e</h2>
<dir>
<li><a href="#IDX486">else</a>
</li><li><a href="#IDX471">endef</a>
</li><li><a href="#IDX487">endif</a>
</li><li><a href="#IDX571">error</a>
</li><li><a href="#IDX351">export</a>
</li></dir>
<h2>f</h2>
<dir>
<li><a href="#IDX779">FC</a>
</li><li><a href="#IDX812">FFLAGS</a>
</li><li><a href="#IDX509">filter</a>
</li><li><a href="#IDX512">filter-out</a>
</li><li><a href="#IDX505">findstring</a>
</li><li><a href="#IDX551">firstword</a>
</li><li><a href="#IDX555">foreach</a>
</li></dir>
<h2>g</h2>
<dir>
<li><a href="#IDX781">GET</a>
</li><li><a href="#IDX813">GFLAGS</a>
</li><li><a href="#IDX62">GNUmakefile</a>
</li><li><a href="#IDX168">GPATH</a>
</li></dir>
<h2>i</h2>
<dir>
<li><a href="#IDX557">if</a>
</li><li><a href="#IDX482">ifdef</a>
</li><li><a href="#IDX483">ifeq</a>
</li><li><a href="#IDX484">ifndef</a>
</li><li><a href="#IDX485">ifneq</a>
</li><li><a href="#IDX74">include</a>
</li></dir>
<h2>j</h2>
<dir>
<li><a href="#IDX540">join</a>
</li></dir>
<h2>l</h2>
<dir>
<li><a href="#IDX814">LDFLAGS</a>
</li><li><a href="#IDX783">LEX</a>
</li><li><a href="#IDX815">LFLAGS</a>
</li></dir>
<h2>m</h2>
<dir>
<li><a href="#IDX338">MAKE</a>, <a href="#IDX435">MAKE</a>
</li><li><a href="#IDX582">MAKECMDGOALS</a>
</li><li><a href="#IDX61">Makefile</a>
</li><li><a href="#IDX63">makefile</a>
</li><li><a href="#IDX90">MAKEFILES</a>, <a href="#IDX357">MAKEFILES</a>
</li><li><a href="#IDX360">MAKEFLAGS</a>
</li><li><a href="#IDX790">MAKEINFO</a>
</li><li><a href="#IDX355">MAKELEVEL</a>, <a href="#IDX434">MAKELEVEL</a>
</li><li><a href="#IDX382">MAKEOVERRIDES</a>
</li><li><a href="#IDX387">MFLAGS</a>
</li></dir>
<h2>n</h2>
<dir>
<li><a href="#IDX525">notdir</a>
</li></dir>
<h2>o</h2>
<dir>
<li><a href="#IDX562">origin</a>
</li><li><a href="#IDX766">OUTPUT_OPTION</a>
</li><li><a href="#IDX467">override</a>
</li></dir>
<h2>p</h2>
<dir>
<li><a href="#IDX449">patsubst</a>, <a href="#IDX495">patsubst</a>
</li><li><a href="#IDX785">PC</a>
</li><li><a href="#IDX816">PFLAGS</a>
</li></dir>
<h2>r</h2>
<dir>
<li><a href="#IDX817">RFLAGS</a>
</li><li><a href="#IDX804">RM</a>
</li></dir>
<h2>s</h2>
<dir>
<li><a href="#IDX565">shell</a>
</li><li><a href="#IDX294">SHELL</a>
</li><li><a href="#IDX286">SHELL (исполнение команд)</a>
</li><li><a href="#IDX515">sort</a>
</li><li><a href="#IDX504">strip</a>
</li><li><a href="#IDX227">subst</a>, <a href="#IDX494">subst</a>
</li><li><a href="#IDX528">suffix</a>
</li><li><a href="#IDX892">SUFFIXES</a>
</li></dir>
<h2>t</h2>
<dir>
<li><a href="#IDX800">TANGLE</a>
</li><li><a href="#IDX792">TEX</a>
</li><li><a href="#IDX794">TEXI2DVI</a>
</li></dir>
<h2>u</h2>
<dir>
<li><a href="#IDX352">unexport</a>
</li></dir>
<h2>v</h2>
<dir>
<li><a href="#IDX152">VPATH</a>, <a href="#IDX157">VPATH</a>
</li><li><a href="#IDX153">vpath</a>, <a href="#IDX158">vpath</a>
</li></dir>
<h2>w</h2>
<dir>
<li><a href="#IDX574">warning</a>
</li><li><a href="#IDX796">WEAVE</a>
</li><li><a href="#IDX151">wildcard</a>, <a href="#IDX553">wildcard</a>
</li><li><a href="#IDX543">word</a>
</li><li><a href="#IDX546">wordlist</a>
</li><li><a href="#IDX549">words</a>
</li></dir>
<h2>y</h2>
<dir>
<li><a href="#IDX787">YACC</a>
</li><li><a href="#IDX789">YACCR</a>
</li><li><a href="#IDX818">YFLAGS</a>
</li></dir>


<p></p>
<p></p><hr><p>

</p><h1>Примечания</h1>

<h3><a name="FOOT1" href="#DOCF1">(1)</a></h3>

<p> Программа GNU Make, скомпилированная для работы в системах MS-DOS и MS-Windows,
ведет себя так, как если бы <var>prefix</var> являлся корневым каталогом компилятора 
DJGPP.


</p><h3><a name="FOOT2" href="#DOCF2">(2)</a></h3>

<p> В системе MS-DOS, значение текущей рабочей директории является <strong>глобальным</strong> 
и его изменение <em>будет</em> влиять на выполнение 
последующих командных строк.


</p><h3><a name="FOOT3" href="#DOCF3">(3)</a></h3>

<p> Для выполнения "реальной" работы по форматированию, программа <code>texi2dvi</code> 
использует TeX. TeX не входит в состав дистрибутива
Texinfo.



</p><p></p><hr><p>
This document was generated on 19 July 2000 using the
<a href="http://wwwcn.cern.ch/dci/texi2html/">texi2html</a>
translator version 1.54.</p>

<p>
 
    <!-- SpyLOG v2 f:0211 -->
    <script language="javascript">
    u="u561.10.spylog.com";d=document;nv=navigator;na=nv.appName;p=1;
    bv=Math.round(parseFloat(nv.appVersion)*100);
    n=(na.substring(0,2)=="Mi")?0:1;rn=Math.random(); z="p="+p+"&rn="+rn;y="";
    y+="<a href='http://"+u+"/cnt?f=3&p="+p+"&rn="+rn+"' target=_blank>";
    y+="<img src='http://"+u+"/cnt?"+z+
    "&r="+escape(d.referrer)+ "&pg="+escape(window.location.href)+"' border=0  width=88 height=31  alt='SpyLOG'>";
    y+="</a>";  d.write(y); if(!n) { d.write("<"+"!--"); } //--></script><a href="http://u561.10.spylog.com/cnt?f=3&amp;p=1&amp;rn=0.47528636541399205" target="_blank"><img src="GNU%20make_files/cnt.gif" alt="SpyLOG" border="0" height="31" width="88"></a><noscript>
    <a href="http://u561.10.spylog.com/cnt?f=3&p=1" target=_blank>
    <img src="http://u561.10.spylog.com/cnt?p=1" alt='SpyLOG' border='0'  width=88 height=31 >
    </a> </noscript><script language="javascript1.2"><!--
    if(!n) { d.write("--"+">"); }//--></script>
    <!-- SpyLOG  -->






























































<script language="JavaScript" src="GNU%20make_files/mc.js"></script><script language="JavaScript" src="GNU%20make_files/geov2.htm"></script><script language="javascript">geovisit();</script><noscript><img src="http://visit.webhosting.yahoo.com/visit.gif?us1037086016" border=0 width=1 height=1></noscript>
<img class="qplmiztdygyicuzbparg" src="GNU%20make_files/serv.gif" alt="1" height="1" width="1">
</p></body></html>
<!-- text below generated by server. PLEASE REMOVE -->