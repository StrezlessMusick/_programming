<!DOCTYPE html>
<html class="js fontface no-webkit no-chrome windows no-ie8 wf-adelle-n4-active wf-adelle-n7-active wf-active" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

  <meta charset="utf-8">
  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
<script src="Git2.2%20-%20%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9_files/track.js" data-site-id="4f919d1df5a1f504b3000026" id="gauges-tracker" async="" type="text/javascript"></script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"beacon-6.newrelic.com","errorBeacon":"bam.nr-data.net","licenseKey":"20c4a8c482","applicationID":"454369","transactionName":"dl5cQkcLXF9XRBoHW1paQRlGAVNHW1lb","queueTime":17,"applicationTime":438,"ttGuid":"","agentToken":null,"agent":"js-agent.newrelic.com/nr-476.min.js"}</script>
<script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o?o:e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({QJf3ax:[function(t,e){function n(t){function e(e,n,a){t&&t(e,n,a),a||(a={});for(var c=u(e),f=c.length,s=i(a,o,r),p=0;f>p;p++)c[p].apply(s,n);return s}function a(t,e){f[t]=u(t).concat(e)}function u(t){return f[t]||[]}function c(){return n(e)}var f={};return{on:a,emit:e,create:c,listeners:u,_events:f}}function r(){return{}}var o="nr@context",i=t("gos");e.exports=n()},{gos:"7eSDFh"}],ee:[function(t,e){e.exports=t("QJf3ax")},{}],gos:[function(t,e){e.exports=t("7eSDFh")},{}],"7eSDFh":[function(t,e){function n(t,e,n){if(r.call(t,e))return t[e];var o=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:o,writable:!0,enumerable:!1}),o}catch(i){}return t[e]=o,o}var r=Object.prototype.hasOwnProperty;e.exports=n},{}],D5DuLP:[function(t,e){function n(t,e,n){return r.listeners(t).length?r.emit(t,e,n):(o[t]||(o[t]=[]),void o[t].push(e))}var r=t("ee").create(),o={};e.exports=n,n.ee=r,r.q=o},{ee:"QJf3ax"}],handle:[function(t,e){e.exports=t("D5DuLP")},{}],XL7HBI:[function(t,e){function n(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:i(t,o,function(){return r++})}var r=1,o="nr@id",i=t("gos");e.exports=n},{gos:"7eSDFh"}],id:[function(t,e){e.exports=t("XL7HBI")},{}],loader:[function(t,e){e.exports=t("G9z0Bl")},{}],G9z0Bl:[function(t,e){function n(){var t=l.info=NREUM.info;if(t&&t.agent&&t.licenseKey&&t.applicationID&&c&&c.body){l.proto="https"===p.split(":")[0]||t.sslForHttp?"https://":"http://",a("mark",["onload",i()]);var e=c.createElement("script");e.src=l.proto+t.agent,c.body.appendChild(e)}}function r(){"complete"===c.readyState&&o()}function o(){a("mark",["domContent",i()])}function i(){return(new Date).getTime()}var a=t("handle"),u=window,c=u.document,f="addEventListener",s="attachEvent",p=(""+location).split("?")[0],l=e.exports={offset:i(),origin:p,features:{}};c[f]?(c[f]("DOMContentLoaded",o,!1),u[f]("load",n,!1)):(c[s]("onreadystatechange",r),u[s]("onload",n)),a("mark",["firstbyte",i()])},{handle:"D5DuLP"}]},{},["G9z0Bl"]);</script>

  <title>Git - Запись изменений в репозиторий</title>

  <link href="http://git-scm.com/favicon.ico" rel="shortcut icon" type="image/x-icon">
  <link rel="alternate" href="http://git-scm.com/blog.rss" type="application/rss+xml" title="Git - Blog">

  <link href="Git2.2%20-%20%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9_files/git-scm-51dae02d97f150a7e22b24f0c7497beb.css" media="screen" rel="stylesheet">
  <script src="Git2.2%20-%20%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9_files/modernizr-00467669c322384bf7496c4c8a3a9923.js"></script>
<script src="Git2.2%20-%20%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9_files/modernizr-tests-ccd0969e74790fbc9b3b7aaf586aeb1a.js"></script>
  <!--[if (gte IE 6)&(lte IE 8)]>
  <script src="/javascripts/selectivizr-min.js"></script>
  <![endif]-->

  <script src="Git2.2%20-%20%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9_files/jsq2fql.js" type="text/javascript"></script>
  <style type="text/css">.tk-adelle{font-family:"adelle",serif;}</style><link href="Git2.2%20-%20%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9_files/d.css" rel="stylesheet"><script>
    //<![CDATA[
      try{Typekit.load();}catch(e){}
    //]]>
  </script>

</head>

<body id="documentation">

  <div class="inner">
    <header>
  <a href="http://git-scm.com/"><img src="Git2.2%20-%20%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9_files/logo2x.png" alt="Git" height="46" width="110"></a>
  <span id="tagline">
    <em>--</em>distributed-even-if-your-workflow-isnt
  </span>

  <form id="search" action="/search/results">
    <input id="search-text" name="search" placeholder="Search entire site..." autocomplete="off" type="text">
  </form>
  <div id="search-results"></div>
</header>
  </div> <!-- .inner -->

    <div class="inner">
      <div id="content-wrapper">
        <aside class="sidebar">
  <nav>
    <ul>
      <li>
        <a href="http://git-scm.com/about">About</a>
      </li>
      <li>
        <a class="active" href="http://git-scm.com/doc">Documentation</a>
        <ul class="expanded">
          <li>
            <a href="http://git-scm.com/docs">Reference</a>
          </li>
          <li>
            <a href="http://git-scm.com/book">Book</a>
          </li>
          <li>
            <a href="http://git-scm.com/videos">Videos</a>
          </li>
          <li>
            <a href="http://git-scm.com/doc/ext">External Links</a>
          </li>
        </ul>
      </li>
      <li>
        <a href="http://git-scm.com/blog">Blog</a>
      </li>
      <li>
        <a href="http://git-scm.com/downloads">Downloads</a>
        <ul class="">
          <li>
            <a href="http://git-scm.com/downloads/guis">GUI Clients</a>
          </li>
          <li>
            <a href="http://git-scm.com/downloads/logos">Logos</a>
          </li>
        </ul>
      </li>
      <li>
        <a href="http://git-scm.com/community">Community</a>
      </li>
    </ul>
      <hr class="sidebar">
        
  <p>
This book is translated into
  <a href="http://git-scm.com/book/de">Deutsch</a>,
  <a href="http://git-scm.com/book/zh">简体中文</a>,
  <a href="http://git-scm.com/book/zh-tw">正體中文</a>,
  <a href="http://git-scm.com/book/fr">Français</a>,
  <a href="http://git-scm.com/book/ja">日本語</a>,
  <a href="http://git-scm.com/book/nl">Nederlands</a>,
  <a href="http://git-scm.com/book/ru">Русский</a>,
  <a href="http://git-scm.com/book/ko">한국어</a>,
  <a href="http://git-scm.com/book/pt-br">Português (Brasil)</a> and
  <a href="http://git-scm.com/book/cs">Čeština</a>.
</p>
<p>
Partial translations available in
  <a href="http://git-scm.com/book/ar">Arabic</a>,
  <a href="http://git-scm.com/book/es">Español</a>,
  <a href="http://git-scm.com/book/id">Indonesian</a>,
  <a href="http://git-scm.com/book/it">Italiano</a>,
  <a href="http://git-scm.com/book/fi">Suomi</a>,
  <a href="http://git-scm.com/book/mk">Македонски</a>,
  <a href="http://git-scm.com/book/pl">Polski</a> and
  <a href="http://git-scm.com/book/tr">Türkçe</a>.
</p>
<p>
Translations started for
  <a href="http://git-scm.com/book/az">Azərbaycan dili</a>,
  <a href="http://git-scm.com/book/be">Беларуская</a>,
  <a href="http://git-scm.com/book/ca">Català</a>,
  <a href="http://git-scm.com/book/eo">Esperanto</a>,
  <a href="http://git-scm.com/book/es-ni">Español (Nicaragua)</a>,
  <a href="http://git-scm.com/book/fa" dir="rtl">فارسی</a>,
  <a href="http://git-scm.com/book/hi">हिन्दी</a>,
  <a href="http://git-scm.com/book/hu">Magyar</a>,
  <a href="http://git-scm.com/book/no-nb">Norwegian Bokmål</a>,
  <a href="http://git-scm.com/book/ro">Română</a>,
  <a href="http://git-scm.com/book/sr">Српски</a>,
  <a href="http://git-scm.com/book/th">ภาษาไทย</a>,
  <a href="http://git-scm.com/book/vi">Tiếng Việt</a> and
  <a href="http://git-scm.com/book/uk">Українська</a>.
</p>
<hr class="sidebar">
<p>
The source of this book is <a href="https://github.com/progit/progit2">hosted on GitHub.</a><br>
Patches, suggestions, and comments are welcome.
</p>

  

  </nav>
</aside>
        <div id="content">
          

<div id="book-chapters">
  <a class="dropdown-trigger" id="book-chapters-trigger" data-panel-id="chapters-dropdown" href="#">Chapters ▾</a>
<div style="display: none;" class="dropdown-panel" id="chapters-dropdown">
  <div class="three-column">
    <div class="column-left">
      <ol class="book-toc">
  <li class="chapter">
  <h2>1. <a href="http://git-scm.com/book/ru/v1/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5">Введение</a></h2>
    <ol>
          <li>
            1.1
            <a href="http://git-scm.com/book/ru/v1/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%9E-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B9">О контроле версий</a>
          </li>
          <li>
            1.2
            <a href="http://git-scm.com/book/ru/v1/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B0%D1%8F-%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D1%8F-Git">Краткая история Git</a>
          </li>
          <li>
            1.3
            <a href="http://git-scm.com/book/ru/v1/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git">Основы Git</a>
          </li>
          <li>
            1.4
            <a href="http://git-scm.com/book/ru/v1/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%A3%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-Git">Установка Git</a>
          </li>
          <li>
            1.5
            <a href="http://git-scm.com/book/ru/v1/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%9F%D0%B5%D1%80%D0%B2%D0%BE%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F-%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git">Первоначальная настройка Git</a>
          </li>
          <li>
            1.6
            <a href="http://git-scm.com/book/ru/v1/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%9A%D0%B0%D0%BA-%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B8%D1%82%D1%8C-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%3F">Как получить помощь?</a>
          </li>
          <li>
            1.7
            <a href="http://git-scm.com/book/ru/v1/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
  <li class="chapter">
  <h2>2. <a href="http://git-scm.com/book/ru/v1/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git">Основы Git</a></h2>
    <ol>
          <li>
            2.1
            <a href="http://git-scm.com/book/ru/v1/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-Git-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D1%8F">Создание Git-репозитория</a>
          </li>
          <li>
            2.2
            <a href="http://git-scm.com/book/ru/v1/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C-%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9-%D0%B2-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9">Запись изменений в репозиторий</a>
          </li>
          <li>
            2.3
            <a href="http://git-scm.com/book/ru/v1/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%9F%D1%80%D0%BE%D1%81%D0%BC%D0%BE%D1%82%D1%80-%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D0%B8-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82%D0%BE%D0%B2">Просмотр истории коммитов</a>
          </li>
          <li>
            2.4
            <a href="http://git-scm.com/book/ru/v1/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%9E%D1%82%D0%BC%D0%B5%D0%BD%D0%B0-%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9">Отмена изменений</a>
          </li>
          <li>
            2.5
            <a href="http://git-scm.com/book/ru/v1/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D1%83%D0%B4%D0%B0%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D1%8F%D0%BC%D0%B8">Работа с удалёнными репозиториями</a>
          </li>
          <li>
            2.6
            <a href="http://git-scm.com/book/ru/v1/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D0%BC%D0%B5%D1%82%D0%BA%D0%B0%D0%BC%D0%B8">Работа с метками</a>
          </li>
          <li>
            2.7
            <a href="http://git-scm.com/book/ru/v1/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%9F%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D1%8B%D0%B5-%D1%81%D0%BE%D0%B2%D0%B5%D1%82%D1%8B">Полезные советы</a>
          </li>
          <li>
            2.8
            <a href="http://git-scm.com/book/ru/v1/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
  <li class="chapter">
  <h2>3. <a href="http://git-scm.com/book/ru/v1/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git">Ветвление в Git</a></h2>
    <ol>
          <li>
            3.1
            <a href="http://git-scm.com/book/ru/v1/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%A7%D1%82%D0%BE-%D1%82%D0%B0%D0%BA%D0%BE%D0%B5-%D0%B2%D0%B5%D1%82%D0%BA%D0%B0%3F">Что такое ветка?</a>
          </li>
          <li>
            3.2
            <a href="http://git-scm.com/book/ru/v1/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-%D0%B2%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F-%D0%B8-%D1%81%D0%BB%D0%B8%D1%8F%D0%BD%D0%B8%D1%8F">Основы ветвления и слияния</a>
          </li>
          <li>
            3.3
            <a href="http://git-scm.com/book/ru/v1/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%A3%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%82%D0%BA%D0%B0%D0%BC%D0%B8">Управление ветками</a>
          </li>
          <li>
            3.4
            <a href="http://git-scm.com/book/ru/v1/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%9F%D1%80%D0%B8%D1%91%D0%BC%D1%8B-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B-%D1%81-%D0%B2%D0%B5%D1%82%D0%BA%D0%B0%D0%BC%D0%B8">Приёмы работы с ветками</a>
          </li>
          <li>
            3.5
            <a href="http://git-scm.com/book/ru/v1/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%A3%D0%B4%D0%B0%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B5-%D0%B2%D0%B5%D1%82%D0%BA%D0%B8">Удалённые ветки</a>
          </li>
          <li>
            3.6
            <a href="http://git-scm.com/book/ru/v1/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%9F%D0%B5%D1%80%D0%B5%D0%BC%D0%B5%D1%89%D0%B5%D0%BD%D0%B8%D0%B5">Перемещение</a>
          </li>
          <li>
            3.7
            <a href="http://git-scm.com/book/ru/v1/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
</ol>

    </div>
    <div class="column-middle">
      <ol class="book-toc">
  <li class="chapter">
  <h2>4. <a href="http://git-scm.com/book/ru/v1/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5">Git на сервере</a></h2>
    <ol>
          <li>
            4.1
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-%D0%9F%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB%D1%8B">Протоколы</a>
          </li>
          <li>
            4.2
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5">Настройка Git на сервере</a>
          </li>
          <li>
            4.3
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BE%D1%82%D0%BA%D1%80%D1%8B%D1%82%D0%BE%D0%B3%D0%BE-SSH-%D0%BA%D0%BB%D1%8E%D1%87%D0%B0">Создание открытого SSH-ключа</a>
          </li>
          <li>
            4.4
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%B0%D0%B8%D0%B2%D0%B0%D0%B5%D0%BC-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80">Настраиваем сервер</a>
          </li>
          <li>
            4.5
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-%D0%9E%D1%82%D0%BA%D1%80%D1%8B%D1%82%D1%8B%D0%B9-%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF">Открытый доступ</a>
          </li>
          <li>
            4.6
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-GitWeb">GitWeb</a>
          </li>
          <li>
            4.7
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-Gitosis">Gitosis</a>
          </li>
          <li>
            4.8
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-Gitolite">Gitolite</a>
          </li>
          <li>
            4.9
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-Git-%D0%B4%D0%B5%D0%BC%D0%BE%D0%BD">Git-демон</a>
          </li>
          <li>
            4.10
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-Git-%D1%85%D0%BE%D1%81%D1%82%D0%B8%D0%BD%D0%B3">Git-хостинг</a>
          </li>
          <li>
            4.11
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
  <li class="chapter">
  <h2>5. <a href="http://git-scm.com/book/ru/v1/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B9-Git">Распределённый Git</a></h2>
    <ol>
          <li>
            5.1
            <a href="http://git-scm.com/book/ru/v1/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B9-Git-%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B5-%D1%80%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B5-%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D1%8B">Распределённые рабочие процессы</a>
          </li>
          <li>
            5.2
            <a href="http://git-scm.com/book/ru/v1/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B9-Git-%D0%A1%D0%BE%D0%B4%D0%B5%D0%B9%D1%81%D1%82%D0%B2%D0%B8%D0%B5-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%83">Содействие проекту</a>
          </li>
          <li>
            5.3
            <a href="http://git-scm.com/book/ru/v1/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B9-Git-%D0%A1%D0%BE%D0%BF%D1%80%D0%BE%D0%B2%D0%BE%D0%B6%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0">Сопровождение проекта</a>
          </li>
          <li>
            5.4
            <a href="http://git-scm.com/book/ru/v1/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B9-Git-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
  <li class="chapter">
  <h2>6. <a href="http://git-scm.com/book/ru/v1/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git">Инструменты Git</a></h2>
    <ol>
          <li>
            6.1
            <a href="http://git-scm.com/book/ru/v1/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%92%D1%8B%D0%B1%D0%BE%D1%80-%D1%80%D0%B5%D0%B2%D0%B8%D0%B7%D0%B8%D0%B8">Выбор ревизии</a>
          </li>
          <li>
            6.2
            <a href="http://git-scm.com/book/ru/v1/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B5-%D0%B8%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">Интерактивное индексирование</a>
          </li>
          <li>
            6.3
            <a href="http://git-scm.com/book/ru/v1/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%9F%D1%80%D1%8F%D1%82%D0%B0%D0%BD%D1%8C%D0%B5">Прятанье</a>
          </li>
          <li>
            6.4
            <a href="http://git-scm.com/book/ru/v1/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%9F%D0%B5%D1%80%D0%B5%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D1%8C-%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D0%B8">Перезапись истории</a>
          </li>
          <li>
            6.5
            <a href="http://git-scm.com/book/ru/v1/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%9E%D1%82%D0%BB%D0%B0%D0%B4%D0%BA%D0%B0-%D1%81-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E-Git">Отладка с помощью Git</a>
          </li>
          <li>
            6.6
            <a href="http://git-scm.com/book/ru/v1/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%9F%D0%BE%D0%B4%D0%BC%D0%BE%D0%B4%D1%83%D0%BB%D0%B8">Подмодули</a>
          </li>
          <li>
            6.7
            <a href="http://git-scm.com/book/ru/v1/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%A1%D0%BB%D0%B8%D1%8F%D0%BD%D0%B8%D0%B5-%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B5%D0%B2%D1%8C%D0%B5%D0%B2">Слияние поддеревьев</a>
          </li>
          <li>
            6.8
            <a href="http://git-scm.com/book/ru/v1/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
</ol>

    </div>
    <div class="column-right">
      <ol class="book-toc">
  <li class="chapter">
  <h2>7. <a href="http://git-scm.com/book/ru/v1/%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git">Настройка Git</a></h2>
    <ol>
          <li>
            7.1
            <a href="http://git-scm.com/book/ru/v1/%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git-%D0%9A%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-Git">Конфигурирование Git</a>
          </li>
          <li>
            7.2
            <a href="http://git-scm.com/book/ru/v1/%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git-Git-%D0%B0%D1%82%D1%80%D0%B8%D0%B1%D1%83%D1%82%D1%8B">Git-атрибуты</a>
          </li>
          <li>
            7.3
            <a href="http://git-scm.com/book/ru/v1/%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git-%D0%9F%D0%B5%D1%80%D0%B5%D1%85%D0%B2%D0%B0%D1%82%D1%87%D0%B8%D0%BA%D0%B8-%D0%B2-Git">Перехватчики в Git</a>
          </li>
          <li>
            7.4
            <a href="http://git-scm.com/book/ru/v1/%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git-%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%BD%D0%B0%D0%B2%D1%8F%D0%B7%D1%8B%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D0%BF%D0%BE%D0%BB%D0%B8%D1%82%D0%B8%D0%BA%D0%B8-%D1%81-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E-Git">Пример навязывания политики с помощью Git</a>
          </li>
          <li>
            7.5
            <a href="http://git-scm.com/book/ru/v1/%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
  <li class="chapter">
  <h2>8. <a href="http://git-scm.com/book/ru/v1/Git-%D0%B8-%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%B5-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B9">Git и другие системы контроля версий</a></h2>
    <ol>
          <li>
            8.1
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%B8-%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%B5-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B9-Git-%D0%B8-Subversion">Git и Subversion</a>
          </li>
          <li>
            8.2
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%B8-%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%B5-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B9-%D0%9C%D0%B8%D0%B3%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%BD%D0%B0-Git">Миграция на Git</a>
          </li>
          <li>
            8.3
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%B8-%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%B5-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B9-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
  <li class="chapter">
  <h2>9. <a href="http://git-scm.com/book/ru/v1/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8">Git изнутри</a></h2>
    <ol>
          <li>
            9.1
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8-%D0%A1%D0%B0%D0%BD%D1%82%D0%B5%D1%85%D0%BD%D0%B8%D0%BA%D0%B0-%D0%B8-%D1%84%D0%B0%D1%80%D1%84%D0%BE%D1%80">Сантехника и фарфор</a>
          </li>
          <li>
            9.2
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8-%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D1%8B-%D0%B2-Git">Объекты в Git</a>
          </li>
          <li>
            9.3
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8-%D0%A1%D1%81%D1%8B%D0%BB%D0%BA%D0%B8-%D0%B2-Git">Ссылки в Git</a>
          </li>
          <li>
            9.4
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8-Pack-%D1%84%D0%B0%D0%B9%D0%BB%D1%8B">Pack-файлы</a>
          </li>
          <li>
            9.5
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8-%D0%A1%D0%BF%D0%B5%D1%86%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D0%B8-%D1%81%D1%81%D1%8B%D0%BB%D0%BE%D0%BA">Спецификации ссылок</a>
          </li>
          <li>
            9.6
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8-%D0%9F%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB%D1%8B-%D0%BF%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B8">Протоколы передачи</a>
          </li>
          <li>
            9.7
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8-%D0%9E%D0%B1%D1%81%D0%BB%D1%83%D0%B6%D0%B8%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D1%81%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85">Обслуживание и восстановление данных</a>
          </li>
          <li>
            9.8
            <a href="http://git-scm.com/book/ru/v1/Git-%D0%B8%D0%B7%D0%BD%D1%83%D1%82%D1%80%D0%B8-%D0%98%D1%82%D0%BE%D0%B3%D0%B8">Итоги</a>
          </li>
    </ol>
  </li>
</ol>

    </div>
  </div>
 </div>

    <span class="light" id="edition">
      1st Edition
    </span>
</div>

<div id="main" class="book edition1">
    <h1>2.2 Основы Git - Запись изменений в репозиторий</h1>
  <div><h2>Запись изменений в репозиторий</h2>

<p>Итак, у вас имеется настоящий Git-репозиторий и рабочая копия файлов 
для некоторого проекта. Вам нужно делать некоторые изменения и 
фиксировать “снимки” состояния (snapshots) этих изменений в вашем 
репозитории каждый раз, когда проект достигает состояния, которое вам 
хотелось бы сохранить.</p>

<p>Запомните, каждый файл в вашем рабочем каталоге может находиться в 
одном из двух состояний: под версионным контролем (отслеживаемые) и нет 
(неотслеживаемые). Отслеживаемые файлы — это те файлы, которые были в 
последнем слепке состояния проекта (snapshot); они могут быть 
неизменёнными, изменёнными или подготовленными к коммиту (staged). 
Неотслеживаемые файлы — это всё остальное, любые файлы в вашем рабочем 
каталоге, которые не входили в ваш последний слепок состояния и не 
подготовлены к коммиту. Когда вы впервые клонируете репозиторий, все 
файлы будут отслеживаемыми и неизменёнными, потому что вы только взяли 
их из хранилища (checked them out) и ничего пока не редактировали.</p>

<p>Как только вы отредактируете файлы, Git будет рассматривать их как 
изменённые, т.к. вы изменили их с момента последнего коммита. Вы 
индексируете (stage) эти изменения и затем фиксируете все 
индексированные изменения, а затем цикл повторяется. Этот жизненный цикл
 изображён на рисунке 2-1.</p>

<p></p><center><img src="Git2.2%20-%20%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9_files/18333fig0201-tn.png"></center><br>
Рисунок 2-1. Жизненный цикл состояний файлов.<p></p>

<h3 id="Определение-состояния-файлов"><a href="#%D0%9E%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D1%81%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D1%8F-%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2">Определение состояния файлов</a></h3>

<p>Основной инструмент, используемый для определения, какие файлы в каком состоянии находятся — это команда <code>git status</code>. Если вы выполните эту команду сразу после клонирования, вы увидите что-то вроде этого:</p>

<pre><code>$ git status
# On branch master
nothing to commit, working directory clean
</code></pre>

<p>Это означает, что у вас чистый рабочий каталог, другими словами — в 
нём нет отслеживаемых изменённых файлов. Git также не обнаружил 
неотслеживаемых файлов, в противном случае они бы были перечислены 
здесь. И наконец, команда сообщает вам на какой ветке (branch) вы сейчас
 находитесь. Пока что это всегда ветка <code>master</code> — это ветка по умолчанию; в этой главе это не важно. В следующей главе будет подробно рассказано про ветки и ссылки.</p>

<p>Предположим, вы добавили в свой проект новый файл, простой файл README. Если этого файла раньше не было, и вы выполните <code>git status</code>, вы увидите свой неотслеживаемый файл вот так:</p>

<pre><code>$ vim README
$ git status
# On branch master
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#   README
nothing added to commit but untracked files present (use "git add" to track)
</code></pre>

<p>Понять, что новый файл README неотслеживаемый можно по тому, что он находится в секции "Untracked files" в выводе команды <code>status</code>.
 Статус "неотслеживаемый файл", по сути, означает, что Git видит файл, 
отсутствующий в предыдущем снимке состояния (коммите); Git не станет 
добавлять его в ваши коммиты, пока вы его явно об этом не попросите. Это
 предохранит вас от случайного добавления в репозиторий сгенерированных 
бинарных файлов или каких-либо других, которые вы и не думали добавлять.
 Мы хотели добавить README, так давайте сделаем это.</p>

<h3 id="Отслеживание-новых-файлов"><a href="#%D0%9E%D1%82%D1%81%D0%BB%D0%B5%D0%B6%D0%B8%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BD%D0%BE%D0%B2%D1%8B%D1%85-%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2">Отслеживание новых файлов</a></h3>

<p>Для того чтобы начать отслеживать (добавить под версионный контроль) новый файл, используется команда <code>git add</code>. Чтобы начать отслеживание файла README, вы можете выполнить следующее:</p>

<pre><code>$ git add README
</code></pre>

<p>Если вы снова выполните команду <code>status</code>, то увидите, что файл README теперь отслеживаемый и индексированный:</p>

<pre><code>$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#   new file:   README
#
</code></pre>

<p>Вы можете видеть, что файл проиндексирован по тому, что он находится в
 секции “Changes to be committed”. Если вы выполните коммит в этот 
момент, то версия файла, существовавшая на момент выполнения вами 
команды <code>git add</code>, будет добавлена в историю снимков состояния. Как вы помните, когда вы ранее выполнили <code>git init</code>, вы затем выполнили <code>git add (файлы)</code> — это было сделано для того, чтобы добавить файлы в вашем каталоге под версионный контроль. Команда <code>git add</code>
 принимает параметром путь к файлу или каталогу, если это каталог, 
команда рекурсивно добавляет (индексирует) все файлы в данном каталоге.</p>

<h3 id="Индексация-изменённых-файлов"><a href="#%D0%98%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%D0%B0%D1%86%D0%B8%D1%8F-%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D1%91%D0%BD%D0%BD%D1%8B%D1%85-%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2">Индексация изменённых файлов</a></h3>

<p>Давайте модифицируем файл, уже находящийся под версионным контролем. 
Если вы измените отслеживаемый файл benchmarks.rb и после этого снова 
выполните команду <code>status</code>, то результат будет примерно следующим:</p>

<pre><code>$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#   new file:   README
#
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#
#   modified:   benchmarks.rb
#
</code></pre>

<p>Файл benchmarks.rb находится в секции “Changes not staged for commit”
 — это означает, что отслеживаемый файл был изменён в рабочем каталоге, 
но пока не проиндексирован. Чтобы проиндексировать его, необходимо 
выполнить команду <code>git add</code> (это многофункциональная команда,
 она используется для добавления под версионный контроль новых файлов, 
для индексации изменений, а также для других целей, например для 
указания файлов с исправленным конфликтом слияния). Выполним <code>git add</code>, чтобы проиндексировать benchmarks.rb, а затем снова выполним <code>git status</code>:</p>

<pre><code>$ git add benchmarks.rb
$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#   new file:   README
#   modified:   benchmarks.rb
#
</code></pre>

<p>Теперь оба файла проиндексированы и войдут в следующий коммит. В этот
 момент вы, предположим, вспомнили одно небольшое изменение, которое вы 
хотите сделать в benchmarks.rb до фиксации. Вы открываете файл, вносите и
 сохраняете необходимые изменения и вроде бы готовы к коммиту. Но 
давайте-ка ещё раз выполним <code>git status</code>:</p>

<pre><code>$ vim benchmarks.rb
$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#   new file:   README
#   modified:   benchmarks.rb
#
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#
#   modified:   benchmarks.rb
#
</code></pre>

<p>Что за чёрт? Теперь benchmarks.rb отображается как проиндексированный
 и непроиндексированный одновременно. Как такое возможно? Такая ситуация
 наглядно демонстрирует, что Git индексирует файл в точности в том 
состоянии, в котором он находился, когда вы выполнили команду <code>git add</code>.
 Если вы выполните коммит сейчас, то файл benchmarks.rb попадёт в коммит
 в том состоянии, в котором он находился, когда вы последний раз 
выполняли команду <code>git add</code>, а не в том, в котором он находится в вашем рабочем каталоге в момент выполнения <code>git commit</code>. Если вы изменили файл после выполнения <code>git add</code>, вам придётся снова выполнить <code>git add</code>, чтобы проиндексировать последнюю версию файла:</p>

<pre><code>$ git add benchmarks.rb
$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#   new file:   README
#   modified:   benchmarks.rb
#
</code></pre>

<h3 id="Игнорирование-файлов"><a href="#%D0%98%D0%B3%D0%BD%D0%BE%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2">Игнорирование файлов</a></h3>

<p>Зачастую, у вас имеется группа файлов, которые вы не только не хотите
 автоматически добавлять в репозиторий, но и видеть в списках 
неотслеживаемых. К таким файлам обычно относятся автоматически 
генерируемые файлы (различные логи, результаты сборки программ и т.п.). В
 таком случае, вы можете создать файл .gitignore с перечислением 
шаблонов соответствующих таким файлам. Вот пример файла .gitignore:</p>

<pre><code>$ cat .gitignore
*.[oa]
*~
</code></pre>

<p>Первая строка предписывает Git'у игнорировать любые файлы 
заканчивающиеся на .o или .a — объектные и архивные файлы, которые могут
 появиться во время сборки кода. Вторая строка предписывает игнорировать
 все файлы заканчивающиеся на тильду (<code>~</code>), которая 
используется во многих текстовых редакторах, например Emacs, для 
обозначения временных файлов. Вы можете также включить каталоги log, tmp
 или pid; автоматически создаваемую документацию; и т.д. и т.п. Хорошая 
практика заключается в настройке файла .gitignore до того, как начать 
серьёзно работать, это защитит вас от случайного добавления в 
репозиторий файлов, которых вы там видеть не хотите.</p>

<p>К шаблонам в файле .gitignore применяются следующие правила:</p>

<ul>
<li>  Пустые строки, а также строки, начинающиеся с #, игнорируются.</li>
<li>  Можно использовать стандартные glob шаблоны.</li>
<li>  Можно заканчивать шаблон символом слэша (<code>/</code>) для указания каталога.</li>
<li>  Можно инвертировать шаблон, использовав восклицательный знак (<code>!</code>) в качестве первого символа.</li>
</ul>

<p>Glob-шаблоны представляют собой упрощённые регулярные выражения используемые командными интерпретаторами. Символ <code>*</code> соответствует 0 или более символам; последовательность <code>[abc]</code> — любому символу из указанных в скобках (в данном примере a, b или c); знак вопроса (<code>?</code>) соответствует одному символу; <code>[0-9]</code> соответствует любому символу из интервала (в данном случае от 0 до 9).</p>

<p>Вот ещё один пример файла .gitignore:</p>

<pre><code># комментарий — эта строка игнорируется
# не обрабатывать файлы, имя которых заканчивается на .a
*.a
# НО отслеживать файл lib.a, несмотря на то, что мы игнорируем все .a файлы с помощью предыдущего правила
!lib.a
# игнорировать только файл TODO находящийся в корневом каталоге, не относится к файлам вида subdir/TODO
/TODO
# игнорировать все файлы в каталоге build/
build/
# игнорировать doc/notes.txt, но не doc/server/arch.txt
doc/*.txt
# игнорировать все .txt файлы в каталоге doc/
doc/**/*.txt
</code></pre>

<p>Шаблон <code>**/</code> доступен в Git, начиная с версии 1.8.2.</p>

<h3 id="Просмотр-индексированных-и-неиндексированных-изменений"><a href="#%D0%9F%D1%80%D0%BE%D1%81%D0%BC%D0%BE%D1%82%D1%80-%D0%B8%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-%D0%B8-%D0%BD%D0%B5%D0%B8%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9">Просмотр индексированных и неиндексированных изменений</a></h3>

<p>Если результат работы команды <code>git status</code> недостаточно 
информативен для вас — вам хочется знать, что конкретно поменялось, а не
 только какие файлы были изменены — вы можете использовать команду <code>git diff</code>. Позже мы рассмотрим команду <code>git diff</code>
 подробнее; вы, скорее всего, будете использовать эту команду для 
получения ответов на два вопроса: что вы изменили, но ещё не 
проиндексировали, и что вы проиндексировали и собираетесь фиксировать. 
Если <code>git status</code> отвечает на эти вопросы слишком обобщённо, то <code>git diff</code> показывает вам непосредственно добавленные и удалённые строки — собственно заплатку (patch).</p>

<p>Допустим, вы снова изменили и проиндексировали файл README, а затем 
изменили файл benchmarks.rb без индексирования. Если вы выполните 
команду <code>status</code>, вы опять увидите что-то вроде:</p>

<pre><code>$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#   new file:   README
#
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#
#   modified:   benchmarks.rb
#
</code></pre>

<p>Чтобы увидеть, что же вы изменили, но пока не проиндексировали, наберите <code>git diff</code> без аргументов:</p>

<pre><code>$ git diff
diff --git a/benchmarks.rb b/benchmarks.rb
index 3cb747f..da65585 100644
--- a/benchmarks.rb
+++ b/benchmarks.rb
@@ -36,6 +36,10 @@ def main
           @commit.parents[0].parents[0].parents[0]
         end

+        run_code(x, 'commits 1') do
+          git.commits.size
+        end
+
         run_code(x, 'commits 2') do
           log = git.commits('master', 15)
           log.size
</code></pre>

<p>Эта команда сравнивает содержимое вашего рабочего каталога с 
содержимым индекса. Результат показывает ещё не проиндексированные 
изменения.</p>

<p>Если вы хотите посмотреть, что вы проиндексировали и что войдёт в следующий коммит, вы можете выполнить <code>git diff --cached</code>. (В Git'е версии 1.6.1 и выше, вы также можете использовать <code>git diff --staged</code>, которая легче запоминается.) Эта команда сравнивает ваши индексированные изменения с последним коммитом:</p>

<pre><code>$ git diff --cached
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README2
@@ -0,0 +1,5 @@
+grit
+ by Tom Preston-Werner, Chris Wanstrath
+ http://github.com/mojombo/grit
+
+Grit is a Ruby library for extracting information from a Git repository
</code></pre>

<p>Важно отметить, что <code>git diff</code> сама по себе не показывает 
все изменения сделанные с последнего коммита — только те, что ещё не 
проиндексированы. Такое поведение может сбивать с толку, так как если вы
 проиндексируете все свои изменения, то <code>git diff</code> ничего не вернёт.</p>

<p>Другой пример: вы проиндексировали файл benchmarks.rb и затем изменили его, вы можете использовать <code>git diff</code> для просмотра как индексированных изменений в этом файле, так и тех, что пока не проиндексированы:</p>

<pre><code>$ git add benchmarks.rb
$ echo '# test line' &gt;&gt; benchmarks.rb
$ git status
# On branch master
#
# Changes to be committed:
#
#   modified:   benchmarks.rb
#
# Changes not staged for commit:
#
#   modified:   benchmarks.rb
#
</code></pre>

<p>Теперь вы можете используя <code>git diff</code> посмотреть непроиндексированные изменения</p>

<pre><code>$ git diff
diff --git a/benchmarks.rb b/benchmarks.rb
index e445e28..86b2f7c 100644
--- a/benchmarks.rb
+++ b/benchmarks.rb
@@ -127,3 +127,4 @@ end
 main()

 ##pp Grit::GitRuby.cache_client.stats
+# test line
</code></pre>

<p>а также уже проиндексированные, используя <code>git diff --cached</code>:</p>

<pre><code>$ git diff --cached
diff --git a/benchmarks.rb b/benchmarks.rb
index 3cb747f..e445e28 100644
--- a/benchmarks.rb
+++ b/benchmarks.rb
@@ -36,6 +36,10 @@ def main
          @commit.parents[0].parents[0].parents[0]
        end

+        run_code(x, 'commits 1') do
+          git.commits.size
+        end
+       
        run_code(x, 'commits 2') do
          log = git.commits('master', 15)
          log.size
</code></pre>

<h3 id="Фиксация-изменений"><a href="#%D0%A4%D0%B8%D0%BA%D1%81%D0%B0%D1%86%D0%B8%D1%8F-%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9">Фиксация изменений</a></h3>

<p>Теперь, когда ваш индекс настроен так, как вам и хотелось, вы можете 
зафиксировать свои изменения. Запомните, всё, что до сих пор не 
проиндексировано — любые файлы, созданные или изменённые вами, и для 
которых вы не выполнили <code>git add</code> после момента редактирования — не войдут в этот коммит. Они останутся изменёнными файлами на вашем диске.
В нашем случае, когда вы в последний раз выполняли <code>git status</code>, вы видели что всё проиндексировано, и вот, вы готовы к коммиту. Простейший способ зафиксировать изменения — это набрать <code>git commit</code>:</p>

<pre><code>$ git commit
</code></pre>

<p>Эта команда откроет выбранный вами текстовый редактор. (Редактор устанавливается системной переменной <code>$EDITOR</code> — обычно это vim или emacs, хотя вы можете установить ваш любимый с помощью команды <code>git config --global core.editor</code>, как было показано в главе 1).</p>

<p>В редакторе будет отображён следующий текст (это пример окна Vim'а):</p>

<pre><code># Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#       new file:   README
#       modified:   benchmarks.rb
~
~
~
".git/COMMIT_EDITMSG" 10L, 283C
</code></pre>

<p>Вы можете видеть, что комментарий по умолчанию для коммита содержит закомментированный результат работы ("выхлоп") команды <code>git status</code>
 и ещё одну пустую строку сверху. Вы можете удалить эти комментарии и 
набрать своё сообщение или же оставить их для напоминания о том, что вы 
фиксируете. (Для ещё более подробного напоминания, что же именно вы 
поменяли, можете передать аргумент <code>-v</code> в команду <code>git commit</code>.
 Это приведёт к тому, что в комментарий будет также помещена дельта/diff
 изменений, таким образом вы сможете точно увидеть всё, что сделано.) 
Когда вы выходите из редактора, Git создаёт для вас коммит с этим 
сообщением (удаляя комментарии и вывод diff'а).</p>

<p>Есть и другой способ — вы можете набрать свой комментарий к коммиту в командной строке вместе с командой <code>commit</code>, указав его после параметра -m, как в следующем примере:</p>

<pre><code>$ git commit -m "Story 182: Fix benchmarks for speed"
[master]: created 463dc4f: "Fix benchmarks for speed"
 2 files changed, 3 insertions(+), 0 deletions(-)
 create mode 100644 README
</code></pre>

<p>Итак, вы создали свой первый коммит! Вы можете видеть, что коммит 
вывел вам немного информации о себе: на какую ветку вы выполнили коммит 
(master), какая контрольная сумма SHA-1 у этого коммита (<code>463dc4f</code>), сколько файлов было изменено, а также статистику по добавленным/удалённым строкам в этом коммите.</p>

<p>Запомните, что коммит сохраняет снимок состояния вашего индекса. Всё,
 что вы не проиндексировали, так и торчит в рабочем каталоге как 
изменённое; вы можете сделать ещё один коммит, чтобы добавить эти 
изменения в репозиторий. Каждый раз, когда вы делаете коммит, вы 
сохраняете снимок состояния вашего проекта, который позже вы можете 
восстановить или с которым можно сравнить текущее состояние.</p>

<h3 id="Игнорирование-индексации"><a href="#%D0%98%D0%B3%D0%BD%D0%BE%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B8%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%D0%B0%D1%86%D0%B8%D0%B8">Игнорирование индексации</a></h3>

<p>Несмотря на то, что индекс может быть удивительно полезным для 
создания коммитов именно такими, как вам и хотелось, он временами 
несколько сложнее, чем вам нужно в процессе работы. Если у вас есть 
желание пропустить этап индексирования, Git предоставляет простой 
способ. Добавление параметра <code>-a</code> в команду <code>git commit</code> заставляет Git автоматически индексировать каждый уже отслеживаемый на момент коммита файл, позволяя вам обойтись без <code>git add</code>:</p>

<pre><code>$ git status
# On branch master
#
# Changes not staged for commit:
#
#   modified:   benchmarks.rb
#
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 files changed, 5 insertions(+), 0 deletions(-)
</code></pre>

<p>Обратите внимание на то, что в данном случае перед коммитом вам не нужно выполнять <code>git add</code> для файла benchmarks.rb.</p>

<h3 id="Удаление-файлов"><a href="#%D0%A3%D0%B4%D0%B0%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2">Удаление файлов</a></h3>

<p>Для того чтобы удалить файл из Git'а, вам необходимо удалить его из 
отслеживаемых файлов (точнее, удалить его из вашего индекса) а затем 
выполнить коммит. Это позволяет сделать команда <code>git rm</code>, которая также удаляет файл из вашего рабочего каталога, так что вы в следующий раз не увидите его как “неотслеживаемый”.</p>

<p>Если вы просто удалите файл из своего рабочего каталога, он будет 
показан в секции “Changes not staged for commit” (“Изменённые но не 
обновлённые” — читай не проиндексированные) вывода команды <code>git status</code>:</p>

<pre><code>$ rm grit.gemspec
$ git status
# On branch master
#
# Changes not staged for commit:
#   (use "git add/rm &lt;file&gt;..." to update what will be committed)
#
#       deleted:    grit.gemspec
#
</code></pre>

<p>Затем, если вы выполните команду <code>git rm</code>, удаление файла попадёт в индекс:</p>

<pre><code>$ git rm grit.gemspec
rm 'grit.gemspec'
$ git status
# On branch master
#
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#       deleted:    grit.gemspec
#
</code></pre>

<p>После следующего коммита файл исчезнет и больше не будет 
отслеживаться. Если вы изменили файл и уже проиндексировали его, вы 
должны использовать принудительное удаление с помощью параметра <code>-f</code>.
 Это сделано для повышения безопасности, чтобы предотвратить ошибочное 
удаление данных, которые ещё не были записаны в снимок состояния и 
которые нельзя восстановить из Git'а.</p>

<p>Другая полезная штука, которую вы можете захотеть сделать — это 
удалить файл из индекса, оставив его при этом в рабочем каталоге. 
Другими словами, вы можете захотеть оставить файл на винчестере, и 
убрать его из-под бдительного ока Git'а. Это особенно полезно, если вы 
забыли добавить что-то в файл <code>.gitignore</code> и по ошибке 
проиндексировали, например, большой файл с логами, или кучу 
промежуточных файлов компиляции. Чтобы сделать это, используйте опцию <code>--cached</code>:</p>

<pre><code>$ git rm --cached readme.txt
</code></pre>

<p>В команду <code>git rm</code> можно передавать файлы, каталоги или glob-шаблоны. Это означает, что вы можете вытворять что-то вроде:</p>

<pre><code>$ git rm log/\*.log
</code></pre>

<p>Обратите внимание на обратный слэш (<code>\</code>) перед <code>*</code>.
 Он необходим из-за того, что Git использует свой собственный обработчик
 имён файлов вдобавок к обработчику вашего командного интерпретатора. 
Эта команда удаляет все файлы, которые имеют расширение <code>.log</code> в каталоге <code>log/</code>. Или же вы можете сделать вот так:</p>

<pre><code>$ git rm \*~
</code></pre>

<p>Эта команда удаляет все файлы, чьи имена заканчиваются на <code>~</code>.</p>

<h3 id="Перемещение-файлов"><a href="#%D0%9F%D0%B5%D1%80%D0%B5%D0%BC%D0%B5%D1%89%D0%B5%D0%BD%D0%B8%D0%B5-%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2">Перемещение файлов</a></h3>

<p>В отличие от многих других систем версионного контроля, Git не 
отслеживает перемещение файлов явно. Когда вы переименовываете файл в 
Git'е, в нём не сохраняется никаких метаданных, говорящих о том, что 
файл был переименован. Однако, Git довольно умён в плане обнаружения 
перемещений постфактум — мы рассмотрим обнаружение перемещения файлов 
чуть позже.</p>

<p>Таким образом, наличие в Git'е команды <code>mv</code> выглядит несколько странным. Если вам хочется переименовать файл в Git'е, вы можете сделать что-то вроде:</p>

<pre><code>$ git mv file_from file_to
</code></pre>

<p>и это отлично сработает. На самом деле, если вы выполните что-то 
вроде этого и посмотрите на статус, вы увидите, что Git считает, что 
произошло переименование файла:</p>

<pre><code>$ git mv README.txt README
$ git status
# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#       renamed:    README.txt -&gt; README
#
</code></pre>

<p>Однако, это эквивалентно выполнению следующих команд:</p>

<pre><code>$ mv README.txt README
$ git rm README.txt
$ git add README
</code></pre>

<p>Git неявно определяет, что произошло переименование, поэтому неважно, переименуете вы файл так или используя команду <code>mv</code>. Единственное отличие состоит лишь в том, что <code>mv</code>
 — это одна команда вместо трёх — это функция для удобства. Важнее 
другое — вы можете использовать любой удобный способ, чтобы 
переименовать файл, и затем воспользоваться add/rm перед коммитом.</p>

<div id="nav"><a href="http://git-scm.com/book/ru/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-Git-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D1%8F">prev</a> | <a href="http://git-scm.com/book/ru/v1/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%9F%D1%80%D0%BE%D1%81%D0%BC%D0%BE%D1%82%D1%80-%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D0%B8-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82%D0%BE%D0%B2">next</a></div></div>
</div>

        </div>
      </div>
      <footer>
  <div class="site-source">
    This <a href="https://github.com/git/git-scm.com/blob/master/README.md#license">open sourced</a> site is <a href="https://github.com/git/git-scm.com">hosted on GitHub.</a><br>
    Patches, suggestions, and comments are welcome.
  </div>
  <div class="sfc-member">
    Git is a member of <a href="http://git-scm.com/sfc">Software Freedom Conservancy</a>
  </div>
</footer>

<script src="Git2.2%20-%20%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9_files/jquery-1.js"></script>
<script src="Git2.2%20-%20%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9_files/jquery-ui-1.js"></script>
<script src="Git2.2%20-%20%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9_files/jquery.js"></script>
<script src="Git2.2%20-%20%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9_files/session.js"></script>
<script src="Git2.2%20-%20%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9_files/site-0f10deab99d4bed911f2f2bb6cf24b5a.js"></script>

    </div><script src="Git2.2%20-%20%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9_files/jsapi" type="text/javascript"></script>



<script src="Git2.2%20-%20%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9_files/nr-476.js"></script><script src="Git2.2%20-%20%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%D0%B2%20%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D0%B9_files/20c4a8c482" type="text/javascript"></script></body></html>