<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><script type="text/javascript" src="%D0%98%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20Autoconf%20%D0%B8%20Automake_files/a.htm"></script>

    <title>Использование Autoconf и Automake</title>
</head>
<body>
<p><font style="font-size: 28pt" color="Black"><b>Использование Autoconf и Automake  вместе с языком программирования С++</b></font></p><hr size="4" color="black">
<br><center><img src="%D0%98%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20Autoconf%20%D0%B8%20Automake_files/counter.htm"></center><br>
<!-- copyright (t2) --><div align="center">Сайт создан в системе <a href="http://www.ucoz.ru/" title="Создать сайт бесплатно">uCoz</a><br></div><!-- /copyright -->

<table width="800" border="0" cellpadding="0" cellspacing="0">
<tbody><tr valign="bottom">
<td><img src="%D0%98%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20Autoconf%20%D0%B8%20Automake_files/d-t.htm" height="1" hspace="26" width="1"></td><td></td><td><font style="font-size: 14pt" color="Black"><a href="http://rjaan.narod.ru/docs.html">Вернуться к Оглавлению</a></font><p>&nbsp;</p></td>
</tr>
<!-- begin the changed part -->
<tr valign="bottom">
<td><img src="%D0%98%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20Autoconf%20%D0%B8%20Automake_files/d-t.htm" height="1" hspace="26" width="1"></td><td> </td><td><p><font style="font-size: 13pt" color="Black"></font></p><p align="justify"><font style="font-size: 13pt" color="Black"><b>Copyright(c) </b><a href="http://www.murrayc.com/">Tony Crammond</a></font></p><p align="justify"><font style="font-size: 13pt" color="Black"><b>Cтатья:</b><a href="http://www.openismus.com/documents/linux/automake/automake.shtml">Using Automake and Autoconf with C++</a></font></p><font style="font-size: 13pt" color="Black">
<p align="justify">Перевод сделал Andrey Rjavskov(Rzhavskov) as <b>rjaan</b> &lt;<a href="mailto:rjaan@yandex.ru">rjaan@yandex.ru</a>&gt;</p>
<hr size="2" color="black">
<h1>Введение</h1>
<font style="font-size: 13pt" color="Black"><p align="justify">Перевод статьи «Using Automake and Autoconf with C++», написанной Marry Cumming, оригинал которой можно найти по этой <a href="http://www.openismus.com/documents/linux/automake/automake.shtml">ссылке</a>.
Эта статья дает краткое представление о том как можно с помощью утилит 
автоматической конфигурации automake и autoconf достаточно легко 
собирать проекты написанный на С/С++  и  сопровождать их под управлением
 Unix-подобной системы, отвечающей требованиям GNU.</p><p align="justify">Однако,
 для начального освоения – это весьма затруднительно. Будем наедятся, 
что это небольшой учебник обеспечит достаточной информацией 
программистов С/С++, кто только начал создавать свои проекты в 
Unix-подобных системах,  имеют достаточно поверхностное понимание как в 
 средствах разработки так и в различных системных утилитах.</p></font>
<h1>make and configure</h1>
<font style="font-size: 13pt" color="Black"><p align="justify">Утилита 
make может быть использована для управления многочисленным файловым 
проекта. Эта утилита использует файл Makefile, который должен находится в
 корневой директории проекта. В нем перечисляются разнообразные шаги по 
компиляции и компоновки, цели и зависимости.</p><p align="justify">Скрипт
 configure может быть использован для обеспечения поддержки 
кросс-платформенной компиляции. Применяемый скрипт configure должен 
интерпретировать Makefile.in, а затем создавать 
платформа-ориентированный Makefile .  Этот будет сделано после 
выполнения  нескольких тестов, которые определят характеристики этой 
платформы.</p><p align="justify">Пользователю необходимо набрать в консоли './configure', а затем 'make' для компиляции проекта на используемой им платформе.</p></font>
<h1>Automake and autoconf</h1>
<font style="font-size: 13pt" color="Black"><p align="justify">Очевидно,
 что весьма хорошо написанные Make -файлы и скрипт configure будут 
выглядит очень похожими. Фактически, проект GNU представляет руководство
 о том, что должно быть в этих файлах. Следовательно, проект GNU создал 
утилиты  automake и autoconf  для  упрощения процесса и позаботился, 
чтобы Make-файлы и скрипт configure соответствовали  его стандартам.</p><p align="justify">Здесь
 кратко  объясняется о том как эти утилиты  используются. Вы можете 
посмотреть примеры использования этих файлов  в секции «Файлы примеров».</p><p align="justify">Помните!
 Эти утилиты используют m4, являющийся языком макрокоманд разметки(прим.
 пер. у меня почему-то язык m4 не поворачивается назвать его языком 
программирования) , с помощью утилиты aclocal в ваш проект добавляется 
файл aclocal.m4, который содержит некоторые  m4 макросы, которые будут 
необходимы.</p></font>
<h2>Autoconf</h2>
<font style="font-size: 13pt" color="Black"><p align="justify">Утилита 
autoconf просматривает файл называемый configure.ac ( или, 
предворительно, configure.in). Затем он создает скрипт configure, 
основанный на макросах, которые  найдет эта утилита.</p><p align="justify">Всякий
 раз, когда вы добавляете макрос в  configure.ac, вы обязаны выполнить 
aclocal так же как autoconf, потому что aclocal сканирует configure.ac 
для того, чтобы найти   какие макросы он должен предоставить.</p><p>Строчки, которые должен иметь каждый configure.ac:</p>
<font style="font-size: 10pt;" color="Black"><code>
AC_INIT(hello.cc)<br>
AM_INIT_AUTOMAKE(hello,0.1)<br>
AC_PROG_CC<br>
AC_PROG_CXX<br>
AC_PROG_INSTALL<br>
AC_OUTPUT(Makefile)<br>
</code></font><p align="justify">Макросу  AC_INIT может быть передан 
любой  файл с исходным кодом в качестве   аргумент. Он все рано проверит
 существует он или нет для того, чтобы, в свою очередь, понять 
существует директория или нет.</p><p align="justify">Макрос  
AM_INIT_AUTOMAKE  осуществляет некоторые стандартные проверки. Он 
принимает первым аргументом название программы, а вторым – номер ее 
версии.</p><p align="justify">Макрос AC_PROG_CC указывает, что исходный код может быть написан на языке программирования C.</p><p align="justify">Макрос AC_PROG_CXX указывает, что исходный код может быть написан на языке программирования C++.</p><p align="justify">Макрос
 AC_PROG_INSTALL генерирует цель 'install' так что пользователи смогут  
воспользоваться  'make install' для  того чтобы инсталлировать  
собираемое программное обеспечение.</p><p align="justify">Макрос  AC_OUTPUT  указывает имя Make-файла, которое будет сгенерировано.</p></font>
<h2>Использование конфигурационного заголовочного файла
</h2>
<font style="font-size: 13pt" color="Black">
<p align="justify">Макрос AM_CONFIG_HEADER(config.h) указывает, что вы 
будете использовать файл  config.h. Тогда autoconf нужен файл   
config.h.in, который он обработает для создания config.h. Для 
обеспечения людей способом изготавливать кросс-платформенные приложения,
 он будет подключаться по всему исходному коду(#include«config.h») с 
помощью директивы #define будут определяться опции конфигурации. Файл 
config.h.in может быть сгенерирован с помощью утилиты autoheader.</p><p align="justify">Однако,
 вам понадобится создать пустой файл stamp-h для того, чтобы automake 
ре-генерировал  config.h из  config.h.in. Для чего, в командной строке 
наберите команду:</p><font style="font-size: 10pt;" color="Black"><code>[arjavskov@engine hello]$ touch stamp-h</code></font>
</font>
<h2>automake</h2>
<font style="font-size: 13pt" color="Black">
<p align="justify">Эта утилита просматривает файл называемый 
Makefile.am. Затем она создаст Makefile.in, на основании макросов 
которые она найдет в просматриваемом файле. Это позже будет 
использоваться скриптом 'configure'(см. выше).</p>
<h2>Следует ли использовать стиль GNU или нет?</h2>
<p align="justify">По умолчанию утилита automake попытает создать проект
 в стиле GNU. Она будет добавит файл  COPYING и посетует, если 
какие-нибудь необходимые информационные файлы будут отсутствовать. Чтобы
 избежать этого, вам нужно добавить следующие файлы в консоле:</p><p align="justify">
<font style="font-size: 10pt;" color="Black"><code>
[arjavskov@engin hello]$ touch NEWS README AUTHORS ChangeLog
</code></font>
</p><p align="justify">Если Вы нехотите использовать стиль GNU, тогда вы может добавить в свой файл Makefile.am добавить следующий макрос:</p>
<font style="font-size: 10pt;" color="Black"><code>
AUTOMAKE_OPTIONS = foreign
</code></font>  
<p align="justify">Спасибо  Marc van Woerkom за этот совет.</p>
</font>
<h2>Информирование automake о используемых вами файлах исходного кода</h2>
<font style="font-size: 13pt" color="Black">
<p align="justify">Используйте похожие  строчки  на те, что приведены 
ниже для указания имени вашей программы и перечисления файлов из которых
 она будет собираться.</p><font style="font-size: 10pt;" color="Black"><code>
bin_PROGRAMS = hello<br>
hello_SOURCES = hello.h hello.cc main.cc
</code></font>
<p align="justify">Помните, что имя второй переменной претворяется значением первой.  Это  общая практика для  autoconf и automake.</p>
</font>
<h2>Процесс полностью</h2>
<font style="font-size: 13pt" color="Black"><p align="justify">Принимая 
во-внимание,что вы уже могли создать  файлы  Makefile.am  и 
configure.ac(по только что приведенным примерам), вы способны уже 
собрать ваш проект путем через выполнения последоствательности команд:</p><ul>
<li>'autoheader' – создает config.h.in </li>
<li>'touch NEWS README AUTHORS ChangeLog' </li>
<li>'touch stamp-h' </li>
<li>aclocal -  Добавляет файл aclocal.m4 и определяет m4 macros, используемые автоматическими утилитам.</li>
<li>'autoconf '-  создает configure из configure.ac </li>
<li>'automake' – создает Makefile.in из Makefile.am </li>
<li>'./configure' – создает Makefile из Makefile.in &gt; </li>
<li>'make'</li></ul><p></p>
</font>
<h1>Использование поддиректорий</h1>
<font style="font-size: 13pt" color="Black"><p align="justify">Конечно 
же проект должен быть организован с помощью поддиректорий. В идеале все 
исходные файлы должны находится в директории, называемой 'src', отдельно
 от других файлов(от таких как make-файлы, конфигурационных скрипты и 
различных текстовых файлов), которые находятся в корне проекта.</p><p align="justify">Проекты,
 которые имеют многоуровневые директории, называются 'Deep' проектами. 
Здесь уже перечислялись необходимые для этого операции и вам теперь их 
нужно самим найти в содержимом секции 'Примеры файлов'.</p><p align="justify">Когда используются директории вам необходимо сделать следующее:</p><ol>
<li>Определить переменную SUBDIRS в файле Makefile.am, который находится
 в корне проекта. Например, определяем директории: doc, intl, po, src, 
tests.<font style="font-size: 10pt;" color="Black"><code>SUBDIRS = doc intl po src tests</code></font>Помните, что директории разделяются друг от друга пробелом. Поэтому, старайтесь не использовать их в самих именах директорий.</li>
<li>Добавьте в каждую поддиректорию, определённой переменной SUBDIRS, 
файл Makefile.am. А вот добавлять в них файл configure.ac не нужно. 
Вместо этого, лучше позаботитесь добавить эти Make-файлы в список 
AC_OUPUT, который находится в корневой директории.</li></ol><p></p>
</font>
<h2>Для поддиректорий содержащих дополнительный исходный код</h2>
<font style="font-size: 13pt" color="Black">
<p align="justify"></p><ol><li value="3">Добавьте макрос AC_PROG_RANLIB в
 ваш файл  configure.ac. Это позволит вам собирать исходный код 
во-временных библиотеках, которые make затем будет компоновать вместе с 
оставшимся кодом.</li>
<li value="4">Добавьте макросы  в Makefile.am любой поддиректории внутри
 src. В них будет собираться статическая библиотека. Для чего вам нужно 
дать этой библиотеки название начинающееся на 'lib', указав 
местоположение 			файлов заголовочные и исходного кода. Для примера:<br><font style="font-size: 10pt;" color="Black"><code>
<br>
noinst_LIBRARIES = libfoo.a<br>
libfoo_a_SOURCES = foo.h foo.cc<br>
INCLUDES = -I@top_srcdir@/src/includes<br></code></font><br>Помните, что
  макрос  SOURCES использует в имени библиотеки вместо точек ('.') 
символ подчеркивания('_'). Так же запомните, что нужно использовать 
значение top_srcdir для ссылки на корень проекта.</li><li value="5">Используйте
 LDADD_ макрос в файле Makefile.am директории выше для компоновки 
временной библиотеки с любым кодом, который её использует. Для примера:<font style="font-size: 10pt;" color="Black"><code><br>LDADD = foofiles/libfoo.a<br></code></font></li></ol><p></p>
</font>
<h2>Для поддиректорий не содержащих файлом с исходом кодом</h2>
<font style="font-size: 13pt" color="Black">
<p align="justify"></p><ol><li value="3">Make-файл в поддиректории должен содержать строчку похожу на эту:<br><br><font style="font-size: 10pt;" color="Black"><code>EXTRA_DIST = somefile.txt someotherfile.html</code></font><br><br>Тем самым говорится automake, что вы хотите эти файлы отделить, но что они нужны вам во-время компиляции.</li></ol><p></p>
</font>
<h1>Примеры файлов</h1>
<font style="font-size: 13pt" color="Black">
<p align="justify">Здесь представлены примеры файлов  configure.ac и 
Makefile.am. Они успешно управляют C++ проектом, который использует 
Стандартную библиотеку.</p><p align="justify">Читайте 
руководство,http://www.gnu.org/manual/manual.html, по automake и 
autoconf для получения информации по именам макросов и переменных 
используемых в этих файлах. Не хочется делать комментарии для  каждой 
строчки в этих файлах во-избежания трудности понимания.</p><p align="justify">Примеры даны для 'Deep' проекта с следующей структурой:</p><p align="justify">
</p></font><ul><font style="font-size: 13pt" color="Black"></font><li><font style="font-size: 13pt" color="Black"><b>helloworld_cc</b><ul>
<li>configure.ac</li>
<li>Makefile.am</li>
<li><b>src</b><ul>
        <li>Makefile.am</li>
        <li>helloworld.h</li>
        <li>helloworld.cc</li>
        <li>main.cc</li></ul></li>
<li><b>foofiles</b></li><ul>
        <li>Makefile.am</li>
        <li>foo.h</li>
        <li>foo.cc</li></ul>
</ul><p></p>
</font>
<h2>Файл configure.ac в корне проекта</h2>
<font style="font-size: 13pt" color="Black">
<p align="justify">
<font style="font-size: 10pt;" color="Black">
AC_INIT(src/hello.cc)<br>
AM_INIT_AUTOMAKE(hello,0.1)<br>
AM_CONFIG_HEADER(config.h)<br>
AC_PROG_CC<br>
AC_PROG_CXX<br>
AC_PROG_INSTALL<br>
AC_PROG_LIBTOOL<br>
AC_OUTPUT(Makefile src/Makefile src/foofiles/Makefile)<br>
</font>
</p>
</font>
<h2>Файл Makefile.am в корне проекта</h2>
<font style="font-size: 13pt" color="Black">
<p align="justify">
<font style="font-size: 10pt;" color="Black">
SUBDIRS = src<br>
</font>
</p>
</font>
<h2>Makefile.am  в директори 'src'</h2>
<font style="font-size: 13pt" color="Black">
<p align="justify">
<font style="font-size: 10pt;" color="Black"><code>
bin_PROGRAMS = hello<br>
hello_SOURCES = hello.h hello.cc main.cc<br>
SUBDIRS = foofiles<br>
LDADD = foofiles/libfoo.a<br>
</code></font>
</p>
</font>
<h2>Makefile.am в поддиректории  foo внутри директории 'src'</h2>
<font style="font-size: 13pt" color="Black">
<p align="justify">
<font style="font-size: 10pt;" color="Black"><code>
noinst_LIBRARIES = libfoo.a <br>
libfoo_a_SOURCES = foo.h foo.cc <br>
INCLUDES = -I@top_srcdir@/ <br>
</code></font>
</p>
</font>
<font style="font-size: 13pt" color="Black">
<p align="justify">
Уже структурированный и cконфигурированный проект можно скачать <a href="http://www.openismus.com/documents/linux/automake/helloworld_cc-0.3.tar.gz">здесь</a>.</p>
</font>
<p>&nbsp;</p></li></ul></font></td></tr>
<!-- End changed partd and start the template of document is a unchanged part -->
<tr valign="bottom">
<td><img src="%D0%98%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20Autoconf%20%D0%B8%20Automake_files/d-t.htm" height="1" hspace="26" width="1"></td><td></td><td><font style="font-size: 14pt" color="Black"><p><a href="http://rjaan.narod.ru/docs.html">Вернуться к Оглавлению</a></p></font><hr size="2" color="black"></td>
</tr>
<tr valign="bottom">
<td><img src="%D0%98%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20Autoconf%20%D0%B8%20Automake_files/d-t.htm" height="1" hspace="26" width="1"></td><td></td><td><font style="font-size: 10pt" color="Black"><p>Copyright © 2010 <b>rjaan</b> as Andrey Rjavskov(Rzhavskov) <a href="mailto:rjaan@yandex.ru">&lt;rjaan@yandex.ru&gt;</a>&nbsp;<a href="mailto:arjavskov@gmail.com">&lt;arjavskov@gmail.com&gt;</a></p></font></td>
</tr>
</tbody></table>
<table border="0" cellpadding="0" cellspacing="5"><tbody><tr>
<td><a href="http://narod.yandex.ru/"><img src="%D0%98%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20Autoconf%20%D0%B8%20Automake_files/narod.htm" height="66" hspace="2" vspace="18" width="113" border="0"></a></td>
<td><!-- Yandex.Metrika -->
<script src="%D0%98%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20Autoconf%20%D0%B8%20Automake_files/watch.js" type="text/javascript"></script>
<script type="text/javascript">
try { var yaCounter641863 = new Ya.Metrika(641863); } catch(e){}
</script>
<noscript><img src="//mc.yandex.ru/watch/641863" style="position:absolute" alt="" /></noscript>
<!-- /Yandex.Metrika --></td></tr></tbody></table>
</body></html>