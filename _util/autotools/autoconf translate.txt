!!! стараться избегать абсолютных путей
установленное - доступно по имени, и ищется через PATH
то, что собираем - все пути - относительно текущего каталога
!!! даешь понятные make-файлы, т.к. это часть исходного кода, а мало кто любит, когда исходный код генерируется кодогенераторами

./configure для определения необходимых ДЛЯ СБОРКИ компиляторов, интерпретаторов и установленных библиотек
	и создания make-файла с целями all и clean, и всеми оставшимися целями, КОТОРЫЕ ВЫЗЫВАЮТ install (но ни как ни automake/autoconf)
		(а люди будут писать только makefile.in)
	а также запускает install ТОЛЬКО для проверки наличия необходимого ДЛЯ РАБОТЫ ПО (перед сборкой)
./install - скрипт, проверяющий (если не было проверено ранее) необходимые ДЛЯ РАБОТЫ интерпретаторы и библиотеки
	знающий, где лежат собранные файлы, и куда в систему их устанавливать (по умолчанию, или --prefix , ...)
	и при этом собственно устанавливающий или тестирующий программу на месте
	а также создающий файл с данными, что, куда было установлено
	а также, в зависимости от того, какой пакетный менеджер установлен в системе, регистрирующий им все установленное
	а также, способный удалить все собранное и все исходники и оставить только uninstall и файл с данными, что, куда было установлено, 
		и makefile в котором останется работающая цель make uninstall
./uninstall - скрипт, читающий файл с данными, что, куда было установлено, и удаляющий это
	если программа была установлена пекетным менджером - то им и удаляет
	иначе - зависимости НЕ проверяются

вообще лучше создать папку (checkconfig) с тестирующими скриптами (кодогенерируемыми по отдельности) и configure.ac, 
а все стартовые скрипты сделать постоянными а не кодогенерируемыми
и по хорошему, их лучше иметь как установленные в системе, а не копировать в каждый пакет, но это случиться не скоро, да и их размер не большой

и чтобы эти скрипты сохраняли свой результат в этой папке
а при рекурсивном вызове ./configure ему передавался путь к этой папке
	 - чтобы по нескольку раз не проверять
	 - можно пойти дальше и иметь в системе одну папку с ответами на наиболее частые вопросы, и чтобы была переменная среды, хранящая адрес этой папки, и чтобы ./configure перед проверкой некоторого теста проверял есть ли ответ на ЭТОТ тест в этой папке
=======================================
== стр2 ==
unix -> posix
=== 3й абзац ===
могу -> могут
=== перед пакетом metaconfig ===
 >> condemn - осуждать, приговаривать
 >> reinvent ~~ invent
 >> poor - бедный, плохой
Те, кто на понимает autoconf - вынуждены изобрести его заного.
Главная цель autoconf - сделать жизнь пользователя проще; сделать жизнь разработчика проще - вторичная цель
 >> put another way - иначе говоря
Иначе говоря, менее главная цель сделать генерацию configure для разработчика пакета 
(также заполнение этой ниши приветствуется, т.к. разработчики пакетов формируют пользовательскую базу autoconf);
по сравнению с целью сделать configure безболезненным, портабельным и предсказуемым для конечных пользователей для каждого ~автопроизвольного~ пакета
 >> to this degree - до такой степени
Autoconf до такой степени успешен в этой цели, что
 >> complaint - жалоба
большинство жалоб на autoconf приходятся на сложность написания входных файлов для него, а не на поведение созданного configure.
Даже пакеты, которые не используют autoconf, вынуждены предоставлять configure скрипт, и болььшинство жалоб на эти альтернативные самодельные скрипты
являются тем, что они не соответствуют одному или более GNU coding standards, которые пользователи ожидают получить от сгенерированного autoconf скрипта configure.
=== последний абзац заменить на: ===
Autoconf не решает все проблемы, возникающие при создании портабельных пакетов - 
для более полного решения он должен использоваться совместно с другими средствами сборки GNU,
такими как automake и libtool.
Эти средства берут на себя работу, такукю как создание портабельных рекурсивных make-файлов со всеми стандартными целями,
линковку разделяемых библиотек и т.д.
см. Главу 2 [GNU система сборки], стр.3
== стр.3 ==
=== 2й абзац ===
#ifdef -> #if
см. раздел B3 [индекс символов препроцессора]
=== абзац 3 ===
Autoconf требует GNU m4 версии 1,4,6 или более для создания скриптов.
Он использует возможности, которые некоторые версии m4 (включая 1,3) не используют.
Autoconf лучше всего работает с версией GNU m4 1,4,14 и более, так что они не требуются.(???)



См. раздел 18.5 [Autoconf 1], стр.318, где описано обновление с версии 1.
См. главу 21 [История], стр.351, Где описана история разработки autoconf.
См. главу 20 [FAQ], стр.341, где даются ответы не некоторые общие вопросы, касательно Autoconf.

См. [[веб страницу Autoconf]] где дается свежая информация, детали списков рассылки,
списки известных багов и т.д..

Присылайте предложения на [[список рассылки autoconf]]. Предыдущие предложения находятся в [[архиве]].

Присылайте bug report-ы на [[список рассылки Autoconf Bugs]]. Предыдущие баги можно найти в [[архиве]].

По возможности, сначала проверьте, что ваш баг не решен в современной версии, и что онем еще не сообщили.
Убедитесь, что включили всю необходиму информацию и короткий ‘configure.ac’ который демонстрирует проблему.

Исходники autoconf доступны через git; см. детали в [[Autoconf Summary]] или см. [[текущий репозиторий]].
Также доступен анонимный доступ через CVS, см. детали в ‘README’.
Патчи, соответствующие текущей версии на git могу быть посланы на просмотр в 
[[список рассылки Autoconf Patches]], где дискуссии о предыдущих патчах [[архивированы]];
и все коммиты постятся на [[списке рассылке (который только для чтения) Autoconf Commit]], который также имеет [[архив]].

Т.к. это его миссия, сам пакет autoconf содержит только набор часто используемых макросов, что уже демонстрирует его полезность.
Тем не менее, если вы хотите поделиться вашим макросом, или найти существующий, см. [[Autoconf Macro Archive]], который любезно содержиться [[Peter-ом Simons-ом]].

== стр.3 система сборки GNU ==
 >> reliable - надежный
Autoconf решает важную задачу — надежно исследует системно-зависимую информацию для сборки и запуска — 
но это только одна часть паззла для разработки портабельного ПО.
В связи с этим, проект GNU разработал набор интегрированных утилит чтобы завершить работу, начатую autoconf:
систему сборки GNU, наиболее известными компонентами которой являются Autoconf, Automake, и Libtool.
Эта глава является введением в эти средства, указывает на источники дополнительной информации,
и попытается убедить вас использовать GNU build system для вашего ПО.
 >> convince - убеждать

== 2.1 Automake ==
 >> ubiquity - вездесущность
 >> viable - жизнеспособный
Вездесущность make ознаяает, что только make-файл является жизнеспособюным способом распространять правила автоматической сборки для ПО,
но у него обнаруживается множество ограничений.
 >> tracking - отслеживание
Это удачное решение для поддержки автоматического отслеживания зависимостей, рекурсивной сборки в поддиректориях,
надежных шаблонов (например, для сетевых файловых систем), и т.д.,
означает, что разработчики должны безболезненно (и често некорректно) изобретать колесо для каждого проекта.
 >> quirks - причуды
Портабельность не тривиальна, благодаря причудам make на многих системах.
На вершине всего этого находится ручная работа, требующаяся для реализации многих стандартных целей
которые ожидаются пользователями (make install, make distclean, make uninstall, и т.д.).
 >> repetitive - повторяющийся
Т.к. вы, конечно, используете Autoconf, вы также вставляете повторяющийся код в ‘Makefile.in’
чтобы распознать @CC@, @CFLAGS@, и другие подстановки, предоставляемые configure. В этом бардаке разбирается Automake.

 >> vastly - значительно
Automake позволяет задавать потребности сборки в файле ‘Makefile.am’ со значительно более простым и мощным синтаксисом чем на прямую в makefile,
и генерирует портабельные ‘Makefile.in’ для использования Autoconf.
К примеру, ‘Makefile.am’ для сборки и установки простой программы “Hello world” выглядит так:
bin_PROGRAMS = hello
hello_SOURCES = hello.c
Созданный ‘Makefile.in’ (~400 строк) автоматически поддерживает все стандартные цели,
подстановки, необходимые Autoconf, автоматическое отслеживание зависимостей, сборку VPATH, и прочее.
make соберет программу hello, и make install установит ее в ‘/usr/local/bin’
(или другой префикс, переданный configure, если не ‘/usr/local’).

 >> benefit - выгода
Выгоды от использования Automake увеличиваются для крупных пакетов (отдельно в каждой поддиректории),
 >> convenience - удобство
 >> substantial - существенный
и даже для маленьких программ удобство и портабельность могут быть существенны.
И это не все...

== 2.2 Gnulib ==
GNU software заслужило репутацию работающего на множестве разных типов систем.
 ???? Пока наша главная цель писать ПО для системы GNU,
много пользователей и разработчиков have been introduced to us through системы, которые они уже используют.

 >> among - среди
Gnulib является центральным местом для общего кода GNU, intended to be shared among free software packages.
Его компоненты обычно распространяются на уровне исходного кода,
по сравнению с существующими библиотеками которые будут собраны и прилинкованы снова.
Идеей является копирование файлов из Gnulib в ваше собственное дерево исходников.
Это не распространяемый тар-архив; разработчики должны сами брать исходные модули из репозитория.
Исходные файлы доступны онлдайн, под разными лицензиями, в основном GNU GPL или GNU LGPL.

Модули Gnulib обычно содержат исходный си-код вместе с макросами Autoconf используемыми для конфигурирования исходного кода.
К примеру, модуль Gnulib stdbool реализует ‘stdbool.h’ который больше соответствует C99,
 >> lack - отсутствие
даже на старых машинах, на котрых отсутствует ‘stdbool.h’.
Этот модуль содержит файл для замещаемого хедера,
вместе с макросом Autoconf который включает использование заменяемого хедера на старых машинах.

== 2.3 Libtool ==
Часто, некто хочет собирать не только программы, но и библиотеки, так, чтобы другие программы могли использовать плоды вашей работы.
В идеале, некто предпочел бы разделяюмую (динамически линкуемую) библиотеку,
которую могли бы использовать множество программ без дублирования на диске или в памяти
и которую можно было бы обновлять без линкуемых программ.
Создание портабельных разделяемых библиотек, всегда, являлось кошмаром
— каждая система имеет свои несовместимые средства, флаги компилятора, и магические заклинания.
 >> incantations - заклинания
К счастью, GNU предоставляет решение: Libtool.

Libtool обрабатывает все требования сборки разделяемых библиотек за вас,
и в настоящее время кажется, что это единственный путь делать это с любой портабельностью.
 >> ache - боль
 >> headache - головная боль
Он также обрабатывает много других головных болей, таких как:
взаимодействие с правилами Make с различными суффиксами разделяемых библиотек,
надежное линкование с разделяемыми библиотеками перед тем как они будут установлены суперъюзером,
 >> supplying - поставки
 >> consistent - последовательный, совместимый
и поставку совместимывх систем версий
(так что разные версии библиотеки могут быть установлены или обновлены без нарушения бинарной совместимости).
Также Libtool, также как и Autoconf, может использоваться без Automake,
 >> conjunction - соединение
 >> utilize - использовать
но его наиболее просто использовать с Automake — тогда,
Libtool используется автоматически, когда требется разделяемая библиотека, и вам не нужно знать его синтаксис.

== 2.4 Pointers ==

Разработчики, которые используют простоту make для маленьких проэктов на одной системе
 >> daunt - устрашать, обескураживать
 >> prospect - перспектива
могут быть обескуражены перспективой изучения Automake и Autoconf.
Как4 только ваше ПО будет распространяться для большего и большего количества пользовательей, всегда,
 >> effort - усилие, попытка
в противном случае вы обнаружите себя прилагающим много усилий для изобретения сервисов, которые система сборки GNU уже предоставляет,
и делающим себя теже ошибки, которые однажды были сделаны и побеждены.
 >> Besides - кроме
(Кроме Autoconf, который вы уже изучаете, Automake тоже является вкусняшкой.)


