<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=KOI8-R">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Лабораторная работа N 2</TITLE>
</HEAD>
<BODY>

<B><FONT FACE="Times New Roman" SIZE=4><P ALIGN="CENTER">Лабораторная работа N 2</P>
</FONT><FONT SIZE=4><P ALIGN="CENTER"></P>
</FONT><FONT FACE="Times New Roman" SIZE=4><P ALIGN="CENTER">ФАЙЛОВАЯ СИСТЕМА ОС UNIX</P>
</FONT><FONT SIZE=4><P ALIGN="CENTER"></P>
</FONT><FONT FACE="Times New Roman" SIZE=4><P ALIGN="CENTER">Цель работы</P>
</B></FONT><FONT SIZE=4>
</FONT><FONT FACE="Times New Roman" SIZE=4><P ALIGN="JUSTIFY">Ознакомиться с файловой системой ОС UNIX, механизмами ее функционирования, основными элементами файловой системы: суперблок, описатели</FONT><FONT SIZE=4> </FONT><FONT FACE="Times New Roman" SIZE=4>файлов, типы файлов, список свободных описателей файлов, список свободных блоков.</P>
</FONT><FONT SIZE=4>
</FONT><B><FONT FACE="Times New Roman" SIZE=4><P ALIGN="CENTER">Содержание работы</P>
</B></FONT><FONT SIZE=4>
<OL>

</FONT><FONT FACE="Times New Roman" SIZE=4><LI>Ознакомиться с файловой системой ОС  UNIX  и  программными</FONT><FONT SIZE=4> </FONT><FONT FACE="Times New Roman" SIZE=4>средствами работы с ней.</LI>
<LI>Ознакомиться с заданием к лабораторной работе.</LI>
<LI>Для  указанного  варианта составить программу на языке Си,</FONT><FONT SIZE=4> </FONT><FONT FACE="Times New Roman" SIZE=4>реализующую требуемые действия.</LI>
<LI>Отладить и оттестировать составленную программу, используя</FONT><FONT SIZE=4> </FONT><FONT FACE="Times New Roman" SIZE=4>инструментарий ОС UNIX.</LI>
<LI>Защитить лабораторную работу, ответив на контрольные вопросы.</LI></OL>

<B><P ALIGN="CENTER">Методические указания к лабораторной работе</P></B>
<P ALIGN="JUSTIFY">Интерфейс между пользовательской программой и внешним устройством (или между двумя пользовательскими программами) в ОС UNIX осуществляется в рамках единой структуры данных, называемой файлом ОС UNIX.</P>
<P ALIGN="JUSTIFY">Всякий файл ОС UNIX в соответствие с его типом может быть отнесен к одной из следующих четырех групп: обычные файлы, каталоги, специальные файлы, каналы.</P>
<P ALIGN="JUSTIFY">Обычный файл представляет собой совокупность блоков диска, входящих в состав файловой системы ОС UNIX. В указанных блоках может быть произвольная информация.</P>
<P ALIGN="JUSTIFY">Каталоги представляют собой файлы особого типа, отличающиеся от обычных  прежде  всего тем,  что осуществить запись в них может только ядро ОС UNIX, в то время как доступ по чтению может получить любой пользовательский процесс,  имеющий соответствующие полномочия. Каждый элемент каталога состоит из двух полей: поля имени файла и поля, содержащего указатель на описатель файла, где хранится вся информация о файле:  дата создания,  размер, код защиты, имя владельца и т.д. В любом каталоге содержится, по крайней мере, два элемента, содержащие в поле имени файла имена "." и "..". Элемент каталога,  содержащий в поле имени файла контекст ".", в поле ссылки содержит ссылку на описатель файла,  описывающий этот каталог. Элемент каталога, содержащий в поле имени файла контекст "..", в поле ссылки содержит ссылку на описатель файла, в котором хранится информация о родительском каталоге текущего каталога.</P>
<P ALIGN="JUSTIFY">Специальные файлы - это некоторые файлы, каждому из которых ставится в соответствие свое внешнее устройство, поддерживаемое ОС UNIX и имеющее специальную структуру. Его нельзя использовать для хранения данных, как обычный файл или каталог. В то же время над специальным файлом можно производить те же операции, что и над обычным файлом: открывать, вводить и/или выводить информацию  и т.д. Результат применения любой из этих операций зависит от того, какому конкретному устройству соответствует обрабатываемый специальный файл, однако в любом случае будет осуществлена соответствующая операция ввода-вывода на внешнее устройство,  которому  соответствует выбранный специальный файл.</P>
<P ALIGN="JUSTIFY">Четвертый вид файлов - каналы, будет рассмотрен отдельно в последующих лабораторных работах.</P>
<P ALIGN="JUSTIFY">Для получения  информации  о типе файла необходимо воспользоваться системными вызовами stat (fstat), описанными в предыдущей</FONT><FONT SIZE=4> </FONT><FONT FACE="Times New Roman" SIZE=4>лабораторной работе. Поле </FONT><FONT SIZE=4>st_mode </FONT><FONT FACE="Times New Roman" SIZE=4>содержит флаги, описывающие</FONT><FONT SIZE=4> </FONT><FONT FACE="Times New Roman" SIZE=4>файл. Флаги несут следующую информацию:</P>
<P ALIGN="JUSTIFY">В представленной ниже таблице 1 приведены системные функции ОС UNIX для работы с файловой системой.</P>
<B><FONT FACE="Times New Roman"><P ALIGN="RIGHT">Таблица 1</P>
<P ALIGN="CENTER">Функции для работы с файловой системой</P></B></FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=671>
<TR><TD WIDTH="15%" VALIGN="TOP">
<FONT FACE="Times New Roman" SIZE=4><P ALIGN="CENTER">Возвращают дескриптор файла</FONT></TD>
<TD WIDTH="18%" VALIGN="TOP">
<FONT FACE="Times New Roman" SIZE=4><P ALIGN="CENTER">Преобразуют имя в описатель</FONT></TD>
<TD WIDTH="14%" VALIGN="TOP">
<FONT FACE="Times New Roman" SIZE=4><P>Назначают inode</FONT></TD>
<TD WIDTH="14%" VALIGN="TOP">
<FONT FACE="Times New Roman" SIZE=4><P>Работают с атрибутами</FONT></TD>
<TD WIDTH="11%" VALIGN="TOP">
<FONT FACE="Times New Roman" SIZE=4><P>Ввод/вывод из файла</FONT></TD>
<TD WIDTH="13%" VALIGN="TOP">
<FONT FACE="Times New Roman" SIZE=4><P>Работают со структурой ФС</FONT></TD>
<TD WIDTH="14%" VALIGN="TOP">
<FONT FACE="Times New Roman" SIZE=4><P>Управляют деревьями</FONT></TD>
</TR>
<TR><TD WIDTH="15%" VALIGN="TOP">
<FONT SIZE=4><P>Open, creat, dup, pipe, close</FONT></TD>
<TD WIDTH="18%" VALIGN="TOP">
<FONT SIZE=4><P>Open, creat, chdir, chmod,  stat, mkfifo, mound, mknod, link, unmount, unlink, chown</FONT></TD>
<TD WIDTH="14%" VALIGN="TOP">
<FONT SIZE=4><P>Creat, link, unlink, mknod</TD>
<TD WIDTH="14%" VALIGN="TOP">
<FONT SIZE=4><P>Chown, chmod, stat</FONT></TD>
<TD WIDTH="11%" VALIGN="TOP">
<FONT SIZE=4><P>Read, write, lseek</FONT></TD>
<TD WIDTH="13%" VALIGN="TOP">
<FONT SIZE=4><P>Mount, unmount</FONT></TD>
<TD WIDTH="14%" VALIGN="TOP">
<FONT SIZE=4><P>Chmod, chown</FONT></TD>
</TR>
</TABLE>
<P ALIGN="JUSTIFY">Остановимся на тех из них, которые требуются для выполнения лабораторной работы. Для получения информации о типе файла необходимо воспользо-ваться системными вызовами stat() (fstat()). Формат системных вызовов stat() (fstat()):</P>
<DIR><DIR>
<P>#include &lt;sys/types.h&gt;</P>
<P>#include &lt;sys/stat.h&gt;</P>
<P>int stat(const char *name, struct stat *stbuf)</P>
<P>int fstat(int fd, struct stat *stbuf)</P>
</DIR></DIR>
</FONT><FONT FACE="Times New Roman" SIZE=4><P ALIGN="JUSTIFY">Оба системных вызова помещают информацию о файле (в первом случае  специфицированным именем name, а во втором - дескриптором файла fd) в структурную переменную, на которую  указывает  stbuf. Вызывающая  функция должна позаботиться о резервировании места для возвращаемой информации; в случае успеха возвращается 0, в противном случае -1 и код ошибки в errno. Описание структуры stat содержится в файле &lt;sys/stat.h&gt;. С небольшими модификациями она  имеет вид:</P>
</FONT><FONT SIZE=4><P>struct stat</P>
<P>{</P>
<DIR>
<P>dev_t    st_dev;   /*   device file             */</P>
<P>ino_t    st_ino;   /*   file serial inode      */</P>
<P>ushort   st_mode;  /*   file mode            */</P>
<P>short    st_nlink; /*   number of links     */</P>
<P>ushort   st_uid;   /*   user ID                   */</P>
<P>ushort   st_gid;   /*   group ID                */</P>
<P>dev_t    st_rdev;  /*   device ident          */</P>
<P>off_t    st_size;  /*   size of file               */</P>
<P>time_t   st_atime; /*   last access time    */</P>
<P>time_t   st_mtime; /*   last modify time  */</P>
<P>time_t   st_ctime; /*   last status change  */</P>
</DIR>
<P>}</P>
<P>Поле st_mode содержит флаги, описывающие файл. Флаги несут следующую информацию:</P>
<DIR>
<P>S_IFMT     0170000  - тип файла</P>
<P>S_IFDIR    0040000  - каталог</P>
<P>S_IFCHR    0020000  - байт-ориентированный специальный файл</P>
<P>S_IFBLK    0060000  - блок-ориентированный специальный файл</P>
<P>S_IFREG    0100000  - обычный файл</P>
<P>S_IFFIFO   0010000  - дисциплина FIFO</P>
<P>S_ISUID      04000  - идентификатор владельца</P>
<P>S_ISGID      02000  - идентификатор группы</P>
<P>S_ISVTX      01000  - сохранить свопируемый текст</P>
<P>S_ISREAD     00400  - владельцу разрешено чтение</P>
<P>S_IWRITE     00200  - владельцу разрешена запись</P>
<P>S_IEXEC      00100  - владельцу разрешено выполнение.</P>
</DIR>
<P ALIGN="JUSTIFY">Символьные константы, четыре первых символа которых совпадают с контекстом S_IF, могут быть использованы для определения типа файла.</P>
<P ALIGN="JUSTIFY">Большинство системных вызовов, работающих с каталогами, оперируют  структурой dirent, определенной в заголовочном файле &lt;dirent.h&gt;</P>
<DIR>
<P>struct dirent</P>
<P>{</P>
<DIR><P>ino_t d_ino;      /*  номер индексного дескриптора    */</P>
<P>char d_name[DIRSIZ];   /*  имя файла                 */</P>
</DIR>
<P>}</P></DIR>
</DIR>
<P ALIGN="JUSTIFY">Создание и удаление каталога выполняется системным вызовом mkdir():<P>
<DIR><DIR>
<P>#include &lt;sys/types.h&gt;</P>
<P>#include &lt;sys/stat.h&gt;</P>
<P>int mkdir (char *pathname, mode_t mode);</P>
</DIR></DIR>
<P>При создании каталога посредством системного вызова rmdir() в него помещается две ссылки (. и ..).<P>
<DIR><DIR>
<P>#include &lt;unistd.h&gt;</P>
<P>int rmdir (char *pathname);</P>
</DIR></DIR>
<P>Открытие и закрытие каталога выполняется системными вызовами opendir() и closedir():<P>
<DIR><DIR>
<P>#include &lt;sys/types.h&gt;</P>
<P>#include &lt;dirent.h&gt;</P>
<P>DIR *opendir (char *dirname);</P>
</DIR></DIR>
<P ALIGN="JUSTIFY">При успешном открытии каталога системный вызов возвращает указатель на переменную типа DIR, являющуюся дескриптором каталога, определенную в файле &lt;dirent.h&gt; и используемую при чтении и записи в каталог. При неудачном вызове возвращается значение NULL.<P>
<DIR><DIR>
<P>#include &lt;dirent.h&gt;</P>
<P>int closedir (DIR *dirptr);	где dirptr - дескриптор каталога.</P>
</DIR></DIR>
<P ALIGN="JUSTIFY">Для смены каталога служит системный вызов chdir():<P>
<DIR><DIR>
<P>#include &lt;unistd.h&gt;</P>
<P>int chdir (char *pathname);</P>
</DIR></DIR>
<P ALIGN="JUSTIFY">Чтение записей каталога выполняется системным вызовом readdir():<P>
<DIR><DIR>
<P>#include &lt;sys/types.h&gt;</P>
<P>#include &lt;dirent.h&gt;</P>
<P>struct dirent *readdir (DIR *dirptr);</P>
</DIR></DIR>
<P ALIGN="JUSTIFY">Системный вызов readdir() по номеру дескриптора каталога возвращает очередную запись из каталога в структуру dirent, либо нулевой указатель при достижении конца каталога. При успешном чтении, указатель каталога перемещается к следующей записи.<P>
<P ALIGN="JUSTIFY">Дополнительный системный вызов<P>
<DIR><DIR>
<P>void rewinddir (DIR *dirptr);</P>
</DIR></DIR>
<P ALIGN="JUSTIFY">переводит указатель каталога к первой записи каталога.<P>

<B><P ALIGN="CENTER">Варианты заданий</P></B>
<OL>
<P ALIGN="JUSTIFY"><LI>Разработать программу, которая просматривает текущий каталог и выводит на экран имена всех встретившихся в нем каталогов. Затем осуществляется переход в родительский каталог, который затем становится текущим,  и указанные выше действия повторяются до тех пор, пока текущим каталогом не станет корневой каталог.</LI></P>
<P ALIGN="JUSTIFY"><LI>Разработать программу, которая просматривает текущий каталог и выводит на экран имена всех встретившихся в нем обычных файлов. Затем осуществляется переход в родительский каталог, который затем становится текущим, и указанные выше действия повторяются до тех пор, пока текущим каталогом не станет корневой каталог.</LI></P>
<P ALIGN="JUSTIFY"><LI>Разработать программу, которая выводит на экран содержимое текущего каталога в порядке возрастания размеров файлов. При этом имена каталогов должны выводиться первыми.</LI></P>
<P ALIGN="JUSTIFY"><LI>Разработать программу, которая выводит на экран содержимое текущего каталога, упорядоченное по времени создания файлов. При этом имена каталогов должны выводиться последними.</LI></P>
<P ALIGN="JUSTIFY"><LI>Разработать программу, которая выводит на экран содержимое текущего каталога в алфавитном порядке. Каталоги не выводить.</LI></P>
<P ALIGN="JUSTIFY"><LI>Разработать программу, которая выводит на экран в текущем каталоге имена тех каталогов, которые в себе не содержат подкаталогов.</LI></P>
<P ALIGN="JUSTIFY"><LI>Разработать программу, которая выводит на экран в текущем каталоге имена тех каталогов, которые содержат в себе подкаталоги.</LI></P>
<P ALIGN="JUSTIFY"><LI>Разработать программу, которая осуществляет просмотр текущего каталога и выводит на экран его содержимое группами в порядке возрастания числа  ссылок  на файлы (в том числе имена каталогов). Группа представляет собой объединение файлов с одинаковым числом ссылок на них.</LI></P></OL>

<B><P ALIGN="CENTER">Контрольные вопросы</P></B>
<OL>

<LI>Что представляет собой суперблок?</LI>
<LI>Что представляет собой список свободных блоков?</LI>
<LI>Что представляет собой список свободных описателей файлов?</LI>
<LI>Как производится выделение свободных блоков под файл?</LI>
<LI>Как производится освобождение блоков данных, занятых под файл?</LI>
<LI>Каким образом осуществляется монтирование дисковых устройств?</LI>
<LI>7. Каково назначение элементов структуры stat?</LI>
<LI>Каким образом осуществляется защита файлов в ОС UNIX? </LI>
<LI>Каковы права доступа к файлу, при которых владелец может выполнять все операции (r, w, x), а прочие пользователи - только читать?</LI>
<LI>Что выполняет системный вызов lseek(fd, (off_t)0, SEEK_END)?</LI>
</FONT><FONT SIZE=2></FONT></BODY>
</HTML>


