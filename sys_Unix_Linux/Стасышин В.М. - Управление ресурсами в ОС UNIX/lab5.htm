<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=KOI8-R">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Лабораторная работа N 5</TITLE>
</HEAD>
<BODY>

<B><FONT FACE="Times New Roman" SIZE=4><P ALIGN="CENTER">Лабораторная работа N 5</P>
<P ALIGN="CENTER">СИНХРОНИЗАЦИЯ ПРОЦЕССОВ</P>                                                                                                                              
<P ALIGN="CENTER">Цель работы</P></B>
</FONT><FONT FACE="Times New Roman" SIZE=4><P ALIGN="JUSTIFY">Практическое освоение механизма синхронизации процессов и их взаимодействия посредством программных каналов. </P>
<B><P ALIGN="CENTER">Содержание работы</P></B>

<OL>
<LI>Ознакомиться с заданием к лабораторной работе.</LI>
<LI>Выбрать  набор  системных вызовов,  обеспечивающих решение задачи.</LI>
<LI>Для  указанного  варианта составить программу на языке Си, реализующую требуемые действия.</LI>
<LI>Отладить и оттестировать составленную программу, используя инструментарий ОС UNIX.</LI>
<LI>Защитить лабораторную работу,  ответив на контрольные вопросы.</LI></OL>

<B><P ALIGN="CENTER">Методические указания к лабораторной работе</P></B>
<P ALIGN="JUSTIFY">В предыдущей лабораторной работе были рассмотрены различные программные средства, связанные с созданием и управлением процессами в  рамках ОС UNIX. Данная лабораторная работа предполагает комплексное их использование при решении задачи синхронизации процессов и их взаимодействия посредством программных каналов.</P>
<P ALIGN="JUSTIFY">Кратко перечислим состав системных вызовов, требуемых для выполнения данной лабораторной работы:</P>
<OL>

<LI>Создание, завершение процесса, получение информации о процессе, - fork(), exit(), getpid(), getppid();</LI>
<LI>Синхронизация   процессов  -  signal(),  kill(),  sleep(), alarm(), wait(), pause();</LI>
<LI>Создание информационного канала и работа с ним  -  pipe(), read(), write().</LI></OL>


<B><P ALIGN="CENTER">Варианты заданий</P></B>
<P ALIGN="JUSTIFY">1. Исходный  процесс создает программный канал К1 и порождает два процесса Р1 и Р2, каждый из которых готовит данные для обработки их основным процессом.  Схема взаимодействия процессов показана ниже.</P>
<P ALIGN="CENTER"><IMG SRC="..\..\ft\002355\p5.jpg"></P>
<P ALIGN="JUSTIFY">Подготовленные данные последовательно помещаются процессами-сыновьями в программный канал и передаются основному процессу.</P>
<P ALIGN="JUSTIFY">Порядок передачи данных в канал и структура  подготавливаемых данных показана ниже.</P>
<P ALIGN="CENTER"><IMG SRC="..\..\ft\002355\p6.jpg"></P>
<P ALIGN="JUSTIFY">Обработка данных основным процессом заключается в чтении информации из программного канала и печати ее. Кроме того, посредством выдачи сообщений необходимо информировать обо всех этапах работы программы (создание процесса, завершение посылки данных в канал и т.д.).</P>
<P ALIGN="JUSTIFY">2. Исходный процесс создает два программных канала К1 и К2 и порождает два процесса Р1 и Р2, каждый из которых готовит данные для обработки их основным процессом. Схему взаимодействия процессов и структуру подготавливаемых данных см. в варианте 1.</P>
<P ALIGN="JUSTIFY">Подготавливаемые данные процесс Р2 помещает в канал К1, затем они оттуда читаются процессом Р1, переписываются в канал К2, дополняются своими данными. Порядок передачи данных в канал изображен ниже</P>
<P ALIGN="CENTER"><IMG SRC="..\..\ft\002355\p7.jpg"></P>
<P ALIGN="JUSTIFY">Обработка данных основным процессом заключается в чтении информации из программного канала К2 и печати ее. Кроме того,  посредством выдачи сообщений необходимо информировать обо всех этапах работы программы (создание процесса,  завершение посылки данных  в канал и т.д.).</P>
<P ALIGN="JUSTIFY">3. Исходный  процесс создает программный канал К1 и порождает новый процесс Р1, а тот, в свою очередь, еще один процесс Р2, каждый из которых готовит данные для обработки их основным процессом. Схема взаимодействия процессов показана ниже.</P>
<P ALIGN="CENTER"><IMG SRC="..\..\ft\002355\p8.jpg"></P>
<P ALIGN="JUSTIFY">Подготовленные данные последовательно помещаются  процессами-сыновьями в программный канал и передаются основному процессу.</P>
<P ALIGN="JUSTIFY">Порядок передачи данных в канал и структура подготавливаемых данных показана ниже.</P>
<P ALIGN="CENTER"><IMG SRC="..\..\ft\002355\p9.jpg"></P>
<P ALIGN="JUSTIFY">Обработка данных основным процессом заключается в чтении информации из программного канала и печати ее. Кроме того, посредством выдачи сообщений необходимо информировать обо всех этапах работы программы (создание процесса, завершение посылки данных в канал и т.д.).</P>
<P ALIGN="JUSTIFY">4. Исходный процесс создает два программных канала К1 и К2 и порождает новый процесс Р1, а тот, в свою очередь, еще один процесс Р2,  каждый из которых готовит данные для обработки их основным процессом. Схему взаимодействия процессов и структуру подготавливаемых данных см. в варианте 3.</P>
<P ALIGN="JUSTIFY">Подготавливаемые данные  процесс  Р1  помещает в канал К1, а процесс Р2 в канал К2,  откуда они процессом Р1 копируются в канал К1 и дополняются новой порцией данных.  Порядок передачи данных  в канал изображен ниже</P>
<P ALIGN="CENTER"><IMG SRC="..\..\ft\002355\p10.jpg"></P>
<P ALIGN="JUSTIFY">Обработка данных основным процессом заключается в чтении информации из программного канала К1 и печати ее.  Кроме того,  посредством выдачи сообщений необходимо информировать обо всех этапах работы программы (создание процесса,  завершение посылки данных  в канал и т.д.).</P>
<P ALIGN="JUSTIFY">5. Программа порождает иерархическое дерево процессов. Каждый процесс  выводит сообщение о начале выполнения,  создает пару процессов,  сообщает об этом, ждет завершения порожденных процессов и затем заканчивает работу. Поскольку действия в рамках каждого процесса однотипны, эти действия должны быть  оформлены отдельной программой, загружаемой системным вызовом exec(). Параметр программы - число уровней (не более 5).</P>
<P ALIGN="CENTER"><IMG SRC="..\..\ft\002355\p11.jpg"></P>
<P ALIGN="JUSTIFY">6. Исходный процесс создает программный информационный  канал К1, канал  синхронизации  К0 и порождает два процесса Р1 и Р2, из которых один (Р1) порождает еще один процесс Р3. Назначение всех трех порожденных  процессов  - подготовка данных для обработки их основным процессом. Схема взаимодействия процессов показана ниже.</P>
<P ALIGN="CENTER"><IMG SRC="..\..\ft\002355\p12.jpg"></P>
<P ALIGN="JUSTIFY">Подготовленные данные последовательно помещаются процессами-сыновьями в программный канал К1 и передаются основному процессу. Кроме того, процесс Р1 через канал синхронизации К0 сообщает процессу Р2 идентификатор процесса Р3 с тем,  чтобы процесс Р2 мог послать процессу Р3 сигнал.  Порядок передачи  данных  в  канал  и структура подготавливаемых данных показана ниже.</P>
<P ALIGN="CENTER"><IMG SRC="..\..\ft\002355\p13.jpg"></P>
<P ALIGN="JUSTIFY">Обработка данных основным процессом заключается в чтении информации из программного канала и печати ее. Кроме того, посредством выдачи сообщений необходимо информировать обо всех этапах работы программы (создание процесса, завершение посылки данных в канал и т.д.).</P>
<P ALIGN="JUSTIFY">7. Исходный процесс создает два программных информационных канала К1 и К2, канал синхронизации К0 и порождает два процесса Р1 и Р2, из которых один (Р1) порождает еще один процесс Р3. Назначение всех трех порожденных процессов - подготовка данных для обработки их основным  процессом.  Схему  взаимодействия  процессов  и структуру подготавливаемых данных см. в варианте 6.</P>
<P ALIGN="JUSTIFY">Подготавливаемые данные процесс Р3  помещает в канал К1, а процессы Р1 и Р2 в канал К2, откуда они процессом Р3 копируются в канал К1 и дополняются новой порцией данных. Кроме того, процесс Р1 через канал синхронизации К0 сообщает процессу Р2 идентификатор процесса  Р3 с тем,  чтобы процесс Р2 мог послать процессу Р3 сигнал. Порядок передачи данных в канал показан ниже.</P>
<P ALIGN="CENTER"><IMG SRC="..\..\ft\002355\p14.jpg"></P>
<P ALIGN="JUSTIFY">Обработка данных основным процессом заключается в чтении информации из программного канала К1 и печати ее. Кроме того, посредством выдачи сообщений необходимо информировать обо всех этапах работы  программы (создание процесса,  завершение посылки данных в канал и т.д.).</P>
<P ALIGN="JUSTIFY">8. Исходный  процесс создает программный канал К1 и порождает новый процесса Р1, а тот, в свою очередь, порождает еще один процесс Р2. Схема взаимодействия процессов показана ниже.</P>
<P ALIGN="CENTER"><IMG SRC="..\..\ft\002355\p15.jpg"></P>
<P ALIGN="JUSTIFY">Подготовленные данные  последовательно  помещаются  процессами-сыновьями в программный канал и передаются основному процессу. Файл, читаемый  процессом Р2, должен быть достаточно велик с тем, чтобы его чтение не завершилось ранее,  чем закончится установленная задержка в n секунд.  После срабатывания будильника процесс Р1 посылает сигнал процессу Р2, прерывая чтение файла.</P>
<P ALIGN="JUSTIFY">Порядок передачи данных в канал и структура  подготавливаемых данных показана ниже.</P>
<P ALIGN="CENTER"><IMG SRC="..\..\ft\002355\p16.jpg"></P>
<P ALIGN="JUSTIFY">Обработка данных основным процессом заключается в чтении информации из программного канала и печати ее. Кроме того, посредством выдачи сообщений необходимо информировать обо всех этапах работы программы (создание процесса, завершение посылки данных в канал и т.д.).</P>
</FONT><FONT SIZE=2></FONT></BODY>
</HTML>

