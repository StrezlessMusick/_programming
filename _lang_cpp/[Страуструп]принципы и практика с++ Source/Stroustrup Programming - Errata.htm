<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0049)http://www.stroustrup.com/Programming/errata.html -->
<HTML><HEAD><TITLE>Stroustrup: Programming - Errata</TITLE>
<META content="text/html; charset=utf-8" http-equiv=Content-Type>
<META name=GENERATOR content="MSHTML 8.00.6001.23111"></HEAD>
<BODY>
<CENTER>
<H1>Programming - Errata</H1></CENTER>
<P align=right>Modified July 22, 2011. 
<P>This is errata for <A 
href="http://www.stroustrup.com/Programming/index.html">Programming: Principles 
and Practice using C++</A>. 
<P>Comments, improvements, bug reports, etc. are welcome. 
<P>This is not a list that a reader should go through to carefully correct a 
copy of the book; most errata is far too minor to bother or confuse most people. 
I recommend using this list only if you suspect a mistake in the book -- look at 
the errata before doubting your understanding. 
<P>I list both corrections and clarifications. There is essentially no problem 
that I consider too small to list, so you might find many pieces of errata too 
minor to bother with (I know because I have received email to that effect), but 
I'd rather not make decisions about what an unknown reader will find bothersome. 
Please note that the number of errata does <I>not</I> equal the number of 
errors. Most errata are clarifications/improvements, not correction of errors. 
<P>The major source of errata is now translators and reviewers of translations: 
People who go through the text paragraph-by-paragraph, sentence-by-sentence, and 
word-by-word trying to render it accurately and colloquially in another language 
find problems that a native English reader rarely spot. My hope is that the 
resulting clarifications will be especially valuable for readers of the English 
text who are (like me) not native English speakers. 
<P>Big issues, such as "why don't you use XXX for your GUI?", "please add two 
more chapters on the STL", and "please use C++0x features to simplify the code" 
are not errata but considerations for future work and will not appear here. 
<P>Different people have different preferences for sorting errata: in 
chronological order, in page order, each printing separate, all printings 
merged, etc. However, I can't manage multiple organizations, so what you get is 
what seems to be most useful for most people. 
<P>At the request of repeat visitors to the page, I have started to add dates of 
posting of individual errata. If an errata is changed, so is its date. 
<P>As an abbreviation I use, s/before/after/ to mean replace "before" with 
"after". 
<P>This is the errata to the 3rd printing, yielding the 4th printing. The errata 
for the 2nd printing is <A 
href="http://www.stroustrup.com/Programming/errata2p.html">here</A>. The 
printing number can be found on the bottom of the copyright page. 
<HR>

<P>Table of contents 
<UL></UL>
<P>Chapter 0 
<P>Chapter 1 
<P>Chapter 2 
<P>Chapter 3 
<P>Chapter 4 
<P>Chapter 5 
<P>Chapter 6 
<P>Chapter 7 
<P>Chapter 8 
<P>Chapter 9 
<P>Chapter 10 
<P>Chapter 11 
<P>Chapter 12 
<UL>
  <LI>(+7/13/2011) pg 416: s/1450-by-1050/1400-by-1050/ </LI></UL>
<P>Chapter 13 
<UL>
  <LI>(+7/13/2011) pg 440: s/Window.ccp/Window.cpp/ </LI></UL>
<P>Chapter 14 
<UL>
  <LI>(+7/13/2011) pg 494: s/const Open_polyline&amp;/Open_polyline&amp;/ 
</LI></UL>
<P>Chapter 15 
<P>Chapter 16 
<P>Chapter 17 
<P>Chapter 18 
<P>Chapter 19 
<UL>
  <LI>(+12/28/2010) pg 679: s/elem(a.allocate(n))/elem(alloc.allocate(n))/ 
</LI></UL>
<P>Chapter 20 
<UL>
  <LI>(+11/15/2010) pg 701: s/iterator(Link* p)/iterator(Link&lt;Elem&gt;* p)/ 
  <LI>(+7/13/2011) pg 712:s/delete()/erase()/ </LI></UL>
<P>Chapter 21 
<P>Chapter 22 
<P>Chapter 23 
<P>Chapter 24 
<P>Chapter 25 
<P>Chapter 26 
<P>Chapter 27 
<UL>
  <LI>(+7/13/2011) pg991: s/1997 version./1998 version./ 
  <LI>(+12/28/2010) pg 1019: s/open fn for writing/open fn2 for writing/ (in 
  comment) </LI></UL>
<P>Appendix A 
<UL>
  <LI>(+7/13/2011) pg1076: s/Date(string);/Date(const char*);/ 
  <LI>(3/9/09) pg 1079. Before "A.12.4.1 Virtual functions" insert a new 
  paragraph: Members of a class can be initialized using the member initializer 
  syntax <B>:member(initial_value)</B> (see §A.12.3). Only members of the class 
  itself, and not members of its base classes can be initialized this way. A 
  base class can be initialized using the same syntax. For example: <PRE>	struct Base {
		int mb;
		Base(int i) : mb(i) { }
	};

	struct Derived : Base {
		int md;
		Derived(int y) : md(y) { }		      // error: forgot to initialize Base
		Derived(int x, int y) : md(y), mb(x) { }	// error can't initialize base member from derived constructor
		Derived(int x, int y) :Base(y), md(x) { }	// ok
	};
</PRE>An initializer used to initialize a base is class a base initializer or 
  base-class initializer. </LI></UL>
<P>Appendix B 
<UL>
  <LI>(+11/17/2010) pg 1103: s/Advance: like <B>p+=n</B>;/Like <B>p+=n</B>, but/ 

  <LI>(+11/17/2010) pg 1103: s/x=difference(p,q)/x=distance(p,q)/ 
  <LI>(+11/17/2010) pg 1103: s/Difference: like <B>q-p</B>; 
  <B>difference()</B>/Like <B>q-p</B>, but <B>distance()</B>/ </LI></UL>
<P>Appendix C 
<P>Appendix E 
<P>Glossary 
<P>Bibliography 
<P>Index 
<HR>

<H2>Thanks</H2>Eugene Feoktistov, Nomura,Nomura and Jennifer Welch 
</BODY></HTML>
