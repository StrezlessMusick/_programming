**********************************************************************
* 	INSTALL file for STLport                                         *
*                                                                    *
**********************************************************************

STLport - вся стандартная библиотека ANSI C++

Этот выпуск содержит только исходники STLport, без бинарников.
Для использования iostream'ов STLport'а, locale'и и комплексных чисел, вы должны собрать библиотеку STLport
из исходников в папке "build/lib" и прилинковать к вашей программе.

Начиная с 5.0 'wrapper' mode больше не поддерживанется. Вы не можете использовать нативную
реализацию iostream'ов компилятора с STLport STL (смотри объяснения в doc/FAQ).
Сейчас вы можете выбрать iostream'ы STLport'а или не использовать iostream'ы.

==== Распаковка и установка STLport ==========

1) Распакуйте архив STLport в директорию, доступную для компиляции.
   ВАЖНО: НЕ перезаписывайте заголовочные файлы, идущие с компилятором, даже если вы сделали бекап
   - это не работает! Наиболее вероятно, вы уже распаковали архив перед
   чтением этого файла ;)

   ???
2) убедитесь, что директория "stlport" этого распроложения идет перед такими же диреториями компилятора
   в ваших include paths когда вы компилируете проэкт.

   Важно: для SunPro CC 5.0 и старше, используется специальная директория "stlport/SC5"
	 это сейчас абсолютно, пожэалуйста убедитесь, что вы не используете это как-нибудь еще.

3) Убедитесь, что вы не переименовали поддиректорию "stlport" -
   результатом этого могут быть ошибки компиляции.

   ВАЖНО: Ваш компилятор должен быть распознан исходным кодом STLport без какого-либо конфигурирования.
          Пожалуйста, отредактируйте конфигурационный хедер для директории вашего компилятора
          если вы собираетесь сделать специфичные для компилятора изменения конфигурации
          (см. stlport/stl/config). 

4)  Запуск:

    configure --help

    В зависимости от вашей среды, командная оболочка Windows или Unix такая как shell,
    configure.bat или скрипт configure будут запущены соответственно. Для пользователей Windows
    запуск скрипта configure обязателен в порядке чтобы сообщить компилятору, что вы собираетесь использовать

5)  Зайдите в поддиректорию "build/lib". Она содержит разные мейкфайлы для разных компилдяторов
    и 'make' утилит (поддерживаются GNU Make и Microsoft'овская nmake).

    Проверьте, что вы можете компилировать в командной строке. Пользователи IDE может потребоваться сделать 
    что-то специальное, как например добавить переменные среды (для Microsoft) или установить дополнительные 
    компоненты компилятора (для Metrowerks), перед тем, как они смогут использовать компиляторы командной строки 
    (смотри doc/README.xxxx для дополнительной инфрмации).

    configure script должен создать Makefile так, что вам нужно только
    вызвать 'make' или 'nmake' (для некоторых платформ GNU make может скрываться под 'gmake').

    ВАЖНО-ВАЖНО:

    Если вы НЕ планируете использовать iostream'ы STLport'а и/или реализацию локали а только
    STL, вам не нужно собирать библиотеку.
 
    Если вы решили выключить STLport iostreams и locale используя конфигурационный макрос _STLP_NO_IOSTREAMS
    в stlport/stl/config/user_config.h, вы можете остановиться читать здесь.


==== сборка библлиотеки STLport iostreams ==========

Ниже приведены пошаговые инструкции для сборки библиотеки STLport streams. Это общее
описание процесса сборки, для более детального описания проыерьте файлы README в директории doc:

>> appropriate - соответствующий
5)  Используйте соответствующую команду make (make или nmake), выполните

      make clean install

    чтобы собрать библиотеки STLport. Make files are set up to build several different
    flavors - debug/nondebug, static/dynamic versions. But not all flavors will be build
    by default. See build/lib/README for other make targets.

    Note: 'install' target work slightly different than usual - it installs libraries into
    <STLport root dir>/lib and bin catalogs, NOT IN SYSTEM CATALOG. You can do the system
    install by just copying stlport and lib folder to the destination of your choise. For
    example on UNIX-like platforms this can be done with the following commands:

      su
      tar cf - stlport | (cd /usr/local/include; tar xf -)
      chmod -R a+r /usr/local/include/stlport
      chown -R root:root /usr/local/include/stlport
      (cd lib; tar cf - --exclude=CVS --exclude=.cvsignore .) | (cd /usr/local/lib; tar xf -)
      chown -R root:root /usr/local/lib/libstlport*
      exit

    Note: System install is optional, most of compilers/linkers support searching for includes
    and libs throught out the whole filesystem, just check your documentation on how to achieve
    this.

    If you use cross-compiler, you can find libraries in the <STLport root dir>/lib/<target platform>
    catalog.

6)  If build fails, you may choose to :
     - try fixing the build ;)
     - wait until somebody else will submit corresponding changes to be incorporated in next STLport 
       release/snapshot.

    In case you do patch STLport, please submit your patches to
    https://sourceforge.net/tracker/?atid=766246&group_id=146814&func=browse

==== Linking your application with STLport library ==========

7) Check the build:

    Example:
    
    - under Linux and other Unixes:

    cd build/test/unit
    make install
    ../../../bin/stl_unit_test
    ../../../bin-g/stl_unit_test

    - under Windows:

    cd build\test\unit
    nmake install
    cd ..\..\..\bin
    stl_unit_test
    stl_unit_testd
    stl_unit_teststld

8) Supply the "lib" subdirectory to the library search path and add desired 
   library to the list of libraries to link with.
   Examples (imagine you have mytest.cpp in the same directory as this file is):
	With GCC     : g++ -pthread -I./stlport mytest.cpp -L./lib/ -lstlport
	With DEC CC  : cxx -I./stlport mytest.cpp -L./lib/ -lstlport
	With SUN CC  : CC -mt -I./stlport mytest.cpp -L./lib/ -lstlport
	.....
   For several compilers supporting auto linking feature (VC++, Borland, DMC),
   you do not have to specify "stlport.M.m.lib" explicitly, as it is being choosen
   and forced to link automatically by "#pragma"'s in compiler config files 
   Appropriate version is being selected based on compiler options and _STLP_DEBUG
   setting. All you have to do is to set library search path for the linker.

	Example :
           cl.exe /I.\stlport mytest.cpp /link /libpath:.\lib /MD

9) If you linked your application with shared STLport library (.so or .dll), please 
   make suze that your .so or .dll can be found by the dynamic linker. 
   Under Windows, the paths searched depend on the particular flavor, see the MSDN 
   documentation for LoadLibrary at http://msdn.microsoft.com. The easiest ways are to
   either modify the PATH environment variable or copy all .dll's next to the 
   executable like it is done per default when unit tests executable are put next
   to dlls. 
   Under Linux, the environment variable LD_LIBRARY_PATH can be adjusted to point
   to the dir containing .so. See the manpage for ld.so for more info.

10) STLport builds only multithreaded libraries, so your application should be compiled
   as multithreaded, too. Use -pthread (or -pthreads on Solaris) option for GCC, -mt for SunPro,
   /MT for VC, and so on. Sometimes you should define _REENTRANT or something else, depends
   upon platform/compiler. See compiler's and linker's options on command line when you build
   unit tests (build/test/unit) for reference. The last is useful for ANY platform.

11) Don't hesitate to read READMEs (doc/README*, build/lib/README*, build/test/unit/README*)
   and doc/FAQ.

12) Have fun!

