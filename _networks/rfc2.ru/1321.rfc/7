<!DOCTYPE html><html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><link rel="stylesheet" href="../tpl/style.css@f4e332aa" type="text/css" /><link rel="prev" href="6" /><link rel="next" href="8" /><link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css' /><style type="text/css">h1,h2,h3,h4{font-family:'Open Sans',sans-serif}</style><title>Перевод RFC 1321 — Алгоритм цифровых подписей MD5, стр. 7</title><meta name="author" content="R. Rivest" /><link rel="alternate" type="application/rss+xml" title="RFC2.ru - Русские Переводы RFC" href="../rss.xml"></head><body><div id="content"><div id="nav"><div class="icon i0"></div> <a href="../index.html" accesskey="`">На Главную</a></div><div id="search" class="ya-site-form ya-site-form_inited_no"><form action="http://yandex.ru/sitesearch" method="get" target="_blank"><input type="hidden" name="searchid" value="2154295"/><input type="hidden" name="l10n" value="ru"/><input type="hidden" name="reqenc" value=""/><input type="hidden" name="submit" value="Найти"/><input type="search" value="" name="text" placeholder="Поиск по RFC2.ru" /></form></div><div itemscope itemtype="http://schema.org/ScholarlyArticle"><meta itemprop="inLanguage" content="ru" /><meta itemprop="editor" content="ru" /><div id="header"><h1><a itemprop="headline" href="../1321.rfc">RFC 1321 — Алгоритм цифровых подписей MD5</a></h1></div><dl class="mute"><dt></dt><dd><div class="icon i1"></div> RFC: 1321</dd><dd><div class="icon i3"></div> Оригинал: <a href="original" target="_blank" rel="nofollow"><span itemprop="alternativeHeadline">The MD5 Message-Digest Algorithm</span></a></dd><dd><div class="icon i2"></div> Категория: <span itemprop="articleSection">Информационный</span></dd><dd><div class="icon i4"></div> Дата публикации: <time itemprop="datePublished" datetime="1992-04-02">Апрель 1992</time></dd><dd><div class="icon i5"></div> Автор: <span itemprop="author">R. Rivest</span></dd><dd><div class="icon i6"></div> Перевод: <span itemprop="editor">Николай Малых</span></dd></dl><div class="pages"><p class="r"> <h2 class="pt"><span class="z">RFC 1321,</span> Страница 7 из 8</h2></p><ul><li><noindex><a href="print" rel="nofollow">Одной Страницей</a></noindex></li><li><a accesskey="1" title="Первая страница" href="../1321.rfc" class="arr">&lArr;</a></li><li><a accesskey="2" title="На страницу назад" href="6"><b>&larr;</b></a></li><li><a href="../1321.rfc">1</a></li><li><a href="2">2</a></li><li><a href="3">3</a></li><li><a href="4">4</a></li><li><a href="5">5</a></li><li><a href="6">6</a></li><li class="this"><span>7</span></li><li><a href="8">8</a></li><li><a accesskey="3" title="На страницу вперед" href="8">&rarr;</a></li><li><a accesskey="4" title="Последняя страница" href="8">&rArr;</a></li></ul></div><div id="text" itemprop="articleBody"><h2 id="p.appendix.a">Приложение A — Пример реализации</h2><p>В этом приложении содержатся файлы, заимствованные из RSAREF: A Cryptographic Toolkit for Privacy-Enhanced Mail.</p><pre>global.h — общий файл заголовков
md5.h — файл заголовков для MD5
md5c.c — исходный код MD5</pre><p>Для получения дополнительной информации об RSAREF пишите по адресу &lt;rsaref@rsa.com&gt;. В приложение включен также файл</p><pre>mddriver.c — драйвер для тестирования MD2, MD4 и MD5</pre><p>Драйвер по умолчанию компилируется для проверки MD5 и может быть скомпилирован для проверки MD2 или MD4, если в командной строке компилятора C задать для MD значение 2 или 4, соответственно.</p><p>Реализация переносима и должна работать на разных платформах. Однако ее несложно оптимизировать для конкретной платформы (оставим это в качестве упражнения для читателей). Например, для платформ типа "little-endian", где байт с наименьшим адресом в 32-битовом слове является наименее значимым и нет ограничений по выравниванию, вызов Decode в MD5Transform можно заменить преобразованием типа (typecast).</p><h3 id="p.appendix.a1">A.1. global.h</h3><pre>/* GLOBAL.H — типы и константы RSAREF
 */

/* Для PROTOTYPES следует использовать значение 1 тогда и только тогда, когда
   компилятор поддерживает прототипы аргументов в функциях. Приведенный ниже код
   устанавливает для PROTOTYPES по умолчанию значение 0, если этот параметр уже
   не задан флагами компилятора C.
 */
#ifndef PROTOTYPES
#define PROTOTYPES 0
#endif

/* POINTER определяет базовый тип указателя */
typedef unsigned char *POINTER;

/* UINT2 определяет 2-байтовое слово */
typedef unsigned short int UINT2;

/* UINT4 определяет 4-байтовое слово */
typedef unsigned long int UINT4;

/* PROTO_LIST определяется в зависимости от определенного ранее значения PROTOTYPES.
   При использовании PROTOTYPES список PROTO_LIST будет возвращать прототипы,
   иначе будет пустым.
 */
#if PROTOTYPES
#define PROTO_LIST(list) list
#else
#define PROTO_LIST(list) ()
#endif</pre><h3 id="p.appendix.a2">A.2. md5.h</h3><pre>/* MD5.H - header file for MD5C.C
 */

/* Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
rights reserved.

License to copy and use this software is granted provided that it
is identified as the "RSA Data Security, Inc. MD5 Message-Digest
Algorithm" in all material mentioning or referencing this software
or this function.

License is also granted to make and use derivative works provided
that such works are identified as "derived from the RSA Data
Security, Inc. MD5 Message-Digest Algorithm" in all material
mentioning or referencing the derived work.

RSA Data Security, Inc. makes no representations concerning either
the merchantability of this software or the suitability of this
software for any particular purpose. It is provided "as is"
without express or implied warranty of any kind.

These notices must be retained in any copies of any part of this
documentation and/or software.
 */

/* Контекст MD5. */
typedef struct {
  UINT4 state[4];           /* состояние (ABCD) */
  UINT4 count[2];           /* число битов, modulo 2^64 (сначала младший) */
  unsigned char buffer[64]; /* входной буфер*/
} MD5_CTX;

void MD5Init PROTO_LIST ((MD5_CTX *));
void MD5Update PROTO_LIST
  ((MD5_CTX *, unsigned char *, unsigned int));
void MD5Final PROTO_LIST ((unsigned char [16], MD5_CTX *));</pre><h3 id="p.appendix.a3">A.3. md5c.c</h3><pre>/* MD5C.C - RSA Data Security, Inc., MD5 message-digest algorithm
 */

/* Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
rights reserved.

License to copy and use this software is granted provided that it
is identified as the &quot;RSA Data Security, Inc. MD5 Message-Digest
Algorithm&quot; in all material mentioning or referencing this software
or this function.

License is also granted to make and use derivative works provided
that such works are identified as &quot;derived from the RSA Data
Security, Inc. MD5 Message-Digest Algorithm&quot; in all material
mentioning or referencing the derived work.

RSA Data Security, Inc. makes no representations concerning either
the merchantability of this software or the suitability of this
software for any particular purpose. It is provided &quot;as is&quot;
without express or implied warranty of any kind.

These notices must be retained in any copies of any part of this
documentation and/or software.
 */

#include &quot;global.h&quot;
#include &quot;md5.h&quot;

/* Константы для подпрограммы MD5Transform. */

#define S11 7
#define S12 12
#define S13 17
#define S14 22
#define S21 5
#define S22 9
#define S23 14
#define S24 20
#define S31 4
#define S32 11
#define S33 16
#define S34 23
#define S41 6
#define S42 10
#define S43 15
#define S44 21

static void MD5Transform PROTO_LIST ((UINT4 [4], unsigned char [64]));
static void Encode PROTO_LIST
  ((unsigned char *, UINT4 *, unsigned int));
static void Decode PROTO_LIST
  ((UINT4 *, unsigned char *, unsigned int));
static void MD5_memcpy PROTO_LIST ((POINTER, POINTER, unsigned int));
static void MD5_memset PROTO_LIST ((POINTER, int, unsigned int));

static unsigned char PADDING[64] = {
  0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

/* F, G, H и I являются базовыми функциями MD5.
 */
#define F(x, y, z) (((x) &amp; (y)) | ((~x) &amp; (z)))
#define G(x, y, z) (((x) &amp; (z)) | ((y) &amp; (~z)))
#define H(x, y, z) ((x) ^ (y) ^ (z))
#define I(x, y, z) ((y) ^ ((x) | (~z)))

/* ROTATE_LEFT циклически смещает x влево на n битов. */
#define ROTATE_LEFT(x, n) (((x) &lt;&lt; (n)) | ((x) &gt;&gt; (32-(n))))

/* Преобразования FF, GG, HH и II для кругов 1, 2, 3, 4.
Циклический сдвиг отделен от добавления для предотвращения повторного расчета.
 */
#define FF(a, b, c, d, x, s, ac) { \
 (a) += F ((b), (c), (d)) + (x) + (UINT4)(ac); \
 (a) = ROTATE_LEFT ((a), (s)); \
 (a) += (b); \
  }
#define GG(a, b, c, d, x, s, ac) { \
 (a) += G ((b), (c), (d)) + (x) + (UINT4)(ac); \
 (a) = ROTATE_LEFT ((a), (s)); \
 (a) += (b); \
  }
#define HH(a, b, c, d, x, s, ac) { \
 (a) += H ((b), (c), (d)) + (x) + (UINT4)(ac); \
 (a) = ROTATE_LEFT ((a), (s)); \
 (a) += (b); \
  }
#define II(a, b, c, d, x, s, ac) { \
 (a) += I ((b), (c), (d)) + (x) + (UINT4)(ac); \
 (a) = ROTATE_LEFT ((a), (s)); \
 (a) += (b); \
  }

/* Инициализация MD5. Начинает работу MD5, записывая новый контекст.
 */
void MD5Init (context)
MD5_CTX *context;                                        /* context */
{
  context-&gt;count[0] = context-&gt;count[1] = 0;
  /* загрузка «магических» констант инициализации. */
  context-&gt;state[0] = 0x67452301;
  context-&gt;state[1] = 0xefcdab89;
  context-&gt;state[2] = 0x98badcfe;
  context-&gt;state[3] = 0x10325476;
}
/* MD5 блокирует операцию обновления. Продолжается создание сигнатуры MD5,
  обработка другого блока сообщения и обновление контекста.
 */
void MD5Update (context, input, inputLen)
MD5_CTX *context;                                        /* context */
unsigned char *input;                                /* input block */
unsigned int inputLen;                     /* length of input block */
{
  unsigned int i, index, partLen;

  /* Расчет числа байтов mod 64 */
  index = (unsigned int)((context-&gt;count[0] &gt;&gt; 3) &amp; 0x3F);

  /* Обновление числа битов */
  if ((context-&gt;count[0] += ((UINT4)inputLen &lt;&lt; 3))
   &lt; ((UINT4)inputLen &lt;&lt; 3))
 context-&gt;count[1]++;
  context-&gt;count[1] += ((UINT4)inputLen &gt;&gt; 29);

  partLen = 64 - index;

  /* Преобразование возможное число раз. */
  if (inputLen &gt;= partLen) {
 MD5_memcpy
   ((POINTER)&amp;context-&gt;buffer[index], (POINTER)input, partLen);
 MD5Transform (context-&gt;state, context-&gt;buffer);

 for (i = partLen; i + 63 &lt; inputLen; i += 64)
   MD5Transform (context-&gt;state, &amp;input[i]);

 index = 0;
  }
  else
 i = 0;

  /* Буферизация оставшихся входных данных */
  MD5_memcpy
 ((POINTER)&amp;context-&gt;buffer[index], (POINTER)&amp;input[i],
  inputLen-i);
}

/* Завершение работы MD5. Окончание расчета цифровой подписи MD5,
  вывод сигнатуры и обнуление контекста.
 */
void MD5Final (digest, context)
unsigned char digest[16];                         /* message digest */
MD5_CTX *context;                                       /* context */
{
  unsigned char bits[8];
  unsigned int index, padLen;

  /* Сохранение числа битов */
  Encode (bits, context-&gt;count, 8);

  /* Заполнение до 56 mod 64. */
  index = (unsigned int)((context-&gt;count[0] &gt;&gt; 3) &amp; 0x3f);
  padLen = (index &lt; 56) ? (56 - index) : (120 - index);
  MD5Update (context, PADDING, padLen);

  /* Добавление размера (до заполнения) */
  MD5Update (context, bits, 8);

  /* Сохранение состояния в дайджесте */
  Encode (digest, context-&gt;state, 16);

  /* Обнуление чувствительной информации. */
  MD5_memset ((POINTER)context, 0, sizeof (*context));
}

/* Базовое преобразование MD5. Преобразует состояние поблочно.
 */
static void MD5Transform (state, block)
UINT4 state[4];
unsigned char block[64];
{
  UINT4 a = state[0], b = state[1], c = state[2], d = state[3], x[16];

  Decode (x, block, 64);

  /* Круг 1 */
  FF (a, b, c, d, x[ 0], S11, 0xd76aa478); /* 1 */
  FF (d, a, b, c, x[ 1], S12, 0xe8c7b756); /* 2 */
  FF (c, d, a, b, x[ 2], S13, 0x242070db); /* 3 */
  FF (b, c, d, a, x[ 3], S14, 0xc1bdceee); /* 4 */
  FF (a, b, c, d, x[ 4], S11, 0xf57c0faf); /* 5 */
  FF (d, a, b, c, x[ 5], S12, 0x4787c62a); /* 6 */
  FF (c, d, a, b, x[ 6], S13, 0xa8304613); /* 7 */
  FF (b, c, d, a, x[ 7], S14, 0xfd469501); /* 8 */
  FF (a, b, c, d, x[ 8], S11, 0x698098d8); /* 9 */
  FF (d, a, b, c, x[ 9], S12, 0x8b44f7af); /* 10 */
  FF (c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */
  FF (b, c, d, a, x[11], S14, 0x895cd7be); /* 12 */
  FF (a, b, c, d, x[12], S11, 0x6b901122); /* 13 */
  FF (d, a, b, c, x[13], S12, 0xfd987193); /* 14 */
  FF (c, d, a, b, x[14], S13, 0xa679438e); /* 15 */
  FF (b, c, d, a, x[15], S14, 0x49b40821); /* 16 */

  /* Круг 2 */
  GG (a, b, c, d, x[ 1], S21, 0xf61e2562); /* 17 */
  GG (d, a, b, c, x[ 6], S22, 0xc040b340); /* 18 */
  GG (c, d, a, b, x[11], S23, 0x265e5a51); /* 19 */
  GG (b, c, d, a, x[ 0], S24, 0xe9b6c7aa); /* 20 */
  GG (a, b, c, d, x[ 5], S21, 0xd62f105d); /* 21 */
  GG (d, a, b, c, x[10], S22,  0x2441453); /* 22 */
  GG (c, d, a, b, x[15], S23, 0xd8a1e681); /* 23 */
  GG (b, c, d, a, x[ 4], S24, 0xe7d3fbc8); /* 24 */
  GG (a, b, c, d, x[ 9], S21, 0x21e1cde6); /* 25 */
  GG (d, a, b, c, x[14], S22, 0xc33707d6); /* 26 */
  GG (c, d, a, b, x[ 3], S23, 0xf4d50d87); /* 27 */
  GG (b, c, d, a, x[ 8], S24, 0x455a14ed); /* 28 */
  GG (a, b, c, d, x[13], S21, 0xa9e3e905); /* 29 */
  GG (d, a, b, c, x[ 2], S22, 0xfcefa3f8); /* 30 */
  GG (c, d, a, b, x[ 7], S23, 0x676f02d9); /* 31 */
  GG (b, c, d, a, x[12], S24, 0x8d2a4c8a); /* 32 */

  /* Круг 3 */
  HH (a, b, c, d, x[ 5], S31, 0xfffa3942); /* 33 */
  HH (d, a, b, c, x[ 8], S32, 0x8771f681); /* 34 */
  HH (c, d, a, b, x[11], S33, 0x6d9d6122); /* 35 */
  HH (b, c, d, a, x[14], S34, 0xfde5380c); /* 36 */
  HH (a, b, c, d, x[ 1], S31, 0xa4beea44); /* 37 */
  HH (d, a, b, c, x[ 4], S32, 0x4bdecfa9); /* 38 */
  HH (c, d, a, b, x[ 7], S33, 0xf6bb4b60); /* 39 */
  HH (b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */
  HH (a, b, c, d, x[13], S31, 0x289b7ec6); /* 41 */
  HH (d, a, b, c, x[ 0], S32, 0xeaa127fa); /* 42 */
  HH (c, d, a, b, x[ 3], S33, 0xd4ef3085); /* 43 */
  HH (b, c, d, a, x[ 6], S34,  0x4881d05); /* 44 */
  HH (a, b, c, d, x[ 9], S31, 0xd9d4d039); /* 45 */
  HH (d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */
  HH (c, d, a, b, x[15], S33, 0x1fa27cf8); /* 47 */
  HH (b, c, d, a, x[ 2], S34, 0xc4ac5665); /* 48 */

  /* Круг 4 */
  II (a, b, c, d, x[ 0], S41, 0xf4292244); /* 49 */
  II (d, a, b, c, x[ 7], S42, 0x432aff97); /* 50 */
  II (c, d, a, b, x[14], S43, 0xab9423a7); /* 51 */
  II (b, c, d, a, x[ 5], S44, 0xfc93a039); /* 52 */
  II (a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */
  II (d, a, b, c, x[ 3], S42, 0x8f0ccc92); /* 54 */
  II (c, d, a, b, x[10], S43, 0xffeff47d); /* 55 */
  II (b, c, d, a, x[ 1], S44, 0x85845dd1); /* 56 */
  II (a, b, c, d, x[ 8], S41, 0x6fa87e4f); /* 57 */
  II (d, a, b, c, x[15], S42, 0xfe2ce6e0); /* 58 */
  II (c, d, a, b, x[ 6], S43, 0xa3014314); /* 59 */
  II (b, c, d, a, x[13], S44, 0x4e0811a1); /* 60 */
  II (a, b, c, d, x[ 4], S41, 0xf7537e82); /* 61 */
  II (d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */
  II (c, d, a, b, x[ 2], S43, 0x2ad7d2bb); /* 63 */
  II (b, c, d, a, x[ 9], S44, 0xeb86d391); /* 64 */

  state[0] += a;
  state[1] += b;
  state[2] += c;
  state[3] += d;

  /* Обнуление чувствительных данных. */
  MD5_memset ((POINTER)x, 0, sizeof (x));
}

/* Кодирование входных данных (UINT4) в выходные (unsigned char).
   Предполагается, что размер кратен 4.
 */
static void Encode (output, input, len)
unsigned char *output;
UINT4 *input;
unsigned int len;
{
  unsigned int i, j;

  for (i = 0, j = 0; j &lt; len; i++, j += 4) {
 output[j] = (unsigned char)(input[i] &amp; 0xff);
 output[j+1] = (unsigned char)((input[i] &gt;&gt; 8) &amp; 0xff);
 output[j+2] = (unsigned char)((input[i] &gt;&gt; 16) &amp; 0xff);
 output[j+3] = (unsigned char)((input[i] &gt;&gt; 24) &amp; 0xff);
  }
}

/* Декодирование входных данных (unsigned char) в выходные (UINT4).
   Предполагается, что размер кратен 4.
 */
static void Decode (output, input, len)
UINT4 *output;
unsigned char *input;
unsigned int len;
{
  unsigned int i, j;

  for (i = 0, j = 0; j &lt; len; i++, j += 4)
 output[i] = ((UINT4)input[j]) | (((UINT4)input[j+1]) &lt;&lt; 8) |
   (((UINT4)input[j+2]) &lt;&lt; 16) | (((UINT4)input[j+3]) &lt;&lt; 24);
}

/* Примечание: По возможности замените цикл for стандартной функцией memcpy. */

static void MD5_memcpy (output, input, len)
POINTER output;
POINTER input;
unsigned int len;
{
  unsigned int i;

  for (i = 0; i &lt; len; i++)
 output[i] = input[i];
}

/* Примечание: По возможности замените цикл for стандартной функцией memset. */
static void MD5_memset (output, value, len)
POINTER output;
int value;
unsigned int len;
{
  unsigned int i;

  for (i = 0; i &lt; len; i++)
 ((char *)output)[i] = (char)value;
}</pre><h3 id="p.appendix.a4">A.4. mddriver.c</h3><pre>/* MDDRIVER.C - test driver for MD2, MD4 and MD5
 */

/* Copyright (C) 1990-2, RSA Data Security, Inc. Created 1990. All
rights reserved.

RSA Data Security, Inc. makes no representations concerning either
the merchantability of this software or the suitability of this
software for any particular purpose. It is provided &quot;as is&quot;
without express or implied warranty of any kind.

These notices must be retained in any copies of any part of this
documentation and/or software.
 */

/* Включенное ниже определение по умолчанию обеспечивает проверку MD5,
   если флаги компилятора C не задают иного.
 */
#ifndef MD
#define MD MD5
#endif

#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
#include &lt;string.h&gt;
#include &quot;global.h&quot;
#if MD == 2
#include &quot;md2.h&quot;
#endif
#if MD == 4
#include &quot;md4.h&quot;
#endif
#if MD == 5
#include &quot;md5.h&quot;
#endif

/* Размер и число тестовых блоков. */
#define TEST_BLOCK_LEN 1000
#define TEST_BLOCK_COUNT 1000

static void MDString PROTO_LIST ((char *));
static void MDTimeTrial PROTO_LIST ((void));
static void MDTestSuite PROTO_LIST ((void));
static void MDFile PROTO_LIST ((char *));
static void MDFilter PROTO_LIST ((void));
static void MDPrint PROTO_LIST ((unsigned char [16]));

#if MD == 2
#define MD_CTX MD2_CTX
#define MDInit MD2Init
#define MDUpdate MD2Update
#define MDFinal MD2Final
#endif
#if MD == 4
#define MD_CTX MD4_CTX
#define MDInit MD4Init
#define MDUpdate MD4Update
#define MDFinal MD4Final
#endif
#if MD == 5
#define MD_CTX MD5_CTX
#define MDInit MD5Init
#define MDUpdate MD5Update
#define MDFinal MD5Final
#endif

/* Драйвер.
Аргументы (допускаются любые комбинации):
  -sstring — строка сигнатур
  -t - определять время
  -x - использовать тестовый сценарий
  filename — файл сигнатур
  (none) - стандартный ввод для сигнатур
 */
int main (argc, argv)
int argc;

char *argv[];
{
  int i;

  if (argc &gt; 1)
 for (i = 1; i &lt; argc; i++)
   if (argv[i][0] == '-' &amp;&amp; argv[i][1] == 's')
     MDString (argv[i] + 2);
   else if (strcmp (argv[i], &quot;-t&quot;) == 0)
     MDTimeTrial ();
   else if (strcmp (argv[i], &quot;-x&quot;) == 0)
     MDTestSuite ();
   else
     MDFile (argv[i]);
  else
 MDFilter ();

  return (0);
}

/* Создает и выводит сигнатуру. */
static void MDString (string)
char *string;
{
  MD_CTX context;
  unsigned char digest[16];
  unsigned int len = strlen (string);

  MDInit (&amp;context);
  MDUpdate (&amp;context, string, len);
  MDFinal (digest, &amp;context);

  printf (&quot;MD%d (\&quot;%s\&quot;) = &quot;, MD, string);
  MDPrint (digest);
  printf (&quot;\n&quot;);
}

/* Измерение времени создания сигнатуры для TEST_BLOCK_COUNT блоков по
   TEST_BLOCK_LEN байтов.
 */
static void MDTimeTrial ()
{
  MD_CTX context;
  time_t endTime, startTime;
  unsigned char block[TEST_BLOCK_LEN], digest[16];
  unsigned int i;
  printf
 (&quot;MD%d time trial. Digesting %d %d-byte blocks ...&quot;, MD,
  TEST_BLOCK_LEN, TEST_BLOCK_COUNT);

  /* Инициализация блока */
  for (i = 0; i &lt; TEST_BLOCK_LEN; i++)
 block[i] = (unsigned char)(i &amp; 0xff);

  /* Запуск таймера */
  time (&amp;startTime);

  /* Создание сигнатур блоков */
  MDInit (&amp;context);
  for (i = 0; i &lt; TEST_BLOCK_COUNT; i++)
 MDUpdate (&amp;context, block, TEST_BLOCK_LEN);
  MDFinal (digest, &amp;context);

  /* Остановка таймера */
  time (&amp;endTime);

  printf (&quot; done\n&quot;);
  printf (&quot;Digest = &quot;);
  MDPrint (digest);
  printf (&quot;\nTime = %ld seconds\n&quot;, (long)(endTime-startTime));
  printf
 (&quot;Speed = %ld bytes/second\n&quot;,
  (long)TEST_BLOCK_LEN * (long)TEST_BLOCK_COUNT/(endTime-startTime));
}

/* Создает сигнатуры тестовых строк и выводит результаты. */
static void MDTestSuite ()
{
  printf (&quot;MD%d test suite:\n&quot;, MD);

  MDString (&quot;&quot;);
  MDString (&quot;a&quot;);
  MDString (&quot;abc&quot;);
  MDString (&quot;message digest&quot;);
  MDString (&quot;abcdefghijklmnopqrstuvwxyz&quot;);
  MDString
 (&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;);
  MDString
 (&quot;1234567890123456789012345678901234567890\
1234567890123456789012345678901234567890&quot;);
}

/* Создает и выводит сигнатуру файла. */
static void MDFile (filename)
char *filename;
{
  FILE *file;
  MD_CTX context;
  int len;
  unsigned char buffer[1024], digest[16];

  if ((file = fopen (filename, &quot;rb&quot;)) == NULL)
 printf (&quot;%s can't be opened\n&quot;, filename);

  else {
 MDInit (&amp;context);
 while (len = fread (buffer, 1, 1024, file))
   MDUpdate (&amp;context, buffer, len);
 MDFinal (digest, &amp;context);

 fclose (file);

 printf (&quot;MD%d (%s) = &quot;, MD, filename);
 MDPrint (digest);
 printf (&quot;\n&quot;);
  }
}

/* Создает сигнатуру данных со стандартного ввода и выводит результат. */
static void MDFilter ()
{
  MD_CTX context;
  int len;
  unsigned char buffer[16], digest[16];

  MDInit (&amp;context);
  while (len = fread (buffer, 1, 16, stdin))
 MDUpdate (&amp;context, buffer, len);
  MDFinal (digest, &amp;context);

  MDPrint (digest);
  printf (&quot;\n&quot;);
}

/* Выводит цифровую подпись в шестнадцатеричном формате. */
static void MDPrint (digest)
unsigned char digest[16];
{
  unsigned int i;

  for (i = 0; i &lt; 16; i++)
 printf (&quot;%02x&quot;, digest[i]);
}</pre></div></div><noindex><div class="pages"><p class="r"> <b>Страница 7 из 8</b></p><ul><li><noindex><a href="print" rel="nofollow">Одной Страницей</a></noindex></li><li><a title="Первая страница" href="../1321.rfc" class="arr">&lArr;</a></li><li><a title="На страницу назад" href="6"><b>&larr;</b></a></li><li><a href="../1321.rfc">1</a></li><li><a href="2">2</a></li><li><a href="3">3</a></li><li><a href="4">4</a></li><li><a href="5">5</a></li><li><a href="6">6</a></li><li class="this"><span>7</span></li><li><a href="8">8</a></li><li><a title="На страницу вперед" href="8">&rarr;</a></li><li><a title="Последняя страница" href="8">&rArr;</a></li></ul></div></noindex><div id="disqus_thread"></div><script type="text/javascript">var disqus_shortname="rfc2",disqus_title="RFC 1321 - Алгоритм цифровых подписей MD5",disqus_identifier="1321.rfc",disqus_url="http://rfc2.ru/1321.rfc";(function(){var dsq=document.createElement("script");dsq.type="text/javascript";dsq.async=true;dsq.src = "//"+disqus_shortname+".disqus.com/embed.js";(document.getElementsByTagName("head")[0]||document.getElementsByTagName("body")[0]).appendChild(dsq);})();</script><div class="bubble">2007 - 2014 © <a href="../index.html" title="Русские переводы RFC">Русские переводы RFC</a>, IETF, ISOC.</div></div><div id="bottom" style="position:static !important;bottom:auto !important"><div class="bubble"><ul><li><!--723572853672--></li></ul></div></div><!-- Yandex.Metrika counter --><script type="text/javascript">(function (d, w, c) { (w[c] = w[c] || []).push(function() { try { w.yaCounter4680559 = new Ya.Metrika({id:4680559, webvisor:true, clickmap:true, accurateTrackBounce:true, trackHash:true}); } catch(e) { } }); var n = d.getElementsByTagName("script")[0], s = d.createElement("script"), f = function () { n.parentNode.insertBefore(s, n); }; s.type = "text/javascript"; s.async = true; s.src = (d.location.protocol == "https:" ? "https:" : "http:") + "//mc.yandex.ru/metrika/watch.js"; if (w.opera == "[object Opera]") { d.addEventListener("DOMContentLoaded", f, false); } else { f(); } })(document, window, "yandex_metrika_callbacks");</script><noscript><div><img src="http://mc.yandex.ru/watch/4680559" style="position:absolute; left:-9999px;" alt="" /></div></noscript><!-- /Yandex.Metrika counter --></body></html>