<!DOCTYPE html><html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><link rel="stylesheet" href="../tpl/style.css@f4e332aa" type="text/css" /><link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css' /><style type="text/css">h1,h2,h3,h4{font-family:'Open Sans',sans-serif}</style><link rel="canonical" href="../1180.rfc" /><meta name="Robots" content="noindex, nofollow" /><title>Перевод RFC 1180 — Учебник по TCP/IP</title><link rel="alternate" type="application/rss+xml" title="RFC2.ru - Русские Переводы RFC" href="../rss.xml"></head><body><div id="content"><div id="nav"><div class="icon i0"></div> <a href="../index.html" accesskey="`">На Главную</a></div><div id="search" class="ya-site-form ya-site-form_inited_no"><form action="http://yandex.ru/sitesearch" method="get" target="_blank"><input type="hidden" name="searchid" value="2154295"/><input type="hidden" name="l10n" value="ru"/><input type="hidden" name="reqenc" value=""/><input type="hidden" name="submit" value="Найти"/><input type="search" value="" name="text" placeholder="Поиск по RFC2.ru" /></form></div><div itemscope itemtype="http://schema.org/ScholarlyArticle"><meta itemprop="inLanguage" content="ru" /><meta itemprop="editor" content="ru" /><div id="header"><h1><a itemprop="headline" href="../1180.rfc">RFC 1180 — Учебник по TCP/IP</a></h1></div><dl class="mute"><dt></dt><dd><div class="icon i1"></div> RFC: 1180</dd><dd><div class="icon i3"></div> Оригинал: <a href="original" target="_blank" rel="nofollow"><span itemprop="alternativeHeadline">A TCP/IP Tutorial</span></a></dd><dd><div class="icon i2"></div> Категория: <span itemprop="articleSection">Информационный</span></dd><dd><div class="icon i4"></div> Дата публикации: <time itemprop="datePublished" datetime="1991-01-04">Январь 1991</time></dd><dd><div class="icon i5"></div> Авторы: <span itemprop="author">Theodore John Socolofsky</span>, <span itemprop="author">Claudia Jeanne Kale</span></dd><dd><div class="icon i6"></div> Перевод: <span itemprop="editor">Николай Малых</span></dd></dl><div id="text" itemprop="articleBody"><h3>Статус документа</h3><p>Данный документ представляет собой учебное пособие по стеку протоколов TCP/IP, включающее в себя вопросы пересылки дейтаграмм IP между отправителем и получателем через цепочку маршрутизаторов. Документ не является стандартом Internet. Разрешается свободное распространение документа.</p><h2>1. Введение</h2><p>В документе описаны основные аспекты стека протоколов TCP/IP. Здесь не рассматривается история разработки и развития протоколов, не приводится примеров практического использования и не дается сравнений с протоколами ISO/OSI. Опущено также множество технических деталей, связанных с рассматриваемыми протоколами. То, что приведено в документе, составляет лишь минимум информации, требующийся каждому профессионалу, работающему в среде TCP/IP. К числу таких профессионалов относятся системные администраторы, системные программисты и администраторы сетей.</p><p>В документе используются примеры для среды UNIX TCP/IP, однако основное внимание обращено на вопросы, не зависящие от реализации TCP/IP.</p><p>Этот документ не содержит определений новых протоколов, он предназначен для обучения. При возникновении вопросов по тем или иным спецификациям протоколов, обращайтесь к соответствующим RFC.</p><p>В следующем параграфе приведен обзор TCP/IP, за которым следует детальное описание отдельных компонент.</p><h2>2. Обзор TCP/IP</h2><p>Термином TCP/IP зачастую обозначают все, что относится к сетевым протоколам TCP и IP — другие протоколы, приложения и даже сетевые среды. Примерами протоколов могут служить UDP, ARP и ICMP; примерами приложений — TELNET, FTP и rcp. Более точным является термин «технология internet». Сеть, использующая технологию internet также может обозначаться термином internet.</p><h3>2.1. Базовая структура</h3><p>Для понимания технологии нужно сначала разобраться с приведенной ниже логической структурой:</p><pre>
            ----------------------------
            |    network applications  |
            |                          |
            |...  \ | /  ..  \ | /  ...|
            |     -----      -----     |
            |     |TCP|      |UDP|     |
            |     -----      -----     |
            |         \      /         |
            |         --------         |
            |         |  IP  |         |
            |  -----  -*------         |
            |  |ARP|   |               |
            |  -----   |               |
            |      \   |               |
            |      ------              |
            |      |ENET|              |
            |      ---@--              |
            ----------|-----------------
                      |
----------------------o---------
    Ethernet Cable


Рисунок 1. Узел сети TCP/IP</pre><p>Показанная на рисунке схема описывает логическую структуру многоуровневых протоколов в компьютере, подключенном к сети. Все компьютеры, поддерживающие подобную структуру, могут обмениваться информацией, используя сетевые протоколы. Приведенная на рисунке структура определяет поведение компьютера в сети. Каждый из прямоугольников на схеме показывает процесс обработки данных в компьютере, а линии обозначают потоки данных. Горизонтальная линия в нижней части рисунка представляет кабель Ethernet; "o" показывает трансивер (приемопередатчик, сетевой адаптер). Символ "*" представляет IP-адрес компьютера, а "@" — адрес Ethernet (MAC-адрес). Эта структура важна для понимания сетевых технологий, поэтому мы будем неоднократно ссылаться в документе на приведенную здесь схему.</p><h3>2.2. Терминология</h3><p>Название элементов данных, принимаемых из сети, зависит от уровня в стеке протоколов:</p><ul class="dot"><li>для Ethernet модули данных называют кадрами (Ethernet frame)</li><li>данные между драйвером адаптера Ethernet и модулем IP передаются в пакетах (IP packet);</li><li>данные между модулями IP и UDP передаются с помощью дейтаграмм (UDP datagram);</li><li>модули данных, передаваемые между IP и TCP, называют сегментами (TCP segment) или транспортными сообщениями</li><li>данные на уровне сетевых приложений передаются с помощью сообщений.</li></ul><p>Эти определения не являются общепринятыми и в публикациях вы можете встретить множество иных терминов или толкований приведенных здесь терминов. Основные определения терминов можно найти в <a href="../1122.rfc" title="RFC 1122 - Требования к хостам Internet - Коммуникационные уровни">RFC 1122</a> (параграф 1.3.3).</p><p>Драйвер представляет собой программу, взаимодействующую на аппаратном уровне с сетевым интерфейсом. Модулем мы будем называть программу, взаимодействующую с драйвером, прикладной программой или другим модулем.</p><p>Термины драйвер, модуль, кадр Ethernet, пакет IP, дейтаграмма UDP, сегмент TCP, сообщение прикладной программы будут постоянно встречаться вам на протяжении документа.</p><h3>2.3. Поток данных</h3><p>Рассмотрим поток данных, проходящий вниз через стек протоколов на рисунке 1. Для приложений, использующих протокол TCP (Transmission Control Protocol — протокол управления передачей), данные передаются между приложением и модулем TCP. Для приложений, использующих протокол UDP (User Datagram Protocol — протокол пользовательских дейтаграмм), обмен данными идет между приложением и модулем UDP. FTP (File Transfer Protocol — протокол передачи файлов) является типичным примером использования протокола TCP. В данном случае стек протоколов будет иметь вид FTP/TCP/IP/ENET. Приложения SNMP (Simple Network Management Protocol — простой протокол сетевого управления) используют протокол UDP и стек будет иметь вид SNMP/UDP/IP/ENET.</p><p>В модулях TCP, UDP и драйвере Ethernet выполняется мультиплексирование n х 1 (мультиплексор имеет один выход и множество входов). Существует также обратная операция — демультиплексирование 1 х n (демультиплексор имеет один вход и множество выходов). Схематическое представление мультиплексоров и демультиплексоров приведено на рисунке 2. Если кадр Ethernet попадает в драйвер Ethernet из сети, этот кадр передается модулю преобразования адресов ARP (Address Resolution Protocol) или модулю IP (Internet Protocol). Выбор одного из этих модулей (ARP или IP) определяется полем типа в заголовке кадра Ethernet.</p><pre>1   2 3 ...   n                   1   2 3 ...   n
 \  |      /      |               \  | |      /       ^
  \ | |   /       |                \ | |     /        |
-------------   flow              ----------------   flow
|multiplexer|    of               |de-multiplexer|    of
-------------   data              ----------------   data
     |            |                     |              |
     |            v                     |              |
     1                                  1


Рисунок 2: Мультиплексор и демультиплексор</pre><p>Если пакет попадает в модуль IP, после этого он передается модулю TCP или UDP в соответствии со значением поля протокола в заголовке IP.</p><p>Дейтаграммы UDP, приходящие в одноименный модуль, преобразуются в сообщения прикладного уровня и передаются программам, выбор которых определяется номером порта в заголовке UDP. Сегменты TCP в одноименном модуле преобразуются в сообщения прикладного уровня и передаются пользовательским программам в соответствии с номером порта в заголовке TCP. Мультиплексирование исходящего потока является очень простой задачей, поскольку на каждом уровне существует только один путь передачи информации; каждый протокол просто добавляет в пакет свой заголовок, обеспечивающий демультиплексирование данных на приемной стороне.</p><p>Данные передаются от прикладных программ через TCP или UDP, преобразуются модулем IP и передаются в сеть с использованием драйвера сетевой платы на самом нижнем уровне.</p><p>Хотя в сетях может использоваться множество различных технологий, все примеры здесь построены на основе технологии Ethernet, которая на сегодняшний день является самой распространенной для передачи IP-трафика. Компьютер на рисунке 1 имеет одно соединение Ethernet. Шестибайтовый адрес Ethernet является уникальным для каждого адаптера Ethernet и задается на аппаратном уровне.</p><p>Компьютер также имеет 4-байтовый адрес IP. Этот адрес используется на интерфейсе нижнего уровня в модуле IP. Этот адрес должен быть уникальным в масштабах сети.</p><p>Работающий компьютер всегда знает свои адреса IP и Ethernet.</p><h3>2.4. Два сетевых интерфейса</h3><p>На рисунке 3 схематически изображен компьютер с двумя сетевыми интерфейсами:</p><pre>     ----------------------------
     |    network applications  |
     |                          |
     |...  \ | /  ..  \ | /  ...|
     |     -----      -----     |
     |     |TCP|      |UDP|     |
     |     -----      -----     |
     |         \      /         |
     |         --------         |
     |         |  IP  |         |
     |  -----  -*----*-  -----  |
     |  |ARP|   |    |   |ARP|  |
     |  -----   |    |   -----  |
     |      \   |    |   /      |
     |      ------  ------      |
     |      |ENET|  |ENET|      |
     |      ---@--  ---@--      |
     ----------|-------|---------
               |       |
               |    ---o---------------------------
               |             Ethernet Cable 2
---------------o----------
  Ethernet Cable 1


Рисунок 3: Узел сети TCP/IP с двумя адаптерами Ethernet</pre><p class="note">Отметим, что компьютер с двумя интерфейсами Ethernet использует 2 или более адресов IP.</p><p>Из приведенной схемы очевидно, что в компьютерах с несколькими физическими интерфейсами модуль IP работает как мультиплексор-демультиплексор m х n.</p><pre>1   2 3 ...   n                   1   2 3 ...   n
 \  | |      /    |                \  | |      /       ^
  \ | |     /     |                 \ | |     /        |
-------------   flow              ----------------   flow
|multiplexer|    of               |de-multiplexer|    of
-------------   data              ----------------   data
  / | |     \     |                 / | |     \        |
 /  | |      \    v                /  | |      \       |
1   2 3 ...   m                   1   2 3 ...   m


Рисунок 4. Мультиплексор и демультиплексор n х m</pre><p>Мультиплексирование выполняется при передаче данных в обоих направлениях. Модуль IP с несколькими физическими интерфейсами на самом деле более сложен, чем показано на рисунке 4, поскольку такой модуль может обеспечивать пересылку данных в другие сети (данные, принятые через один интерфейс, передаются через другой).</p><pre>      TCP      UDP
        \      /
         \    /
     --------------
     |     IP     |
     |            |
     |    ---     |
     |   /   \    |
     |  /     v   |
     --------------
      /         \
     /           \
  data           data
 comes in         goes out
here               here


Рисунок 5. Пример пересылки пакета IP (IP Forwarding)</pre><p>Процесс отправки пакета IP в другую сеть называется пересылкой (forwarding) пакетов IP. Компьютер, принимающий решение о пересылке пакетов IP, обычно называют машрутизатором (IP-router).</p><p>Как можно видеть на приведенном рисунке, в процессе пересылки пакетов IP модули TCP и UDP на маршрутизаторе IP участия не принимают. Некоторые из реализаций IP-маршрутизаторов просто не включают модулей TCP и UDP.</p><h3>2.5. IP создает одну логическую сеть</h3><p>Модуль IP является краеугольным камнем технологии Internet. Каждый модуль или драйвер добавляет свой заголовок к пакету по мере прохождения информации от верхнего уровня к нижнему через стек протоколов. На приемной стороне каждый модуль или драйвер извлекает из пакета соответствующий заголовок. Заголовок IP содержит IP-адрес, позволяющий построить одну логическую сеть на базе множества физических сетей. Такое соединение множества сетей между собой и послужило основой для создания термина Internet. Множество соединенных между собой физический сетей, объединенное общими пространством уникальных адресов IP, называется internet.</p><h3>2.6. Независимость от физического интерфейса</h3><p>IP прячет сетевое оборудование нижележащих уровней от сетевых приложений. Если вы создали новую физическую сеть, ее можно соединить с другими сетями (internet), используя соответствующие драйверы и модули IP. Таким образом, сетевые приложения становятся независимыми от физических интерфейсов и не подвержены влиянию в результате замены сетевых устройств или подключения новой технологии.</p><h3>2.7. Интероперабельность</h3><p>Если два компьютера могут обмениваться данными через сеть, мы говорим, что они интероперабельны. Если технология internet реализована на хорошем уровне, эта технология должна обеспечивать интероперабельность. Пользователи обычных (general-purpose — общего назначения) компьютеров могут воспользоваться преимуществами internet за счет обеспечения интероперабельности с компьютерами других типов. В общем случае купленный вами компьютер может оказаться неинтероперабельным, т. е. он не сможет взаимодействовать с другими компьютерами по причине использования в нем экзотических узлов и протоколов.</p><h3>2.8. Что дальше?</h3><p>После рассмотрения первооснов мы ответим на следующие вопросы:</p><ul class="dot"><li>Как определяется Ethernet-адрес получателя при отправке пакетов IP?</li><li>Как протокол IP узнает об используемом на физическом уровне интерфейсе при передаче пакетов IP?</li><li>Как клиентская программа на одном компьютере связывается с программой-сервером на другом?</li><li>Почему используются оба протокола TCP и UDP, а не выбран какой-либо один?</li><li>Какие сетевые приложения доступны?</li></ul><p>Ответы на все эти вопросы будут приведены ниже, после краткого рассмотрения технологии Ethernet.</p><h2>3. Ethernet</h2><p>В этом параграфе приведено краткое описание технологии Ethernet.</p><p>Кадры Ethernet содержат адреса получателя (destination) и отправителя (source), поле типа и данные.</p><p>Размер адреса Ethernet составляет 6 байтов. Каждое устройство имеет свой адрес Ethernet и слушает кадры Ethernet, просматривая в них поле с адресом получателя для определения своих кадров. Все устройства также воспринимают кадры Ethernet с широковещательным (broadcast) адресом FF-FF-FF-FF-FF-FF (шестнадцатиричный формат).</p><p>Ethernet использует технологию CSMA/CD (Carrier Sense and Multiple Access with Collision Detection — множественный доступ с детектированием несущей и обнаружением конфликтов). При использовании CSMA/CD все устройства подключены к общей среде (сегменту, кабелю), но в каждый момент времени передавать данные в общую (разделяемую) среду разрешено только одному устройству. Переданные в среду кадры сл ышат все устройства. При попытке двух (или более) устройств одновременно передавать данные в среду возникает конфликт (или коллизия — collision), который обнаруживается с помощью CSMA/CD. При возникновении конфликта все станции должны прервать передачу и могут повторять попытку только по истечении некоторого времени (определяется случайным образом).</p><h3>3.1. Аналогия</h3><p>Хорошей аналогией Ethernet является разговор группы людей в темной комнате. Средой передачи является воздух в комнате, обеспечивающий возможность распространения голоса.</p><p>Каждый человек в комнате может слышать, когда кто-то начинает говорить (детектирование несущей). Каждый из находящихся в комнате людей может начать говорить (множественный доступ к среде). Если кто-то из находящихся в комнате слишком разговорчив, его могут попросить покинуть помещение (отключить от сети неисправное устройство).</p><p>Один человек в комнате может говорить, остальные слушают. Однако существует вероятность того, что несколько человек начнут говорить одновременно (конфликт). В этом случае никто не может услышать нормальной речи и все говорящие должны замолчать. По истечении некоторого времени кто-либо может начать говорить снова. Таким образом, во избежание конфликтов каждый желающий что-либо сказать должен сначала убедиться, что не говорит кто-то другой.</p><p>Каждый человек в комнате имеет свое имя (уникальный адрес Ethernet), позволяющее точно адресовать сообщения. Когда кто-либо начинает говорить, он сначала адресует свои слова кому-то из слушателей (привет, имярек, ..........). Если говорящий хочет обратиться ко всем, он передает свое сообщение в широковещательном режиме (эй, люди, ........).</p><h2>4. ARP</h2><p>Как при передаче пакета IP определить Ethernet-адрес получателя?</p><p>Протокол преобразования адресов ARP (Address Resolution Protocol) позволяет определить адрес Ethernet на основе IP-адреса. Преобразование осуществляется только для исходящих пакетов при создании полей заголовков IP и Ethernet.</p><h3>4.1. Таблица ARP для преобразования адресов</h3><p>Преобразование адресов выполняется путем просмотра таблицы ARP, хранящейся в памяти компьютера и содержащей строку с парой адресов (IP и Ethernet) для каждого компьютера. При трансляции IP -> Ethernet в таблице находится строка, содержащая нужный IP-адрес и из второго поля найденной строки берется искомый адрес Ethernet. Ниже показан пример небольшой таблицы ARP:</p><table><tr class="b c"><td>IP address</td><td>Ethernet address</td></tr><tr class="nbb"><td>223.1.2.1</td><td>08-00-39-00-2F-C3</td></tr><tr class="nbt"><td>223.1.2.3</td><td>08-00-5A-21-A7-22</td></tr><tr class="nbl"><td>223.1.2.4</td><td>08-00-10-99-AC-54</td></tr></table><p>Для записи адресов IP используют 4 десятичных поля (по одному для каждого байта), разделенных точками. Адреса Ethernet записываются в шестнадцатеричном формате с разделением байтов пробелом или знаком -.</p><p>Таблица ARP необходима для работы, поскольку адреса IP и Ethernet никак не связаны между собой (возможны произвольные комбинации этих адресов). Адреса IP задаются администраторами сетей из выделенного для сети пространства, а адреса Ethernet задаются производителями оборудования при его производстве. В случае перемещения компьютера в другую подсеть IP-адрес этого компьютера изменяется, а для смены адреса Ethernet в компьютере нужно заменить сетевой адаптер.</p><h3>4.2. Типичный вариант преобразования адресов</h3><p>При нормальной работе сетевых приложений (таких, как TELNET) программа передает сообщение модулю TCP, этот модуль шлет соответствующий TCP-сегмент IP-модулю. IP-адрес получателя известен прикладной программе, модулю TCP и модулю IP. Модуль IP завершает подготовку пакета и может передать его драйверу Ethernet, но сначала он должен определить Ethernet-адрес получателя этого пакета.</p><p>Для поиска адресов Ethernet используются таблицы ARP.</p><h3>4.3. Пара ARP Request/Response (запрос — отклик)</h3><p>Откуда же появляются записи об адресах в таблице ARP?</p><p>В процессе работы специальная программа (демон) заполняет таблицу по мере появления информации об адресах.</p><p>Если нужного адреса нет в таблице ARP, выполняются следующие операции:</p><ol><li>Передается запрос ARP с широковещательным адресом Ethernet.</li><li>Исходящий пакет IP помещается в очередь.</li></ol><p>Интерфейс Ethernet каждого из компьютеров получает широковещательный кадр Ethernet с запросом ARP. После этого каждый из интерфейсов Ethernet проверяет значение поля Type (тип) в полученном кадре и передает пакет ARP модулю ARP. Пакет запроса ARP говорит: «Если ваш IP-адрес соответствует IP-адресу получателя пакета, скажите мне свой Ethernet-адрес». Пакет запроса ARP выглядит следующим образом:</p><table><tr class="nbb"><td>IP-адрес отправителя 223.1.2.1</td></tr><tr class="nbt"><td>Ethernet-адрес отправителя 08-00-39-00-2F-C3</td></tr><tr class="nbb"><td>IP-адрес получателя 223.1.2.2</td></tr><tr class="nbl"><td>Ethernet-адрес получателя &lt;blank&gt;</td></tr></table><p>Каждый модуль ARP проверяет локальные адреса IP и адрес получателя на предмет их совпадения. Если адреса совпадают, модуль шлет отклик на запрос, содержащий искомый адрес, по Ethernet-адресу отправителя запроса ARP. Пакет с откликом ARP говорит: «Да, искомый адрес IP принадлежит мне и я сообщаю свой адрес Ethernet». Пакет отклика ARP меняет значения адресов отправителя/получателя в соответствии с направлением передачи отклика:</p><table><tr class="nbb"><td>IP-адрес отправителя 223.1.2.2</td></tr><tr class="nbt"><td>Ethernet-адрес отправителя 08-00-28-00-38-A9</td></tr><tr class="nbb"><td>IP-адрес получателя 223.1.2.1</td></tr><tr class="nbl"><td>Ethernet-адрес получателя 08-00-39-00-2F-C3</td></tr></table><p>Отклик приходит обратно на компьютер, пославший запрос. Драйвер Ethernet просматривает поле Type в кадре Ethernet и передает пакет ARP модулю ARP. Модуль ARP проверяет пакет и добавляет адреса IP и Ethernet в таблицу ARP.</p><p>Пример обновленной таблицы показан ниже:</p><table><tr class="b c"><td>IP address</td><td>Ethernet address</td></tr><tr class="nbb"><td>223.1.2.1</td><td>08-00-39-00-2F-C3</td></tr><tr class="nbt"><td>223.1.2.2</td><td>08-00-28-00-38-A9</td></tr><tr class="nbt"><td>223.1.2.3</td><td>08-00-5A-21-A7-22</td></tr><tr class="nbl"><td>223.1.2.4</td><td>08-00-10-99-AC-54</td></tr></table><h3>4.4. Продолжение трансляции адресов</h3><p>Новая запись помещается в таблицу в течение нескольких миллисекунд после возникновения потребности в соответствующем адресе. Как было указано в п. 2 выше, исходящий пакет IP был помещен в очередь. На следующем этапе выполняется требуемое преобразование адресов (IP — Ethernet) и кадр передается через сеть Ethernet. Следовательно, добавление в процесс трансляции новых операций 3, 4, 5 завершает сценарий преобразования адресов:</p><ol><li>Передается запрос ARP с широковещательным адресом Ethernet.</li><li>Исходящий пакет IP помещается в очередь.</li><li>Приходит отклик ARP и в таблицу вносится новая пара адресов IP — Ethernet.</li><li>Для помещенного в очередь пакета IP определяется адрес Ethernet из обновленной таблицы ARP.</li><li>Кадр Ethernet передается в сеть Ethernet.</li></ol><p>При отсутствии в таблице ARP нужной записи один пакет IP просто помещается в очередь. Нужные для преобразования данные быстро вносятся в таблицу ARP с использованием пары пакетов request/response и пакет IP из очереди передается в сеть.</p> Каждый компьютер поддерживает свою таблицу ARP для каждого из имеющихся в нем интерфейсов Ethernet. Если искомый<p>компьютер отсутствует в локальной сети, для запрошенного адреса не приходит отклика ARP, а в таблице ARP не будет нужной записи. Пакеты IP, передаваемые по этому адресу, будут отбрасываться модулем IP.</p><p>Некоторые реализации IP и ARP не используют очереди для пакетов IP в процессе ожидания отклика ARP. Вместо размещения в очереди пакет просто отбрасывается и потом должен быть восстановлен модулем TCP или сетевым приложением UDP. Такое восстановление выполняется по истечении заданного времени (тайм-аут) путем повторной передачи пакета. Повторный пакет передается успешно, поскольку в таблице ARP уже присутствует нужная запись.</p><h2>5. Протокол IP</h2><p>Модуль IP является центральным узлом технологии internet и сущность IP заключается в таблицах маршрутизации. Модуль IP использует хранящиеся в памяти таблицы маршрутов для принятия решений о пересылке пакетов IP. Содержимое таблицы маршрутизации определяется опциями, установленными администратором сети. Ошибки в таблицах маршрутизации могут сделать работу сети просто невозможной.</p><p>Понимание процессов маршрутизации является основой, обеспечивающей успех работы сетевого администратора. Чтобы лучше понять таблицы маршрутизации рассмотрим сначала сам процесс маршрутизации, изучим адресацию IP и тогда приступим к детальному рассмотрению таблиц.</p><h3>5.1. Прямая маршрутизация</h3><p>На рисунке 6 показана небольшая сеть с 3 компьютерами — A, B и C. Каждый из компьютеров имеет стек TCP/IP, показанный на рисунке 1. Адаптер Ethernet в каждом из компьютеров имеет уникальный адрес Ethernet. Для каждого компьютера администратор сети выделил адрес IP, который связан с интерфейсом Ethernet, установленным в компьютере.</p><pre>  A      B      C
  |      |      |
--o------o------o--
Ethernet 1
IP network "development"

Рисунок 6: Сеть IP</pre><p>Когда A передает IP-пакет компьютеру B, в заголовке пакета IP содержится IP-адрес компьютера A (адрес отправителя) и адрес Ethernet компьютера A. В заголовке IP содержится также IP-адрес компьютера B (адрес получателя) и адрес Ethernet компьютера B.</p><table><tr class="b c"><td>Адрес</td><td>Отправитель</td><td>Получатель</td></tr><tr><td>Заголовок IP</td><td>A</td><td>B</td></tr><tr><td>Заголовок Ethernet</td><td>A</td><td>B</td></tr></table><p>В этом простом примере IP почти ничего не добавляет к сервису, обеспечиваемому Ethernet. Однако IP увеличивает расход системных ресурсов — требуется дополнительное процессорное время и дополнительная полоса канала для генерации, передачи и разборки заголовков IP.</p><p>Когда IP-модуль компьютера B принимает пакет IP от компьютера A, он проверяет IP-адрес получателя (на предмет соответствия своему адресу) и передает дейтаграмму вышележащему уровню (если адреса совпадают).</p><p>Обмен пакетами между A и B использует прямую маршрутизацию (direct routing).</p><h3>5.2. Непрямая маршрутизация</h3><p>На рисунке 7 представлен более реальный пример internet — сеть содержит три сети Ethernet (три сети IP), соединенных IP-маршрутизатором (компьютер D). Каждая из сетей IP содержит по 4 компьютера и каждый из этих компьютеров имеет свои адреса IP и Ethernet.</p><pre>  A      B      C      ----D----      E      F      G
  |      |      |      |   |   |      |      |      |
--o------o------o------o-  |  -o------o------o------o--
Ethernet 1                 |  Ethernet 2
IP network "development"   |  IP network "accounting"
                           |
                           |
                           |     H      I      J
                           |     |      |      |
                         --o-----o------o------o--
                          Ethernet 3
                          IP network "factory"


Рисунок 7. Три сети IP в одной сети internet</pre><p>На всех компьютерах, за исключением D, используется стек TCP/IP, показанный на рисунке 1. Компьютер D является IP-маршрутизатором — он подключен ко всем 3 сетям и, следовательно, имеет три адреса IP и 3 адреса Ethernet. В компьютере D используется стек TCP/IP, схематически изображенный на рисунке 3 (вместо двух адаптеров используется три). В компьютере D используются 3 модуля ARP и 3 драйвера Ethernet, но модуль IP по-прежнему один.</p><p>Администратор сети присваивает уникальный номер (IP-адрес) каждому из адаптеров Ethernet. Адреса IP не показаны на рисунке 7 — сети обозначены именами.</p><p>Когда компьютер A передает пакет IP компьютеру B, процесс не отличается от описанной выше прямой маршрутизации. Любой обмен пакетами между компьютерами одной сети IP осуществляется с использованием прямой маршрутизации.</p><p>При взаимодействии компьютеров D и A также используется прямая маршрутизация, аналогично протекает и процесс взаимодействия между компьютерами D и E, D и H (каждая из этих пар находится в одной сети IP).</p><p>Однако при обмене пакетами между компьютером A, расположенным по одну сторону маршрутизатора, и компьютером, расположенным по другую сторону маршрутизатора IP, прямая маршрутизация уже не будет работать. Компьютер A должен использовать маршрутизатор D для пересылки пакетов IP в другую IP-сеть. Такой процесс называется непрямой маршрутизацией (indirect routing).</p><p>Маршрутизация пакетов IP осуществляется IP-модулями и прозрачна для TCP, UDP и сетевых приложений.</p><p>Если A передает пакет IP компьютеру E, в качестве адресов отправителя указаны адреса IP и Ethernet компьютера A. Получателем пакетов IP является компьютер E и его адрес IP указывается в заголовке пакета, но, поскольку IP-модуль компьютера A посылает пакет маршрутизатору D для дальнейшей пересылки, в качестве Ethernet-адреса получателя указывается адрес D.</p><table><tr class="b c"><td>Адрес</td><td>Отправитель</td><td>Получатель</td></tr><tr><td>Заголовок IP</td><td>A</td><td>E</td></tr><tr><td>Заголовок Ethernet</td><td>A</td><td>D</td></tr></table><p>Модуль IP компьютера D получает пакет IP и проверяет IP-адрес получателя, после чего может сказать: «Это не мой адрес» — и переслать пакет IP компьютеру E, используя прямую маршрутизацию.</p><table><tr class="b c"><td>Адрес</td><td>Отправитель</td><td>Получатель</td></tr><tr><td>Заголовок IP</td><td>A</td><td>E</td></tr><tr><td>Заголовок Ethernet</td><td>D</td><td>E</td></tr></table><p>В заключении отметим, что для прямой маршрутизации используются явно указанные пары адресов IP — Ethernet отправителя и получателя, а в случае непрямой маршрутизации такие пары использоваться не могут.</p><p>Приведенный пример internet очень прост. В реальных сетях ситуация осложняется множеством факторов и приходится использовать многочисленные маршрутизаторы IP и различные типы физических сетей. Приведенный выше пример показывает, как администратор может разбить большую сеть Ethernet на несколько сетей для снижения размеров областей распространения широковещательного трафика Ethernet.</p><h3>5.3. Правила маршрутизации модуля IP</h3><p>В этом кратком обзоре рассмотрен лишь сам процесс маршрутизации без описания механизмов последней. Мы поговорим лишь о правилах (алгоритмах), используемых модулем IP.</p><p>Для исходящих пакетов IP, полученных от вышележащего уровня, модуль IP должен решить следует посылать пакет с использованием прямой или непрямой маршрутизации, после чего пакет передается сетевому интерфейсу. Для принятия решения о способе маршрутизации используется таблица маршрутизации.</p><p>Для входящих пакетов IP, принимаемых от сетевого интерфейса, модуль IP должен решить следует ли передавать пакет вышележащему уровню. Если пакет должен быть передан на другой сетевой интерфейс, он трактуется уже как исходящий пакет (см. выше). Принятый от сетевого интерфейса пакет никогда не пересылается в тот же самый интерфейс.</p><h3>5.4. IP-адрес</h3><p>Администратор сети распределяет IP-адреса для компьютеров в соответствии с физической сетью, к которой подключен каждый компьютер. Часть 4-байтового адреса IP задает номер IP-сети, остальные биты адреса определяют номер данного компьютера в сети IP (номер хоста или host number). Для компьютера, приведенного в таблице 1, адрес IP имеет значение 223.1.2.1, номер сети — 223.1.2, а номер компьютера в сети — 1.</p><p>Сетевая часть адреса (номер сети) задается старшими битами адреса, а номер хоста — младшими битами. Все примеры адресов IP в данном документе даются для сетей класса C, это означает, что три старших байта (24 старших бита) определяют номер сети, а восемь младших битов — номер хоста. Такая адресация позволяет организовать 2,097,152 сетей класса C, каждая из которых может содержать по 254 хоста.</p><p>Адреса IP распределяются сетевым информационным центром — NIC (Network Information Center). Все сети, подключенные ко всемирной сети Internet, должны использовать сетевые номера в соответствии с полученными от NIC значениями. Если вы организуете частную сеть и не планируете напрямую подключать эту сеть к Internet, вы все равно должны получить адреса в NIC. Вы можете выбрать адреса для частной сети и без обращения в NIC, но при этом наверняка возникнут проблемы в случае соединения с другими сетями.</p><h3>5.5. Имена</h3><p>Большинство людей предпочитают использовать для обозначения компьютеров имена, а не числовые адреса. В приведенном ниже списке компьютер alpha использует адрес 223.1.2.1. Для небольшой сети преобразование имен в адреса может осуществляться путем просмотра файла, содержащего пары имя — адрес и хранящегося на каждом компьютере сети (обычно этот файл называется hosts). Для крупных сетей используются специальные серверы, на которых хранятся данные для преобразования имен компьютеров в адреса. К таким серверам обеспечивается доступ из любой точки сети. Информация об адресах и именах хранится в форме, подобной показанному ниже списку:</p><pre>223.1.2.1     alpha
223.1.2.2     beta
223.1.2.3     gamma
223.1.2.4     delta
223.1.3.2     epsilon
223.1.4.2     iota</pre><p>В первой колонке указаны IP-адреса, а вторая колонка содержит имена компьютеров.</p><p>Во многих случаях возможна установка идентичных файлов hosts на все компьютеры сети. Вы могли заметить, что в приведенном примере компьютеру delta соответствует только одна строка в списке, хотя этот компьютер имеет 3 адреса IP. Для доступа к компьютеру Delta может использоваться любой из связанных с этим компьютером адресов IP. Когда компьютер delta принимает пакет IP и просматривает адрес получателя, он воспринимает пакеты для всех своих адресов IP.</p><p>Символьные имена используются и для сетей IP. Если у вас имеется 3 сети IP, в файле networks будут содержаться записи типа:</p><pre>223.1.2     development
223.1.3     accounting
223.1.4     factory</pre><p>В первой колонке указаны номера сетей IP, во второй — их имена.</p><p>Из приведенных примеров вы можете сделать вывод, что компьютер alpha имеет номер 1 в сети development, а компьютер beta — номер 2 в той же сети. Вы может использовать для этих компьютеров обозначения development.1 (alpha), development.2 (Beta) и т.д.</p><p>Описанные файлы удобны для пользователя, но администратор может предпочесть иной вариант записи для компьютера delta:</p><pre>223.1.2.4     devnetrouter    delta
223.1.3.1     facnetrouter
223.1.4.1     accnetrouter</pre><p>В трех строках файла указаны IP-адреса и имена. Фактически, первая строка задает два имени — delta и devnetrouter, которые являются синонимами. Имя delta служит для общего пользования, а остальные 3 имени применяются только для администрирования таблицы маршрутизации IP.</p><p>Эти файлы используются программами для нахождения соответствий между именами и адресами компьютеров. Сеть может работать с безымянными компьютерами, но имена удобней для пользователей.</p><h3>5.6. Таблица IP-маршрутизации</h3><p>Как модуль IP узнает, какой из сетевых интерфейсов использовать для передачи пакета IP? Модуль IP просматривает таблицу маршрутизации, используя в качестве ключей поиска номера сетей, определенные из IP-адресов получателей.</p><p>Таблица маршрутизации содержит по одной строке для каждого маршрута. Первая колонка таблицы указывает номер сети IP, вторая — флаг direct/indirect (прямая/непрямая маршрутизация), третья — IP-адрес маршрутизатора и последняя — номер сетевого интерфейса. По этой таблице можно определить интерфейс, через который следует передавать пакеты с каждым из адресов IP.</p><p>На большинстве компьютеров таблицу маршрутизации можно просматривать и менять с помощью команды route. Содержимое таблицы маршрутизации задается администратором сети, поскольку он отвечает за распределение адресов IP между компьютерами.</p><h3>5.7. Детали прямой маршрутизации</h3><p>Для понимания процесса прямой маршрутизации вернемся к ранее рассмотренному примеру.</p><pre>   ---------         ---------
   | alpha |         | beta  |
   |    1  |         |  1    |
   ---------         ---------
        |               |
--------o---------------o-
 Ethernet 1
 IP network "development"


Рисунок 8. Фрагмент IP-сети</pre><p>Таблица маршрутизации для компьютера alpha будет иметь вид:</p><table><tr class="b c"><td>Сеть</td><td>Флаг direct/indirect</td><td>маршрутизатор</td><td>Номер интерфейса</td></tr><tr><td>development</td><td>direct</td><td></td><td>1</td></tr></table><p>Получить эту таблицу на экране в большинстве UNIX-систем можно с помощью команды netstat -r. В простой сети таблицы маршрутизации на всех компьютерах будут идентичны.</p><p>Ниже приведен вариант той же таблицы с адресами сетей взамен их имен.</p><table><tr class="b c"><td>Сеть</td><td>Флаг direct/indirect</td><td>маршрутизатор</td><td>Номер интерфейса</td></tr><tr><td>223.1.2</td><td>direct</td><td></td><td>1</td></tr></table><h3>5.8. Сценарий прямой маршрутизации</h3><p>Alpha передает пакет IP компьютеру beta. Пакет IP находится в модуле IP компьютера alpha и в нем указан IP-адрес получателя — beta или 223.1.2.2. Модуль IP выделяет сетевую часть адреса IP и просматривает первую колонку таблицы маршрутизации в поисках нужной записи. В нашем случае эта запись является единственной.</p><p>Остальные колонки этой записи показывают, что компьютеры этой сети доступны с использованием прямой маршрутизации через интерфейс 1. Таблица ARP позволяет определить адрес Ethernet для компьютера beta и пакет передается этому компьютеру через интерфейс 1.</p><p>Если приложение пытается передать данные по другому адресу IP, не входящему в сеть development, модуль IP не сможет найти соответствующей записи в таблице маршрутизации. В таком случае модуль IP просто отбрасывает пакеты, а приложение получает сообщение об ошибке типа Network not reachable (сеть недоступна).</p><h3>5.9. Детали непрямой маршрутизации</h3><p>Вернемся к более сложному примеру маршрутизации, который мы уже рассматривали ранее.</p><pre>          ---------           ---------           ---------
          | alpha |           | delta |           |epsilon|
          |    1  |           |1  2  3|           |   1   |
          ---------           ---------           ---------
               |               |  |  |                |
       --------o---------------o- | -o----------------o--------
        Ethernet 1                |     Ethernet 2
        IP network "Development"  |     IP network "accounting"
                                  |
                                  |     --------
                                  |     | iota |
                                  |     |  1   |
                                  |     --------
                                  |        |
                                --o--------o--------
                                    Ethernet 3
                                    IP network "factory"

             Figure 9.  Close-up View of Three IP Networks</pre><p>Таблица маршрутизации в компьютере alpha будет иметь вид:</p><table><tr class="b c"><td>Сеть</td><td>Флаг direct/indirect</td><td>маршрутизатор</td><td>Номер интерфейса</td></tr><tr><td>development</td><td>direct</td><td></td><td>1</td></tr><tr><td>accounting</td><td>indirect</td><td>devnetrouter</td><td>1</td></tr><tr><td>factory</td><td>indirect</td><td>devnetrouter</td><td>1</td></tr></table><p>Ниже приведен вариант той же таблицы с адресами сетей взамен их имен.</p><table><tr class="b c"><td>Сеть</td><td>Флаг direct/indirect</td><td>маршрутизатор</td><td>Номер интерфейса</td></tr><tr><td>223.1.2</td><td>direct</td><td></td><td>1</td></tr><tr><td>223.1.3</td><td>indirect</td><td>devnetrouter</td><td>1</td></tr><tr><td>223.1.4</td><td>indirect</td><td>devnetrouter</td><td>1</td></tr></table><p>В качестве адреса маршрутизатора в таблице маршрутизации компьютера Alpha указан IP-адрес интерфейса delta, подключенного к сети development.</p><h3>5.10. Сценарий непрямой маршрутизации</h3><p>Alpha передает пакет IP компьютеру epsilon. Пакет IP находится в модуле IP компьютера alpha и содержит адрес получателя epsilon (223.1.3.2). Модуль IP выделяет сетевую часть адреса IP (223.1.3) и просматривает первую колонку таблицы маршрутизации в поисках соответствия. Искомая запись находится во второй строке таблицы.</p><p>Эта запись показывает, что доступ к компьютерам сети 223.1.3 может осуществляться через IP-маршрутизатор devnetrouter. Модуль IP в компьютере Alpha выполняет трансляцию адресов с помощью таблицы ARP для IP-адреса маршрутизатора devnetrouter и шлет пакет IP этому маршрутизатору через свой сетевой интерфейс 1. Пакет IP по-прежнему в качестве адреса получателя содержит адрес epsilon.</p><p>Пакет IP приходит на сетевой интерфейс компьютера delta и передается модулю IP. Модуль проверяет адрес получателя и, не найдя совпадения ни с одним из своих интерфейсов, решает переслать пакет IP.</p><p>Модуль IP в компьютере Delta выделяет сетевую часть адреса получателя (223.1.3) и просматривает свою таблицу маршрутизации:</p><table><tr class="b c"><td>Сеть</td><td>Флаг direct/indirect</td><td>маршрутизатор</td><td>Номер интерфейса</td></tr><tr><td>development</td><td>direct</td><td></td><td>1</td></tr><tr><td>accounting</td><td>direct</td><td></td><td>2</td></tr><tr><td>factory</td><td>direct</td><td></td><td>3</td></tr></table><p>Ниже приведен вариант этой таблицы с адресами сетей взамен их имен.</p><table><tr class="b c"><td>Сеть</td><td>Флаг direct/indirect</td><td>маршрутизатор</td><td>Номер интерфейса</td></tr><tr><td>223.1.2</td><td>direct</td><td></td><td>1</td></tr><tr><td>223.1.3</td><td>direct</td><td></td><td>2</td></tr><tr><td>223.1.4</td><td>direct</td><td></td><td>3</td></tr></table><p>Нужная запись находится во второй строке таблицы. Модуль IP пересылает пакет IP компьютеру epsilon напрямую через интерфейс 3. Пакет содержит адреса IP и Ethernet компьютера epsilon.</p><p>Пакет IP приходит в компьютер epsilon и передается модулю IP, который проверяет IP-адрес и, найдя соответствие со своим адресом, передает пакет на вышележащий уровень.</p><h3>5.11. Маршрутизация в больших сетях</h3><p>При передаче пакетов IP через большую сеть они могут пройти через множество маршрутизаторов на пути к получателю. Путь пакета не может быть задан отправителем и определяется всякий раз путем просмотра таблиц маршрутизации вдоль пути доставки пакета. Каждый из компьютеров (маршрутизаторов) задает только адрес следующего маршрутизатора (next hop), которому пакет передается для дальнейшей пересылки.</p><h3>5.12. Управление маршрутами</h3><p>Поддержка корректных таблиц маршрутизации на всех компьютерах большой сети является сложной задачей, поскольку конфигурация сети постоянно изменяется администраторами с учетом требований пользователей. Ошибки в таблицах маршрутизации могут полностью нарушить работу сети, а поиск таких ошибок является достаточно сложной задачей.</p><p>Сохранение простоты в сетевой конфигурации играет важную роль при создании надежной сети. Например, наиболее простым способом распределения IP-адресов для сетей Ethernet является выделение единого номера сети IP для всей сети Ethernet.</p><p>При настройке маршрутизации могут оказать помощь некоторые сетевые протоколы и приложения. Протокол ICMP (Internet Control Message Protocol) позволяет находить проблемы в маршрутизации. Для небольших сетей таблицы маршрутизации создаются администраторами вручную на каждом компьютере. Для больших сетей используются специальные протоколы маршрутизации, обеспечивающие распространение таблиц маршрутизации по сети.</p><p>При переносе компьютера из одной IP-сети в другую, IP-адрес этого компьютера должен быть изменен. При удалении компьютера из сети его IP-адрес перестает быть корректным. Такие изменения в сети требуют постоянного обновления файлов hosts. В сетях даже средних размеров решение этой задачи может потребовать значительных ресурсов. Система доменных имен и службы DNS (Domain Name System) помогают решить эту проблему.</p><h2>6. Протокол UDP</h2><p>UDP является одним из 2 основных протоколов, используемых поверх IP. Этот протокол предоставляет свой сервис пользовательским сетевым программам. Примерами сетевых приложений на базе протокола UDP являются NFS (Network File System — сетевая файловая система) и SNMP (Simple Network Management Protocol — простой протокол управления сетью).</p><p>UDP обеспечивает сервис по доставке дейтаграмм (datagram) без организации соединений (connectionless) и гарантий доставки. Протокол UDP не организует сквозных (end-to-end) соединений с удаленными модулями UDP, он просто передает дейтаграммы в сеть и принимает их из сети.</p><p>UDP добавляет две новых услуги к тем, что предоставляются протоколом IP. Первой является мультиплексирование информации между приложениями по номерам портов, а второй — поддержка проверки целостности пакетов с помощью контрольных сумм.</p><h3>6.1. Порты</h3><p>Как клиентская программа на одном компьютере может связаться с сервером на другом компьютере?</p><p>Связь между приложениями и UDP осуществляется через порты UDP, задаваемые номерами (с нуля). Программа, которая предлагает свои услуги (сервер), ждет сообщений, адресованных в порт, выделенный для этого сервиса. Серверы терпеливо ждут любых запросов от клиентов.</p><p>Например, сервер SNMP (их называют агентами SNMP) всегда слушает порт 161. На компьютере может использоваться только один агент SNMP, поскольку для такого сервиса выделяется единственный порт UDP. Номер этого порта известен другим приложениям (well known) и клиенты SNMP, желающие прибегнуть к услугам агента, адресуют свои запросы в порт 161 по протоколу UDP на интересующем их компьютере.</p><p>Когда приложение передает данные с помощью UDP, эти данные приходят удаленному адресату в едином блоке. Например, если программа делает 5 записей в порт UDP, программа на удаленной стороне будет 5 раз выполнять операцию чтения из порта UDP. Размеры записываемых в порт блоков данных также совпадают с размерами читаемых из порта блоков.</p><p>UDP сохраняет границы сообщений, заданные приложениями, протокол никогда не объединяет сообщения и не делит их на части.</p><h3>6.2. Контрольная сумма</h3><p>Когда принимаемый пакет IP содержит в поле типа значение UDP, такой пакет передается модулю UDP. Когда UDP-модуль получает дейтаграмму UDP от модуля IP, он проверяет контрольную сумму UDP. Если поле контрольной суммы имеет нулевое значение, это говорит о том, что контрольная сумма не была задана отправителем и не должна приниматься во внимание. Модуль UDP на компьютере отправителя может указывать контрольную сумму или опускать ее. Если между двумя модулями UDP находятся только сети Ethernet, контрольная сумма может и не потребоваться. Однако, рекомендуется использовать контрольные суммы, поскольку данные могут передаваться и через менее надежные среды.</p><p>Если контрольная сумма имеет корректное значение или равна 0, проверяется порт назначения и (при наличии связи между этим портом и приложением) пакет помещается в очередь приложения для последующего прочтения. В противном случае дейтаграмма UDP просто отбрасывается. Если дейтаграммы UDP приходят из сети быстрее, чем приложение может их читать и очередь переполняется, протокол UDP также будет отбрасывать дейтаграммы, не помещающиеся в очередь.</p><h2>7. Протокол TCP</h2><p>Протокол TCP обеспечивает дополнительный сервис. TCP обеспечивает поддержку потоков данных на базе организованных соединений в отличие от передачи дейтаграмм без организации соединений, используемой протоколом UDP. Кроме того, протокол TCP обеспечивает гарантированную доставку.</p><p>TCP используется сетевыми приложениями, которым нужна гарантия доставки. Основными приложениями, использующими TCP, являются FTP (File Transfer Protocol — протокол передачи файлов) и TELNET. К популярным приложениям TCP относятся также X-Window, rcp (remote copy — удаленное копирование) и команды r-серии. Расширение возможностей TCP не проходит бесследно и для поддержки протокола требуются дополнительные ресурсы процессора и полоса канала связи. Устройство модуля TCP значительно сложнее по сравнению с модулем UDP.</p><p>Подобно UDP сетевые приложения подключаются к портам TCP. Хорошо известные номера портов выделены для популярных приложений. Например, сервер TELNET использует порт 23. Клиенты TELNET могут найти сервер, просто подключившись к порту 23 на нужном компьютере по протоколу TCP.</p><p>Когда приложение начинает сеанс работы с TCP, модули TCP на клиентском компьютере и сервере организуют между собой сеанс связи (сессию). Информация о состоянии соединения между конечными точками определяет виртуальное устройство (virtual circuit). Такое виртуальное устройство потребляет ресурсы на обеих сторонах соединения TCP. Виртуальное устройство является полнодуплексным — данные могут одновременно передаваться через него в обоих направлениях. Приложение записывает данные в порт TCP, эти данные передаются через сеть и прочитываются приложением на другом конце соединения.</p><p>TCP превращает поток байтов в пакеты, не сохраняя границ пользовательских сообщений. Например, если приложение делает 5 записей в порт TCP, приложение на другой стороне может прочесть из за 10 приемов или может случиться так, что все данные будут прочитаны за одно обращение к порту. Здесь нет корреляции между числом и размером записей в порт и числом обращений для прочтения данных на удаленной стороне соединения.</p><p>TCP является протоколом со скользящим окном (sliding window) и поддержкой тайм-аутов и повторных передач. Удаленная сторона должна подтвердить прием отправленных ей данных (подтверждения могут прицепляться к передаваемым данным). Управление потоком данных на обеих сторонах соединения предотвращает переполнение буферов.</p><p>Как и все протоколы со скользящим окном, TCP задает размер этого окна. Размер окна определяется количеством данных, которые можно передать до приема подтверждения. Для TCP размер окна задается не числом сегментов TCP, а числом передаваемых байтов.</p><h2>8. Сетевые приложения</h2><h4>Зачем нужны два протокола TCP и UDP?</h4><p>На самом деле эти протоколы обеспечивают разные наборы услуг. Многие приложения способны работать только с определенными типами сервиса. Если вы разрабатываете сетевые приложения, выбирайте протокол, который способен лучше решить поставленные задачи. Если требуется поддержка надежной доставки потока данных, лучше использовать протокол TCP. Если же вам требуется поддержка дейтаграмм, протокол UDP будет предпочтительней. Если нужна эффективная передача данных на значительное расстояние, TCP обеспечит лучшее решение, а для передачи данных в скоростных сетях с малыми задержками предпочтительней использовать протокол UDP. Если ваши задачи не подходят под перечисленные категории, выбор протокола становится более сложной задачей. Однако приложение может взять на себя часть функций, которые не реализованы протоколом. Если вам требуется обеспечить надежную доставку данных на основе UDP, вопросы надежности должны быть решены в прикладной программе. Если вы выбрали протокол TCP и потребовалось организовать сервис на базе записей, приложение может помещать в поток информации маркеры, обозначающие границы каждой записи.</p><h4>Какие сетевые приложения доступны?</h4><p>Список сетевых приложений очень велик и число их постоянно возрастает. Некоторые приложения появились вместе с технологией internet (например, TELNET и FTP), а другие — сравнительно недавно (скажем, X-Windows или SNMP). Ниже приведен краткий обзор популярных сетевых приложений.</p><h3>8.1. TELNET</h3><p>TELNET обеспечивает возможность удаленного входа в систему по протоколу TCP. Организация удаленного входа в систему чем-то напоминает соединение с удаленным абонентом через телефонную сеть. Введя команду telnet delta, пользователь получит на экране приглашение на ввод имени пользователя компьютера delta.</p><p>TELNET работает хорошо — эта программа разработана давно и проверена годами практического использования. Доступ с помощью TELNET обычно не зависит от используемой на клиентской машине операционной системы. Например клиент TELNET может использоваться на компьютере VAX/VMS, а сервер может работать в среде UNIX System V.</p><h3>8.2. FTP</h3><p>Протокол передачи файлов FTP столь же стар, как TELNET, и также использует TCP. Работа с FTP похожа на сеансы TELNET и отличается, прежде всего, используемым набором команд, который специализирован именно для файловых операций (копирование файлов с одного компьютера на другой).</p><h3>8.3. rsh</h3><p>Remote shell (rsh или remsh) является одной из серии у даленных команд UNIX (например, команда копирования UNIX — cp имеет уд аленный аналог — rcp, команда who — имеет аналог rwho и т. д.).</p><p>Команды r* работают прежде всего между системами UNIX и предназначены для организации взаимодействия между доверяющими друг другу (trusted) хостами. Использование таких команд несколько снижает уровень безопасности, но обеспечивает массу удобств для пользователей.</p><p>Для выполнения команды cc file.c (трансляция программы C) на удаленном компьютере достаточно ввести команду rsh delta cc file.c. Для копирования файла file.c на компьютер delta просто наберите rcp file.c delta; для входа в систему delta служит команда rlogin delta и т. п.</p><h3>8.4. NFS</h3><p>Сетевая файловая система NFS, разработанная Sun Microsystems Inc, использует протокол UDP, и очень удобна для монтирования файловых систем UNIX на множестве компьютеров. Бездисковые станции могут работать с дисками сервера (как будто это диск данной станции). База данных, хранящаяся на компьютере alpha, может использоваться с компьютера beta, если файловая система смонтирована на этом компьютере.</p><p>Использование NFS существенно повышает сетевой трафик и на медленных каналах NFS может не обеспечивать требуемой производительности, но преимущества использования дисков через сеть все равно достаточно велики. Клиенты NFS реализованы в ядре UNIX, что позволяет всем приложениям использовать разделы NFS как локальные диски компьютера.</p><h3>8.5. SNMP</h3><p>Протокол SNMP (Simple Network Management Protocol — простой протокол управления сетью) использует UDP и предназначен для организации управления сетью с центральной консоли. Очевидно, что при наличии достаточного объема информации администратору проще обнаружить и решить возникающие в сети проблемы. Консоль администратора использует протокол SNMP для сбора данных от других устройств сети. SNMP определяет форматы данных, оставляя вопросы их интерпретации на усмотрение управляющей станции и администратора сети.</p><h3>8.6. X-Window</h3><p>Оконная система X Window использует одноименный протокол поверх TCP для организации графической оконной среды на рабочих станциях. X Window представляет собой много больше, нежели просто систему вывода окон на экран — это целая философия организации пользовательских интерфейсов.</p><h2>9. Дополнительная информация</h2><p>В это краткое руководство включена лишь мизерная часть информации о технологии internet. В данном параграфе перечислены вопросы, понимание которых позволит перейти на более высокий уровень тем читателям, которые этого пожелают.</p><ul class="dot"><li>Команды администрирования: arp, route, netstat</li><li>ARP: постоянные объекты, публикуемые объекты, устаревшие объекты, подстановки (spoofing)</li><li>таблица маршрутизации IP: хост, используемый по умолчанию шлюз, подсети</li><li>IP: время жизни пакетов, фрагментация, ICMP</li><li>RIP, петли в маршрутизации</li><li>система доменных имен DNS</li></ul><h2>10. Литература</h2><table itemprop="references"><tr><td>[1]</td><td>Comer, D., «Internetworking with TCP/IP Principles, Protocols, and Architecture», Prentice Hall, Englewood Cliffs, New Jersey, U.S.A., 1988.</td></tr><tr><td>[2]</td><td>Feinler, E., et al, DDN Protocol Handbook, Volume 2 and 3, DDN Network Information Center, SRI International, 333 Ravenswood Avenue, Room EJ291, Menlow Park, California, U.S.A., 1985.</td></tr><tr><td>[3]</td><td>Spider Systems, Ltd., «Packets and Protocols», Spider Systems Ltd., Stanwell Street, Edinburgh, U.K. EH6 5NG, 1990.</td></tr></table><h2>11. Связи с другими RFC</h2><p>Этот документ является учебным; он не заменяет и не обновляет другие RFC.</p><h2>12. Вопросы безопасности</h2><p>При использовании стека протоколов TCP/IP возникают вопросы, связанные с безопасностью. Некоторые считают эти вопросы важнейшими, другие просто игнорируют их — все зависит от требований системы и подхода администратора.</p><p>В этом документе вопросы безопасности не рассматриваются, но если вы хотите узнать больше о безопасности протоколов, начните с подстановок адресов (ARP-spoofing) и прочтите параграф «Вопросы безопасности» в <a href="../1122.rfc" title="RFC 1122 - Требования к хостам Internet - Коммуникационные уровни">RFC 1122</a>.</p><h2>13. Адреса авторов</h2><p>Theodore John Socolofsky<br />Spider Systems Limited<br />Spider Park<br />Stanwell Street<br />Edinburgh EH6 5NG<br />United Kingdom<br />Телефон:<br />Из Англии 031-554-9424<br />Из США 011-44-31-554-9424<br />Fax:<br />Из Англии 031-554-0649<br />Из США 011-44-31-554-0649<br />EMail: <bdo dir="rtl">&#107;&#117;&#46;&#111;&#99;&#46;&#114;&#101;&#100;&#105;&#112;&#115;&#64;&#115;&#100;&#101;&#116;</bdo></p><p>Claudia Jeanne Kale<br />12 Gosford Place<br />Edinburgh EH6 4BJ<br />United Kingdom<br />Телефон:<br />Из Англии 031-554-7432<br />Из США 011-44-31-554-7432<br />EMail: <bdo dir="rtl">&#107;&#117;&#46;&#111;&#99;&#46;&#114;&#101;&#100;&#105;&#112;&#115;&#64;&#107;&#97;&#105;&#100;&#117;&#97;&#108;&#99;</bdo></p></div></div><div id="disqus_thread"></div><script type="text/javascript">var disqus_shortname="rfc2",disqus_title="RFC 1180 - Учебник по TCP/IP",disqus_identifier="1180.rfc",disqus_url="http://rfc2.ru/1180.rfc";(function(){var dsq=document.createElement("script");dsq.type="text/javascript";dsq.async=true;dsq.src = "//"+disqus_shortname+".disqus.com/embed.js";(document.getElementsByTagName("head")[0]||document.getElementsByTagName("body")[0]).appendChild(dsq);})();</script><div class="bubble">2007 - 2014 © <a href="../index.html" title="Русские переводы RFC">Русские переводы RFC</a>, IETF, ISOC.</div></div><div id="bottom" style="position:static !important;bottom:auto !important"><div class="bubble"><ul><li><!--723572853672--></li></ul></div></div><!-- Yandex.Metrika counter --><script type="text/javascript">(function (d, w, c) { (w[c] = w[c] || []).push(function() { try { w.yaCounter4680559 = new Ya.Metrika({id:4680559, webvisor:true, clickmap:true, accurateTrackBounce:true, trackHash:true, ut:"noindex"}); } catch(e) { } }); var n = d.getElementsByTagName("script")[0], s = d.createElement("script"), f = function () { n.parentNode.insertBefore(s, n); }; s.type = "text/javascript"; s.async = true; s.src = (d.location.protocol == "https:" ? "https:" : "http:") + "//mc.yandex.ru/metrika/watch.js"; if (w.opera == "[object Opera]") { d.addEventListener("DOMContentLoaded", f, false); } else { f(); } })(document, window, "yandex_metrika_callbacks");</script><noscript><div><img src="http://mc.yandex.ru/watch/4680559?ut=noindex" style="position:absolute; left:-9999px;" alt="" /></div></noscript><!-- /Yandex.Metrika counter --></body></html>