<!DOCTYPE html><html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><link rel="stylesheet" href="../tpl/style.css@f4e332aa" type="text/css" /><link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css' /><style type="text/css">h1,h2,h3,h4{font-family:'Open Sans',sans-serif}</style><link rel="canonical" href="../2001.rfc" /><meta name="Robots" content="noindex, nofollow" /><title>Перевод RFC 2001 — Алгоритмы Slow Start, Congestion Avoidance, Fast Retransmit, и Fast Recovery для протокола TCP</title><link rel="alternate" type="application/rss+xml" title="RFC2.ru - Русские Переводы RFC" href="../rss.xml"></head><body><div id="content"><div id="nav"><div class="icon i0"></div> <a href="../index.html" accesskey="`">На Главную</a></div><div id="search" class="ya-site-form ya-site-form_inited_no"><form action="http://yandex.ru/sitesearch" method="get" target="_blank"><input type="hidden" name="searchid" value="2154295"/><input type="hidden" name="l10n" value="ru"/><input type="hidden" name="reqenc" value=""/><input type="hidden" name="submit" value="Найти"/><input type="search" value="" name="text" placeholder="Поиск по RFC2.ru" /></form></div><div itemscope itemtype="http://schema.org/ScholarlyArticle"><meta itemprop="inLanguage" content="ru" /><meta itemprop="editor" content="ru" /><div id="header"><h1><a itemprop="headline" href="../2001.rfc">RFC 2001 — Алгоритмы Slow Start, Congestion Avoidance, Fast Retransmit, и Fast Recovery для протокола TCP</a></h1></div><dl class="mute"><dt></dt><dd><div class="icon i1"></div> RFC: 2001</dd><dd><div class="icon i3"></div> Оригинал: <a href="original" target="_blank" rel="nofollow"><span itemprop="alternativeHeadline">TCP Slow Start, Congestion Avoidance, Fast Retransmit, and Fast Recovery Algorithms</span></a></dd><dd><div class="icon i7"></div> Другие версии: <strong class="obsoleted_by">RFC 2581</strong></dd><dd><div class="icon i2"></div> Категория: <span itemprop="articleSection">Предложенный стандарт</span></dd><dd><div class="icon i4"></div> Дата публикации: <time itemprop="datePublished" datetime="1997-01-01">Январь 1997</time></dd><dd><div class="icon i5"></div> Автор: <span itemprop="author">W. Stevens</span></dd><dd><div class="icon i6"></div> Перевод: <span itemprop="editor">Николай Малых</span></dd></dl><div id="text" itemprop="articleBody"><h3>Статус документа</h3><p>Этот документ содержит спецификация стандарта, предложенного сообществу Internet и служит приглашением к дискуссии по затронутым вопросам. Текущее состояние стандартизации для данной спецификации вы можете найти в документе "Internet Official Protocol Standards" (STD 1). Данная спецификация может распространяться без ограничений.</p><h3>Тезисы</h3><p>Современные реализации протокола TCP используют 4 алгоритма, которые не описаны ни в одном из стандартов Internet: slow start, congestion avoidance, fast retransmit и fast recovery. В работах [2] и [3] описаны некоторые детали этих алгоритмов, в работе [4] приводятся примеры использования алгоритмов, а работа [5] содержит исходные тексты их реализации для 4.4BSD. Стандарт <a href="../1122.rfc" title="RFC 1122 - Требования к хостам Internet - Коммуникационные уровни">RFC 1122</a> требует от реализаций протокола TCP поддержки алгоритмов slow start и congestion avoidance (параграф 4.2.2.15 [1]), ссылаясь на работу [2]. Однако алгоритмы fast retransmit и fast recovery были реализованы после выхода <a href="../1122.rfc" title="RFC 1122 - Требования к хостам Internet - Коммуникационные уровни">RFC 1122</a>. Целью данного документа является описание всех 4 алгоритмов для Internet.</p><h3>Благодарности</h3><p>Значительная часть этого документа заимствована из книг "TCP/IP Illustrated, Volume 1: The Protocols" (Addison-Wesley, 1994) и "TCP/IP Illustrated, Volume 2: The Implementation" (Addison-Wesley, 1995), написанных Гэри Райтом (Gary R. Wright) и Ричардом Стивенсом (W. Richard Stevens). Материалы использованы с разрешения издательства Addison-Wesley. Описываемые алгоритмы были разработаны Ван Якобсоном (Van Jacobson).</p><h3>Slow Start</h3><p>Старые реализации TCP начинают соединение с передачи отправителем в сеть множества сегментов (вплоть до размера окна, анонсируемого принимающей стороной). Такое поведение нормально для случаев, когда оба хоста находятся в одной ЛВС, а при наличии между ними маршрутизаторов и медленных каналов могут возникать проблемы. Некоторые промежуточные маршрутизаторы вынуждены буферизовать пакеты и в таких случаях может возникнуть нехватка буферного пространства. В работе [2] показано, как это может снизить пропускную способность соединений TCP.</p><p>Алгоритм предотвращения таких ситуаций носит название slow start. Работа алгоритма основана на опытных данных о том, что скорость передачи пакетов в сеть должна совпадать со скоростью возврата подтверждений удаленной стороной.</p><p>Алгоритм Slow добавляет окно для отправителя TCP - окно насыщения, обозначаемое термином cwnd. При организации нового соединения с хостом другой сети окно насыщения инициализируется с размером в один сегмент. Каждый раз при получении подтверждения ACK окно насыщения увеличивается на размер одного сегмента. Отправитель может передать в сеть количество пакетов, ограниченное меньшим из двух окон - окно насыщения и анонсируемое окно. Таким образом обеспечивается управление потоком передаваемых данных - окно насыщения управляет со стороны получателя, анонсируемое окно - со стороны отправителя. Первое основано на возможностях получателя и пропускной способности сети, а второе - с доступным получателю размером буферного пространства.</p><p>Отправитель начинает с передачи одного сегмента и ждет подтверждения ACK. При получении пакета ACK размер окна насыщения увеличивается на 1 и могут быть переданы два сегмента. Когда каждых из этих сегментов будет подтвержден, размер окна насыщения будет увеличен до 4. В идеальном случае обеспечивается экспоненциальный рост размера окна, однако задержка передачи пакетов ACK получателем снижает скорость роста размера окна. Обычно получатель передает одно подтверждение ACK для каждой пары принятых сегментов.</p><p>В какой-то момент будет достигнуто насыщение канала между хостами и промежуточный маршрутизатор начнет отбрасывать пакеты. Это скажет отправителю о том, что размер окна насыщения слишком велик.</p><p>Ранние реализации использовали алгоритм slow start только при передаче сегментов между сетями. Современные реализации протокола используют slow start во всех случаях.</p><h3>Congestion Avoidance</h3><p>Насыщение может возникать в тех случаях, когда данные поступают из «толстой трубы» (например, скоростная ЛВС) и должны передаваться в узкополосный канал (медленная сеть WAN). Может возникать насыщение и в тех случаях, когда множество потоков приходят на маршрутизатор одновременно и производительности этого маршрутизатора не хватает для обслуживания всех потоков. Алгоритм предотвращения насыщения (Congestion avoidance) используется при потере пакетов. Описание алгоритма приведено в работе [2].</p><p>Алгоритм основан на допущении, что потери пакетов, связанные с их повреждением при передаче, весьма малы (менее 1%). Следовательно, причиной потери пакетов является насыщение где-то на пути между отправителем и получателем. Существует два индикатора потери пакетов - возникновение тайм-аутов и появление дубликатов ACK.</p><p>Алгоритмы congestion avoidance и slow start независимы один от другого и имеют разные цели. Однако при возникновении насыщения протокол TCP должен снизить скорость передачи пакетов в сеть и даже подключить алгоритм slow start для снижения размера окна насыщения. На практике эти алгоритмы обычно используются совместно.</p><p>Алгоритмы congestion avoidance и slow start требуют поддержки для каждого соединения двух переменных - cwnd (размер окна насыщения и ssthresh (порог slow start). Комбинация этих алгоритмов работает следующим образом:</p><ol><li>При инициализации соединения задается cwnd = 1 (сегмент) и ssthresh = 65535 (байтов)</li><li>Модуль передачи протокола TCP никогда не передает в сеть число сегментов, превышающее минимальное из двух значений - cwnd и анонсируемый получателем размер окна.</li><li>При возникновении насыщения (тайм-аут или появление дубликатов ACK) для переменной ssthresh устанавливается значение, соответствующее половине размера меньшего из окон (cwnd и анонсируемый получателем размер окна), но не менее размера одного сегмента. Кроме того, при наличии тайм-аутов для переменной cwnd устанавливается значение 1 (т. е., повторяется процедура slow start).</li><li>При получении подтверждений от удаленной стороны значение cwnd увеличивается. Способ увеличения зависит от того, какой алгоритм будет использовать модуль TCP - slow start или congestion avoidance. Если cwnd &lt;= ssthresh, TCP будет использовать алгоритм slow start, в остальных случаях - congestion avoidance. Процедура slow start продолжается, пока TCP находится в первой половине пути к насыщению (поскольку, на этапе 3 был установлен порог в половину размера окна, при котором возникло насыщение), а дальше начинает использоваться алгоритм предотвращения насыщения (congestion avoidance. Алгоритм slow start использует начальное значение cwnd = 1 и увеличивает размер окна насыщения на 1 при получении каждого пакета ACK. Как было отмечено выше, это ведет к экспоненциальному росту размера окна - передается сначала 1 сегмент, затем 2, 4 и т. д. Алгоритм congestion avoidance задает для окна cwnd увеличение на segsize*segsize/cwnd при получении каждого пакета ACK (segsize - размер сегмента, а значение cwnd пересчитано в байты).<br />Такая процедура обеспечивает линейный рост cwnd в отличие от экспоненциального роста в slow start. Размер cwnd должен увеличиваться хотя бы на 1 сегмент в течение каждого периода кругового обхода (round-trip time - RTT), независимо от числа полученных в течение периода RTT подтверждений ACK, тогда как slow start увеличивает размер cwnd на количество принятых подтверждений.</li></ol><p>Многие реализации некорректно используют увеличение размера окна насыщения на часть размера сегмента (обычно, на 1/8) в течение периода congestion avoidance. Это неправильно и такое поведение не будет эмулироваться в будущих версиях.</p><h3>Fast Retransmit</h3><p>Этот алгоритм является модификацией алгоритма congestion avoidance, предложенной в 1990 году [3]. Прежде, чем рассматривать различия этих алгоритмов, отметим, что протокол TCP может генерировать дубликаты ACK при нарушении порядка доставки пакетов (см. параграф 4.2.2.21 документа [1]). Эти дубликаты ACK не следует задерживать - цель их состоит в том, чтобы передать другой стороне информацию о нарушении порядка доставки сегментов и сообщить порядковый номер ожидаемого сегмента.</p><p>Поскольку TCP не знает о причине появления дубликатов ACK (потеря сегментов или нарушение порядка доставки), протокол вынужден ожидать получения некоторого количества дубликатов ACK. Предполагается, что в случае нарушения порядка доставки будет приходить один или два дубликата ACK до начала обработки полученного с нарушением порядка сегмента, при котором будет генерироваться новый пакет ACK. Получение же подряд трех или более дубликатов ACK с высокой вероятностью говорит о потере сегмента. В этом случае TCP повторяет передачу потерянного сегмента без ожидания таймера повторной передачи (retransmission timer).</p><h3>Fast Recovery</h3><p>После выполнения быстрого повтора (fast retransmit), связанного с потерей сегмента, выполняются операции congestion avoidance, а не slow start. Такая процедура используется как алгоритм восстановления. Это повышает эффективность работы протокола, поскольку обеспечивает высокую пропускную способность при условиях незначительного насыщения. Особенно эффективно такое решение при большом размере окон.</p><p>Причина отказа от процедуры slow start в данном случае связана с тем, что прием дубликатов ACK говорит модулю TCP больше, нежели просто о потере пакета. Поскольку принимающая сторона может генерировать дубликат ACK только после получения другого сегмента, этот сегмент уже покинул сеть и находится в буфере принимающей стороны (т. е., существует поток данных между обеими сторонами соединения и TCP нет смысла уменьшать этот поток с помощью процедуры slow start).</p><p>Алгоритмы быстрого повтора и восстановления обычно используются совместно следующим образом:</p><ol><li>При получении подряд третьего дубликата ACK для переменной ssthresh устанавливается значение в половину размера текущего окна насыщения cwnd, но не менее двух сегментов и повторяется передача потерянного сегмента. Далее для переменной cwnd устанавливается значение ssthresh + размер 3 сегментов. Это увеличивает окно насыщения на количество сегментов, которые покинули сеть и находятся в кэше удаленной стороны.</li><li>При получении каждого следующего дубликата ACK значение cwnd увеличивается на размер сегмента. Это увеличивает окно насыщения с учетом дополнительных пакетов, принятых удаленной стороной из сети. Пакет передается в сеть, если новое значение cwnd допускает это.</li><li>При получении пакета ACK, подтверждающего доставку новых данных для переменной cwnd устанавливается значение ssthresh (с округлением до целого числа). Этот пакет ACK должен быть подтверждением повторной передачи на этапе 1 в течение одного периода RTT. В дополнение к этому данный пакет ACK подтверждает доставку всех промежуточных сегментов, переданных в интервале между потерей пакета и получением первого дубликата ACK. Этот этап является процедурой предотвращения насыщения, поскольку TCP снижает скорость передачи до половины значения скорости в момент потери пакета.</li></ol><p>Алгоритм быстрого повтора был впервые реализован в 4.3BSD Tahoe и после него использовалась процедура slow start. Алгоритм быстрого восстановления был реализован в 4.3BSD Reno.</p><h3>Вопросы безопасности</h3><p>Рассматриваемые в этом документе вопросы не связаны с безопасностью.</p><h3>Литература</h3><table itemprop="references"><tr><td>[1]</td><td>Robert Braden, <a href="../1122.rfc" title="RFC 1122 - Требования к хостам Internet - Коммуникационные уровни">«Требования к хостам Internet - Коммуникационные уровни», RFC 1122</a>, Октябрь 1989.</td></tr><tr><td>[2]</td><td>V. Jacobson, «Congestion Avoidance and Control», Computer Communication Review, vol. 18, no. 4, pp. 314-329, Aug.1988. ftp://ftp.ee.lbl.gov/papers/congavoid.ps.Z.</td></tr><tr><td>[3]</td><td>V. Jacobson, «Modified TCP Congestion Avoidance Algorithm», end2end-interest mailing list, April 30, 1990. ftp://ftp.isi.edu/end2end/end2end-interest-1990.mail.</td></tr><tr><td>[4]</td><td>W. R. Stevens, «TCP/IP Illustrated, Volume 1: The Protocols», Addison-Wesley, 1994.</td></tr><tr><td>[5]</td><td>G. R. Wright, W. R. Stevens, «TCP/IP Illustrated, Volume 2: The Implementation», Addison-Wesley, 1995.</td></tr></table><h3>Адрес автора</h3><p>W. Richard Stevens<br />1202 E. Paseo del Zorro<br />Tucson, AZ 85718<br />Phone: 520-297-9416<br />EMail: <bdo dir="rtl">&#117;&#100;&#101;&#46;&#111;&#97;&#111;&#110;&#64;&#115;&#110;&#101;&#118;&#101;&#116;&#115;&#114;</bdo><br />Site: http://www.noao.edu/~rstevens</p></div></div><div id="disqus_thread"></div><script type="text/javascript">var disqus_shortname="rfc2",disqus_title="RFC 2001 - Алгоритмы Slow Start, Congestion Avoidance, Fast Retransmit, и Fast Recovery для протокола TCP",disqus_identifier="2001.rfc",disqus_url="http://rfc2.ru/2001.rfc";(function(){var dsq=document.createElement("script");dsq.type="text/javascript";dsq.async=true;dsq.src = "//"+disqus_shortname+".disqus.com/embed.js";(document.getElementsByTagName("head")[0]||document.getElementsByTagName("body")[0]).appendChild(dsq);})();</script><div class="bubble">2007 - 2014 © <a href="../index.html" title="Русские переводы RFC">Русские переводы RFC</a>, IETF, ISOC.</div></div><div id="bottom" style="position:static !important;bottom:auto !important"><div class="bubble"><ul><li><!--723572853672--></li></ul></div></div><!-- Yandex.Metrika counter --><script type="text/javascript">(function (d, w, c) { (w[c] = w[c] || []).push(function() { try { w.yaCounter4680559 = new Ya.Metrika({id:4680559, webvisor:true, clickmap:true, accurateTrackBounce:true, trackHash:true, ut:"noindex"}); } catch(e) { } }); var n = d.getElementsByTagName("script")[0], s = d.createElement("script"), f = function () { n.parentNode.insertBefore(s, n); }; s.type = "text/javascript"; s.async = true; s.src = (d.location.protocol == "https:" ? "https:" : "http:") + "//mc.yandex.ru/metrika/watch.js"; if (w.opera == "[object Opera]") { d.addEventListener("DOMContentLoaded", f, false); } else { f(); } })(document, window, "yandex_metrika_callbacks");</script><noscript><div><img src="http://mc.yandex.ru/watch/4680559?ut=noindex" style="position:absolute; left:-9999px;" alt="" /></div></noscript><!-- /Yandex.Metrika counter --></body></html>