<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=KOI8-R">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Лабораторная работа N 6</TITLE>
</HEAD>
<BODY>

<B><FONT FACE="Times New Roman" SIZE=4><P ALIGN="CENTER">Лабораторная работа N 6</P>
<P ALIGN="CENTER">МОДЕЛИРОВАНИЕ РАБОТЫ ИНТЕРПРЕТАТОРА</P>                                                                                                                              
<P ALIGN="CENTER">Цель работы</P></B>
</FONT><FONT FACE="Times New Roman" SIZE=4><P ALIGN="JUSTIFY">Практическое освоение средств управления ресурсами ОС UNIX на основе разработки программы,  моделирующей работу интерпретатора в плане создания процессов, реализующих команды в командной строке, их синхронизации и взаимодействию по данным. </P>
<B><P ALIGN="CENTER">Содержание работы</P></B>

<OL>
<LI>Изучить  программные  средства  наследования  дескрипторов файлов (системные вызовы dup(), fcntl()).</LI>
<LI>Ознакомиться с заданием к лабораторной работе.</LI>
<LI>Выбрать набор системных вызовов, обеспечивающих решение задачи.</LI>
<LI>Для  указанного  варианта составить программу на языке Си, реализующую требуемые действия.</LI>
<LI>Отладить и оттестировать составленную программу, используя инструментарий ОС UNIX.</LI>
<LI>Защитить лабораторную работу, ответив на контрольные вопросы.</LI></OL>

<B><P ALIGN="CENTER">Методические указания к лабораторной работе</P></B>
<P ALIGN="JUSTIFY">При выполнении  операции  перенаправления ввода-вывода важным моментом является наследование пользовательских дескрипторов, осуществляемое с помощью системных вызовов dup() и fcntl().</P>
<P ALIGN="JUSTIFY">Системный вызов dup() обрабатывает свой единственный параметр как пользовательский дескриптор открытого файла и возвращает целое число,  которое может быть использовано как еще один пользовательский дескриптор того же файла. С помощью копии  пользовательского дескриптора файла к нему может быть осуществлен доступ того же типа и с использованием того же  значения указателя записи-чтения, что и с помощью оригинального пользовательского дескриптора файла.</P>
<P>Системный вызов fcntl(), имеющий формат</P>
<P ALIGN="CENTER">int fcntl(int fd, char command, int argument),</P>
<P ALIGN="JUSTIFY">выполняет действия по разделению пользовательских дескрипторов в зависимости от пяти значений аргумента command, специфицированных в файле &lt;fcntl.h&gt;. Например, при значении второго аргумента, равного  F_DUPFD системный вызов fcntl() возвращает первый свободный дескриптор файла, значение которого не меньше значения аргумента argument. Этот пользовательский дескриптор файла должен быть копией пользовательского дескриптора файла, заданного аргументом fd.</P>
<P ALIGN="JUSTIFY">С помощью системных вызовов dup() и fcntl() пользовательские программы, а также и интерпретатор команд Shell реализуют каналы и переназначение  стандартного  ввода и стандартного вывода на файл. Пусть,  например, некоторая программа prog читает данные из стандартного входного потока и выводит результаты в стандартный выходной поток.  Для того, чтобы та же программа читала данные из файла aa.txt, а осуществляла вывод в файл bb.txt, необходимо выполнить:</P><DIR>

<DIR>
<P>#include &lt;fcntl.h&gt;</P>
<P>...............</P>
<P>int fd,fd2;</P>
<P>fd=open("aa.txt",O_RDONLY);</P>
<P>close(0);</P>
<P>fcntl(fd,F_DUPFD,0);</P>
<P>fd=open("bb.txt",O_WRONLY|O_CREAT);</P>
<P>close(1);</P>
<P>fcntl(fd2,F_DUPFD,1);</P>
<P>execlp("prog","prog",0);</P></DIR>
</DIR>

<P ALIGN="JUSTIFY">Интерпретатор Shell представляет собой обычную, с точки зрения пользователя,  программу, которая в ходе своего функционирования создает процессы, реализующие простые команды командного языка, выполняет перенаправление ввода-вывода, строит программные каналы между командами и т.д.  Например,  схему обработки  командной строки</P>
<P ALIGN="CENTER">cat &lt; a.txt | sort | pr</P>
<P ALIGN="JUSTIFY">интерпретатором команд, опуская детали, связанные с наследованием дескрипторов файлов, можно представить в виде</P>
<P ALIGN="CENTER"><IMG SRC="..\..\ft\002355\p17.jpg"></P>
<B><P ALIGN="CENTER">Варианты заданий</P></B>
<P ALIGN="JUSTIFY">Составить программу, моделирующую работу Shell-интерпретатора при обработке командной строки, указанной в варианте. При реализации программы путем выдачи сообщений информировать обо всех этапах ее работы (создан процесс, выполнение команды закончено и т.д.).</P>
<OL>

<LI>who | wc -l &amp; ps | wc -l</LI>
<LI>(cc pr1.c &amp; cc pr2.c) &amp;&amp; cat pr1.c pr2.c &gt; prall.c</LI>
<LI>ls -al | grep "April" | wc -l &gt; a.txt</LI>
<LI>ls -lisa | sort | wc -l &gt; a.txt</LI>
<LI>tr -d "[0-9]" &lt; a.txt | sort | uniq &gt; b.txt</LI>
<LI>cat a.txt b.txt c.txt | tr -d "[a-i] | wc -w</LI>
<LI>tr -d "[p-z]" &lt; a.txt |wc -c &amp; wc -c &lt; a.txt</LI>
<LI>ls -la &gt; a.txt &amp; ps &gt; b.txt; cat a.txt b.txt | sort</LI>
</OL>

</FONT><FONT SIZE=2></FONT></BODY>
</HTML>





