<!DOCTYPE html><html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><link rel="stylesheet" href="../tpl/style.css@f4e332aa" type="text/css" /><link rel="prev" href="48" /><link rel="next" href="50" /><link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css' /><style type="text/css">h1,h2,h3,h4{font-family:'Open Sans',sans-serif}</style><title>Перевод RFC 2060 — Протокол IMAP v.4, rev. 1, стр. 49</title><meta name="author" content="M. Crispin" /><link rel="alternate" type="application/rss+xml" title="RFC2.ru - Русские Переводы RFC" href="../rss.xml"></head><body><div id="content"><div id="nav"><div class="icon i0"></div> <a href="../index.html" accesskey="`">На Главную</a></div><div id="search" class="ya-site-form ya-site-form_inited_no"><form action="http://yandex.ru/sitesearch" method="get" target="_blank"><input type="hidden" name="searchid" value="2154295"/><input type="hidden" name="l10n" value="ru"/><input type="hidden" name="reqenc" value=""/><input type="hidden" name="submit" value="Найти"/><input type="search" value="" name="text" placeholder="Поиск по RFC2.ru" /></form></div><div itemscope itemtype="http://schema.org/ScholarlyArticle"><meta itemprop="inLanguage" content="ru" /><meta itemprop="editor" content="ru" /><div id="header"><h1><a itemprop="headline" href="../2060.rfc">RFC 2060 — Протокол IMAP v.4, rev. 1</a></h1></div><dl class="mute"><dt></dt><dd><div class="icon i1"></div> RFC: 2060</dd><dd><div class="icon i3"></div> Оригинал: <a href="original" target="_blank" rel="nofollow"><span itemprop="alternativeHeadline">Internet Message Access Protocol v.4 rev.1</span></a></dd><dd><div class="icon i7"></div> Другие версии: RFC 1730, <strong class="obsoleted_by">RFC 3501</strong></dd><dd><div class="icon i2"></div> Категория: <span itemprop="articleSection">Предложенный стандарт</span></dd><dd><div class="icon i4"></div> Дата публикации: <time itemprop="datePublished" datetime="1996-12-01">Декабрь 1996</time></dd><dd><div class="icon i5"></div> Автор: <span itemprop="author">M. Crispin</span></dd><dd><div class="icon i6"></div> Перевод: <span itemprop="editor">Николай Малых</span></dd></dl><div class="pages"><p class="r"> <h2 class="pt"><span class="z">RFC 2060,</span> Страница 49 из 51</h2></p><ul><li><noindex><a href="print" rel="nofollow">Одной Страницей</a></noindex></li><li><a accesskey="1" title="Первая страница" href="../2060.rfc" class="arr">&lArr;</a></li><li><a accesskey="2" title="На страницу назад" href="48"><b>&larr;</b></a></li><li><a class="x" href="../2060.rfc">1</a></li><li><a class="x" href="2">2</a></li><li><a class="x" href="3">3</a></li><li><a class="x" href="4">4</a></li><li><a class="x" href="5">5</a></li><li><a class="x" href="6">6</a></li><li><a class="x" href="7">7</a></li><li><a class="x" href="8">8</a></li><li><a class="x" href="9">9</a></li><li><a class="x" href="10">10</a></li><li><a class="x" href="11">11</a></li><li><a class="x" href="12">12</a></li><li><a class="x" href="13">13</a></li><li><a class="x" href="14">14</a></li><li><a class="x" href="15">15</a></li><li><a class="x" href="16">16</a></li><li><a class="x" href="17">17</a></li><li><a class="x" href="18">18</a></li><li><a class="x" href="19">19</a></li><li><a class="x" href="20">20</a></li><li><a class="x" href="21">21</a></li><li><a class="x" href="22">22</a></li><li><a class="x" href="23">23</a></li><li><a class="x" href="24">24</a></li><li><a class="x" href="25">25</a></li><li><a class="x" href="26">26</a></li><li><a class="x" href="27">27</a></li><li><a class="x" href="28">28</a></li><li><a class="x" href="29">29</a></li><li><a class="x" href="30">30</a></li><li><a class="x" href="31">31</a></li><li><a class="x" href="32">32</a></li><li><a class="x" href="33">33</a></li><li><a class="x" href="34">34</a></li><li><a class="x" href="35">35</a></li><li><a class="x" href="36">36</a></li><li><a class="x" href="37">37</a></li><li><a class="x" href="38">38</a></li><li><a class="x" href="39">39</a></li><li><a class="x" href="40">40</a></li><li><a class="x" href="41">41</a></li><li><a class="x" href="42">42</a></li><li><a href="43">43</a></li><li><a href="44">44</a></li><li><a href="45">45</a></li><li><a href="46">46</a></li><li><a href="47">47</a></li><li><a href="48">48</a></li><li class="this"><span>49</span></li><li><a href="50">50</a></li><li><a href="51">51</a></li><li><a accesskey="3" title="На страницу вперед" href="50">&rarr;</a></li><li><a accesskey="4" title="Последняя страница" href="51">&rArr;</a></li></ul></div><div id="text" itemprop="articleBody"><h2 id="p9">9. Формальный синтаксис</h2><p>В приведенной ниже спецификации синтаксиса используется расширенная форма Бэкуса-Наура (BNF), заданная в [RFC-822], с единственным исключением — символ-ограничитель (delimiter), используемый с "#" порождает один пробел (SPACE), а не одну или несколько запятых.</p><p>При наличии альтернативных или дополнительных правил, когда последующее правило отменяет действие указанного ранее правила, приоритет должно иметь правило, указанное раньше. Например, "\Seen" при рассмотрении флагов дает имя флага \Seen, а не расширение flag_extension, несмотря на возможность разборки "\Seen" как flag_extension. Некоторые (но не все) случаи использования этого правила отмечены ниже при описании синтаксиса. Если явно не указано иное, регистр символов не принимается во внимание. Строчные и прописные символы используются в описаниях синтаксиса для лучшего восприятия. Реализации ДОЛЖНЫ трактовать эти строки независимо от регистра символов.</p><pre>address         ::= &quot;(&quot; addr_name SPACE addr_adl SPACE addr_mailbox
                    SPACE addr_host &quot;)&quot;

addr_adl        ::= nstring
                    ;; Holds route from [RFC-822] route-addr if
                    ;; non-NIL

addr_host       ::= nstring
                    ;; NIL indicates [RFC-822] group syntax.
                    ;; Otherwise, holds [RFC-822] domain name

addr_mailbox    ::= nstring
                    ;; NIL indicates end of [RFC-822] group; if
                    ;; non-NIL and addr_host is NIL, holds
                    ;; [RFC-822] group name.
                    ;; Otherwise, holds [RFC-822] local-part

addr_name       ::= nstring
                    ;; Holds phrase from [RFC-822] mailbox if
                    ;; non-NIL

alpha           ::= &quot;A&quot; / &quot;B&quot; / &quot;C&quot; / &quot;D&quot; / &quot;E&quot; / &quot;F&quot; / &quot;G&quot; / &quot;H&quot; /
                    &quot;I&quot; / &quot;J&quot; / &quot;K&quot; / &quot;L&quot; / &quot;M&quot; / &quot;N&quot; / &quot;O&quot; / &quot;P&quot; /
                    &quot;Q&quot; / &quot;R&quot; / &quot;S&quot; / &quot;T&quot; / &quot;U&quot; / &quot;V&quot; / &quot;W&quot; / &quot;X&quot; /
                    &quot;Y&quot; / &quot;Z&quot; /
                    &quot;a&quot; / &quot;b&quot; / &quot;c&quot; / &quot;d&quot; / &quot;e&quot; / &quot;f&quot; / &quot;g&quot; / &quot;h&quot; /
                    &quot;i&quot; / &quot;j&quot; / &quot;k&quot; / &quot;l&quot; / &quot;m&quot; / &quot;n&quot; / &quot;o&quot; / &quot;p&quot; /
                    &quot;q&quot; / &quot;r&quot; / &quot;s&quot; / &quot;t&quot; / &quot;u&quot; / &quot;v&quot; / &quot;w&quot; / &quot;x&quot; /
                    &quot;y&quot; / &quot;z&quot;
                    ;; Case-sensitive

append          ::= &quot;APPEND&quot; SPACE mailbox [SPACE flag_list]
                    [SPACE date_time] SPACE literal

astring         ::= atom / string

atom            ::= 1*ATOM_CHAR

ATOM_CHAR       ::= &lt;any CHAR except atom_specials&gt;

atom_specials   ::= &quot;(&quot; / &quot;)&quot; / &quot;{&quot; / SPACE / CTL / list_wildcards /
                    quoted_specials

authenticate    ::= &quot;AUTHENTICATE&quot; SPACE auth_type *(CRLF base64)

auth_type       ::= atom
                    ;; Defined by [IMAP-AUTH]

base64          ::= *(4base64_char) [base64_terminal]

base64_char     ::= alpha / digit / &quot;+&quot; / &quot;/&quot;

base64_terminal ::= (2base64_char &quot;==&quot;) / (3base64_char &quot;=&quot;)

body            ::= &quot;(&quot; body_type_1part / body_type_mpart &quot;)&quot;

body_extension  ::= nstring / number / &quot;(&quot; 1#body_extension &quot;)&quot;
                    ;; Future expansion.  Client implementations
                    ;; MUST accept body_extension fields.  Server
                    ;; implementations MUST NOT generate
                    ;; body_extension fields except as defined by
                    ;; future standard or standards-track
                    ;; revisions of this specification.

body_ext_1part  ::= body_fld_md5 [SPACE body_fld_dsp
                    [SPACE body_fld_lang
                    [SPACE 1#body_extension]]]
                    ;; MUST NOT be returned on non-extensible
                    ;; &quot;BODY&quot; fetch

body_ext_mpart  ::= body_fld_param
                    [SPACE body_fld_dsp SPACE body_fld_lang
                    [SPACE 1#body_extension]]
                    ;; MUST NOT be returned on non-extensible
                    ;; &quot;BODY&quot; fetch

body_fields     ::= body_fld_param SPACE body_fld_id SPACE
                    body_fld_desc SPACE body_fld_enc SPACE
                    body_fld_octets

body_fld_desc   ::= nstring

body_fld_dsp    ::= &quot;(&quot; string SPACE body_fld_param &quot;)&quot; / nil

body_fld_enc    ::= (&lt;&quot;&gt; (&quot;7BIT&quot; / &quot;8BIT&quot; / &quot;BINARY&quot; / &quot;BASE64&quot;/
                    &quot;QUOTED-PRINTABLE&quot;) &lt;&quot;&gt;) / string

body_fld_id     ::= nstring

body_fld_lang   ::= nstring / &quot;(&quot; 1#string &quot;)&quot;

body_fld_lines  ::= number

body_fld_md5    ::= nstring

body_fld_octets ::= number

body_fld_param  ::= &quot;(&quot; 1#(string SPACE string) &quot;)&quot; / nil

body_type_1part ::= (body_type_basic / body_type_msg / body_type_text)
                    [SPACE body_ext_1part]

body_type_basic ::= media_basic SPACE body_fields
                    ;; MESSAGE subtype MUST NOT be &quot;RFC822&quot;

body_type_mpart ::= 1*body SPACE media_subtype
                    [SPACE body_ext_mpart]

body_type_msg   ::= media_message SPACE body_fields SPACE envelope
                    SPACE body SPACE body_fld_lines

body_type_text  ::= media_text SPACE body_fields SPACE body_fld_lines

capability      ::= &quot;AUTH=&quot; auth_type / atom
                    ;; New capabilities MUST begin with &quot;X&quot; or be
                    ;; registered with IANA as standard or
                    ;; standards-track

capability_data ::= &quot;CAPABILITY&quot; SPACE [1#capability SPACE] &quot;IMAP4rev1&quot;
                    [SPACE 1#capability]
                    ;; IMAP4rev1 servers which offer RFC 1730
                    ;; compatibility MUST list &quot;IMAP4&quot; as the first
                    ;; capability.

CHAR            ::= &lt;any 7-bit US-ASCII character except NUL,
                     0x01 - 0x7f&gt;

CHAR8           ::= &lt;any 8-bit octet except NUL, 0x01 - 0xff&gt;

command         ::= tag SPACE (command_any / command_auth /
                    command_nonauth / command_select) CRLF
                    ;; Modal based on state

command_any     ::= &quot;CAPABILITY&quot; / &quot;LOGOUT&quot; / &quot;NOOP&quot; / x_command
                    ;; Valid in all states

command_auth    ::= append / create / delete / examine / list / lsub /
                    rename / select / status / subscribe / unsubscribe
                    ;; Valid only in Authenticated or Selected state

command_nonauth ::= login / authenticate
                    ;; Valid only when in Non-Authenticated state

command_select  ::= &quot;CHECK&quot; / &quot;CLOSE&quot; / &quot;EXPUNGE&quot; /
                     copy / fetch / store / uid / search
                    ;; Valid only when in Selected state

continue_req    ::= &quot;+&quot; SPACE (resp_text / base64)

copy            ::= &quot;COPY&quot; SPACE set SPACE mailbox

CR              ::= &lt;ASCII CR, carriage return, 0x0D&gt;

create          ::= &quot;CREATE&quot; SPACE mailbox
                    ;; Use of INBOX gives a NO error

CRLF            ::= CR LF

CTL             ::= &lt;any ASCII control character and DEL,
                        0x00 - 0x1f, 0x7f&gt;

date            ::= date_text / &lt;&quot;&gt; date_text &lt;&quot;&gt;

date_day        ::= 1*2digit
                    ;; Day of month

date_day_fixed  ::= (SPACE digit) / 2digit
                    ;; Fixed-format version of date_day

date_month      ::= &quot;Jan&quot; / &quot;Feb&quot; / &quot;Mar&quot; / &quot;Apr&quot; / &quot;May&quot; / &quot;Jun&quot; /
                    &quot;Jul&quot; / &quot;Aug&quot; / &quot;Sep&quot; / &quot;Oct&quot; / &quot;Nov&quot; / &quot;Dec&quot;

date_text       ::= date_day &quot;-&quot; date_month &quot;-&quot; date_year

date_year       ::= 4digit

date_time       ::= &lt;&quot;&gt; date_day_fixed &quot;-&quot; date_month &quot;-&quot; date_year
                    SPACE time SPACE zone &lt;&quot;&gt;

delete          ::= &quot;DELETE&quot; SPACE mailbox
                    ;; Use of INBOX gives a NO error

digit           ::= &quot;0&quot; / digit_nz

digit_nz        ::= &quot;1&quot; / &quot;2&quot; / &quot;3&quot; / &quot;4&quot; / &quot;5&quot; / &quot;6&quot; / &quot;7&quot; / &quot;8&quot; /
                    &quot;9&quot;

envelope        ::= &quot;(&quot; env_date SPACE env_subject SPACE env_from
                    SPACE env_sender SPACE env_reply_to SPACE env_to
                    SPACE env_cc SPACE env_bcc SPACE env_in_reply_to
                    SPACE env_message_id &quot;)&quot;

env_bcc         ::= &quot;(&quot; 1*address &quot;)&quot; / nil

env_cc          ::= &quot;(&quot; 1*address &quot;)&quot; / nil

env_date        ::= nstring

env_from        ::= &quot;(&quot; 1*address &quot;)&quot; / nil

env_in_reply_to ::= nstring

env_message_id  ::= nstring

env_reply_to    ::= &quot;(&quot; 1*address &quot;)&quot; / nil

env_sender      ::= &quot;(&quot; 1*address &quot;)&quot; / nil

env_subject     ::= nstring

env_to          ::= &quot;(&quot; 1*address &quot;)&quot; / nil

examine         ::= &quot;EXAMINE&quot; SPACE mailbox

fetch           ::= &quot;FETCH&quot; SPACE set SPACE (&quot;ALL&quot; / &quot;FULL&quot; /
                    &quot;FAST&quot; / fetch_att / &quot;(&quot; 1#fetch_att &quot;)&quot;)

fetch_att       ::= &quot;ENVELOPE&quot; / &quot;FLAGS&quot; / &quot;INTERNALDATE&quot; /
                    &quot;RFC822&quot; [&quot;.HEADER&quot; / &quot;.SIZE&quot; / &quot;.TEXT&quot;] /
                    &quot;BODY&quot; [&quot;STRUCTURE&quot;] / &quot;UID&quot; /
                    &quot;BODY&quot; [&quot;.PEEK&quot;] section
                    [&quot;&lt;&quot; number &quot;.&quot; nz_number &quot;&gt;&quot;]

flag            ::= &quot;\Answered&quot; / &quot;\Flagged&quot; / &quot;\Deleted&quot; /
                    &quot;\Seen&quot; / &quot;\Draft&quot; / flag_keyword / flag_extension

flag_extension  ::= &quot;\&quot; atom
                    ;; Future expansion.  Client implementations
                    ;; MUST accept flag_extension flags.  Server
                    ;; implementations MUST NOT generate
                    ;; flag_extension flags except as defined by
                    ;; future standard or standards-track
                    ;; revisions of this specification.

flag_keyword    ::= atom

flag_list       ::= &quot;(&quot; #flag &quot;)&quot;

greeting        ::= &quot;*&quot; SPACE (resp_cond_auth / resp_cond_bye) CRLF

header_fld_name ::= astring

header_list     ::= &quot;(&quot; 1#header_fld_name &quot;)&quot;

LF              ::= &lt;ASCII LF, line feed, 0x0A&gt;

list            ::= &quot;LIST&quot; SPACE mailbox SPACE list_mailbox

list_mailbox    ::= 1*(ATOM_CHAR / list_wildcards) / string

list_wildcards  ::= &quot;%&quot; / &quot;*&quot;

literal         ::= &quot;{&quot; number &quot;}&quot; CRLF *CHAR8
                    ;; Number represents the number of CHAR8 octets

login           ::= &quot;LOGIN&quot; SPACE userid SPACE password

lsub            ::= &quot;LSUB&quot; SPACE mailbox SPACE list_mailbox

mailbox         ::= &quot;INBOX&quot; / astring
                    ;; INBOX is case-insensitive.  All case variants of
                    ;; INBOX (e.g. &quot;iNbOx&quot;) MUST be interpreted as INBOX
                    ;; not as an astring.  Refer to section 5.1 for
                    ;; further semantic details of mailbox names.

mailbox_data    ::=  &quot;FLAGS&quot; SPACE flag_list /
                     &quot;LIST&quot; SPACE mailbox_list /
                     &quot;LSUB&quot; SPACE mailbox_list /
                     &quot;MAILBOX&quot; SPACE text /
                     &quot;SEARCH&quot; [SPACE 1#nz_number] /
                     &quot;STATUS&quot; SPACE mailbox SPACE
                     &quot;(&quot; #&lt;status_att number &quot;)&quot; /
                     number SPACE &quot;EXISTS&quot; / number SPACE &quot;RECENT&quot;

mailbox_list    ::= &quot;(&quot; #(&quot;\Marked&quot; / &quot;\Noinferiors&quot; /
                    &quot;\Noselect&quot; / &quot;\Unmarked&quot; / flag_extension) &quot;)&quot;
                    SPACE (&lt;&quot;&gt; QUOTED_CHAR &lt;&quot;&gt; / nil) SPACE mailbox

media_basic     ::= (&lt;&quot;&gt; (&quot;APPLICATION&quot; / &quot;AUDIO&quot; / &quot;IMAGE&quot; /
                    &quot;MESSAGE&quot; / &quot;VIDEO&quot;) &lt;&quot;&gt;) / string)
                    SPACE media_subtype
                    ;; Defined in [MIME-IMT]

media_message   ::= &lt;&quot;&gt; &quot;MESSAGE&quot; &lt;&quot;&gt; SPACE &lt;&quot;&gt; &quot;RFC822&quot; &lt;&quot;&gt;
                    ;; Defined in [MIME-IMT]

media_subtype   ::= string
                    ;; Defined in [MIME-IMT]

media_text      ::= &lt;&quot;&gt; &quot;TEXT&quot; &lt;&quot;&gt; SPACE media_subtype
                    ;; Defined in [MIME-IMT]

message_data    ::= nz_number SPACE (&quot;EXPUNGE&quot; /
                                    (&quot;FETCH&quot; SPACE msg_att))

msg_att         ::= &quot;(&quot; 1#(&quot;ENVELOPE&quot; SPACE envelope /
                    &quot;FLAGS&quot; SPACE &quot;(&quot; #(flag / &quot;\Recent&quot;) &quot;)&quot; /
                    &quot;INTERNALDATE&quot; SPACE date_time /
                    &quot;RFC822&quot; [&quot;.HEADER&quot; / &quot;.TEXT&quot;] SPACE nstring /
                    &quot;RFC822.SIZE&quot; SPACE number /
                    &quot;BODY&quot; [&quot;STRUCTURE&quot;] SPACE body /
                    &quot;BODY&quot; section [&quot;&lt;&quot; number &quot;&gt;&quot;] SPACE nstring /
                    &quot;UID&quot; SPACE uniqueid) &quot;)&quot;

nil             ::= &quot;NIL&quot;

nstring         ::= string / nil

number          ::= 1*digit
                    ;; Unsigned 32-bit integer
                    ;; (0 &lt;= n &lt; 4,294,967,296)

nz_number       ::= digit_nz *digit
                    ;; Non-zero unsigned 32-bit integer
                    ;; (0 &lt; n &lt; 4,294,967,296)

password        ::= astring

quoted          ::= &lt;&quot;&gt; *QUOTED_CHAR &lt;&quot;&gt;

QUOTED_CHAR     ::= &lt;any TEXT_CHAR except quoted_specials&gt; /
                    &quot;\&quot; quoted_specials

quoted_specials ::= &lt;&quot;&gt; / &quot;\&quot;

rename          ::= &quot;RENAME&quot; SPACE mailbox SPACE mailbox
                    ;; Use of INBOX as a destination gives a NO error

response        ::= *(continue_req / response_data) response_done

response_data   ::= &quot;*&quot; SPACE (resp_cond_state / resp_cond_bye /
                    mailbox_data / message_data / capability_data)
                    CRLF

response_done   ::= response_tagged / response_fatal

response_fatal  ::= &quot;*&quot; SPACE resp_cond_bye CRLF
                    ;; Server closes connection immediately

response_tagged ::= tag SPACE resp_cond_state CRLF

resp_cond_auth  ::= (&quot;OK&quot; / &quot;PREAUTH&quot;) SPACE resp_text
                    ;; Authentication condition

resp_cond_bye   ::= &quot;BYE&quot; SPACE resp_text

resp_cond_state ::= (&quot;OK&quot; / &quot;NO&quot; / &quot;BAD&quot;) SPACE resp_text
                    ;; Status condition

resp_text       ::= [&quot;[&quot; resp_text_code &quot;]&quot; SPACE] (text_mime2 / text)
                    ;; text SHOULD NOT begin with &quot;[&quot; or &quot;=&quot;

resp_text_code  ::= &quot;ALERT&quot; / &quot;PARSE&quot; /
                    &quot;PERMANENTFLAGS&quot; SPACE &quot;(&quot; #(flag / &quot;\*&quot;) &quot;)&quot; /
                    &quot;READ-ONLY&quot; / &quot;READ-WRITE&quot; / &quot;TRYCREATE&quot; /
                    &quot;UIDVALIDITY&quot; SPACE nz_number /
                    &quot;UNSEEN&quot; SPACE nz_number /
                    atom [SPACE 1*&lt;any TEXT_CHAR except &quot;]&quot;&gt;]

search          ::= &quot;SEARCH&quot; SPACE [&quot;CHARSET&quot; SPACE astring SPACE]
                    1#search_key
                    ;; [CHARSET] MUST be registered with IANA

search_key      ::= &quot;ALL&quot; / &quot;ANSWERED&quot; / &quot;BCC&quot; SPACE astring /
                    &quot;BEFORE&quot; SPACE date / &quot;BODY&quot; SPACE astring /
                    &quot;CC&quot; SPACE astring / &quot;DELETED&quot; / &quot;FLAGGED&quot; /
                    &quot;FROM&quot; SPACE astring /
                    &quot;KEYWORD&quot; SPACE flag_keyword / &quot;NEW&quot; / &quot;OLD&quot; /
                    &quot;ON&quot; SPACE date / &quot;RECENT&quot; / &quot;SEEN&quot; /
                    &quot;SINCE&quot; SPACE date / &quot;SUBJECT&quot; SPACE astring /
                    &quot;TEXT&quot; SPACE astring / &quot;TO&quot; SPACE astring /
                    &quot;UNANSWERED&quot; / &quot;UNDELETED&quot; / &quot;UNFLAGGED&quot; /
                    &quot;UNKEYWORD&quot; SPACE flag_keyword / &quot;UNSEEN&quot; /
                    ;; Above this line were in [IMAP2]
                    &quot;DRAFT&quot; /
                    &quot;HEADER&quot; SPACE header_fld_name SPACE astring /
                    &quot;LARGER&quot; SPACE number / &quot;NOT&quot; SPACE search_key /
                    &quot;OR&quot; SPACE search_key SPACE search_key /
                    &quot;SENTBEFORE&quot; SPACE date / &quot;SENTON&quot; SPACE date /
                    &quot;SENTSINCE&quot; SPACE date / &quot;SMALLER&quot; SPACE number /
                    &quot;UID&quot; SPACE set / &quot;UNDRAFT&quot; / set /
                    &quot;(&quot; 1#search_key &quot;)&quot;

section         ::= &quot;[&quot; [section_text / (nz_number *[&quot;.&quot; nz_number]
                    [&quot;.&quot; (section_text / &quot;MIME&quot;)])] &quot;]&quot;

section_text    ::= &quot;HEADER&quot; / &quot;HEADER.FIELDS&quot; [&quot;.NOT&quot;]
                    SPACE header_list / &quot;TEXT&quot;

select          ::= &quot;SELECT&quot; SPACE mailbox

sequence_num    ::= nz_number / &quot;*&quot;
                    ;; * is the largest number in use.  For message
                    ;; sequence numbers, it is the number of messages
                    ;; in the mailbox.  For unique identifiers, it is
                    ;; the unique identifier of the last message in
                    ;; the mailbox.

set             ::= sequence_num / (sequence_num &quot;:&quot; sequence_num) /
                    (set &quot;,&quot; set)
                    ;; Identifies a set of messages.  For message
                    ;; sequence numbers, these are consecutive
                    ;; numbers from 1 to the number of messages in
                    ;; the mailbox
                    ;; Comma delimits individual numbers, colon
                    ;; delimits between two numbers inclusive.
                    ;; Example: 2,4:7,9,12:* is 2,4,5,6,7,9,12,13,
                    ;; 14,15 for a mailbox with 15 messages.

SPACE           ::= &lt;ASCII SP, space, 0x20&gt;

status          ::= &quot;STATUS&quot; SPACE mailbox SPACE &quot;(&quot; 1#status_att &quot;)&quot;

status_att      ::= &quot;MESSAGES&quot; / &quot;RECENT&quot; / &quot;UIDNEXT&quot; / &quot;UIDVALIDITY&quot; /
                    &quot;UNSEEN&quot;

store           ::= &quot;STORE&quot; SPACE set SPACE store_att_flags

store_att_flags ::= ([&quot;+&quot; / &quot;-&quot;] &quot;FLAGS&quot; [&quot;.SILENT&quot;]) SPACE
                    (flag_list / #flag)

string          ::= quoted / literal

subscribe       ::= &quot;SUBSCRIBE&quot; SPACE mailbox

tag             ::= 1*&lt;any ATOM_CHAR except &quot;+&quot;&gt;

text            ::= 1*TEXT_CHAR

text_mime2       ::= &quot;=?&quot; &lt;charset&gt; &quot;?&quot; &lt;encoding&gt; &quot;?&quot;
                     &lt;encoded-text&gt; &quot;?=&quot;
                     ;; Syntax defined in [MIME-HDRS]

TEXT_CHAR       ::= &lt;any CHAR except CR and LF&gt;

time            ::= 2digit &quot;:&quot; 2digit &quot;:&quot; 2digit
                    ;; Hours minutes seconds

uid             ::= &quot;UID&quot; SPACE (copy / fetch / search / store)
                    ;; Unique identifiers used instead of message
                    ;; sequence numbers

uniqueid        ::= nz_number
                    ;; Strictly ascending

unsubscribe     ::= &quot;UNSUBSCRIBE&quot; SPACE mailbox

userid          ::= astring

x_command       ::= &quot;X&quot; atom &lt;experimental command arguments&gt;

zone            ::= (&quot;+&quot; / &quot;-&quot;) 4digit
                    ;; Signed four-digit value of hhmm representing
                    ;; hours and minutes west of Greenwich (that is,
                    ;; (the amount that the given time differs from
                    ;; Universal Time).  Subtracting the timezone
                    ;; from the given time will give the UT form.
                    ;; The Universal Time zone is &quot;+0000&quot;.</pre></div></div><noindex><div class="pages"><p class="r"> <b>Страница 49 из 51</b></p><ul><li><noindex><a href="print" rel="nofollow">Одной Страницей</a></noindex></li><li><a title="Первая страница" href="../2060.rfc" class="arr">&lArr;</a></li><li><a title="На страницу назад" href="48"><b>&larr;</b></a></li><li><a class="x" href="../2060.rfc">1</a></li><li><a class="x" href="2">2</a></li><li><a class="x" href="3">3</a></li><li><a class="x" href="4">4</a></li><li><a class="x" href="5">5</a></li><li><a class="x" href="6">6</a></li><li><a class="x" href="7">7</a></li><li><a class="x" href="8">8</a></li><li><a class="x" href="9">9</a></li><li><a class="x" href="10">10</a></li><li><a class="x" href="11">11</a></li><li><a class="x" href="12">12</a></li><li><a class="x" href="13">13</a></li><li><a class="x" href="14">14</a></li><li><a class="x" href="15">15</a></li><li><a class="x" href="16">16</a></li><li><a class="x" href="17">17</a></li><li><a class="x" href="18">18</a></li><li><a class="x" href="19">19</a></li><li><a class="x" href="20">20</a></li><li><a class="x" href="21">21</a></li><li><a class="x" href="22">22</a></li><li><a class="x" href="23">23</a></li><li><a class="x" href="24">24</a></li><li><a class="x" href="25">25</a></li><li><a class="x" href="26">26</a></li><li><a class="x" href="27">27</a></li><li><a class="x" href="28">28</a></li><li><a class="x" href="29">29</a></li><li><a class="x" href="30">30</a></li><li><a class="x" href="31">31</a></li><li><a class="x" href="32">32</a></li><li><a class="x" href="33">33</a></li><li><a class="x" href="34">34</a></li><li><a class="x" href="35">35</a></li><li><a class="x" href="36">36</a></li><li><a class="x" href="37">37</a></li><li><a class="x" href="38">38</a></li><li><a class="x" href="39">39</a></li><li><a class="x" href="40">40</a></li><li><a class="x" href="41">41</a></li><li><a class="x" href="42">42</a></li><li><a href="43">43</a></li><li><a href="44">44</a></li><li><a href="45">45</a></li><li><a href="46">46</a></li><li><a href="47">47</a></li><li><a href="48">48</a></li><li class="this"><span>49</span></li><li><a href="50">50</a></li><li><a href="51">51</a></li><li><a title="На страницу вперед" href="50">&rarr;</a></li><li><a title="Последняя страница" href="51">&rArr;</a></li></ul></div></noindex><div id="disqus_thread"></div><script type="text/javascript">var disqus_shortname="rfc2",disqus_title="RFC 2060 - Протокол IMAP v.4, rev. 1",disqus_identifier="2060.rfc",disqus_url="http://rfc2.ru/2060.rfc";(function(){var dsq=document.createElement("script");dsq.type="text/javascript";dsq.async=true;dsq.src = "//"+disqus_shortname+".disqus.com/embed.js";(document.getElementsByTagName("head")[0]||document.getElementsByTagName("body")[0]).appendChild(dsq);})();</script><div class="bubble">2007 - 2014 © <a href="../index.html" title="Русские переводы RFC">Русские переводы RFC</a>, IETF, ISOC.</div></div><div id="bottom" style="position:static !important;bottom:auto !important"><div class="bubble"><ul><li><!--723572853672--></li></ul></div></div><!-- Yandex.Metrika counter --><script type="text/javascript">(function (d, w, c) { (w[c] = w[c] || []).push(function() { try { w.yaCounter4680559 = new Ya.Metrika({id:4680559, webvisor:true, clickmap:true, accurateTrackBounce:true, trackHash:true}); } catch(e) { } }); var n = d.getElementsByTagName("script")[0], s = d.createElement("script"), f = function () { n.parentNode.insertBefore(s, n); }; s.type = "text/javascript"; s.async = true; s.src = (d.location.protocol == "https:" ? "https:" : "http:") + "//mc.yandex.ru/metrika/watch.js"; if (w.opera == "[object Opera]") { d.addEventListener("DOMContentLoaded", f, false); } else { f(); } })(document, window, "yandex_metrika_callbacks");</script><noscript><div><img src="http://mc.yandex.ru/watch/4680559" style="position:absolute; left:-9999px;" alt="" /></div></noscript><!-- /Yandex.Metrika counter --></body></html>