<!DOCTYPE html><html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><link rel="stylesheet" href="../tpl/style.css@f4e332aa" type="text/css" /><link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css' /><style type="text/css">h1,h2,h3,h4{font-family:'Open Sans',sans-serif}</style><link rel="canonical" href="../1071.rfc" /><meta name="Robots" content="noindex, nofollow" /><title>Перевод RFC 1071 — Расчет контрольных сумм в Internet</title><link rel="alternate" type="application/rss+xml" title="RFC2.ru - Русские Переводы RFC" href="../rss.xml"></head><body><div id="content"><div id="nav"><div class="icon i0"></div> <a href="../index.html" accesskey="`">На Главную</a></div><div id="search" class="ya-site-form ya-site-form_inited_no"><form action="http://yandex.ru/sitesearch" method="get" target="_blank"><input type="hidden" name="searchid" value="2154295"/><input type="hidden" name="l10n" value="ru"/><input type="hidden" name="reqenc" value=""/><input type="hidden" name="submit" value="Найти"/><input type="search" value="" name="text" placeholder="Поиск по RFC2.ru" /></form></div><div itemscope itemtype="http://schema.org/ScholarlyArticle"><meta itemprop="inLanguage" content="ru" /><meta itemprop="editor" content="ru" /><div id="header"><h1><a itemprop="headline" href="../1071.rfc">RFC 1071 — Расчет контрольных сумм в Internet</a></h1></div><dl class="mute"><dt></dt><dd><div class="icon i1"></div> RFC: 1071</dd><dd><div class="icon i3"></div> Оригинал: <a href="original" target="_blank" rel="nofollow"><span itemprop="alternativeHeadline">Computing the Internet Checksum</span></a></dd><dd><div class="icon i2"></div> Категория: <span itemprop="articleSection">Не определено</span></dd><dd><div class="icon i4"></div> Дата публикации: <time itemprop="datePublished" datetime="1988-09-01">Сентябрь 1988</time></dd><dd><div class="icon i5"></div> Авторы: <span itemprop="author">R. Braden</span>, <span itemprop="author">D. Borman</span>, <span itemprop="author">C. Partridge</span></dd><dd><div class="icon i6"></div> Перевод: <span itemprop="editor">Николай Малых</span></dd></dl><div id="text" itemprop="articleBody"><h3>Статус документа</h3><p>В этом документе дается обзор эффективности методов и алгоритмов расчета контрольных сумм Internet. Документ не является стандартом, но описывает ряд полезных методов реализации. Документ может распространяться свободно.</p><h2>1. Введение</h2><p>В этом документе обсуждаются методы эффективного расчета контрольных сумм, используемых стандартными протоколами Internet — IP, UDP и TCP.</p><p>Эффективность расчета контрольных сумм очень важна с точки зрения производительности. В результате эффективной реализации остальных компонент протокольной обработки расчет контрольных сумм стал, например, одним из факторов, ограничивающих производительность TCP. Обычно для процедур расчета контрольных сумм используется ручная оптимизация с учетом особенностей работы конкретного процессора — экономия доли микросекунды в расчете на один байт данных TCP может привести к существенному снижению суммарного расхода процессорного времени.</p><p>В общих чертах алгоритм расчета контрольной суммы очень прост:</p><ol><li><p>Соседние октеты информации, для которой создается контрольная сумма, объединяются в 16-битовые целые числа и для этих чисел формируется 16-битовое поразрядное дополнение до 1.</p></li><li><p>При расчете контрольной суммы значение самого поля контрольной суммы принимается нулевым. Для 16-битовых поразрядных дополнений вычисляется сумма. Для полученного в результате 16-битового целого числа создается 16-битовое поразрядное дополнение до 1 и помещается в поле контрольной суммы.</p></li><li><p>Для проверки контрольной суммы вычисляется сумма поразрядных дополнений до 1 для того же набора октетов, включая поле контрольной суммы. Если в результате получается значение, все биты которого равны 1 (-0 в арифметике дополнений до 1), это говорит о корректности контрольной суммы.</p></li></ol><p>Предположим, что контрольная сумма определяется для последовательности октетов A, B, C, D, ... , Y, Z. Будем использовать обозначение [a,b] для 16-битовых целых чисел a*256+b, где a и b являются байтами. Тогда сумма 16-битовых дополнений до 1 для этих байтов будет задаваться одним из выражений:</p><pre>[A,B] +' [C,D] +' ... +' [Y,Z]              [1]

[A,B] +' [C,D] +' ... +' [Z,0]              [2]</pre><p>где +' указывает сложение поразрядных дополнений до 1. Приведенные выше выражения относятся к последовательностям с четным и нечетным количеством байтов, соответственно.</p><p>В двоичных машинах сумма поразрядных дополнений до единицы должна вычисляться с использованием «кругового переноса», т. е, при переполнении старшего бита значение переносится в младший, как показано в примерах ниже.</p><p>В параграфе 2 рассматриваются свойства контрольной суммы, которые могут использоваться для ускорения расчетов. Параграф 3 содержит несколько числовых примеров для наиболее важных методов реализации. В параграфе 4 приведены несколько конкретных алгоритмов для использования с распространенными типами процессоров. Авторы признательны Van Jacobson и Charley Kline за их вклад в алгоритмы, опубликованные в этом параграфе.</p><p>Свойства контрольных сумм Internet изначально были рассмотрены Биллом Пламмером (Bill Plummer) в документе IEN-45, названном «Checksum Function Design». Поскольку документ IEN-45 не получил широкого распространения, он включен в качестве приложения к данному RFC.</p><h2>2. Расчет контрольной суммы</h2><p>Эта простая контрольная сумма имеет множество чудесных математических свойств, которые могут быть использованы для вычисления расчетов. Эти свойства обсуждаются ниже.</p><ul><li class="b">A. Кумулятивность и ассоциативность</li><li class="lib"><p>После того, как байты были распределены на четные и нечетные, суммирование может проводиться в любом порядке с возможностью разбиения на произвольные группы.</p><p>Например, сумму [1] можно представить в форме:</p><pre>( [A,B] +' [C,D] +' ... +' [J,0] )

       +' ( [0,K] +' ... +' [Y,Z] )               [3]</pre></li><li class="b">B. Независимость от порядка байтов</li><li class="lib"><p>Сумма 16-битовых целых чисел может вычисляться для любого порядка байтов. Т. е., если мы рассчитаем сумму, сменив порядок байтов:</p><pre>[B,A] +' [D,C] +' ... +' [Z,Y]                   [4]</pre><p>результат будет отличаться от значения [1] только сменой порядка байтов! Для того, чтобы это стало более понятным, отметим, что в обоих случаях перенос происходит из бита 15 в бит 0 и из бита 7 в бит 8. Иными словами, смена порядка суммируемых байтов лишь приводит к смене порядка байтов результата, но сохраняет порядок битов в каждом байте результата.</p><p>Следовательно, сумма может рассчитываться одинаково, независимо от используемого оборудованием порядка байтов («big-endian» или «little-endian»). В качестве примера предположим, что машина «little-endian» вычисляет контрольную сумму данных, хранящихся в памяти с использованием сетевого («big-endian») порядка байтов. Выборка каждого 16-битового слова будет приводить к смене мест байт в словах, что приведет к суммирования [4]; однако при сохранении результата в памяти снова произойдет смена мест байтов и будет восстановлен сетевой порядок.</p><p>Смена мест байтов может явно использоваться для решения проблем, связанных с выравниванием по границе. Например, вторая группа в [3] может быть рассчитана, как:</p><pre>[K,L] +' ... +' [Z,0]</pre><p>если байты результата поменять местами до того, как они будут добавлены к сумме первой группы (см. пример ниже).</p></li><li class="b">C. Параллельное суммирование</li><li class="lib"><p>На машинах с размером слова, кратным 16 битам, можно использовать дополнительное увеличение скорости расчетов. Поскольку сложение ассоциативно, мы не обязаны складывать целые числа в порядке их следования в сообщении. Вместо этого мы можем складывать их «параллельно» используя более длинные машинные слова.</p><p>Для параллельного расчета контрольной суммы просто выполняется операция поразрядного дополнения до 1 для стандартного размера машинного слова. Например, на 32-разрядных машинах мы можем складывать одновременно по 4 байта : [A,B,C,D]+'... После завершения расчета результат более длинное слово «вталкивается» в 16 битов путем сложения 16-битовых сегментов. При каждом сложении могут происходить переносы битов, которые следует учитывать.</p><p>Поскольку порядок байтов не имеет значения, мы можем посчитать 32-битовых слов [D,C,B,A]+'... или [B,A,D,C]+'... и потом поменять местами байты окончательной 16-битовой суммы (см. примеры ниже). Допускаются любые перестановки, которые будут обеспечивать сложение всех четных байтов в один байт суммы, а всех нечетных — в другой байт.</p></li></ul><p>Ниже описано еще несколько методов ускорения расчета контрольных сумм:</p><ul><li class="b">Отложенные переносы</li><li class="lib"><p>Для некоторых типов процессоров эффективность расчета контрольных сумм может быть повышена за счет того, что добавление битов переноса осуществляется после завершения цикла суммирования.</p><p>Можно складывать 16-битовые слова в 32-битовую переменную, чтобы все биты переноса складывались в старших 16 битах. Этот вариант позволяет отказаться от использования команд, понимающих перенос битов, но требует удвоенного числа операций сложения, поскольку складываются 32-битовые сегменты. Который из вариантов будет быстрее, зависит от системной архитектуры.</p></li><li class="b">Использование циклов</li><li class="lib">Для повышения эффективности часто бывает полезно создание внутреннего цикла суммирования, выполняющего серию команд сложения за один проход. Этот метод часто дает существенное повышение эффективности, хотя может значительно усложнить логику программы.</li><li class="b">Объединение суммирования и копирования данных</li><li class="lib">Кроме вычисления суммы время расходуется также на копирование данных из одного места памяти в другое. В обоих случаях узким местом является скорость шины памяти (например, скорость выборки данных из памяти). На некоторых машинах (особенно на сравнительно медленных и простых микрокомпьютерах) производительность можно существенно повысить за счет объединения операций суммирования и копирования при котором происходит только одна выборка из памяти для обеих операций.</li><li class="b">Нарастающие обновления</li><li class="lib"><p>В некоторых случаях можно избежать повторного вычисления всей контрольной суммы, если сменился только заголовок. Наиболее ярким примером может служить изменение поля TTL в заголовке IP при пересылке пакетов шлюзом, но есть и другие примеры (скажем, обновление source route). В таких случаях можно обновить контрольную сумму даже без просмотра сообщения или дейтаграммы.</p><p>Для обновления контрольной суммы достаточно просто добавить к ней разность между новым и прежним значениями изменившегося 16-битового слова. Чтобы понять, как это работает, напомним, что каждое целое число имеет аддитивную инверсию, а операция сложения ассоциативна. Если исходное значение слова обозначить m, новое значение — m', а исходную контрольную сумму — C, тогда новая сумма C' будет равна:</p><pre>C' = C + (-m) + m' = C + (m' - m)</pre></li></ul><h2>3. Численные примеры</h2><p>Ниже рассматриваются явные примеры расчета сумм дополнений до 1 на машине с дополнением до 2. Примеры показывают, как одну и ту же сумму можно рассчитать путем сложения байтов, 16-битовых слов с нормальным и измененным порядком байтов, а также 32-битовых слов с 3 вариантами порядка байтов. Все числа задаются в шестнадцатеричном формате.</p><pre>          Byte-by-byte    "Normal"  Swapped
                            Order    Order

Byte 0/1:    00   01        0001      0100
Byte 2/3:    f2   03        f203      03f2
Byte 4/5:    f4   f5        f4f5      f5f4
Byte 6/7:    f6   f7        f6f7      f7f6
            ---  ---       -----     -----
Sum1:       2dc  1f0       2ddf0     1f2dc

             dc   f0        ddf0      f2dc
Carrys:       1    2           2         1
             --   --        ----      ----
Sum2:        dd   f2        ddf2      f2dd

Final Swap:  dd   f2        ddf2      ddf2


Byte 0/1/2/3:  0001f203     010003f2       03f20100
Byte 4/5/6/7:  f4f5f6f7     f5f4f7f6       f7f6f5f4
               --------     --------       --------
Sum1:         0f4f7e8fa    0f6f4fbe8      0fbe8f6f4

Carries:              0            0              0

Top half:          f4f7         f6f4           fbe8
Bottom half:       e8fa         fbe8           f6f4
                  -----        -----          -----
Sum2:             1ddf1        1f2dc          1f2dc

                   ddf1         f2dc           f2dc
Carrys:               1            1              1
                   ----         ----           ----
Sum3:              ddf2         f2dd           f2dd

Final Swap:        ddf2         ddf2           ddf2</pre><p>В заключение приводится пример суммирования в виде двух групп, из которых вторая начинается на нечетной границе.</p><pre>           Byte-by-byte    Normal
                            Order

Byte 0/1:    00   01        0001
Byte 2/ :    f2  (00)       f200
            ---  ---       -----
Sum1:        f2   01        f201

Byte 4/5:    03   f4        03f4
Byte 6/7:    f5   f6        f5f6
Byte 8/:     f7  (00)       f700
            ---  ---       -----
Sum2:                      1f0ea

Sum2:                       f0ea
Carry:                         1
                           -----
Sum3:                       f0eb

Sum1:                       f201
Sum3 byte swapped:          ebf0
                           -----
Sum4:                      1ddf1

Sum4:                       ddf1
Carry:                         1
                           -----
Sum5:                       ddf2</pre><h2>4. Примеры реализации</h2><p>Ниже приводятся примеры реализации алгоритма подсчета контрольных сумм Internet, которые доказали свою эффективность для разных типов CPU. В каждом случае приводится ядро алгоритма без включения дополнительного кода (например, свящывания подпрограмм).</p><h3>4.1. Код на языке C</h3><p>Приведенный ниже пример на языке C показывает расчет контрольной суммы с использованием внутреннего цикла сложения 16-битовых значений в 32-битовый «аккумулятор».</p><pre>in 6
    {
        /* Расчет контрольной суммы Internet для count байтов,
         * начиная с addr.
         */
     register long sum = 0;

     while( count > 1 )  {
        /*  Внутренний цикл */
            sum += * (unsigned short) addr++;
            count -= 2;
    }

        /*  Прибавляем байт переноса, если он есть */
    if( count > 0 )
            sum += * (unsigned char *) addr;

        /*  поместим 32-битовую сумму в 16 битов */
    while (sum>>16)
        sum = (sum & 0xffff) + (sum >> 16);

    checksum = ~sum;
}</pre><h3>4.2. Motorola 68020</h3><p>Ниже приведен пример ассемблерной реализации алгоритма для процессора Motorola 68020. Этот вариант использует суммирование 32-битовых значений в один прием и использует внутренний цикл сложения с 16 операциями. Для простоты была опущена логика дополнения последнего слова для случаев, когда число суммируемых байтов не кратно 4. Результат сохраняется в регистре d0.</p><p>При тактовой частоте процессора 20 МГц время расчета контрольной суммы составляет 134 мксек/кбайт. Разработал этот алгоритм Van Jacobson.</p><pre>    movl    d1,d2
    lsrl    #6,d1       | count/64 = # число проходов цикла
    andl    #0x3c,d2    | Нахождение частей блока
    negl    d2
    andb    #0xf,cc     | Сброс X (расширенный флаг переноса)

    jmp     pc@(2$-.-2:b,d2)  | Переход в цикл

1$:     | Начало внутреннего цикла...

    movl    a0@+,d2     |  Выборка 32-битового слова
    addxl   d2,d0       |    Сложение слова и предыдущего переноса
    movl    a0@+,d2     |  Выборка 32-битового слова
    addxl   d2,d0       |    Сложение слова и предыдущего переноса

        | ... еще 14 повторов
2$:
    dbra    d1,1$   | (Отметим, что dbra не воздействует на X)

    movl    d0,d1   | Вталкивание 32 битов суммы в 16 битов
    swap    d1      | (Отметим, что swap не воздействует на X)
    addxw   d1,d0
    jcc     3$
    addw    #1,d0
3$:
    andl    #0xffff,d0</pre><h3>4.3. Cray</h3><p>Ниже приводится ассемблерная реализация алгоритма для процессора Cray, которую предложил Charley Kline. Расчет контрольной суммы производится как векторная операция, обеспечивающая одновременное сложение до 512 байтов с базовым блоком суммирования 32 бита. Для простоты из примера исключены фрагменты, обеспечивающие возможность работы с короткими блоками.</p><p>Регистр A1 содержит адрес 512-байтового блока памяти для контрольной суммы. Две первых копии данных загружаются в два векторных регистра. Один вектор сдвигается вправо на 32 бита, а для второго используется операция AND с 32-битовой маской. После этого векторы складываются. Поскольку все эти операции связаны в цепочку, они дают один результат на каждый цикл процессора. Далее производится сжатие (collaps) результирующего вектора в цикле, который прибавляет каждый элемент к скалярному регистру. В заключение выполняется перенос и результат помещается в 16 битов.</p><pre>         EBM
         A0      A1
         VL      64            используются полные векторы
         S1      &lt;32           формируется 32-битовая маска из правой части.
         A2      32
         V1      ,A0,1            загрузка пакета в V1
         V2      S1&amp;V1            формирование &quot;правых&quot; 32 битов в V2.
         V3      V1&gt;A2            формирование &quot;левых&quot; 32 битов в V3.
         V1      V2+V3            Сложение.
         A2      63            Подготовка к сжатию в скаляр.
         S1      0
         S4      &lt;16           Form 16-bit mask from the right.
         A4      16
   CK$LOOP S2    V1,A2
         A2      A2-1
         A0      A2
         S1      S1+S2
         JAN     CK$LOOP
         S2      S1&amp;S4           формирование &quot; правых&quot; 16 битов в S2
         S1      S1&gt;A4           формирование &quot; левых&quot; 16 битов в S1
         S1      S1+S2
         S2      S1&amp;S4           формирование &quot; правых&quot; 16 битов в S2
         S1      S1&gt;A4           формирование &quot; левых&quot; 16 битов в S1
         S1      S1+S2
         S1      #S1            Получение дополнения до 1
         CMR            В этой точке S1 будет содержать контрольную сумму.</pre><h3>4.4. IBM 370</h3><p>Следующий пример на ассемблере для процессора IBM 370 суммирует по 4 байта одновременно. Для простоты опущен код дополнения, используемых для выравнивания данных по 4-байтовой границе и обращения порядка байтов, когда это требуется. Результат сохраняется в регистре RCARRY.</p><p>Этот код на процессоре IBM 3090 давал время расчета 27 мксек/кбайт при расчете контрольной суммы байтов, содержащих только единицы. Время расчета снижается до 24.3 мксек/кбайт, если применить средства выравнивания слов (специальная обработка в начале и в конце, а при необходимости замена местами байтов при расчете с нечетной позиции).</p><pre>   *      Регистры RADDR и RCOUNT содержат адрес и размер суммируемого блока.
   *
   *      (RCARRY, RSUM) должны быть парой регистров (четный/нечетный).
   *      (RCOUNT, RMOD) должны быть парой регистров (четный/нечетный).
   *

   CHECKSUM  SR    RSUM,RSUM       Сброс рабочих регистров.
             SR    RCARRY,RCARRY
             LA    RONE,1          Установка значения 1.
   *
             SRDA  RCOUNT,6        Count/64 в RCOUNT.
             AR    RCOUNT,RONE       +1 = # число циклов.
             SRL   RMOD,26         Размер частичного блока в RMOD.
             AR    RADDR,R3        Выравнивание для компенсации перехода
             S     RADDR,=F(64)      в цикл.
             SRL   RMOD,1          (RMOD/4)*2 - индекс "полуслов".
             LH    RMOD,DOPEVEC9(RMOD) используется специальный вектор для
             B     LOOP(RMOD)          смещения и перехода в цикл...
   *
   *             Внутренний цикл:
   *
   LOOP      AL    RSUM,0(,RADDR)   Сложить логические слова
             BC    12,*+6             Переход, если нет переноса
             AR    RCARRY,RONE        Добавит ь 1 переноса
             AL    RSUM,4(,RADDR)   Сложить логические слова
             BC    12,*+6             Branch i f no carry
             AR    RCARRY,RONE        Добавить 1 переноса
   *
   *                    ... еще 14 повторов ...
   *
             A     RADDR,=F'64'    Увеличить адресный указатель
             BCT   RCOUNT,LOOP     Перейти к Count
    *
    *            Прибавить переносы к сумме и "затолкнуть" в 16 битов
    *
             ALR   RCARRY,RSUM      Сложить слова SUM и CARRY
             BC    12,*+6              и учесть возможный перенос
             AR    RCARRY,RONE
             SRDL  RCARRY,16        Поместить 32-битовую сумму
             SRL   RSUM,16            в 16 битов
             ALR   RCARRY,RSUM
             C     RCARRY,=X'0000FFFF' Прибавить оставшийся перенос
             BNH   DONE
             S     RCARRY,=X'0000FFFF'
   DONE      X     RCARRY,=X'0000FFFF' Дополнить до 1</pre><h2>Литература</h2><table itemprop="references"><tr><td>[1]</td><td>Cerf, V.G. и Kahn, Robert E., «A Protocol for Packet Network Communications», IEEE Transactions on Communications, vol. COM-22, No. 5, Май 1974.</td></tr><tr><td>[2]</td><td>Kahn, Robert E., «The Organization of Computer Resources into a Packet Radio Network», IEEE Transactions on Communications, vol. COM-25, no. 1, pp. 169-178, Январь 1977.</td></tr><tr><td>[3]</td><td>Jacobs, Irwin, et al., «CPODA — A Demand Assignment Protocol for SatNet», Fifth Data Communications Symposium, September 27-9, 1977, Snowbird, Utah</td></tr><tr><td>[4]</td><td>Bolt Beranek and Newman, Inc. «Specifications for the Interconnection of a Host and an IMP», Report 1822, Январь 1976 edition.</td></tr><tr><td>[5]</td><td>Dean, Richard A., «Elements of Abstract Algebra», John Wyley and Sons, Inc., 1966</td></tr><tr><td>[6]</td><td>Peterson, W. Wesley, «Error Correcting Codes», M.I.T. Press Cambridge MA, 4th edition, 1968.</td></tr><tr><td>[7]</td><td>Avizienis, Algirdas, «A Study of the Effectiveness of Fault-Detecting Codes for Binary Arithmetic», Jet Propulsion Laboratory Technical Report No. 32-711, September 1, 1965.</td></tr><tr><td>[8]</td><td>Kirstein, Peter, private communication</td></tr><tr><td>[9]</td><td>Cerf, V. G. и Postel, Jonathan B., «Specification of Internetwork Transmission Control Program Version 3», University of Southern California Information Sciences Institute, Январь 1978.</td></tr><tr><td>[10]</td><td>Digital Equipment Corporation, «PDP-10 Reference Handbook», 1970, pp. 114-5.</td></tr><tr><td>[11]</td><td>Swanson, Robert, «Understanding Cyclic Redundancy Codes», Computer Design, November, 1975, pp. 93-99.</td></tr><tr><td>[12]</td><td>Clements, Robert C., private communication.</td></tr><tr><td>[13]</td><td>Conklin, Peter F., and Rodgers, David P., «Advanced Minicomputer Designed by Team Evaluation of Hardware/Software Tradeoffs», Computer Design, Апрель 1978, pp. 136-7.</td></tr></table></div></div><div id="disqus_thread"></div><script type="text/javascript">var disqus_shortname="rfc2",disqus_title="RFC 1071 - Расчет контрольных сумм в Internet",disqus_identifier="1071.rfc",disqus_url="http://rfc2.ru/1071.rfc";(function(){var dsq=document.createElement("script");dsq.type="text/javascript";dsq.async=true;dsq.src = "//"+disqus_shortname+".disqus.com/embed.js";(document.getElementsByTagName("head")[0]||document.getElementsByTagName("body")[0]).appendChild(dsq);})();</script><div class="bubble">2007 - 2014 © <a href="../index.html" title="Русские переводы RFC">Русские переводы RFC</a>, IETF, ISOC.</div></div><div id="bottom" style="position:static !important;bottom:auto !important"><div class="bubble"><ul><li><!--723572853672--></li></ul></div></div><!-- Yandex.Metrika counter --><script type="text/javascript">(function (d, w, c) { (w[c] = w[c] || []).push(function() { try { w.yaCounter4680559 = new Ya.Metrika({id:4680559, webvisor:true, clickmap:true, accurateTrackBounce:true, trackHash:true, ut:"noindex"}); } catch(e) { } }); var n = d.getElementsByTagName("script")[0], s = d.createElement("script"), f = function () { n.parentNode.insertBefore(s, n); }; s.type = "text/javascript"; s.async = true; s.src = (d.location.protocol == "https:" ? "https:" : "http:") + "//mc.yandex.ru/metrika/watch.js"; if (w.opera == "[object Opera]") { d.addEventListener("DOMContentLoaded", f, false); } else { f(); } })(document, window, "yandex_metrika_callbacks");</script><noscript><div><img src="http://mc.yandex.ru/watch/4680559?ut=noindex" style="position:absolute; left:-9999px;" alt="" /></div></noscript><!-- /Yandex.Metrika counter --></body></html>