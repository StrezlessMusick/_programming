<!DOCTYPE html><html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><link rel="stylesheet" href="../tpl/style.css@f4e332aa" type="text/css" /><link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css' /><style type="text/css">h1,h2,h3,h4{font-family:'Open Sans',sans-serif}</style><link rel="canonical" href="../4422.rfc" /><meta name="Robots" content="noindex, nofollow" /><title>Перевод RFC 4422 — Простой уровень аутентификации и защиты (SASL)</title><link rel="alternate" type="application/rss+xml" title="RFC2.ru - Русские Переводы RFC" href="../rss.xml"></head><body><div id="content"><div id="nav"><div class="icon i0"></div> <a href="../index.html" accesskey="`">На Главную</a></div><div id="search" class="ya-site-form ya-site-form_inited_no"><form action="http://yandex.ru/sitesearch" method="get" target="_blank"><input type="hidden" name="searchid" value="2154295"/><input type="hidden" name="l10n" value="ru"/><input type="hidden" name="reqenc" value=""/><input type="hidden" name="submit" value="Найти"/><input type="search" value="" name="text" placeholder="Поиск по RFC2.ru" /></form></div><div itemscope itemtype="http://schema.org/ScholarlyArticle"><meta itemprop="inLanguage" content="ru" /><meta itemprop="editor" content="ru" /><div id="header"><h1><a itemprop="headline" href="../4422.rfc">RFC 4422 — Простой уровень аутентификации и защиты (SASL)</a></h1></div><dl class="mute"><dt></dt><dd><div class="icon i1"></div> RFC: 4422</dd><dd><div class="icon i3"></div> Оригинал: <a href="original" target="_blank"><span itemprop="alternativeHeadline">Simple Authentication and Security Layer (SASL)</span></a></dd><dd><div class="icon i7"></div> Предыдущие версии: RFC 2222</dd><dd><div class="icon i2"></div> Категория: <span itemprop="articleSection">Предложенный стандарт</span></dd><dd><div class="icon i4"></div> Дата публикации: <time itemprop="datePublished" datetime="2006-06-01">Июнь 2006</time></dd><dd><div class="icon i5"></div> Авторы: <span itemprop="author">Алексей Мельников</span>, <span itemprop="author">Kurt D. Zeilenga</span></dd><dd><div class="icon i6"></div> Перевод: <span itemprop="editor">Николай Малых</span></dd></dl><div id="text" itemprop="articleBody"><h3>Статус документа</h3><p>В этом документе содержится спецификация протокола, предложенного сообществу Internet. Документ служит приглашением к дискуссии в целях развития и совершенствования протокола. Текущее состояние стандартизации протокола вы можете узнать из документа "Internet Official Protocol Standards" (STD 1). Документ может распространяться без ограничений.</p><h3>Тезисы</h3><p>Простой уровень аутентификации и защиты (SASL, Simple Authentication and Security Layer) представляет собой схему обеспечения услуг по аутентификации и защите данных в основанных на прямых соединениях протоколов на основе механизмов, допускающих замену. Эта схема обеспечивает структурированный интерфейс между протоколами и механизмами. Схема позволяет использовать существующие механизмы для новых протоколов и добавлять новые механизмы для старых протоколов. Кроме того, эта схема обеспечивает протокол для защиты последующих протокольных транзакций внутри уровня защиты данных.</p><p>В этом документе описана структуризация механизма SASL, поддержка SASL в различных протоколах и протокол поддержки уровня защиты данных для соединений. Кроме того, в документе определен один из механизмов SASL — механизм EXTERNAL.</p><p>Данный документ отменяет действие RFC 2222.</p><h3>Оглавление</h3><ul class="map"><li><a href="print#p1" title="Введение">1. Введение</a></li><li class="lia"><a href="print#p1.1" title="Аудитория">1.1. Аудитория</a></li><li class="lia"><a href="print#p1.2" title="Связь с другими документами">1.2. Связь с другими документами</a></li><li class="lia"><a href="print#p1.3" title="Использование терминов">1.3. Использование терминов</a></li><li><a href="print#p2" title="Концепции идентификации">2. Концепции идентификации</a></li><li><a href="print#p3" title="Аутентификационный обмен">3. Аутентификационный обмен</a></li><li class="lia"><a href="print#p3.1" title="Именование механизмов">3.1. Именование механизмов</a></li><li class="lia"><a href="print#p3.2" title="Согласование механизмов">3.2. Согласование механизмов</a></li><li class="lia"><a href="print#p3.3" title="Запрос аутентификационного обмена">3.3. Запрос аутентификационного обмена</a></li><li class="lia"><a href="print#p3.4" title="Запросы и отклики">3.4. Запросы и отклики</a></li><li class="lib"><a href="print#p3.4.1" title="Строка идентификации для проверки полномочий">3.4.1. Строка идентификации для проверки полномочий</a></li><li class="lia"><a href="print#p3.5" title="Прерывание аутентификационного обмена">3.5. Прерывание аутентификационного обмена</a></li><li class="lia"><a href="print#p3.6" title="Результат аутентификации">3.6. Результат аутентификации</a></li><li class="lia"><a href="print#p3.7" title="Уровни защиты">3.7. Уровни защиты</a></li><li class="lia"><a href="print#p3.8" title="Множественная аутентификация">3.8. Множественная аутентификация</a></li><li><a href="print#p4" title="Требования к протоколам">4. Требования к протоколам</a></li><li><a href="print#p5" title="Требования к механизмам">5. Требования к механизмам</a></li><li><a href="print#p6" title="Вопросы безопасности">6. Вопросы безопасности</a></li><li class="lia"><a href="print#p6.1" title="Активные атаки">6.1. Активные атаки</a></li><li class="lib"><a href="print#p6.1.1" title="Перехват">6.1.1. Перехват</a></li><li class="lib"><a href="print#p6.1.2" title="Атаки, направленные на снижение уровня защиты">6.1.2. Атаки, направленные на снижение уровня защиты</a></li><li class="lib"><a href="print#p6.1.3" title="Атаки с воспроизведением данных">6.1.3. Атаки с воспроизведением данных</a></li><li class="lib"><a href="print#p6.1.4" title="Атаки с отсечением">6.1.4. Атаки с отсечением</a></li><li class="lib"><a href="print#p6.1.5" title="Другие активные атаки">6.1.5. Другие активные атаки</a></li><li class="lia"><a href="print#p6.2" title="Пассивные атаки">6.2. Пассивные атаки</a></li><li class="lia"><a href="print#p6.3" title="Замена ключей">6.3. Замена ключей</a></li><li class="lia"><a href="print#p6.4" title="Прочие вопросы">6.4. Прочие вопросы</a></li><li><a href="print#p7" title="Согласование с IANA">7. Согласование с IANA</a></li><li class="lia"><a href="print#p7.1" title="Реестр механизмов SASL">7.1. Реестр механизмов SASL</a></li><li class="lib"><a href="print#p7.1.1" title="Процедура регистрации имен механизмов">7.1.1. Процедура регистрации имен механизмов</a></li><li class="lib"><a href="print#p7.1.2" title="Процедура регистрации имен семейств">7.1.2. Процедура регистрации имен семейств</a></li><li class="lib"><a href="print#p7.1.3" title="Комментарии к регистрации механизмов SASL">7.1.3. Комментарии к регистрации механизмов SASL</a></li><li class="lib"><a href="print#p7.1.4" title="Контроль изменений">7.1.4. Контроль изменений</a></li><li class="lia"><a href="print#p7.2" title="Изменение регистрации">7.2. Изменение регистрации</a></li><li><a href="print#p8" title="Литература">8. Литература</a></li><li class="lia"><a href="print#p8.1" title="Нормативные документы">8.1. Нормативные документы</a></li><li class="lia"><a href="print#p8.2" title="Дополнительная литература">8.2. Дополнительная литература</a></li><li><a href="print#p9" title="Благодартности">9. Благодартности</a></li><li><a href="print#p.appendix.a" title="Механизм SASL EXTERNAL">Приложение A. Механизм SASL EXTERNAL</a></li><li class="lia"><a href="print#p.appendix.a1" title="Техническая спецификация механизма EXTERNAL">A.1. Техническая спецификация механизма EXTERNAL</a></li><li class="lia"><a href="print#p.appendix.a2" title="Примеры SASL EXTERNAL">A.2. Примеры SASL EXTERNAL</a></li><li class="lia"><a href="print#p.appendix.a3" title="Вопросы безопасности">A.3. Вопросы безопасности</a></li><li><a href="print#p.appendix.b" title="Изменения по отношению к RFC 2222">Приложение B. Изменения по отношению к RFC 2222</a></li></ul><h2 id="p1">1. Введение</h2><p>Простой уровень аутентификации и защиты (SASL) представляет собой схему обеспечения услуг по аутентификации и защите данных в основанных на прямых соединениях протоколов на основе механизмов, допускающих замену. Уровень защиты данных может обеспечивать целостность данных, их конфиденциальность и иные средства защиты.</p><p>Устройство SASL позволяет новым протоколам использовать существующие механизмы без их реконструкции, а также позволяет добавлять новые механизмы к существующим протоколам без изменения последних.</p><p>Концептуально SASL представляет собой схему, обеспечивающую уровень абстракции между протоколами и механизмами, как показано на рисунке.</p><pre>    SMTP    LDAP    XMPP   Other protocols ...
       \       |    |      /
        \      |    |     /
       SASL abstraction layer
        /      |    |     \
       /       |    |      \
EXTERNAL   GSSAPI  PLAIN   Other mechanisms ...</pre><p>Благодаря интерфейсам этого уровня абстракции схема позволяет любому протоколу использовать любые механизмы. Хотя этот уровень в общем случае скрывает конкретные протоколы от механизмов (и наоборот), он не прячет в общем случае конкретные механизмы от реализации протокола. Например, для работы различных механизмов требуется разная информация — некоторые используют аутентификацию на основе пароля, другим нужна информация об областях (realm), третьи применяют ярлыки (ticket) Kerberos, сертификаты и т. д. Кроме того, для проверки полномочий серверные реализации в общем случае применяют отображение между объектами аутентификации, форма которых определяется механизмом, и объектами проверки полномочий, чья форма определяется прикладными протоколами. Концепции идентификации рассмотрены в главе 2.</p><p>Можно разработать и реализовать схему таким образом, чтобы абстрагироваться от конкретных деталей механизмов. Реализация такой схемы, как и реализации механизмов могут использоваться не только множеством реализаций конкретного протокола, но и реализациями различных протоколов.</p><p>Схема включает интерфейсы с протоколами и механизмами, с помощью которых выполняется обмен аутентификационными данными. Процесс аутентификационного обмена SASL рассматривается в главе 3.</p><p>Для использования SASL каждый протокол обеспечивает метод идентификации используемого механизма, метод обмена обусловленными механизмом запросами со стороны сервера и откликами клиентов, а также метод обмена результатами аутентификации. Требования SASL к протоколам обсуждаются в главе 4.</p><p>Каждый механизм SASL определяет последовательности серверных запросов и откликов клиентов, которые обеспечивают аутентификацию и согласование сервиса защиты данных. Требования SASL к механизмам рассмотрены в главе 5.</p><p>В главе 6 обсуждаются вопросы безопасности, глава 7 содержит информацию о согласовании с IANA. В приложении A определен механизм SASL EXTERNAL.</p><h3 id="p1.1">1.1. Аудитория</h3><p>Этот документ рассчитан на несколько категорий читателей:</p><ul class="dot"><li>разработчики протоколов, которые используют спецификацию для поддержки этими протоколами аутентификации;</li><li>разработчики механизмов, создающие новые механизмы SASL;</li><li>разработчики клиентских и серверных программ для протоколов, поддерживающих SASL.</li></ul><p>Хотя документ организован так, чтобы сосредоточить внимание читателей на деталях, относящихся к их разработкам, читателям рекомендуется прочесть и понять все отраженные в документе вопросы.</p><h3 id="p1.2">1.2. Связь с другими документами</h3><p>Данный документ прекращает действие RFC 2222. Он заменяет все части RFC2222, за исключением параграфов 7.1 (механизм KERBEROS_IV ), 7.2 (механизм GSSAPI) и 7.3 (механизм SKEY). Механизмы KERBEROS_IV и SKEY в настоящее время представляются устаревшими и их спецификации в RFC 2222 получают статус Historic. Спецификация механизма GSSAPI в настоящее время содержится в отдельном документе [SASL-GSSAPI].</p><p>В приложении B приводится список отличий от RFC 2222.</p><h3 id="p1.3">1.3. Использование терминов</h3><p>Ключевые слова необходимо (MUST), недопустимо (MUST NOT), требуется (REQUIRED), нужно (SHALL), не следует (SHALL NOT), следует (SHOULD), не нужно (SHOULD NOT), рекомендуется (RECOMMENDED), возможно (MAY), необязательно (OPTIONAL) в данном документе интерпретируются в соответствии с BCP 14 [RFC2119].</p><p>Символы, используемые в данном документе для обозначения кодов (code point) и имен, соответствуют стандарту Unicode [Unicode]. Например, буква "a" может быть представлена как &lt;U+0061&gt; или &lt;LATIN SMALL LETTER A&gt;.</p><p>В примерах префиксы "C:" и "S:" указывают строки, передаваемые клиентом и сервером, соответственно. Строки могут переноситься для удобства чтения документа.</p><h2 id="p2">2. Концепции идентификации</h2><p>На практике аутентификация и проверка полномочий (authorization) может включать множество объектов проверки тождественности, возможно в разных формах (простые имена пользователей — username, Kerberos principal, X.500 Distinguished Name и т. п.) и с различным представлением (например строки ABNF в кодировке UTF-8, Distinguished Name в кодировке BER). Хотя технические спецификации часто описывают форму и представление объектов идентификации, используемых в сети, реализации могут использовать различные формы объектов и/или варианты их представления. Отношения между объектами идентификации различных форм в общем случае определяются локально. Используемые реализацией формы и варианты представления объектов также определяются локально самой реализацией.</p><p>Однако концептуально схема SASL включает два объекта идентификации:</p><ol><li>идентификация, связанная с предъявленными при аутентификации полномочиями (authentication credentials), обозначаемая термином authentication identity (аутентификационная идентификация), and</li><li>идентификация при проверке полномочий, обозначаемая термином authorization identity.</li></ol><p>Спецификации механизмов SASL описывают форму полномочий (например, сертификаты X.509, ярлыки Kerberos, простые пары username/password), предъявляемых при аутентификации клиента, включая (когда это приемлемо) синтаксис и семантику объектов идентификации, передаваемых в свидетельствах полномочий (credentials). Спецификации протокола SASL описывают форму объектов идентификации, используемых при проверке полномочий (authorization) и, в частности, синтаксис и семантику строк объектов идентификации, передаваемых механизмами.</p><p>Клиент представляет свидетельства полномочий (которые включают или подразумевают authentication identity) и, возможно, символьную строку, представляющую запрашиваемую как часть обмена SASL аутентифкационную идентификацию. Когда эта строка отсутствует или пуста, это говорит о том, что клиент запрашивает использование идентификации, связанной с предъявленными полномочиями (например, пользователь просит принять authentication identity).</p><p>Сервер отвечает за проверку того, что предъявленные клиентом свидетельства и идентификация, связанная с этими свидетельствами клиента (например, authentication identity), может использоваться как идентификация при проверке полномочий. Обмен SASL прерывается отказом при отрицательном результате любой из этих проверок (обмен SASL может также прерываться отказом по иным причинам, например, в результате отказа службы проверки полномочий).</p><p>Однако конкретные формы authentication identity (используемые сервером для верификации) и authorization identity (используемые для проверки полномочий) не входят в спецификацию SASL. В некоторых случаях конкретные формы идентификации, используемые в том или ином контексте за пределами обмена SASL, могут диктоваться другими спецификациями. Например, спецификация правил identity assumption authorization (proxy authorization) может задавать представление идентификации при проверке полномочий и аутентификации в правилах политики.</p><h2 id="p3">3. Аутентификационный обмен</h2><p>Каждый аутентификационный обмен состоит из клиентского сообщения серверу с запросом аутентификации на основе определенного механизма. После этого следует одна или несколько пар запросов (challenge) от сервера и откликов (response) от клиента. Завершает обмен сообщение от сервера, указывающее результат проверки.</p><p class="note">Отметим, что обмен может быть прерван, как описано в параграфе 3.5.</p><p>Ниже приводится схематическое представление процесса аутентификационного обмена.</p><pre>C: Запрос аутентификационного обмена
S: Первоначальный запрос (challenge) сервера
C: Первоначальный отклик
&lt;дополнительные сообщения challenge/response&gt;
S: Результат аутентификационного обмена</pre><p>Если обмен завершился с положительным результатом проверки и согласован уровень защиты, этот уровень устанавливается, как описано в параграфе 3.7. Это правило применимо также к представленным ниже иллюстрациям.</p><p>Некоторые механизмы указывают, что первыми данными в процессе аутентификационного обмена являются данные от клиента, передаваемые серверу. Протоколы могут обеспечивать дополнительное поле начального отклика в сообщении с запросом для передачи таких данных. Когда механизм задает, что первыми передаются данные от клиента к серверу, протокол обеспечивает дополнительное поле начального отклика и клиент использует это поле, что позволяет сократить время обмена на один интервал кругового обхода:</p><pre>C: Запрос аутентификационного обмена + Первоначальный отклик
&lt;дополнительные сообщения challenge/response&gt;
S: Результат аутентификационного обмена</pre><p>Когда механизм задает передачу первыми данных от клиента к серверу и упомянутое поле недоступно или не используется, за клиентским запросом передается пустой запрос (challenge) от сервера.</p><pre>C: Запрос аутентификационного обмена
S: Пустой запрос (Challenge)
C: Первоначальный отклик
&lt;дополнительные сообщения challenge/response&gt;
S: Результат аутентификационного обмена</pre><p>Если клиент включит начальный отклик в свой запрос на организацию аутентификационного обмена в том случае, когда механизм не позволяет клиенту передавать данные первым, аутентификационный обмен завершится отказом.</p><p>Некоторые механизмы задают передачу сервером дополнительных данных, которые показывают клиенту успешное завершение обмена. Протоколы могут обеспечивать дополнительное поле данных в итоговом сообщении для переноса такой информации. Когда механизм задает передачу сервером дополнительной информации об успешном завершении обмена, протокол обеспечивает поле для передачи таких данных и сервер использует это поле, процесс обмена сокращается на один период кругового обхода:</p><pre>C: Запрос аутентификационного обмена
S: Первоначальный запрос (challenge) сервера
C: Первоначальный отклик
&lt;дополнительные сообщения challenge/response&gt;
S: Результат аутентификационного обмена с дополнительными данными об успехе</pre><p>Когда механизм задает возврат сервером дополнительных данных для клиента, а поле для таких данных недоступно или не используется, эти данные передаются как запрос, отклик на который будет пустым. После получения отклика сервер передает сообщение об успешном завершении.</p><pre>C: Запрос аутентификационного обмена
S: Первоначальный запрос (challenge) сервера
C: Первоначальный отклик
&lt;дополнительные сообщения challenge/response&gt;
S: Дополнительный запрос (challenge)
C: Пустой отклик
S: Результат аутентификационного обмена</pre><p>Когда механизм задает, что первыми в процессе обмена передаются данные от клиента к серверу, клиенту передаются дополнительные данные об успешном завершении обмена и протокол поддерживает поля для передачи дополнительной информации, обмен сокращается на два периода кругового обхода:</p><pre>C: Запрос аутентификационного обмена + Первоначальный отклик
&lt;дополнительные сообщения challenge/response&gt;
S: Результат аутентификационного обмена с дополнительными данными об успехе</pre><p>вместо:</p><pre>C: Запрос аутентификационного обмена
S: Пустой запрос (Challenge)
C: Первоначальный отклик
&lt;дополнительные сообщения challenge/response&gt;
S: Дополнительный запрос (challenge)
C: Пустой отклик
S: Результат аутентификационного обмена</pre><h3 id="p3.1">3.1. Именование механизмов</h3><p>Механизмы SASL именуются символьными строками длиной от 1 до 20 знаков, содержащими буквы верхнего регистра кода ASCII [ASCII], цифры, знаки дефиса (-) и символы подчеркивания (_). В приведенной ниже форме ABNF [RFC4234] &lt;sasl-mech&gt; определяет синтаксис имен механизмов SASL.</p><pre>sasl-mech    = 1*20mech-char
mech-char    = UPPER-ALPHA / DIGIT / HYPHEN / UNDERSCORE
; mech-char может содержать только буквы A-Z (заглавные), 0-9, -, и _
; из набора ASCII.

UPPER-ALPHA  = %x41-5A  ; A-Z (только заглавные)
DIGIT        = %x30-39  ; 0-9
HYPHEN       = %x2D ; hyphen (-)
UNDERSCORE   = %x5F ; underscore (_)</pre><p>Регистрация имен механизмов SASL обсуждается в параграфе 7.1.</p><h3 id="p3.2">3.2. Согласование механизмов</h3><p>Согласование механизмов зависит от протокола.</p><p>В общем случае протокол будет задавать анонсирование сервером поддерживаемых механизмов своим клиентам с помощью того или иного способа, обеспечиваемого протоколом. Клиент будет выбирать «лучший» механизм из числа поддерживаемых им и подходящих для данного случая.</p><p class="note">Отметим, что согласование механизма не защищено последующим аутентификационным обменом и, следовательно, может служить объектом атак с целью выбора наименее надежного механизма, если не принять дополнительных мер защиты.</p><p>Для детектирования таких атак протокол может позволять клиенту определять доступные механизмы после завершения аутентификационного обмена и установки уровня защиты данных, обеспечивающего по крайней мере защиту целостности. Это позволит клиенту обнаружить изменения в списке механизмов, поддерживаемых сервером.</p><h3 id="p3.3">3.3. Запрос аутентификационного обмена</h3><p>Аутентификационный обмен инициируется клиентом путем передачи запроса на аутентификацию с использованием указанного механизма. Клиент передает серверу сообщение, которое содержит имя механизма. Конкретный формат сообщений зависит от протокола.</p><p class="note">Отметим, что имя механизма не защищено этим механизмом и может быть подменено атакующим, если не используется иных средств защиты.</p><p>Когда определен механизм, позволяющий клиенту первым передавать данные и протокольное сообщение для передачи запроса включает дополнительное поле начального отклика, клиент может включить отклик на изначальный запрос сервера (initial challenge) в свой запрос на аутентификацию.</p><h3 id="p3.4">3.4. Запросы и отклики</h3><p>Аутентификационный обмен включает одну или несколько пар запросов сервера (server-challenge) и откликов клиента (clientresponse), детали которых определяются используемым механизмом. Эти запросы и отклики передаются в протокольных сообщениях, формат которых определяется протоколом.</p><p>С помощью таких запросов и откликов механизм может:</p><ul class="dot"><li>аутентифицироать клиента на сервере;</li><li>аутентифицировать сервер на стороне клиента;</li><li>передать строку идентификации для проверки полномочий (authorization identity);</li><li>согласовать уровень защиты;</li><li>обеспечить другие типы сервиса.</li></ul><p>Согласование уровня защиты может включать согласование защитных служб, обеспечиваемых этим уровнем, способов обеспечения защиты, а также индикацию максимального размера буфера шифрованных данных на каждой стороне, который уровень способен принять (см. параграф 3.6).</p><p>После получения запроса на аутентификацию или любого отклика от клиента сервер может передать свой запрос (challenge), прервать обмен или указать на его завершение. После получения запроса механизм на стороне клиента может передать отклик или прервать обмен.</p><h4 id="p3.4.1">3.4.1. Строка идентификации для проверки полномочий</h4><p>Строка идентификации для проверки полномочий (authorization identity string) представляет собой последовательность (возможно нулевой длины) символов Unicode [Unicode], за исключением символа NUL (U+0000).</p><p>Если строка идентификации отсутствует, это означает, что клиент запрашивает у сервера идентификацию, связанную с представленными клиентом свидетельствами (credentials). Пустая строка идентификации эквивалентна ее отсутствию.</p><p>Непустая строка идентификации показывает, что клиент хочет представиться. В этом случае форма идентификации, представляемая этой строкой, а также точный синтаксис и семантика строки определяются протоколом.</p><p>Когда используемая в аутентификационном обмене для передачи строк идентификации схема символьного представления зависит от механизма, предполагается, что механизм может передавать все символы Unicode (за исключением символа NUL).</p><h3 id="p3.5">3.5. Прерывание аутентификационного обмена</h3><p>Клиент или сервер может принять решение о прерывании аутентификационного обмена, если они не хотят или не могут его продолжить (или начать).</p><p>Клиент может прервать аутентификационный обмен, передавая серверу специальное сообщение, формат которого зависит от протокола. Протокол может требовать от сервера передачи клиенту сообщения в ответ на запрос того оп прерывании обмена.</p><p>Подобно этому сервер может прервать аутентификационный обмен путем передачи клиенту специального сообщения, формат которого определяется протоколом.</p><h3 id="p3.6">3.6. Результат аутентификации</h3><p>По завершении аутентификационного обмена сервер передает клиенту сообщение, показывающее результат обмена. Точный формат сообщения определяется протоколом.</p><p>Аутентификация завершается отказом, если</p><ul class="dot"><li>аутентификационный обмен прерван по любой причине;</li><li>клиентские свидетельства (credentials) не были подтверждены;</li><li>сервер не может связать идентификацию со свидетельствами клиента;</li><li>представленная сервером для проверки полномочий строка идентификации имеет некорректный формат;</li><li>идентификация, связанная со свидетельствами клиента, не может использоваться в качестве идентификации при проверке полномочий;</li><li>согласованный уровень защиты (или его отсутствие) не удовлетворяет требованиям;</li><li>сервер по какой-либо причине не желает предоставлять свои услуги клиенту.</li></ul><p>Протокол может включать дополнительное поле данных в сообщении о результате аутентификации. Это поле может включать дополнительную информацию лишь в тех случаях, когда аутентификация завершилась успешно.</p><p>Если результат аутентификации положительный и уровень защиты согласован, этот уровень устанавливается. Если аутентификация завершилась отказом или уровень защиты не был согласован, сохраняется текущий уровень защиты.</p><p>Передаваемое сервером сообщение о результате аутентификации может обеспечивать для клиента способ различать ошибки, при которых лучше всего повторно запросить у пользователя его свидетельства (credentials), от ошибок, при которых лучше всего рекомендовать клиенту обратиться к серверу позднее, или ошибок,при которых пользователю следует обратиться к системному администратору для решения проблем (см. коды откликов SYS и AUTH POP [RFC3206] в качестве примера). Такая возможность полезна, в частности, в периоды запланированного обслуживания сервера, поскольку она позволяет снизить расходы на поддержку. Важно также настроить сервер так, чтобы сообщения о результате аутентификации не позволяли отличить корректного пользователя с некорректными свидетельствами от некорректного пользователя.</p><h3 id="p3.7">3.7. Уровни защиты</h3><p>Механизмы SASL могут предлагать широкий спектр средств защиты. Обычно сюда включается защита целостности и конфиденциальности данных. Механизмы SASL, которые не обеспечивают уровня защиты, трактуются как согласующие отсутствие уровня защиты.</p><p>Если использование уровня защиты согласовано в процессе аутентификационного обмена, этом уровень устанавливается сервером после передачи сообщения о результате аутентификации, а клиентом — при получении этого сообщения. В обоих случаях уровень устанавливается до передачи последующих протокольных данных. Точный момент начала использования уровня защиты для потоков данных протокола определяется самим протоколом.</p><p>После того, как уровень защиты вступает в силу для потоков данных протокола, он остается в действии до тех пор, пока не будет установлен заново согласованный уровень защиты или нижележащее транспортное соединение не будет разорвано.</p><p>Когда уровень защиты активен, он переносит протокольные данные в буферы защищенных данных. Если в какой-то момент уровень защиты не пожелает или не сможет продолжить создание буферов, защищающих протокольные данные, нижележащее транспортное соединение должно быть разорвано. Если уровень защиты не способен декодировать приемный буфер, нижележащее транспортное соединение должно быть разорвано. В обоих случаях транспортное соединение следует закрывать корректно.</p><p>Каждый буфер защищенных данных передается через нижележащее транспортное соединение в виде последовательности октетов, которой предшествует 4-октетное поле с сетевым порядком байтов, которое представляет размер буфера. Размер буфера защищенных данных должен быть не больше максимального размера, который ожидает принять другая сторона. При получении данных, размер которых превышает максимально допустимый, приемной стороне следует закрыть соединение и она может трактовать это как атаку.</p><p>Максимальный размер, который ожидает получить каждая сторона, определяется используемым механизмом (согласуется или задается спецификацией).</p><h3 id="p3.8">3.8. Множественная аутентификация</h3><p>Если протоколом явно (в технической спецификации данного протокола) не указано иное, в протокольной сессии допускается лишь одна успешная аутентификация SASL. После успешного завершения аутентификации дальнейшие попытки организации аутентификационного обмена приводят к отказу.</p><p>Когда протокол разрешает многократную аутентификацию SASL, может выполняться множество сеансов аутентификационного обмена, но ни в коем случае одновременно не может использоваться множество уровней защиты. Если уровень защиты уже используется и при следующем согласовании SASL выбирается другой уровень, новый уровень будет использоваться взамен старого. Если уровень защиты используется, а при новом согласовании SASL выбрано отсутствие защитного уровня, сохранится прежний уровень защиты.</p><p>Когда протокол разрешает многократную успешную аутентификацию SASL, влияние отказа при последующей попытке аутентификации SASL на ранее проведенную аутентификацию и проверку полномочий определяется протоколом. Следует обратиться к технической спецификации протокола, чтобы определить следует сохранять ранее аутентифицированное состояние, переходить в состояние для анонимного пользователя или принимать иные меры. Независимо от принятого для протокола влияния на предыдущее состояние, согласованный ранее уровень защиты сохраняется.</p><h2 id="p4">4. Требования к протоколам</h2><p>Для того, чтобы протокол мог предлагать сервис SASL, его спецификация должна содержать следующую информацию:</p><ol><li><p>Имя сервиса, которое может быть выбрано из регистра элементов "service" для связанного с хостом имени сервиса GSSAPI, как описано в параграфе 4.1 документа [RFC2743].</p><p class="note">Отметим, что этот регистр совместно используется всеми механизмами GSSAPI и SASL.</p></li><li><p>Детали всех аспектов согласования механизма, обеспечиваемых протоколом (см. параграф 3.2). Протоколу следует задавать средства, с помощью которых клиент может (как до начала обмена SASL, так и после установки уровня защиты в результате обмена) имена механизмов SASL, которые сервер делает доступными для клиента. Это важно для обеспечения клиенту возможности детектирования атак, направленных на снижение уровня защиты. Такие средства обычно обеспечиваются с помощью функций детектирования расширений протокола и согласования возможностей.</p></li><li><p>Определения сообщений, требуемых при аутентификационном обмене, включая следующие:</p><ul class="lat"><li><p>сообщения для запроса аутентификационного обмена (см. параграф 3.3).</p><p>Такие сообщения должны содержать поле для передачи имени механизма, выбранного клиентом.</p><p>В такие сообщения следует включать необязательное поле для передачи начального отклика. Если сообщение определено с таким полем, спецификация должна описывать как сообщения с пустым начальным откликом отличаются от сообщений без такого отклика. Это поле должно обеспечивать возможность передачи произвольной последовательности октетов (включая последовательности нулевой длины и последовательности с нулевыми октетами).</p></li><li><p>Сообщения для передачи запросов (challenge) сервера и откликов (response) клиента (см. параграф 3.4).</p><p>Каждое из таких сообщений должно обеспечивать возможность передачи произвольных последовательностей октетов (включая последовательности нулевой длины и последовательности с нулевыми октетами).</p></li><li><p>Сообщение для индикации результата аутентификационного обмена (см. параграф 3.6).</p><p>В такие сообщения следует включать необязательное поле для передачи дополнительных данных при успешном завершении обмена. Если для сообщения определено такое поле, спецификация должна описывать способ различить сообщения с пустым полем дополнительной информации от сообщений без такого поля. Поде должно обеспечивать возможность передачи произвольной последовательности октетов (включая последовательности нулевой длины и последовательности с нулевыми октетами).</p></li></ul></li><li><p>Описание синтаксиса и семантики непустых строк идентификации при проверке полномочий (см. параграф 3.4.1).</p><p>Чтобы избавиться от проблем интероперабельности в результате использования разной нормализации, спецификация протокола должна точно описывать как и где (клиент или сервер) готовятся непустые строки идентификации при проверке полномочий, включая любую нормализацию, для операций сравнения и других функций, обеспечивающих корректную работу.</p><p>Рекомендуется включать в спецификацию описание применения существующих форм идентификации при проверке полномочий, а также существующих вариантов представления строк таких, как обычные имена пользователей [RFC4013].</p><p>Когда спецификация не описывает точно как идентификация в SASL связана с идентификацией, используемой другими компонентами протокола (например, в правилах контроля доступа), для протокола может оказаться полезным поддержка для клиентов механизма обнаружения информации (например, представление идентификации, используемой при решении вопроса о предоставлении доступа) об имеющихся способах идентификации для таких целей.</p></li><li><p>Детали всех способов, которые позволяют клиенту и/или серверу прервать аутентификационный обмен (см. параграф 3.5).</p><p>Протоколы, поддерживающие множественную аутентификацию, обычно позволяют клиенту прервать происходящий аутентификационный обмен путем инициирования нового обмена. Протоколы, которые не поддерживают множественную аутентификацию, могут требовать от клиента закрывать соединение и открывать новое для прерывания происходящего аутентификационного обмена.</p><p>Протоколы обычно позволяют серверу прерывать происходящий аутентификационный обмен путем возврата сообщения о неудачной аутентификации.</p></li><li><p>Точного указания момента, с которого начинает использоваться вновь согласованный уровень защиты для обоих направлений (см. параграф 3.7).</p><p>Обычно спецификации требуют начинать использование уровня защиты, начиная с первого октета, передаваемого после результата аутентификации, для сообщений от сервера и первого октета, передаваемого после приема сообщения о результате аутентификации, для клиента.</p></li><li><p>Если протокол поддерживает другие службы обеспечения уровня защиты (такие, как TLS [RFC4346], спецификация должна описывать, как эти уровни применяются к данным протокола.</p><p>Например, когда протокол поддерживает уровни защиты TLS и SASL, спецификация может указать любой из перечисленных ниже вариантов:</p><ul class="lat"><li><p>уровень защиты SASL всегда применяется первым для передаваемых данных и последним для принимаемых;</p></li><li><p>уровень защиты SASL всегда применяется последним для передаваемых данных и первым для принимаемых;</p></li><li><p>уровни защиты применяются в порядке их установки;</p></li><li><p>уровни защиты применяются в порядке, обратном порядку их установки;</p></li><li><p>оба уровня TLS и SASL не могут быть установлены.</p></li></ul></li><li><p>Индикация поддержки множественной аутентификации (см. параграф 3.8). Если такая аутентификация поддерживается, должно быть детально описано поведение при отказе от аутентификации SASL для тех случаев, когда предыдущая аутентификация была завершена успешно.</p></li></ol><p>В спецификации протокола следует избегать требований к реализации, препятствующих замене применимых механизмов. В общем случае спецификации протокола следует быть нейтральной по отношению к механизмам. Однако из этого правила существует множество исключений, в том числе перечисленные ниже:</p><ul class="dot"><li>детализация того, как в в протоколе происходит управление свидетельствами (которые связаны с механизмами);</li><li>детализация того, как аутентификационная идентификация (определяется механизмом) и идентификация при проверке полномочий (определяется протоколом) связаны одна с другой;</li><li>детализация применимости механизмов для данного протокола.</li></ul><h2 id="p5">5. Требования к механизмам</h2><p>Спецификации механизмов SASL должны обеспечивать следующую информацию:</p><ol><li><p>Имя механизма (см. параграф 3.1). Это имя должно быть зарегистрировано, как описано в параграфе 7.1.</p></li><li><p>Определение запросов сервера (server-challenge) и откликов клиента (client-response) в процессе аутентификационного обмена, а также:</p><ul class="lat"><li><p>Индикацию того, начинает работу механизма клиент (client-first), сервер (server-first) или это может изменяться (variable). Если механизм SASL определен, как client-first, а клиент не передает начального отклика в запросе на аутентификацию, первый запрос (challenge) сервера должен быть пустым (механизм EXTERNAL является примером такого случая). Если механизм SASL определен, как variable, спецификация должна указывать поведение сервера для тех случаев, когда начальный отклик в клиентском запросе на аутентификацию опущен (механизм DIGEST-MD5 [DIGEST-MD5] является примером для этого случая). Если механизм SASL определен, как server-first, для клиента недопустимо передавать начальный отклик в запросе на аутентификацию (примером для этого случая может служить механизм CRAM-MD5 [CRAM-MD5]).</p></li><li><p>Индикация того, предполагается ли со стороны сервера предоставление дополнительных данных, показывающих успех при аутентификации. Если такие данные ожидаются и сервер шлет их как запрос (challenge), спецификация должна показывать, что в ответ на такой запрос передается пустой отклик. При разработке механизмов SASL следует минимизировать число запросов и откликов, требуемых для выполнения аутентификационного обмена.</p></li></ul><p>При разработке механизмов SASL следует минимизировать число запросов и откликов, требуемых для выполнения аутентификационного обмена.</p></li><li><p>Идентификация возможности поддержки механизмом передачи строк идентификации при проверке полномочий (см. параграф 3.4.1). Хотя некоторые унаследованные механизмы не способны передавать строки authorization identity (это означает, что для данного механизма authorization identity во всех случаях является пустой строкой), новым механизмам следует поддерживать передачу строк идентификации при проверке полномочий. Механизмам не следует поддерживать одновременно передачу отсутствия строк authorization identity и передачу пустых строк идентификации при проверке полномочий.</p><p>Механизмы, способные передавать строки authorization identity, должны поддерживать возможность передачи произвольных непустых последовательностей символов Unicode, включая строки с символами NUL (U+0000). Механизмам следует использовать формат преобразования UTF-8 [RFC3629]. В спецификации должно быть указано, каким образом включаются в строки идентификации все последовательности символов, имеющие специальное значение для данного механизма, во избежание неоднозначности при декодировании строк authorization identity. Обычно механизмы, использующие специальные символы, требуют для таких символов добавки специального escape-символа или представления таких символов в виде последовательности (после преобразования в заданный формат Unicode) с использованием схем кодирования данных типа Base64 [RFC3548].</p></li><li><p>Спецификация должна указывать, предлагает ли механизм уровень защиты. Если механизм предлагает такой уровень, спецификация должна детально описывать защиту и другие услуги, обеспечиваемые этим уровнем, а также способы реализации сервиса.</p></li><li><p>Если используемая механизмом криптографическая технология поддерживает защиту целостности данных, спецификация механизма должна защищать целостность при передаче строк authorization identity и согласовании уровня защиты.</p></li></ol><p>Механизмам SASL следует быть нейтральными по отношению к протоколам.</p><p>Механизмам SASL следует использовать существующие формы свидетельств (credential) и идентификации (identity), а также связанный с ними синтаксис и семантику.</p><p>Механизмам SASL следует использовать формат преобразования UTF-8 [RFC3629] для представления передаваемых кодов (code point) Unicode [Unicode].</p><p>Во избежание проблем интероперабельности в результате различной нормализации, когда механизм вызывается для символьных данных (отличных от строк authorization identity), которые будут использоваться в качестве входной информации для криптографических функций и/или функций сравнения, спецификация должна подробно описывать когда и где готовятся символьные данные (включая любую нормализацию) для передачи их функциям, чтобы обеспечить корректную работу.</p><p>Для простых имен пользователей и паролей в аутентификационных свидетельствах в качестве алгоритма подготовки следует указывать SASLprep [RFC4013] (профиль алгоритма подготовки StringPrep [RFC3454]).</p><p>Механизмам не следует использовать строки authorization identity при генерации каких-либо долгоживущих криптографических ключей или хэш-значений, поскольку не существует требования, по которому строки authorization identity должны быть каноническими. Долгосрочный в данном случае означает существование в течение срока, превышающего продолжительность аутентификационного обмена. Т. е., поскольку разные клиенты (одного или различных протоколов) могут предоставлять различные строки authorization identity, которые семантически будут эквивалентны, использование таких строк для генерации криптографических ключей и хэш-значений может приводить к проблемам интероперабельности и иным сложностям.</p><h2 id="p6">6. Вопросы безопасности</h2><p>Вопросы безопасности обсуждаются на протяжении всего документа.</p><p>Многие из существующих механизмов SASL не обеспечивают адекватной защиты от пассивных атак, блокируя лишь активные атаки в процессе аутентификационного обмена. Многие из существующих механизмов SASL не поддерживают уровня защиты. Есть надежда, что новые механизмы SASL будут обеспечивать сильную защиту от пассивных атак, активных атак в процессе аутентификационного обмена, а также защитные уровни с сильными базовыми средствами защиты данных (например, защита целостности и конфиденциальности). Есть надежда и на то, что будущие механизмы обеспечат более эффективные средства защиты типа регенерации ключей (см. параграф 6.3).</p><p>Кроме того, схема SASL чувствительна к атакам, направленным на снижение уровня защиты (downgrade attack). В параграфе 6.1.2 рассматриваются различные способы детектирования и предотвращения таких атак. В некоторых случаях можно воспользоваться внешними по отношению к SASL средствами защиты целостности данных (например, TLS) для защиты от атак, направленных на снижение уровня защиты в SASL. Применение внешних средств защиты важно также для тех случаев, когда доступные механизмы сами по себе не обеспечивают адекватной защиты целостности и/или конфиденциальности аутентификационного обмена и/или данных протокола.</p><h3 id="p6.1">6.1. Активные атаки</h3><h4 id="p6.1.1">6.1.1. Перехват</h4><p>Когда клиент выбирает уровень защиты SASL, обеспечивающий по крайней мере защиту целостности, такая защита работает как средство против активных атак с перехватом соединений и модификацией данных протокола, передаваемых после организации защитного уровня. Реализациям следует разрывать соединение, когда службы уровня защиты SASL сообщают о потере целостности данных.</p><h4 id="p6.1.2">6.1.2. Атаки, направленные на снижение уровня защиты</h4><p>Важно, чтобы все чувствительные к защите согласования протокола выполнялись после организации уровня защиты с обеспечением целостности данных. Протоколы следует разрабатывать так, чтобы согласование, выполненное до установки защитного уровня, можно было проверить после организации этого уровня. Согласование механизмов SASL относится к числу таких согласований.</p><p>Когда клиент согласует с сервером механизм аутентификации и/или другие функции защиты, активный атакующий может вынудить к выбору наименее защищенного варианта сервиса из числа возможных. Например, атакующий может подменить список анонсируемых сервером механизмов или список поддерживаемых клиентом функций в отклике с выбором механизма. Для защиты от этого типа атак реализациям не следует анонсировать механизмы и/или функции, которые не соответствуют минимальным требованиям безопасности, а также не следует начинать или продолжать аутентификационный обмен, который не удовлетворяет минимальным требованиям безопасности. Кроме того, следует проверять, что результат аутентификационного обмена в части защиты соответствует требованиям безопасности.</p><p class="note">Отметим, что каждая из конечных точек должна независимо проверять выполнение требований безопасности.</p><p>Для детектирования атак, направленных на снижение уровня защиты до минимального из числа поддерживаемых (или ниже), клиент может определить поддерживаемые сервером механизмы SASL до аутентификационного обмена и после установки согласованного уровня защиты SASL (обеспечивающего по крайней мере целостность данных) с помощью механизма определения возможностей, предоставляемого протоколом. Если клиент видит, что полученный с обеспечением целостности список (полученный после создания защитного уровня), предлагает более сильный механизм, нежели содержатся в полученном ранее списке, клиенту разумно предположить, что первый список был изменен атакующим и следует закрыть нижележащее соединение транспортного уровня.</p><p>Инициированный клиентом обмен SASL, включающий выбор механизма SASL, происходит в открытой форме и может быть изменен активным атакующим. При разработке новых механизмов SASL важно обеспечить предотвращение вынужденного атакующим выбора наименее надежного варианта защиты путем простого изменения имени механизма SASL и/или запросов и откликов.</p><p>Многоуровневое согласование функций защиты более открыто для атак, направленных на снижение уровня. Разработчикам протоколов следует избегать в протоколах предложения использовать согласование функций защиты на верхних уровнях (например, «поверх» согласования механизма SASL), а разработчикам механизмов следует избегать низкоуровневого согласования защитных функций в своих механизмах (например, ниже согласования механизма SASL).</p><h4 id="p6.1.3">6.1.3. Атаки с воспроизведением данных</h4><p>Некоторые механизмы могут быть подвержены воздействию атак на основе воспроизведения ранее собранных данных (replay attack), если не используются внешние механизмы защиты данных (например, TLS).</p><h4 id="p6.1.4">6.1.4. Атаки с отсечением</h4><p>Многие из существующих механизмов SASL сами по себе не обеспечивают защиты от атак с отсечением. В таких атаках активный атакующий вынуждает закрыть протокольную сессию, что ведет к блокированию возможности использования потоков данных с защитой целостности в результате чего поведение одной или обеих сторон соединения может давать атакующему недопустимые преимущества. От атак этого типа достаточно просто защитить ориентированные на соединения протоколы прикладного уровня. Протокол может защитить себя от таких атак, обеспечивая для каждого информационного обмена явную проверку результата, проверяя корректность закрытия каждой протокольной сессии и применения защиты целостности.</p><h4 id="p6.1.5">6.1.5. Другие активные атаки</h4><p>При использовании уровня защиты согласованного в процессе аутентификационного обмена, получателю следует быть очень аккуратным с буферами защищенных данных размером больше заданного или согласованного максимума. В частности, недопустимо выделять, не глядя, количество памяти, указанное в поле размера буфера, поскольку это может привести к нехватке памяти (out of memory). При обнаружении большого блока получателю следует закрыть соединение.</p><h3 id="p6.2">6.2. Пассивные атаки</h3><p>Многие механизмы могут быть объектами различных пассивных атак, включая простое подслушивание незащищенной информации, используемой при аутентификации (credential information), а также объектами атак с использованием словарей по отношению к защищенным данным, используемым при аутентификации.</p><h3 id="p6.3">6.3. Замена ключей</h3><p>Безопасные или административно разрешенные значения времени жизни уровней защиты в механизмах SASL конечны. Эффективность криптографических ключей снижается с течением времени при их использовании — наличие времени и/или зашифрованного текста, который криптоаналитик получает при первом использовании ключа упрощает анализ и организацию атак.</p><p>Административные ограничения на продолжительность существования защитного уровня могут задаваться в форме сертификатов X.509, ярлыков Kerberos V или каталогов. Такие ограничения часто весьма желательны. На практике же очевидным результатом административного ограничения срока жизни является то, что приложение может столкнуться с прекращением работы уровня защиты во время операции прикладного уровня (например, при передаче большого объема данных). В результате соединение будет закрыто (см. параграф 3.7), что приведет к негативной реакции пользователей.</p><p>Замена ключей (Re-keying — процесс повторного согласования ключей) является способом решения проблемы. Схема SASL сама по себе не обеспечивает замены ключей, но это могут делать механизмы SASL. Разработчикам новых механизмов SASL следует обратить внимание на вопрос замены ключей.</p><p>Реализациям, которые пожелают регенерировать ключи уровня защиты SASL в тех случаях, когда механизм не обеспечивает замены ключа, следует заново аутентифицировать те же идентификаторы и заменить уровень защиты, срок работы которого истек или близок к завершению. Этот вариант требует поддержки повторной аутентификации в протоколах прикладного уровня (см. параграф 3.8).</p><h3 id="p6.4">6.4. Прочие вопросы</h3><p>При разработке и реализации протоколов следует обращать внимание на вопросы безопасности механизмов, чтобы выбирать механизмы, соответствующие требованиям задачи.</p><p>При реализации распределенных серверов нужно аккуратно отнестись к вопросу доверия другим компонентам сервера. В частности, аутентификационные данные (secret) следует открывать только тем компонентам сервера, которым разрешено управлять этими данными и использовать их тем способом, который приемлем для открывающей стороны. Приложения, использующие SASL, предполагают, что уровни защиты SASL обеспечивают конфиденциальность данных и защиту даже в тех случаях, когда атакующий выбирает текст, который будет защищен этим уровнем. Приложения также полагают, что уровень защиты SASL безопасен даже в тех случаях, когда атакующий может манипулировать результатами шифрования на защитном уровне. Предполагается, что новые механизмы SASL соответствуют этим предположения.</p><p>Вопросы безопасности Unicode [UTR36] имеют отношение к строкам authorization identity, а при использовании UTF-8 становятся актуальными и вопросы безопасности UTF-8 [RFC3629]. Следует принимать во внимание и вопросы безопасности SASLprep [RFC4013] и StringPrep [RFC3454] в тех случаях, когда эти алгоритмы применяются.</p><h2 id="p7">7. Согласование с IANA</h2><h3 id="p7.1">7.1. Реестр механизмов SASL</h3><p>Реестр механизмов SASL поддерживается агентством IANA. В настоящее время реестр доступен по адресу http://www.iana.org/assignments/sasl-mechanisms.</p><p>Задачей этого реестра является не только обеспечение уникальности значений, используемых для именования механизмов SASL, но и предоставление ссылок на технические спецификации, определяющие каждый механизм SASL и доступные через Internet.</p><p>Для механизмов SASL не существует соглашений по именованию и любое имя, соответствующее синтаксису имен механизмов SASL, может быть зарегистрировано.</p><p>Для регистрации имени отдельного механизма используется процедура, описанная в параграфе 7.1.1.</p><p>Для регистрации семейства имен связанных между собой механизмов используется процедура, описанная в параграфе 7.1.2.</p><p>Вопросы включения комментариев в реестр рассмотрены в параграфе 7.1.3, а вопросы изменения имеющихся комментариев — в параграфе 7.1.4.</p><p>Реестр механизмов SASL был обновлен с внесением данного документа как технической спецификации SASL и указанием данного параграфа в качестве описания процедур регистрации в реестре механизмов.</p><h4 id="p7.1.1">7.1.1. Процедура регистрации имен механизмов</h4><p>IANA будет регистрировать новые имена механизмов SASL в порядке подачи заявок (процедура First Come First Served), как описано в BCP 26 [RFC2434]. IANA имеет право отвергать явно фиктивные запросы на регистрацию, но не будет рассматривать заявления прав, сделанные в регистрационной форме.</p><p>Регистрация имен механизмов SASL осуществляется путем заполнения приведенной ниже формы</p><ul><li>Тема: регистрация механизма SASL с именем X</li><li>Имя механизма SASL (или префикс для семейства имен):</li><li>Вопросы безопасности:</li><li>Опубликованная спецификация (рекомендуется):</li><li>Контактное лицо и адрес электронной почты для обмена информацией:</li><li>Предполагаемое использование: (Один из вариантов COMMON, LIMITED USE, OBSOLETE)</li><li>Владелец/контролер изменений:</li><li>Примечания: (Здесь может быть добавлена любая информация, которую автор сочтет нужной).</li></ul><p>и ее отправки по электронной почте в IANA по адресу iana@iana.org.</p><p>Хотя эта процедура не требует экспертного обзора, авторам механизмов SASL настоятельно рекомендуется получить отклики и комментарии сетевого сообщества в тех случаях, когда это возможно. Авторы могут получить отклики сетевого сообщества, опубликовав спецификацию предлагаемого механизма в качестве Internet-Draft. Механизмы SASL, рассчитанные на общее применение, следует стандартизировать с использованием нормального процесса IETF в тех случаях, когда это возможно.</p><h4 id="p7.1.2">7.1.2. Процедура регистрации имен семейств</h4><p>Как было отмечено выше, для механизмов SASL не существует общего соглашения об именовании. Однако спецификация может резервировать часть пространства имен механизмов SASL для набора связанных между собой механизмов SASL (семейства механизмов SASL). Каждое семейство механизмов SASL обозначается уникальным префиксом типа X-. регистрация нового семейства имен механизмов SASL требует экспертного обзора в соответствии с BCP 26 [RFC2434].</p><p>Регистрация имен семейств механизмов SASL осуществляется путем заполнения приведенной ниже формы</p><ul><li>Тема: регистрация семейства механизмов SASL с именем X</li><li>Имя семейства SASL (или префикс для семейства имен):</li><li>Вопросы безопасности:</li><li>Опубликованная спецификация (рекомендуется):</li><li>Контактное лицо и адрес электронной почты для обмена информацией:</li><li>Предполагаемое использование: (Один из вариантов COMMON, LIMITED USE, OBSOLETE)</li><li>Владелец/контролер изменений:</li><li>Примечания: (Здесь может быть добавлена любая информация, которую автор сочтет нужной).</li></ul><p>И ее отправки по электронной почте в конференцию IETF SASL по адресу ietf-sasl@imc.org с копией по адресу iana@iana.org.</p><p>После двухнедельного рассмотрения комментариев сетевого сообщества в почтовой конференции IETF SASL эксперт будет решать вопрос о возможности регистрации имени семейства и одобрять или отвергать запрос, уведомляя об этом запрашивающую сторону и IANA, а также помещая соответствующее сообщение в список рассылки.</p><p>Обозревателю следует обратить внимание на применимость запрошенного имени семейства с учетом предполагаемого использования и планами регистрации для имеющихся и будущих имен механизмов данного семейства. При решении вопроса эксперт может принимать во внимание имеющие отношение к делу аспекты любой представленной технической спецификации (такой, как раздел IANA Considerations). Однако этот обзор сфокусирован на уместности запрошенной регистрации и не связан деталями технической спецификации.</p><p>Авторам настоятельно рекомендуется получить отзывы и комментарии сетевого сообщества, опубликовав технические спецификации как Internet-Draft и поместив их в подходящие почтовые конференции IETF.</p><h4 id="p7.1.3">7.1.3. Комментарии к регистрации механизмов SASL</h4><p>Комментарии к зарегистрированным механизмам и семействам SASL следует сначала направить «владельцу» имени или семейства и/или в почтовую конференцию по адресу ietf-sasl@imc.org.</p><p>Автор комментариев может после разумного числа попыток контакта с владельцем запросить в IANA включение своих комментариев в регистрацию этого механизма SASL, направив письмо по адресу iana@iana.org. По своему разумению IANA может включить комментарии в регистрацию механизма SASL.</p><h4 id="p7.1.4">7.1.4. Контроль изменений</h4><p>После того, как регистрация механизма SASL опубликована IANA, автор может запросить изменение зарегистрированного определения. Запрос на изменение осуществляется в соответствии с такой же процедурой, как использовалась при регистрации.</p><p>Владелец механизма SASL может передать ответственность за этот механизм другому лицу или организации, уведомив об этом IANA; такая передача не требует обсуждения или обзора.</p><p>IESG может сменить ответственного за механизм SASL. Чаще всего это делается в тех случаях, когда требуется внести изменения в механизм, автор которого умер или по каким-либо причинам недоступен или не может внести изменения, требуемые для сетевого сообщества.</p><p>Регистрация механизмов SASL не может быть отменена; механизмы, которые перестали быть приемлемыми для использования, помечаются как OBSOLETE в поле "intended usage"; такие механизмы SASL явно маркируются в списках, публикуемых IANA.</p><p>IESG рассматривается как владелец механизмов SASL, имеющих статус IETF.</p><h3 id="p7.2">7.2. Изменение регистрации</h3><p>Агентство IANA внесло в реестр механизмов SASL следующие изменения:</p><ol><li><p>Изменено поле "Intended usage" для механизмов KERBEROS_V4 и SKEY на OBSOLETE.</p></li><li><p>Изменено поле "Published specification" для механизма EXTERNAL с указанием данной спецификации, как показано ниже:</p><ul><li>Subject: Updated Registration of SASL mechanism EXTERNAL</li><li>Family of SASL mechanisms: NO</li><li>SASL mechanism name: EXTERNAL</li><li>Security considerations: See A.3 of RFC 4422</li><li>Published specification (optional, recommended): RFC 4422</li><li>Person & email address to contact for further information:</li><li>Alexey Melnikov &lt;Alexey.Melnikov@isode.com&gt;</li><li>Intended usage: COMMON</li><li>Owner/Change controller: IESG &lt;iesg@ietf.org&gt;</li><li>Note: Updates existing entry for EXTERNAL</li></ul></li></ol><h2 id="p8">8. Литература</h2><h3 id="p8.1">8.1. Нормативные документы</h3><table itemprop="references"><tr><td>[RFC2119]</td><td>Bradner, S., «Key words for use in RFCs to Indicate Requirement Levels», BCP 14, RFC 2119, Март 1997.</td></tr><tr><td>[RFC2244]</td><td>Newman, C. и J. G. Myers, «ACAP — Application Configuration Access Protocol», RFC 2244, Ноябрь 1997.</td></tr><tr><td>[RFC2434]</td><td>Narten, T. и H. Alvestrand, «Guidelines for Writing an IANA Considerations Section in RFCs», BCP 26, RFC 2434, October 1998.</td></tr><tr><td>[RFC2743]</td><td>Linn, J., «Generic Security Service Application Program Interface Version 2, Update 1», RFC 2743, Январь 2000.</td></tr><tr><td>[RFC3454]</td><td>Hoffman, P. и M. Blanchet, «Preparation of Internationalized Strings ("stringprep")», RFC 3454, Декабрь 2002.</td></tr><tr><td>[RFC3629]</td><td>Yergeau, F., «UTF-8, a transformation format of ISO 10646», STD 63, RFC 3629, Ноябрь 2003.</td></tr><tr><td>[RFC4013]</td><td>Zeilenga, K., «SASLprep: Stringprep Profile for User Names and Passwords», RFC 4013, Февраль 2005.</td></tr><tr><td>[RFC4234]</td><td>Crocker, D. и P. Overell, «Augmented BNF for Syntax Specifications: ABNF», RFC 4234, Октябрь 2005.</td></tr><tr><td>[ASCII]</td><td>Coded Character Set--7-bit American Standard Code for Information Interchange, ANSI X3.4-1986.</td></tr><tr><td>[Unicode]</td><td>The Unicode Consortium, «The Unicode Standard, Version 3.2.0» is defined by «The Unicode Standard, Version 3.0» (Reading, MA, Addison-Wesley, 2000. ISBN 0-201-61633-5), as amended by the «Unicode Standard Annex #27: Unicode 3.1» and by the «Unicode Standard Annex #28: Unicode 3.2».</td></tr><tr><td>[CharModel]</td><td>Whistler, K. и M. Davis, «Unicode Technical Report #17, Character Encoding Model», UTR17, Август 2000</td></tr><tr><td>[Glossary]</td><td>The Unicode Consortium, «Unicode Glossary», http://www.unicode.org/glossary/.</td></tr></table><h3 id="p8.2">8.2. Дополнительная литература</h3><table itemprop="references"><tr><td>[RFC3206]</td><td>Gellens, R., «The SYS and AUTH POP Response Codes», RFC 3206, Февраль 2002.</td></tr><tr><td>[RFC3548]</td><td>Josefsson, S., «The Base16, Base32, and Base64 Data Encodings», RFC 3548, Июль 2003.</td></tr><tr><td>[RFC4301]</td><td>Kent, S. и K. Seo, «Security Architecture for the Internet Protocol», RFC 4301, Декабрь 2005.</td></tr><tr><td>[RFC4346]</td><td>Dierks, T. и E. Rescorla, «The Transport Layer Security (TLS) Protocol Version 1.1», RFC 4346, Апрель 2006.</td></tr><tr><td>[SASL-GSSAPI]</td><td>Melnikov, A. (Editor), «The Kerberos V5 ("GSSAPI") SASL Mechanism», Work in Progress, Май 2006.</td></tr><tr><td>[UTR36]</td><td>Davis, M., «(Draft) Unicode Technical Report #36, Character Encoding Model», UTR17, Февраль 2005</td></tr><tr><td>[CRAM-MD5]</td><td>Nerenberg, L., «The CRAM-MD5 SASL Mechanism», Work in Progress.</td></tr><tr><td>[DIGEST-MD5]</td><td>Leach, P., C. Newman, and A. Melnikov, «Using Digest Authentication as a SASL Mechanism», Work in Progress, Март 2006.</td></tr></table><h2 id="p9">9. Благодарности</h2><p>Этот документ является пересмотром RFC 2222, автором которого является John Myers.</p><p>Документ является результатом работы группы IETF Simple Authentication and Security Layer (SASL).</p><p>Перечисленные здесь люди внесли значительный вклад в подготовку документа: Abhijit Menon-Sen, Hallvard Furuseth, Jeffrey Hutzelman, John Myers, Luke Howard, Magnus Nystrom, Nicolas Williams, Peter Saint-Andre, RL 'Bob' Morgan, Rob Siemborski, Sam Hartman, Simon Josefsson, Tim Alsop, Tony Hansen.</p><h2 id="p.appendix.a">Приложение A. Механизм SASL EXTERNAL</h2><p>Данное приложение является нормативным.</p><p>Механизм EXTERNAL позволяет клиенту запросить у сервера использования свидетельств (credentials), созданных с использованием внешних по отношению к механизму средств, для аутентификации клиента. Внешними средствами могут быть, например, службы IP Security [RFC4301] или TLS [RFC4346]. В отсутствие некой предварительной договоренности между клиентом и сервером клиент не может делать каких-либо предположений об использовании сервером внешних средств для получения клиентских свидетельств или о форме этих свидетельств. Например, клиент не может предполагать, что сервер будет использовать свидетельства, созданные клиентом с помощью TLS.</p><h3 id="p.appendix.a1">A.1. Техническая спецификация механизма EXTERNAL</h3><p>Название механизма — "EXTERNAL".</p><p>Механизм не обеспечивает защитного уровня.</p><p>Механизм может передавать строки authorization identity. Пустая строка означает, что клиент запрашивает у сервера использование для него идентификации, которую сервер связывает с клиентскими свидетельствами. Непустая строка говорит о том, что клиент запрашивает идентификацию с использованием этой строки.</p><p>Предполагается, что клиент первым передает данные в процессе аутентификационного обмена. Когда клиент не включает начальный отклик в запрос на организацию аутентификационного обмена, сервер принимает на ответственность за передачу сообщения с пустым начальным запросом (challenge), на который клиент будет давать начальный отклик.</p><p>Клиент передает начальный отклик, содержащий строку идентификации для проверки полномочий в кодировке UTF-8 [RFC3629]. Этот отклик будет непустым, когда клиент запрашивает у сервера аутентификацию с использованием представленной (непустой) строки. Пустой отклик будет передаваться в тех случаях, когда клиент запрашивает у сервера аутентификацию с использованием аутентификационных свидетельств (authentication credentials).</p><p>Синтаксис начального отклика задается как значение &lt;extern-initial-resp&gt; описанное ниже в формате ABNF [RFC4234].</p><pre>external-initial-resp = authz-id-string
authz-id-string       = *( UTF8-char-no-nul )
UTF8-char-no-nul      = UTF8-1-no-nul / UTF8-2 / UTF8-3 / UTF8-4
UTF8-1-no-nul         = %x01-7F</pre><p>Механизм не использует дополнительных запросов (challenge) и откликов.</p><p>Следовательно, сервер возвращает результат аутентификационного обмена.</p><p>Обмен завершается отказом в следующих случаях:</p><ul class="dot"><li>клиент не создал свидетельств с использованием внешних средств;</li><li>клиент использует неподходящие свидетельства;</li><li>клиент передал пустую строку authorization identity, а сервер не желает или не может связать аутентификационную идентификацию с клиентскими свидетельствами;</li><li>клиент представил непустую строку authorization identity, которая некорректна с точки зрения синтаксических требований, предъявляемых спецификацией прикладного протокола;</li><li>клиент представил непустую строку authorization identity, представляющую идентификацию, которая не разрешена для клиента;</li><li>сервер не желает или не может обслужить клиента по той или иной причине.</li></ul><p>В остальных случаях аутентификационный обмен завершается успешно. При индикации успешного завершения дополнительных данных не передается.</p><h3 id="p.appendix.a2">A.2. Примеры SASL EXTERNAL</h3><p>В этом параграфе рассматриваются примеры аутентификационного обмена с использованием механизма EXTERNAL. Эти примеры рассчитаны на то, чтобы помочь читателям понять приведенный выше текст. Примеры не являются определяющими. В примерах используется протокол ACAP12 [RFC2244].</p><p>Первый пример показывает использование механизма EXTERNAL с пустой строкой authorization identity. В этом примере начальный отклик не включается в запрос клиента на организацию аутентификационного обмена.</p><pre>S: * ACAP (SASL "DIGEST-MD5")
C: a001 STARTTLS
S: a001 OK "Begin TLS negotiation now"
&lt;согласование TLS, остальные команды выполняются на уровне TLS&gt;
S: * ACAP (SASL "DIGEST-MD5" "EXTERNAL")
C: a002 AUTHENTICATE "EXTERNAL"
S: + ""
C: + ""
S: a002 OK "Authenticated"</pre><p>Второй пример показывает использование механизма EXTERNAL со строкой authorization identity "fred@example.com". В этом примере клиентский запрос на организацию аутентификационного обмена содержит начальный отклик, Такой подход экономит время на один период кругового обхода.</p><pre>S: * ACAP (SASL "DIGEST-MD5")
C: a001 STARTTLS
S: a001 OK "Begin TLS negotiation now"
&lt;согласование TLS, остальные команды выполняются на уровне TLS&gt;
S: * ACAP (SASL "DIGEST-MD5" "EXTERNAL")
C: a002 AUTHENTICATE "EXTERNAL" {16+}
C: fred@example.com
S: a002 NO "Cannot assume requested authorization identity"</pre><h3 id="p.appendix.a3">A.3. Вопросы безопасности</h3><p>Механизм EXTERNAL не обеспечивает защиты; он уязвим по отношению к подстановкам (spoofing) со стороны клиента или сервера, активным атакам и подслушиванию. Этот механизм следует использовать лишь в тех случаях, когда имеется надежная защита.</p><h2 id="p.appendix.b">Приложение B. Изменения по отношению к RFC 2222</h2><p>Это приложение не является нормативным.</p><p>Текст RFC 2222 при создании этого документа был в значительной степени переработан.</p><p>RFC 2222 не указывал, что текст строк authorization identity использует символы Unicode, позволяя лишь символьные данные, подразумевающие, что authorization identity представляет собой строку октетов.</p><ul class="dot"><li>Строки authorization identity сейчас определены как строки символов Unicode. Использование символа NUL (U+0000) не допускается. Хотя за определение формы строк authorization identity, синтаксис строк Unicode и связанную с ними семантику отвечает спецификация протокола, спецификация механизма несет ответственность за определение способа передачи строк Unicode в сеансе аутентификационного обмена.</li><li>Удалена фраза "If so, when the client does not send data first, the initial challenge MUST be specified as being an empty challenge.13"</li></ul><p>В механизм EXTERNAL были внесены следующие технические изменения:</p><ul class="dot"><li>Строки authorization identity используют кодировку UTF-8.</li></ul><p class="note">Отметим, что были существенно усилены требования к спецификациям протоколов и механизмов. Существующие протоколы и механизмы должны быть обновлены с учетом этих требования.</p><h2>Адреса редакторов</h2><p>Alexey Melnikov<br />Isode Limited<br />5 Castle Business Village<br />36 Station Road Hampton, Middlesex,<br />TW12 2BX, United Kingdom<br />EMail: <bdo dir="rtl">&#109;&#111;&#99;&#46;&#101;&#100;&#111;&#115;&#105;&#64;&#118;&#111;&#107;&#105;&#110;&#108;&#101;&#109;&#46;&#121;&#101;&#120;&#101;&#108;&#97;</bdo><br />URI: http://www.melnikov.ca/</p><p>Kurt D. Zeilenga<br />OpenLDAP Foundation<br />EMail: <bdo dir="rtl">&#103;&#114;&#111;&#46;&#112;&#97;&#100;&#108;&#110;&#101;&#112;&#111;&#64;&#116;&#114;&#117;&#107;</bdo></p></div></div><div id="disqus_thread"></div><script type="text/javascript">var disqus_shortname="rfc2",disqus_title="RFC 4422 - Простой уровень аутентификации и защиты (SASL)",disqus_identifier="4422.rfc",disqus_url="http://rfc2.ru/4422.rfc";(function(){var dsq=document.createElement("script");dsq.type="text/javascript";dsq.async=true;dsq.src = "//"+disqus_shortname+".disqus.com/embed.js";(document.getElementsByTagName("head")[0]||document.getElementsByTagName("body")[0]).appendChild(dsq);})();</script><div class="bubble">2007 - 2014 © <a href="../index.html" title="Русские переводы RFC">Русские переводы RFC</a>, IETF, ISOC.</div></div><div id="bottom" style="position:static !important;bottom:auto !important"><div class="bubble"><ul><li><!--723572853672--></li></ul></div></div><!-- Yandex.Metrika counter --><script type="text/javascript">(function (d, w, c) { (w[c] = w[c] || []).push(function() { try { w.yaCounter4680559 = new Ya.Metrika({id:4680559, webvisor:true, clickmap:true, accurateTrackBounce:true, trackHash:true, ut:"noindex"}); } catch(e) { } }); var n = d.getElementsByTagName("script")[0], s = d.createElement("script"), f = function () { n.parentNode.insertBefore(s, n); }; s.type = "text/javascript"; s.async = true; s.src = (d.location.protocol == "https:" ? "https:" : "http:") + "//mc.yandex.ru/metrika/watch.js"; if (w.opera == "[object Opera]") { d.addEventListener("DOMContentLoaded", f, false); } else { f(); } })(document, window, "yandex_metrika_callbacks");</script><noscript><div><img src="http://mc.yandex.ru/watch/4680559?ut=noindex" style="position:absolute; left:-9999px;" alt="" /></div></noscript><!-- /Yandex.Metrika counter --></body></html>