<!DOCTYPE html><html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><link rel="stylesheet" href="../tpl/style.css@f4e332aa" type="text/css" /><link rel="prev" href="19" /><link rel="next" href="21" /><link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css' /><style type="text/css">h1,h2,h3,h4{font-family:'Open Sans',sans-serif}</style><title>Перевод RFC 2246 — Протокол TLS 1.0, стр. 20</title><meta name="author" content="Christopher Allen, Tim Dierks" /><link rel="alternate" type="application/rss+xml" title="RFC2.ru - Русские Переводы RFC" href="../rss.xml"></head><body><div id="content"><div id="nav"><div class="icon i0"></div> <a href="../index.html" accesskey="`">На Главную</a></div><div id="search" class="ya-site-form ya-site-form_inited_no"><form action="http://yandex.ru/sitesearch" method="get" target="_blank"><input type="hidden" name="searchid" value="2154295"/><input type="hidden" name="l10n" value="ru"/><input type="hidden" name="reqenc" value=""/><input type="hidden" name="submit" value="Найти"/><input type="search" value="" name="text" placeholder="Поиск по RFC2.ru" /></form></div><div itemscope itemtype="http://schema.org/ScholarlyArticle"><meta itemprop="inLanguage" content="ru" /><meta itemprop="editor" content="ru" /><div id="header"><h1><a itemprop="headline" href="../2246.rfc">RFC 2246 — Протокол TLS 1.0</a></h1></div><dl class="mute"><dt></dt><dd><div class="icon i1"></div> RFC: 2246</dd><dd><div class="icon i3"></div> Оригинал: <a href="original" target="_blank" rel="nofollow"><span itemprop="alternativeHeadline">The TLS Protocol Version 1.0</span></a></dd><dd><div class="icon i7"></div> Другие версии: <strong class="obsoleted_by">RFC 4346</strong></dd><dd><div class="icon i2"></div> Категория: <span itemprop="articleSection">Предложенный стандарт</span></dd><dd><div class="icon i4"></div> Дата публикации: <time itemprop="datePublished" datetime="1999-01-02">Январь 1999</time></dd><dd><div class="icon i5"></div> Авторы: <span itemprop="author">Christopher Allen</span>, <span itemprop="author">Tim Dierks</span></dd><dd><div class="icon i6"></div> Перевод: <span itemprop="editor">Семенов Юрий Алексеевич</span></dd></dl><div class="pages"><p class="r"> <h2 class="pt"><span class="z">RFC 2246,</span> Страница 20 из 49</h2></p><ul><li><noindex><a href="print" rel="nofollow">Одной Страницей</a></noindex></li><li><a accesskey="1" title="Первая страница" href="../2246.rfc" class="arr">&lArr;</a></li><li><a accesskey="2" title="На страницу назад" href="19"><b>&larr;</b></a></li><li><a class="x" href="../2246.rfc">1</a></li><li><a class="x" href="2">2</a></li><li><a class="x" href="3">3</a></li><li><a class="x" href="4">4</a></li><li><a class="x" href="5">5</a></li><li><a class="x" href="6">6</a></li><li><a class="x" href="7">7</a></li><li><a class="x" href="8">8</a></li><li><a class="x" href="9">9</a></li><li><a class="x" href="10">10</a></li><li><a class="x" href="11">11</a></li><li><a class="x" href="12">12</a></li><li><a class="x" href="13">13</a></li><li><a class="x" href="14">14</a></li><li><a class="x" href="15">15</a></li><li><a href="16">16</a></li><li><a href="17">17</a></li><li><a href="18">18</a></li><li><a href="19">19</a></li><li class="this"><span>20</span></li><li><a href="21">21</a></li><li><a href="22">22</a></li><li><a href="23">23</a></li><li><a href="24">24</a></li><li><a class="x" href="25">25</a></li><li><a class="x" href="26">26</a></li><li><a class="x" href="27">27</a></li><li><a class="x" href="28">28</a></li><li><a class="x" href="29">29</a></li><li><a class="x" href="30">30</a></li><li><a class="x" href="31">31</a></li><li><a class="x" href="32">32</a></li><li><a class="x" href="33">33</a></li><li><a class="x" href="34">34</a></li><li><a class="x" href="35">35</a></li><li><a class="x" href="36">36</a></li><li><a class="x" href="37">37</a></li><li><a class="x" href="38">38</a></li><li><a class="x" href="39">39</a></li><li><a class="x" href="40">40</a></li><li><a class="x" href="41">41</a></li><li><a class="x" href="42">42</a></li><li><a class="x" href="43">43</a></li><li><a class="x" href="44">44</a></li><li><a class="x" href="45">45</a></li><li><a class="x" href="46">46</a></li><li><a class="x" href="47">47</a></li><li><a class="x" href="48">48</a></li><li><a class="x" href="49">49</a></li><li><a accesskey="3" title="На страницу вперед" href="21">&rarr;</a></li><li><a accesskey="4" title="Последняя страница" href="49">&rArr;</a></li></ul></div><div id="text" itemprop="articleBody"><h3>7.3. Обзор протокола диалога</h3><p>Криптографические параметры состояния сессии формируются протоколом диалога TLS, который работает поверх уровня записей TLS. Когда клиент и сервер TLS впервые начинают взаимодействие, они согласуют версию протокола, выбирают криптографические алгоритмы, опционно аутентифицируют друг друга и используют методику с общедоступным ключом для формирования общего секретного кода. Протокол диалога TLS включает в себя следующие шаги:</p><ul class="dot"><li><p>Обмен сообщениями hello, чтобы согласовать алгоритмы, обмен случайными кодами, и проверка перезапуска сессии.</p></li><li><p>Обмен необходимыми криптографическими параметрами, чтобы позволить клиенту и серверу согласовать предмастерные секретные коды.</p></li><li><p>Обмен сертификатами и криптографической информацией, чтобы позволить клиенту и серверу аутентифицировать друг друга.</p></li><li><p>Генерация мастерного секретного кода из предмастерного и обмен случайными кодами.</p></li><li><p>Предоставление параметров безопасности уровню записей.</p></li><li><p>Разрешение клиенту и серверу проверить, что их партнер вычислил те же самые параметры безопасности и что диалог прошел без вмешательства хакера.</p></li></ul><p>Заметим, что верхние слои не должны слишком полагаться на TLS, всегда согласуя самые безопасные из возможных соединений между партнерами: существует много способов, с помощью которых злоумышленник, включившийся в разрыв соединения, может попытаться заставить партнеров принять наименее безопасный метод связи из числа поддерживаемых ими. Протокол был устроен так, чтобы минимизировать этот риск, но, тем не менее, существуют некоторые возможности атак. Например, хакер может блокировать доступ к порту, через который обеспечивается безопасное обслуживание, или попытаться заставить партнеров установить не аутентифицированное соединение. Фундаментальным правилом является то, что верхние уровни должны знать, каковы требования безопасности и никогда не передавать данные по каналам, которые менее безопасны, чем это предписано этими требованиями. Протокол TLS является безопасным, здесь любой шифровой набор предлагает свой уровень безопасности. Если вы согласуете использование 3DES с 1024-битовым RSA-ключом при связи с ЭВМ, чей сертификат вы проверили, вы можете быть уверены в безопасности. Однако вы никогда не должны посылать данные по каналу, где используется 40-битовая шифрование, если только вы не уверены, что данные не стоят того, чтобы кто-то тратил силы на их дешифрование.</p><p>Эти цели достигаются протоколом диалога, который может быть суммирован следующим образом. Клиент посылает сообщение hello, на которое сервер должен также откликнуться сообщением hello, в противном случае возникает ситуация фатальной ошибки и соединение разрывается. Сообщения client hello и server hello используются для установления более безопасного взаимодействия клиента и сервера. Сообщения client hello server hello устанавливают следующие атрибуты: версия протокола, ID-сессии, шифровой набор и метод сжатия. Кроме того, партнеры генерируют и пересылают друг другу два случайных числа: ClientHello.random и ServerHello.random.</p><p>Реальный обмен ключами использует до четырех сообщений: сертификат сервера, ключевой обмен сервера, сертификат клиента и ключевой обмен клиента. Новые методы ключевого обмена могут быть созданы с помощью спецификации формата для этих сообщений, чтобы позволить клиенту и серверу согласовать использование общего секретного кода. Этот секретный код должен быть достаточно длинным. Современные методы ключевого обмена пересылают коды длиной от 48 до 128 байт.</p><p>Вслед за сообщениями hello, сервер, если он должен быть аутентифицирован, посылает свой сертификат. Кроме того, если необходимо, может быть послано сообщение ключевого обмена (например, если сервер не имеет сертификата, или если его сертификат служит только для подписи). Если сервер аутентифицирован, он может затребовать сертификат от клиента, если выбран соответствующий шифровой набор. После этого сервер пошлет сообщение hello done, указывающее, что фаза диалога hello завершена. Сервер ждет отклика клиента. Если сервер послал сообщение сертификатного запроса, клиент должен послать сообщение сертификата. Сообщение ключевого обмена клиента послано, и его содержимое зависит от алгоритма с общедоступным ключом, который выбрали клиент и сервер при обмене сообщениями hello.</p><p>В этой точке клиентом посылается сообщение об изменении спецификации шифра, и клиент копирует записанную шифровую спецификацию в текущую спецификацию. После этого клиент немедленно посылает сообщение finished для новых алгоритмов, ключей и секретных кодов. В качестве отклика сервер пошлет свое сообщение об изменении шифровой спецификации, перенесет записанную шифровую спецификацию в текущую, и пошлет свое сообщение finished с использованием новой шифровой спецификации. В этой точке диалог завершается, а клиент и сервер могут начать обмен прикладными данными (смотри блок-схему обмена ниже на рис.1).</p><pre>Client                                               Server

ClientHello                  --------&gt;
                                                ServerHello
                                               Certificate*
                                         ServerKeyExchange*
                                        CertificateRequest*
                             &lt;--------      ServerHelloDone
Certificate*
ClientKeyExchange
CertificateVerify*
[ChangeCipherSpec]
Finished                     --------&gt;
                                         [ChangeCipherSpec]
                             &lt;--------             Finished
Application Data             &lt;-------&gt;     Application Data

Рисунок 1: Обмен сообщениями в процессе диалога</pre><p>* отмечает опционные или зависящие от ситуации сообщения, которые посылаются не всегда.</p><p>Когда клиент и сервер решают возобновить предыдущую сессию или задублировать существующую сессию (вместо согласования новых параметров безопасности), следует обмен следующими сообщениями:</p><p>Клиент посылает ClientHello, используя ID-сессии, которая должна быть возобновлена. Сервер проверяет свой кэш сессий на соответствие. Если соответствие имеется, а сервер желает возобновить соединение со специфицированным состоянием сессии, он посылает ServerHello с тем же значением ID-сессии. В этой точке, как клиент, так и сервер должны послать сообщения об изменении шифровой спецификации, после чего перейти к завершающим сообщениям finished. Раз восстановление сессии завершилось, клиент и сервер могут начать обмен прикладными данными. Смотри диаграмму на рис.2. Если соответствия с ID-сессии не найдено, сервер генерирует новый ID сессии, а клиент TLS и сервер осуществляют полный диалог.</p><pre>Client                                                Server

ClientHello                   --------&gt;
                                                 ServerHello
                                          [ChangeCipherSpec]
                              &lt;--------             Finished
[ChangeCipherSpec]
Finished                      --------&gt;
Application Data              &lt;-------&gt;     Application Data

Рисунок 2: Обмен сообщениями для упрощенного диалога</pre></div></div><noindex><div class="pages"><p class="r"> <b>Страница 20 из 49</b></p><ul><li><noindex><a href="print" rel="nofollow">Одной Страницей</a></noindex></li><li><a title="Первая страница" href="../2246.rfc" class="arr">&lArr;</a></li><li><a title="На страницу назад" href="19"><b>&larr;</b></a></li><li><a class="x" href="../2246.rfc">1</a></li><li><a class="x" href="2">2</a></li><li><a class="x" href="3">3</a></li><li><a class="x" href="4">4</a></li><li><a class="x" href="5">5</a></li><li><a class="x" href="6">6</a></li><li><a class="x" href="7">7</a></li><li><a class="x" href="8">8</a></li><li><a class="x" href="9">9</a></li><li><a class="x" href="10">10</a></li><li><a class="x" href="11">11</a></li><li><a class="x" href="12">12</a></li><li><a class="x" href="13">13</a></li><li><a class="x" href="14">14</a></li><li><a class="x" href="15">15</a></li><li><a href="16">16</a></li><li><a href="17">17</a></li><li><a href="18">18</a></li><li><a href="19">19</a></li><li class="this"><span>20</span></li><li><a href="21">21</a></li><li><a href="22">22</a></li><li><a href="23">23</a></li><li><a href="24">24</a></li><li><a class="x" href="25">25</a></li><li><a class="x" href="26">26</a></li><li><a class="x" href="27">27</a></li><li><a class="x" href="28">28</a></li><li><a class="x" href="29">29</a></li><li><a class="x" href="30">30</a></li><li><a class="x" href="31">31</a></li><li><a class="x" href="32">32</a></li><li><a class="x" href="33">33</a></li><li><a class="x" href="34">34</a></li><li><a class="x" href="35">35</a></li><li><a class="x" href="36">36</a></li><li><a class="x" href="37">37</a></li><li><a class="x" href="38">38</a></li><li><a class="x" href="39">39</a></li><li><a class="x" href="40">40</a></li><li><a class="x" href="41">41</a></li><li><a class="x" href="42">42</a></li><li><a class="x" href="43">43</a></li><li><a class="x" href="44">44</a></li><li><a class="x" href="45">45</a></li><li><a class="x" href="46">46</a></li><li><a class="x" href="47">47</a></li><li><a class="x" href="48">48</a></li><li><a class="x" href="49">49</a></li><li><a title="На страницу вперед" href="21">&rarr;</a></li><li><a title="Последняя страница" href="49">&rArr;</a></li></ul></div></noindex><div id="disqus_thread"></div><script type="text/javascript">var disqus_shortname="rfc2",disqus_title="RFC 2246 - Протокол TLS 1.0",disqus_identifier="2246.rfc",disqus_url="http://rfc2.ru/2246.rfc";(function(){var dsq=document.createElement("script");dsq.type="text/javascript";dsq.async=true;dsq.src = "//"+disqus_shortname+".disqus.com/embed.js";(document.getElementsByTagName("head")[0]||document.getElementsByTagName("body")[0]).appendChild(dsq);})();</script><div class="bubble">2007 - 2014 © <a href="../index.html" title="Русские переводы RFC">Русские переводы RFC</a>, IETF, ISOC.</div></div><div id="bottom" style="position:static !important;bottom:auto !important"><div class="bubble"><ul><li><!--723572853672--></li></ul></div></div><!-- Yandex.Metrika counter --><script type="text/javascript">(function (d, w, c) { (w[c] = w[c] || []).push(function() { try { w.yaCounter4680559 = new Ya.Metrika({id:4680559, webvisor:true, clickmap:true, accurateTrackBounce:true, trackHash:true}); } catch(e) { } }); var n = d.getElementsByTagName("script")[0], s = d.createElement("script"), f = function () { n.parentNode.insertBefore(s, n); }; s.type = "text/javascript"; s.async = true; s.src = (d.location.protocol == "https:" ? "https:" : "http:") + "//mc.yandex.ru/metrika/watch.js"; if (w.opera == "[object Opera]") { d.addEventListener("DOMContentLoaded", f, false); } else { f(); } })(document, window, "yandex_metrika_callbacks");</script><noscript><div><img src="http://mc.yandex.ru/watch/4680559" style="position:absolute; left:-9999px;" alt="" /></div></noscript><!-- /Yandex.Metrika counter --></body></html>