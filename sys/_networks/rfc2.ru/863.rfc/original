<!DOCTYPE html><html><head><meta http-equiv="content-type" content="text/html; charset=windows-1251" /><title>RFC 863 - Discard Protocol</title><style>a{color:#08c;text-decoration:none}a:hover,a:active{outline:0}a:hover,a:focus{color:#005580;text-decoration:underline}div{background:#F4F6F7;border-bottom:1px #c8c8c8 solid;padding:6px;position:fixed;width:100%;top:0;left:0;font-size:14px;font-family:"Helvetica Neue",Helvetica,Arial,sans-serif}div:before{content:"\21B5";padding-right:5px}</style></head><body><div><a href="../863.rfc">Перевод RFC 863 - Протокол отбрасывания (Discard Protocol)</a> &nbsp;|&nbsp; <a href="../index.html">Русские переводы RFC</a></div>
<pre>


Network Working Group                                          J. Postel
Request for Comments: 863                                            ISI
                                                                May 1983



                            Discard Protocol




This RFC specifies a standard for the ARPA Internet community.  Hosts on
the ARPA Internet that choose to implement a Discard Protocol are
expected to adopt and implement this standard.

A useful debugging and measurement tool is a discard service.  A discard
service simply throws away any data it receives.

TCP Based Discard Service

   One discard service is defined as a connection based application on
   TCP.  A server listens for TCP connections on TCP port 9.  Once a
   connection is established any data received is thrown away.  No
   response is sent.  This continues until the calling user terminates
   the connection.

UDP Based Discard Service

   Another discard service is defined as a datagram based application on
   UDP.  A server listens for UDP datagrams on UDP port 9.  When a
   datagram is received, it is thrown away.  No response is sent.























Postel                                                          [Page 1]


</pre>
<!-- Yandex.Metrika counter --><script type="text/javascript">(function (d, w, c) { (w[c] = w[c] || []).push(function() { try { w.yaCounter4680559 = new Ya.Metrika({id:4680559, webvisor:true, clickmap:true, accurateTrackBounce:true, trackHash:true}); } catch(e) { } }); var n = d.getElementsByTagName("script")[0], s = d.createElement("script"), f = function () { n.parentNode.insertBefore(s, n); }; s.type = "text/javascript"; s.async = true; s.src = (d.location.protocol == "https:" ? "https:" : "http:") + "//mc.yandex.ru/metrika/watch.js"; if (w.opera == "[object Opera]") { d.addEventListener("DOMContentLoaded", f, false); } else { f(); } })(document, window, "yandex_metrika_callbacks");</script><noscript><div><img src="http://mc.yandex.ru/watch/4680559" style="position:absolute; left:-9999px;" alt="" /></div></noscript><!-- /Yandex.Metrika counter --></body>
</html>