= How to write a main generator script
== <em> (see example.rb) </em>

  
Executable ruby script start with 
  #!/usr/bin/ruby
(to make file executable do 
  $ chmod +x script.rb
)

Then one should load main library *mcsanc.rb* and files with specific configs (if needed).
  # Loading main library
  require "./mcsanc"
  # Loading files with specific configs
  require "./input.cfg_iborn-0"
  require "./ewparam.cfg_all"

Next turn-on the MCSANCinput::Helper module which is part of MCSANCinput class
  include MCSANCinput::Helper

Create default configs ( MCSANCinput.new, MCSANCewparam.new)
  input=MCSANCinput.new
  ewparam=MCSANCewparam.new

Override them with specific configs from loaded files. ruby can extend objects with constants and methods saved in Module structure, here we extend our configs using Modules described in *input.cfg_iborn-0.rb* and *ewparam.cfg_all.rb*
  input.extend Input_BinByBin_def
  ewparam.extend EW_BinByBin_def

The idea is that these loaded configs describe a general setup for the task: constants, bins and other stuff.
Finaly we need to fine tune the configs for our current job ( Config_gen.add, MCSANCinput::Helper ):
  input.add {
    @iflew[IBORN]=1 # here we use constant from Helper module
    @relAcc= 1e-3
    @absAcc= 1e-8
  }

Now we want to make MCSANCinput.bin_by_bin setup
  bins_input=input.bin_by_bin('m34')
+bins_input+ here is an array of inputs

Here is an example of center bin scale.
For each input we make a copy of +ewparam+ and modify its scales.
Then in the end of block we create a session( MCSANC_Session.new ).
We use map[http://ru.wikibooks.org/wiki/Ruby/%D0%A1%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D1%87%D0%BD%D0%B8%D0%BA/Array#Array.23map] method for bins_inputs array - it returns an array of 
elements returned by the block - in this case an array of sessions.

  sessions=bins_input.map{|bin_input|
    session_path=MCSANC_Session::SHARE+"bin_#{bin_input.vbh_bins[1]*'_'}"
    bin_ewparam=ewparam.copy
    bin_ewparam.fscale= (bin_input.vbh_bins[1][1]+bin_input.vbh_bins[1][0])/2.0
    bin_ewparam.rscale= (bin_input.vbh_bins[1][1]+bin_input.vbh_bins[1][0])/2.0
    MCSANC_Session.new(bin_input,bin_ewparam,session_path)
  }

Run all sessions together with cubacores=1 ( MCSANC_Session.bunch_run, {Array.size}[http://ru.wikibooks.org/wiki/Ruby/%D0%A1%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D1%87%D0%BD%D0%B8%D0%BA/Array#Array.23size] )
  MCSANC_Session.bunch_run(sessions,sessions.size,1) 

After the jobs are done we want to set born absolute precision for other parts in all sessions.
For each session we parse output and change input using parsed value.
  sessions.each { |s|
      s.read_output
      s.input.add {
        @iflew[IBORN]= 0
        @absAcc= s.results.born.error/10.0
        @relAcc= 1e-8
    }
  }

see MCSANC_Session.read_output, {Array#each}[http://ru.wikibooks.org/wiki/Ruby/%D0%A1%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D1%87%D0%BD%D0%B8%D0%BA/Array#Array.23each] description for details

Finaly we run modified sessions with MCSANC_Session.bunch_run again
  MCSANC_Session.bunch_run(sessions,sessions.size,1) 
