.686
.model flat
option casemap: none
.data
  s1  DB "String 1", 0             
  s2  DB "String 2", 0
  s3  DB "String 3", 0
  err DB "Incorrect parameter!", 0
  label_array label dword           ; массив меток, в котором будут
                                    ; находиться смещения
                                    ; меток L1, L2 и L3
     DD 3 DUP (?)
.code
 _case_1 proc
   push   EBP
   mov    EBP, ESP
   mov    EBX, dword ptr [EBP+8]    ; извлекаем параметр (номер строки)
                                    ; и сохраняем его в регистре EBX
   lea    ESI, label_array          ; адрес массива меток -> ESI
   mov    [ESI], offset L1          ; заполняем массив меток смещениями
   mov    [ESI+4], offset L2        ; меток L1, L2 и L3
   mov    [ESI+8], offset L3
   lea    EAX, err_exit             ; сохраняем в регистре EAX смещение
                                    ; метки для выхода из процедуры
                                    ; в случае ошибки
   shl    EBX, 2                    ; поскольку для адресации
                                    ; используются двойные слова,
                                    ; умножаем номер строки на 4
   cmp    EBX, 8                    ; значение учетверенного параметра
                                    ; не должно превышать 8 (номер строки
                                    ; лежит в диапазоне 0–2)
   jle    next1                     ; верхнее значение меньше 8? Если
                                    ; да, следующая проверка
   jmp    EAX                       ; нет, параметр превышает значение 2,
                                    ; выйти из процедуры с ошибкой
 next1:
   cmp    EBX, 0                    ; параметр не является отрицательным
                                    ; числом?
   jge    get_string                ; если нет, продолжить выполнение
                                    ; процедуры
   jmp    EAX                       ; да, параметр вне диапазона, выйти
                                    ; с ошибкой
 get_string:                        ; параметр находится в нужном
                                    ; диапазоне, получить адрес
                                    ; соответствующей строки и выйти из
                                    ; процедуры
   cmovge EAX, [ESI][EBX]
   jmp    EAX
 L1:                                ; сюда передается управление при
                                    ; значении входного параметра,
                                    ; равном 0
   lea    EAX, s1                   ; адрес строки s1 -> EAX
   jmp    exit                      ; выход из процедуры
 L2:                                ; сюда передается управление при
                                    ; значении входного параметра,
                                    ; равном 1
   lea    EAX, s2                   ; адрес строки s2 -> EAX
   jmp    exit                      ; выход из процедуры
 L3:                                ; сюда передается управление при
                                    ; значении входного параметра,
                                    ; равном 2
   lea    EAX, s3                   ; адрес строки s3 -> EAX
   jmp    exit                      ; выход из процедуры
 err_exit:                          ; сюда передается управление
                                    ; при возникновении ошибки
   lea    EAX, err                  ; адрес ссобщения об ошибке -> EAX
 exit:  
   pop    EBP
   ret
 _case_1   endp
 end
