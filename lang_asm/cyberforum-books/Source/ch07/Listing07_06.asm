.686
.model flat
option casemap: none
.MMX
.code
_copy_movq proc
  push EBP
  mov  EBP, ESP
  mov  ESI, dword ptr [EBP+8]     ; адрес массива-источника -> ESI
  mov  EDI, dword ptr [EBP+12]    ; адрес массива-приемника -> EDI
  mov  EAX, dword ptr [EBP+16]    ; размер массива-источника в двойных
                                  ; словах -> EAX
  xor  EDX, EDX                   ; регистр EDX участвует в операции
                                  ; деления, поэтому обнуляем его
  mov  EBX, 2
  div  EBX                        ; вычислим, сколько учетверенных слов
                                  ; помещается в массиве-источнике
  mov  ECX, EAX                   ; после деления: EAX = частное,
                                  ; EDX = остаток. Количество
                                  ; учетверенных слов -> ECX (счетчик
                                  ; цикла)
next:
  movq MM0, [ESI]                 ; копировать 8-байтовый операнд
                                  ; из массива-источника в регистр MM0
  movq [EDI], MM0                 ; копировать 8-байтовый операнд из
                                  ; регистра MM0 в массив-приемник
  add  ESI, 8                     ; адрес следующего 8-байтового элемента
                                  ; массива-источника -> ESI
  add  EDI, 8                     ; адрес следующего 8-байтового элемента
                                  ; массива-приемника -> EDI
  dec  ECX                        ; уменьшить счетчик цикла на 1
  jnz  next                       ; перейти к следующей итерации
  cmp  EDX, 0                     ; остались ли в массиве-источнике
                                  ; необработанные двойные слова?
  je   exit                       ; нет, выйти из процедуры
  mov  ECX, EDX                   ; да, повторить цикл для двойных слов
  cld                             ; флаг направления -> увеличение
                                  ; адресов
next_remainder:
  movsd                           ; скопировать двойное слово из
                                  ; массива-источника в приемник
  dec  ECX                        ; декремент счетчика цикла
  jnz  next_remainder             ; если не равен 0, на следующую
                                  ; итерацию
exit:
  pop  EBP
  ret
_copy_movq endp
end
