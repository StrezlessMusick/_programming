<HTML><HEAD>
<TITLE>Калашников.ru - Ассемблер? Это просто!.. (Выпуск № 007)</TITLE>
</HEAD><BODY BGCOLOR=#EBD2A5 link=#660000 alink=#000000 vlink=#000000 text=#000000>

<P align=center><A 
href="http://ad.ir.ru/bb.cgi?cmd=go&pubid=128269&pg=2&vbn=10001&nocache=77524" 
target=_top><IMG alt="InterReklama " border=0 
src="http://ad.ir.ru/bb.cgi?cmd=ad&pubid=128269&pg=2&vbn=10001&nocache=77524"></A></P>
<P align=center><A href="http://www.ir.ru" target=_top><FONT size=1>InterReklama 
Advertising</FONT></A> </P>
<HR>

<div align="center"><center>

<table border="2" width="100%" bgcolor="#9BDEEC">
 <tr>
 <td width="100%"><div align="center"><center><table
 border="3" width="100%" bgcolor="#3C89B7">
 <tr>
 <td width="100%"><p align="center"><font size="5"><strong>Здравствуйте,
 уважаемые любители
 Ассемблера!</strong></font></p>
 <hr>
 <p align="center">Выпуск N 007</p>
 </td>
 </tr>
 </table>
 </center></div><div align="center"><center>
 <br>
 <table
 border="6" cellpadding="2" width="80%" bgcolor="#000000">
 <tr>
 <td width="100%"><p align="center"><font
 color="#FFFFFF">Взрыв в переходе
 на Пушкинской площади 8
 августа 2000 года потряс не
 только Москву, но и всю
 Россию. Где будет
 следующий теракт? Наши
 власти очередной раз
 показали свое бессилие.
 Будут ли найдены виновные?
 Учитывая результаты
 предыдущих расследований,
 думаю, что нет.
 Террористический акт
 потрясает своей
 жестокостью,
 бесчеловечностью и
 слабостью. Именно
 жестокостью, так как
 только жестокий человек
 способен убивать ни в чем
 не повинных людей. Именно
 бесчеловечностью, так как
 только нелюди способны
 тщательным образом
 подготавливаться и
 предвкушать наступления
 долгожданного момента.
 Именно слабостью, так как
 только слабый человек
 способен выстрелить в
 спину. Подонки,
 искалечившие десятки
 судеб, принесшие горя
 сотням людей не могут
 называться людьми. Кому и
 что в итоге террористы
 доказали? Устрашили народ?
 Думаю, что это им удалось.
 Что тут говорить: наше
 государство не способно
 защитить своих граждан.
 Друзья мои! Давайте будем
 внимательными не только к
 себе, но и к окружающим нас
 людям, ибо только так нам
 удастся вернуть все то, что
 мы утратили за последние
 годы...</font></p>
 <hr>
 <p align="center"><a
 href="mailto:oleg77.online.ru?Subject=Хотел бы сказать..."><font
 color="#0000FF" size="4"><strong>Хотел бы
 сказать по этому поводу...</strong></font></a></p>
 </td>
 </tr>
 </table>
 </center></div><hr>
 <p align="left"><font size="5"><strong>Сегодня в
 нашей рассылке:</strong></font></p>
 <ul>
 <li><p align="left"><a href="#letters"><font
 color="#800000" size="3"><strong>Ваши
 письма</strong></font></a><font
 color="#800000" size="3"><strong>;</strong></font></p>
 </li>
 <li><p align="left"><a href="#e-mail"><font
 color="#800000" size="3"><strong>Электронные
 адреса подписчиков</strong></font></a><font
 color="#800000" size="3"><strong>;</strong></font></p>
 </li>
 <li><p align="left"><a href="#results"><font
 color="#800000" size="3"><strong>Еще
 немного о голосовании</strong></font></a><font
 color="#800000" size="3"><strong>;</strong></font></p>
 </li>
 <li><p align="left"><a href="#stack"><font
 color="#800000" size="3"><strong>Подробней
 о стеке и программе из
 предыдущего выпуска</strong></font></a><font
 color="#800000" size="3"><strong>;</strong></font></p>
 </li>
 <li><p align="left"><a href="#newops"><font
 color="#800000" size="3"><strong>Новые
 операторы</strong></font></a><font
 color="#800000" size="3"><strong>;</strong></font></p>
 </li>
 <li><p align="left"><a href="#prog"><font
 color="#800000" size="3"><strong>Программка
 для практики</strong></font></a><font
 color="#800000" size="3"><strong>.</strong></font></p>
 </li>
 </ul>
 <hr>
 <p align="center"><a name="letters"><font size="5"><strong>Ваши
 письма</strong></font></a></p>
 <p align="left"><font size="3">Ко мне до сих
 пор приходят ваши голоса по
 поводу того, какую программу
 будем рассматривать. Поэтому в </font><a
 href="#results"><font color="#804040" size="3">следующем
 разделе</font></a><font size="3"> я еще раз
 публикую окончательные
 результаты. Дорогие мои!
 Голосование окончено. Спасибо
 всем, кто участвовал!</font></p>
 <p align="left"><font size="3">Пришло
 несколько писем с просьбой о
 том, чтобы рассылка выходила 1
 раз в неделю, но с разными
 разделами (Вирус, оболочка,
 резидент).</font></p>
 <p align="left"><font size="3">Давайте так и
 сделаем. Вирус будем изучать
 нерезидентный (резидент уже
 есть), а в процессе написания
 оболочки рассмотрим команды 486
 процессора, Viewer, графическую
 заставку.</font></p>
 <p align="left"><font size="3">Хотел бы
 поблагодарить всех, кто помог
 мне с материалом по форматам
 графических файлов.</font></p>
 <p align="left"><font size="3">Однако,
 прежде, чем перейдем к
 написанию одной программы, нам
 нужно будет рассмотреть еще
 несколько операторов.</font></p>
 <hr>
 <p align="center"><a name="e-mail"><font size="5"><strong><u>Электронные
 адреса подписчиков</u></strong></font></a></p>
 <p align="center"><font size="3"><strong><u>(опубликовываю
 по вашей просьбе):</u></strong></font></p>
 <div align="center"><center><table border="3" width="70%">
 <tr>
 <td width="50%"><a href="mailto:ser@avtograd.ru"><font
 size="3" face="Times New Roman Cyr">ser@avtograd.ru</font></a></td>
 <td width="50%">Сергей</td>
 </tr>
 <tr>
 <td width="50%"><a href="mailto:yoshi@beep.ru"><font
 face="Times New Roman Cyr">yoshi@beep.ru</font></a></td>
 <td width="50%">Yoshi</td>
 </tr>
 <tr>
 <td width="50%"><a href="mailto:sab@sab.ru"><font
 face="Times New Roman Cyr">sab@sab.ru</font></a></td>
 <td width="50%">Сергей</td>
 </tr>
 <tr>
 <td width="50%"><a href="mailto:e1korn@mail.ru"><font
 face="Times New Roman Cyr">e1korn@mail.ru</font></a></td>
 <td width="50%">Борис</td>
 </tr>
 <tr>
 <td width="50%"><a href="mailto:ILUH_1@mail.ru"><font
 face="Times New Roman Cyr">ILUH_1@mail.ru</font></a></td>
 <td width="50%">Николай</td>
 </tr>
 <tr>
 <td width="50%"><a
 href="mailto:kam_andrey@mail.ru"><font
 face="Times New Roman Cyr">kam_andrey@mail.ru</font></a></td>
 <td width="50%">Андрей</td>
 </tr>
 <tr>
 <td width="50%"><a
 href="mailto:artem1977@mail.ru"><font size="3"
 face="Times New Roman Cyr">artem1977@mail.ru</font></a></td>
 <td width="50%">Артем</td>
 </tr>
 <tr>
 <td width="50%"><a
 href="mailto:philich1@mtu-net.ru"><font
 face="Times New Roman Cyr">philich1@mtu-net.ru</font></a></td>
 <td width="50%">Александр</td>
 </tr>
 <tr>
 <td width="50%"><a
 href="mailto:mzelenkin@operamail.com"><font
 face="Times New Roman Cyr">mzelenkin@operamail.com</font></a></td>
 <td width="50%">Миша</td>
 </tr>
 <tr>
 <td width="50%"><a href="mailto:rosstrax@tsl.ru"><font
 face="Times New Roman Cyr">rosstrax@tsl.ru</font></a></td>
 <td width="50%">Владимир</td>
 </tr>
 <tr>
 <td><a href="mailto:dprof@skynet.kharkov.com"><font
 face="Times New Roman Cyr">dprof@skynet.kharkov.com</font></a></td>
 <td>ScAlAn</td>
 </tr>
 <tr>
 <td><a href="mailto:albor@gala.net"><font
 face="Times New Roman Cyr">albor@gala.net</font></a></td>
 <td>Albor</td>
 </tr>
 </table>
 </center></div><hr>
 <p align="center"><a name="results"><font size="5"><strong>Результаты
 голосования.</strong></font></a></p>
 <div align="center"><center><table border="3" width="60%">
 <tr>
 <td width="50%">Команды и
 инструкции 486-Pentium</td>
 <td width="15%"><strong>21</strong></td>
 </tr>
 <tr>
 <td width="50%">Viewer для просмотра
 графики</td>
 <td width="15%"><strong>10</strong></td>
 </tr>
 <tr>
 <td width="50%">Безобидный вирус</td>
 <td width="15%"><strong>34</strong></td>
 </tr>
 <tr>
 <td width="50%">Графическая игра</td>
 <td width="15%"><strong>14</strong></td>
 </tr>
 <tr>
 <td width="50%">Дизассемблер</td>
 <td width="15%"><strong>9</strong></td>
 </tr>
 <tr>
 <td width="50%">Графическая
 заставка с музыкой</td>
 <td width="15%"><strong>16</strong></td>
 </tr>
 <tr>
 <td width="50%">Локальная сеть</td>
 <td width="15%"><strong>19</strong></td>
 </tr>
 <tr>
 <td width="50%">Оболочка типа
 Нортон Коммандер</td>
 <td width="15%"><strong>33</strong></td>
 </tr>
 <tr>
 <td width="50%">Резидент</td>
 <td width="15%"><strong>27</strong></td>
 </tr>
 </table>
 </center></div><p><font size="3">Как видите,
 результаты не сильно
 изменились. А вообще, я очень
 разочарован. Проголосовало
 всего около <strong>двух процентов</strong>!
 Наверное, остальным все равно
 что мы будем изучать.........</font></p>
 <p><font size="3">Первая тройка:
 Оболочка, Вирус, Резидент. Из
 этих трех программ нам нужно
 выбрать одну, которой мы будем
 уделять наибольшее внимание
 (но не оставим в стороне
 остальные две). У меня </font><a
 href="http://www.Kalashnikoff.ru"><font color="#0000FF"
 size="3">на сайте</font></a><font size="3">
 проводится голосование по
 этому поводу.</font></p>
 <hr>
 <p align="center"><a name="stack"><font size="5"><strong>Стек/стэк
 (stack)</strong></font></a></p>
 <p>Мне пришло много писем с
 разобранной &quot;по полочкам&quot;
 программой из <a
 href="http://asm.kalashnikoff.ru/prog"><font
 color="#0000FF">предыдущего выпуска</font></a>.
 Многие разобрались полностью,
 но у многих также остались
 неясными некоторые моменты.</p>
 <p>Итак, решение. Вот программа:</p>
 <p>...</p>
 <p>(1) mov sp,offset Lab_1</p>
 <p>(2) mov ax,9090h</p>
 <p>(3) push ax</p>
 <p>(4) int 20h</p>
 <p>(5) Lab_1:</p>
 <p>(6) mov ah,9</p>
 <p>(7) mov dx,offset Mess</p>
 <p>(8) int 21h</p>
 <p>(9) int 20h</p>
 <p>...</p>
 <p>Что же все-таки происходит.</p>
 <p>Как мы узнали из прошлого
 выпуска, команда NOP имеет код 90h.
 Посмотрите на строку (2). В ней
 мы загружаем в AX два числа 90h,
 т.е. два оператора NOP.</p>
 <p>В SP заносим адрес метки Lab_1 (1).
 Теперь стек находится внутри
 нашей программы, а точнее
 вершина стека на метке Lab_1.
 Стоит отметить, что сама метка
 памяти не занимает! Она нужна
 только для MASM/TASM, которые, дойдя
 до строки (5), запомнят адрес
 (смещение) метки в программе
 (109h). После выполнения строки (1),
 посмотрите в отладчике какое
 число находится в SP, а также на
 код, который расположен по
 этому адресу (чуть ниже). Мы
 увидим, что по адресу 109h
 находится команда mov ah,9, т.е. нет
 нашей метки в памяти!</p>
 <p><strong>Теперь внимание!</strong> В
 строке (3) мы толкаем в стек два
 числа 90h, т.е. две команды NOP
 (чувствуете, как просто в
 Ассемблере заносятся коды
 программы &quot;на лету&quot;?). Что
 происходит дальше? Стек, как вы
 уже знаете, &quot;растет&quot; снизу
 вверх (помещая в стек число, SP
 не увеличивается, как кажется,
 а уменьшается).</p>
 <p><strong>Еще раз внимание!</strong>
 Команда int 20h занимает два
 байта. Это можно наблюдать в
 отладчике или в Hacker's View.
 Машинный код int 20h равен 0CDh, 20h.
 Теперь вы знаете, как вручную
 набрать com-программу в
 редакторе. Если есть редактор,
 позволяющий смотреть
 шестнадцатеричные числа
 (например, Volcov Commander), то введите
 в создаваемом файле CD и 20.
 Сохраните файл как com (например,
 prog.com). Можете его смело
 запускать. Он не зависнет!</p>
 <p>Вернемся. Понятно, что int 20h
 занимает два байта. Командой push
 ax (3) мы толкаем в стек два
 оператора NOP, которые ложатся
 поверх int 20h, затирая выход из
 программы (стек-то у нас внутри
 нашего кода!).</p>
 <p>Все. Далее компьютер
 выполняет не выход в DOS, а два
 оператора NOP, которые ничего не
 делают!</p>
 <p>Сложновато, наверное... Но
 принцип работы стека понятен
 (так или иначе, мы будем еще не
 раз возвращаться к стеку). Судя
 по вашим письмам, многим
 доставило море удовольствия
 разбираться с программой.</p>
 <p>Давайте теперь рассмотрим,
 почему отладчики CodeView, AFD, Turbo
 Debugger работают некорректно.</p>
 <p><strong>Вдумайтесь в следующую
 фразу:</strong> вышеперечисленные
 отладчики используют стек <strong><u>НАШЕЙ</u></strong>
 программы. Грубо говоря,
 отладчик, загрузив к себе в
 память нашу программу,
 использует тот же стек (те же
 регистры SS:SP), что и наша
 программа. Отладчику ведь тоже
 надо хранить где-то свои данные
 (например, после выполнения
 одной команды нашей программы,
 запомнить адрес следующей.
 Одно дело на экране, но другое -
 в стеке отладчика, который
 является нашим!). Поэтому,
 переместив стек в область кода
 программы, мы тем самым
 переносим стек отладчика,
 который, сохраняя свои
 переменные (а их более двух
 байт; мы ведь хотим поместить
 только 9090h), затирает наш код!
 Уфф! Понятно, дорогие мои?</p>
 <p>Стоит отметить такой момент:
 на компьютере 486 DX2-80 этот номер
 почему-то не работает:
 программа выходит, не выводя
 сообщение на экран. Однако,
 запустив ее под отладчиком
 SoftIce, программа работает верно!
 В чем может быть дело - под
 вопросом. Мне также пришло
 письмо от одного из
 подписчиков, который также
 сообщил о том, что программа
 ничего не выводит на экран. Как
 оказалось, процессор у него AMD
 486 DX4-100. Странно очень... Я
 пробовал запустить эту
 программу на Pentium-150 под Win98, а
 также на Pentium-120 под Win95. Все
 работало верно!</p>
 <p>Вероятно проблема в том, что
 мы не запрещаем прерывание
 перед сменой стека (хотя я
 сомневаюсь в этом). Причина
 вторая: неверная работа самого
 процессора 486.</p>
 <hr>
 <p align="center"><a name="newops"><font size="5"><strong>Новые
 операторы.</strong></font></a></p>
 <p>Итак, дорогие мои, вы уже
 умеете многое. Например,
 ожидание клавиши от
 пользователя, используя
 функцию 10h прерывания 16h. Теперь
 настало время научиться
 проверять, какую же клавишу
 нажал пользователь.</p>
 <p>Для этого рассмотрим
 несколько новых операторов.</p>
 <div align="left"><table border="2">
 <tr>
 <td bgcolor="#3386B3">Оператор</td>
 <td bgcolor="#3386B3">Перевод</td>
 <td bgcolor="#3386B3">Применение</td>
 <td bgcolor="#3386B3">Процессор</td>
 </tr>
 <tr>
 <td>CMP приемник, источник</td>
 <td>compare - сравнить</td>
 <td>Сравнение</td>
 <td>8086</td>
 </tr>
 </table>
 </div><p>Я уже не раз упоминал в
 выпусках, что после вызова
 функции 10h прерывания 16h, в AX
 помещается код клавиши,
 которую нажал пользователь.
 Как же нам проверить?</p>
 <p>Вот пример:</p>
 <p>...</p>
 <p>(1) mov ah,10h</p>
 <p>(2) int 16h</p>
 <p>(3) cmp al,'Y'</p>
 <p>(4) jz Yes_key</p>
 <p>...</p>
 <p>(5) Yes_key:</p>
 <p>...</p>
 <p>Строки (1) - (2) нас уже не
 интересуют, а вот (3) - (4) мы
 рассмотрим.</p>
 <p>Что же происходит? На строке
 (2) компьютер остановится и не
 продолжит работу до тех пор,
 пока мы не нажмем какую-нибудь
 клавишу. После этого
 прерывание 10h поместит в AX код
 клавиши, и выполнение
 программы продолжится. В
 строке (3) мы проверяем, нажата
 ли клавиша 'Y'. Обратите
 внимание на запись:</p>
 <p>cmp al,'Y'</p>
 <p>Мы можем даже не знать ASCII-код
 клавиши. Для этого в кавычках
 просто указываем саму клавишу.
 Ассемблер при ассемблировании
 сам заменит ее на
 соответствующий код. Если вы
 запустите программу под
 отладчиком, то увидите, что код
 будет не</p>
 <p>cmp al,'Y'</p>
 <p>а</p>
 <p>cmp al,59h</p>
 <p>Теперь мы знаем код клавиши
 'Y'. Естественно, можно записать
 и cmp al,59h. Программа будет
 работать правильно.</p>
 <p>Т.о., мы узнали, что в
 Ассемблере можно записывать не
 только двоичные, десятичные и
 шестнадцатеричные числа, но и
 просто символы. Например:</p>
 <p>mov al,'2'</p>
 <p>mov dh,'d'</p>
 <p>В результате AL будет
 содержать 32h, а DH - 64h. Все просто!</p>
 <p>Смотрим дальше. В строке (4)
 наша программа перейдет на
 метку 'Yes_key' (5), если нажата
 клавиша 'Y'.</p>
 <p>Оператор JZ (Jump if Zero - переход
 если флаг нуля установлен)
 выполняет переход на указанную
 метку, если флаг нуля
 установлен в единицу.</p>
 <p>Здесь мы подошли к изучению
 регистра флагов. Полностью его
 мы не будем рассматривать, а
 затронем лишь то, что нам нужно
 для проверки нажатой клавиши.</p>
 <p>Флаг нуля устанавливается в
 единицу, если предыдущая
 команда сравнения была верной.
 Например:</p>
 <p>mov ax,15</p>
 <p>cmp ax,15</p>
 <p>jz Our_lab</p>
 <p>mov ah,3</p>
 <p>Our_lab:</p>
 <p>...</p>
 <p>В данном случае флаг нуля
 будет установлен в единицу, и
 мы сможем перейти на указанную
 метку (Our_lab). Команда mov ah,3 не
 будет выполняться.</p>
 <p>Второй пример:</p>
 <p>mov ax,15</p>
 <p>cmp ax,16</p>
 <p>jz Our_lab</p>
 <p>mov ah,3</p>
 <p>Our_lab:</p>
 <p>...</p>
 <p>В данном случае на метку мы не
 перейдем, так как команда
 сравнения (cmp ax,16) не будет
 верна. Выполнится инструкция mov
 ah,3 (и, естественно, все, что идет
 после данной инструкции).</p>
 <p>Все просто! Не так ли?</p>
 <p>Допустим, нам нужно
 подождать, пока пользователь
 нажмет какую-нибудь клавишу. И,
 если это 'ф' или 'Ф', то перейти
 на указанную метку. В противном
 случае, запросить клавишу
 снова. <strong><u>Обратите внимание,
 что коды ЗАГЛАВНЫХ и строчных
 букв различаются!</u></strong> Вот
 что мы сделаем:</p>
 <p>Next_key:</p>
 <p>mov ah,10h</p>
 <p>int 16h</p>
 <p>cmp al,'ф'</p>
 <p>jz F_pressed</p>
 <p>cmp al,'Ф'</p>
 <p>jz F_pressed</p>
 <p>jmp Next_key</p>
 <p>F_pressed:</p>
 <p>mov ah,9</p>
 <p>mov dx,offset Mess</p>
 <p>int 21h</p>
 <p>int 20h</p>
 <p>Mess db 'Ура! Вы нажали Ф или ф!!!$'</p>
 <p>...</p>
 <p>Все элементарно!</p>
 <p>Стоит отметить еще такой
 момент: команды jz и je (Jump if Equal -
 переход, если равно) выполняют
 одну и ту же функцию. Т.е. можно
 записать и так:</p>
 <p>...</p>
 <p>int 16h</p>
 <p>cmp al,'Ф'</p>
 <p>je F_pressed</p>
 <p>...</p>
 <p>Команда je переведется
 ассемблером в jz. Это легко
 проверить, если после
 ассемблирования запустить
 программу под отладчиком.</p>
 <p><strong><u>Разницы между je и jz нет
 никакой!</u></strong></p>
 <p>Итак, теперь вы умеете
 производить проверку нажатой
 клавиши.</p>
 <p>Теперь совсем немного
 терминов.</p>
 <p>Команда jmp (которую вы уже
 знаете &quot;на зубок&quot;) называется командой <em>безусловного
 перехода</em>. Т.е. при любом
 условии компьютер перейдет на
 указанную метку. Для тех, кто
 знаком немного с Бейсиком: эта
 команда эквивалентна GOTO.</p>
 <p>goto 20 - переход на строку 20.</p>
 <p>Команды вида je и jz - <em>условный
 переход</em>. Т.е. компьютер
 перейдет на метку <strong><u>только</u></strong>,
 если условие выполняется (в
 нашем случае - если нажата
 клавиша, которую мы проверяем:
 cmp al,'Ф'). В Бейсике это выглядит
 примерно так:</p>
 <p>if Key = &quot;Ф&quot; then goto 20</p>
 <p>Я все время говорю, что <strong><u>компьютер</u></strong>
 сделает то-то или то-то. На
 самом деле, правильнее будет
 сказать, что <strong><u>процессор</u></strong>
 сделает то-то. Мы посылаем
 команды не компьютеру
 (компьютер - это общее понятие),
 а напрямую процессору, который
 и выполняет наши команды.</p>
 <p>Теперь рассмотрим таблицу
 некоторых кодов символов
 расширенного ASCII.</p>
 <p>Что такое расширенный ASCII? Я
 говорил, что код клавиши
 возвращается в AX. Но в
 приведенных выше примерах мы
 проверяли почему-то клавишу в
 AL:</p>
 <p>cml al,'Y'</p>
 <p>Дело в том, что кроме символов
 (А..Я / A..Z) и цифр (0..1) существуют
 еще клавиши F1-F12. Мы не можем
 записать так, проверяя, нажата
 ли клавиша F1..F12:</p>
 <p>cmp al,'F1'</p>
 <p>Ассемблер выдаст ошибку,
 потому что 'F1' - два байта, а
 регистр AL (как уже
 общеизвестно) может хранить /
 проверять только один байт. Для
 этого используются
 расширенные коды ASCII. При этом,
 если мы на запрос нашей
 программы нажмем F1, то в AL
 помещается 0, а в AH - расширенный
 код.</p>
 <p><a name="table">Вот таблица в помощь:</a></p>
 <div align="center"><center><table border="3" width="85%">
 <tr>
 <td align="center" width="14%" bgcolor="#589EDE"><font
 size="4"><strong>F1..F10</strong></font></td>
 <td align="center" width="14%" bgcolor="#589EDE"><font
 size="4"><strong>Alt-F1..F10</strong></font></td>
 <td align="center" width="14%" bgcolor="#589EDE"><font
 size="4"><strong>Shift-F1..F10</strong></font></td>
 <td align="center" width="14%" bgcolor="#589EDE"><font
 size="4"><strong>Ctrl-F1..F10</strong></font></td>
 </tr>
 <tr>
 <td align="center" width="14%">3Bh..44h</td>
 <td align="center" width="14%">68h..71h</td>
 <td align="center" width="14%">54h..5Dh</td>
 <td align="center" width="14%">5Eh..67h</td>
 </tr>
 </table>
 </center></div><p>Думаю, что из таблицы
 понятно, что F1 имеет код 3Bh, F2 -
 3Ch, F3 - 3Dh и так далее...</p>
 <p>Вот кусок программы, в
 которой мы проверим нажатие
 комбинации клавиш Shift-F4
 (комбинация клавиш - в данном
 случае нужно нажать Shift и, не
 отпуская его, F4):</p>
 <p>...</p>
 <p>(1) No_ext:</p>
 <p>(2) mov ah,10h</p>
 <p>(3) int 16h</p>
 <p>(4) cmp al,0</p>
 <p>(5) jnz No_ext</p>
 <p>(6) cmp ah,57h</p>
 <p>(7) je Shift_f4</p>
 <p>(8) jmp No_ext</p>
 <p>(9) Shift_f4:</p>
 <p>...</p>
 <p>Мы уже выяснили, что при
 нажатии на клавиши типа F1, Alt+F1 и
 т.п. в AL помещается 0, а в AH -
 расширенный код. В строке (4) мы
 это дело проверяем. В строке (5)
 переходим на метку No_ext, если
 пользователь нажал клавишу,
 код которой не расширенный
 (например: A, ф, &lt;пробел&gt;,
 &lt;Enter&gt; и т.п.). Т.е. мы как бы
 просто проигнорируем нажатую
 клавишу и &quot;попросим&quot;
 пользователя нажать другую.</p>
 <p>В строке (6) проверяем, нажата
 ли именно комбинация клавиш
 Shift+F4 (не трудно высчитать ее
 код из приведенной выше <a
 href="#table"><font color="#800000">таблицы</font></a>).
 Если же пользователь нажал
 Shift+F4, то, как не трудно
 догадаться, программа перейдет
 на метку Shift_f4 (9) (ее,
 естественно, можно было
 назвать по другому). Если
 пользователь нажал какую-либо
 иную клавишу, имеющую
 расширенный код, то программа
 опять-таки вернется на метку
 No_ext (8).</p>
 <p><strong>Резюмируем:</strong>
 программа продолжит работу,
 только если пользователь
 нажмет комбинацию клавиш Shift+F4.</p>
 <p>Думаю, что вопросов быть не
 должно...</p>
 <p>Вот еще одна таблица с кодами
 (но не расширенными; т.е.
 проверять нужно AL, а не AH!) часто
 используемых клавиш (в
 последствии рассмотрим
 остальные коды ASCII):</p>
 <div align="center"><center><table border="3" width="70%">
 <tr>
 <td align="center" width="14%" bgcolor="#589EDE"><font
 size="4"><strong>Enter</strong></font></td>
 <td align="center" width="14%" bgcolor="#589EDE"><font
 size="4"><strong>ESC</strong></font></td>
 <td align="center" width="14%" bgcolor="#589EDE"><font
 size="4"><strong>Space</strong></font></td>
 <td align="center" width="14%" bgcolor="#589EDE"><font
 size="4"><strong>Tab</strong></font></td>
 </tr>
 <tr>
 <td align="center" width="14%">0Dh</td>
 <td align="center" width="14%">1Bh</td>
 <td align="center" width="14%">20h</td>
 <td align="center" width="14%">09h</td>
 </tr>
 </table>
 </center></div><p>Все!</p>
 <hr>
 <p align="center"><a name="prog"><font size="5"><strong>Программка
 для практики.</strong></font></a></p>
 <p>Я все размышляю: какую бы
 программку вам дать для
 изучения? Думаю, что будет
 интереснее давать вам
 какую-нибудь программку, а
 описание к ней в следующем
 выпуске. Так вы в течение
 недели &quot;поломаете голову&quot;,
 а затем, в следующем выпуске,
 узнаете, правы были или нет. Как
 вам это нравится? <a
 href="mailto:oleg77@online.ru?Subject=Чушь!">oleg77@online.ru?Subject=Чушь!</a></p>
 <p>Ваши варианты, умозаключения,
 выводы, решения по поводу
 программы вы можете посылать
 мне по почте с пометкой
 &quot;Решение&quot;: <a
 href="mailto:oleg77@online.ru?Subject=Решение">oleg77@online.ru?Subject=Решение</a></p>
 <p>Я буду в течение недели
 помещать ваши письма на сайт,
 где любой сможет посмотреть
 разные мнения, и, возможно, это
 натолкнет вас на Мысль.
 Получится что-то вроде
 домашнего задания.
 Единственный совет: <strong>пользуйтесь
 отладчиком</strong>.</p>
 <p>На мой взгляд, это поможет вам
 лучше освоить Ассемблер,
 принцип его работы, чем если я
 сразу буду все
 &quot;разжевывать&quot;. Но зато
 какое удовольствие вам
 доставит самостоятельное
 исследование! Полагаю, что
 многие уже прочувствовали
 это...</p>
 <p>Сегодня мы рассмотрим такую
 программу:</p>
 <hr>
 <p>CSEG segment</p>
 <p>assume cs:CSEG, ds:CSEG, es:CSEG, ss:CSEG</p>
 <p>org 100h</p>
 <p>Begin:</p>
 <p>call Wait_key</p>
 <p>cmp al,27</p>
 <p>je Quit_prog</p>
 <p>cmp al,0</p>
 <p>je Begin</p>
 <p>call Out_char</p>
 <p>jmp Begin</p>
 <p>Quit_prog:</p>
 <p>mov al,32</p>
 <p>call Out_char</p>
 <p>int 20h</p>
 <p>; === Подпрограммы ===</p>
 <p>; --- Wait_key ---</p>
 <p>Wait_key proc</p>
 <p>mov ah,10h</p>
 <p>int 16h</p>
 <p>ret</p>
 <p>Wait_key endp</p>
 <p>; --- Out_char ---</p>
 <p>Out_char proc</p>
 <p>push cx</p>
 <p>push ax</p>
 <p>push es</p>
 <p>push ax</p>
 <p>mov ax,0B800h</p>
 <p>mov es,ax</p>
 <p>mov di,0</p>
 <p>mov cx,2000</p>
 <p>pop ax</p>
 <p>mov ah,31</p>
 <p>Next_sym:</p>
 <p>mov es:[di],ax</p>
 <p>inc di</p>
 <p>inc di</p>
 <p>loop Next_sym</p>
 <p>pop es</p>
 <p>pop ax</p>
 <p>pop cx</p>
 <p>ret</p>
 <p>Out_char endp</p>
 <p>CSEG ends</p>
 <p>end Begin</p>
 <hr>
 <p>Внимательно набирайте
 программу! Если что-то не
 работает, то ищите опечатку.</p>
 <p>Стоит отметить, что в
 Ассемблере после точки с
 запятой идет комментарий,
 который будет опускаться MASM/TASM
 при ассемблировании.</p>
 <p><strong>Пример комментария:</strong></p>
 <p>; <em>это комментарий</em></p>
 <p>mov ah,9 ; <em>это комментарий</em></p>
 <p align="center">______________</p>
 <p><strong>Удачного изучения!</strong></p>
 <p><strong>С уважением,</strong></p>
 <p><strong>Калашников Олег</strong> ( <a
 href="mailto:oleg77@online.ru?Subject=Ассемблер:"><font
 color="#0000FF">oleg77@online.ru?Subject=Ассемблер:</font></a>
 )</p>
 <p><a href="http://www.Kalashnikoff.ru">www.Kalashnikoff.ru</a></p>
 <p align="center">___________</p>
 </td>
 </tr>
</table>
</center></div>

<hr>

<p align="center">[<a href="008.htm">Следующий выпуск</a>] [<a target=_BLANK href="http://www.Kalashnikoff.ru/">На главную страницу</a>]</p>

<HR NOSHADE><CENTER>
<!-- SpyLOG v2 f:0211 --><script language="javascript">  
u="u496.71.spylog.com";d=document;nv=navigator;na=nv.appName;p=1;  
bv=Math.round(parseFloat(nv.appVersion)*100);  
n=(na.substring(0,2)=="Mi")?0:1;rn=Math.random();z="p="+p+"&rn="+rn;y="";  
y+="<a href='http://"+u+"/cnt?f=3&p="+p+"&rn="+rn+"' target=_blank>";  
y+="<img src='http://"+u+"/cnt?"+z+  
"&r="+escape(d.referrer)+"&pg="+escape(window.location.href)+"' border=0 width=88 height=31 alt='SpyLOG'>";  
y+="</a>"; d.write(y);if(!n) { d.write("<"+"!--"); }//--></script><noscript><p align="center"><a 
href="http://u496.71.spylog.com/cnt?f=3&amp;p=1" 
target="_blank"><img src="http://u496.71.spylog.com/cnt?p=1" alt="SpyLOG" align="middle" border="0"></a> 
<a href="http://u496.71.spylog.com/cnt?f=3&amp;p=1" target="_blank"></noscript></a> 
<a href="http://u496.71.spylog.com/cnt?f=3&amp;p=1" target="_blank"> 
<script language="javascript1.2"><!-- if(!n) { d.write("--"+">"); }//--></script></a> 
<!-- SpyLOG --> 
 
 <a target=_top href="http://www.one.ru"><img src="http://cnt.one.ru/cgi-bin/cnt.cgi?id=16871&t=9" width=88 height=31 alt="be number one" border=0></a> 
 
 <script language="JavaScript"><!-- 
d=document;a='';a+=';r='+escape(d.referrer) 
js=10//--></script><script language="JavaScript1.1"><!-- 
a+=';j='+navigator.javaEnabled() 
js=11//--></script><script language="JavaScript1.2"><!-- 
s=screen;a+=';s='+s.width+'*'+s.height 
a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth) 
js=12//--></script><script language="JavaScript1.3"><!-- 
js=13//--></script><script language="JavaScript"><!-- 
d.write('<a href="http://top.list.ru/jump?from=87856"'+ 
' target=_top><img src="http://top.list.ru/counter'+ 
'?id=87856;t=54;js='+js+a+';rand='+Math.random()+ 
'" alt="TopList"'+' border=0 height=31 width=88></a>') 
if(js>11)d.write('<'+'!-- ')//--></script><noscript><a 
target=_top href="http://top.list.ru/jump?from=87856"><img 
src="http://top.list.ru/counter?js=na;id=87856;t=54" 
border=0 height=31 width=88 
alt="TopList"></a></noscript><script language="JavaScript"><!-- 
if(js>11)d.write('--'+'>')//--></script> 
 
<br><br> 

</BODY></HTML>
