<HTML><HEAD>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1251">
<TITLE>Калашников.ru - Ассемблер? Это просто!.. (Выпуск № 004)</TITLE>
</HEAD>
<BODY BGCOLOR=#EBD2A5 link=#660000 alink=#000000 vlink=#000000 text=#000000>

<!--#include virtual="/cgi-bin/lbe"-->

<HR>

<div align="left">

<table border="1" cellspacing="0" width="100%" bgcolor="#CAE4FF">
 <tr>
 <td><div align="center"><center><table border="3"
 width="100%" bgcolor="#C0C0C0">
<tr>
<td align="center"><p align="center"><font
color="#000080" size="5"><em><strong>Здравствуйте,
уважаемые подписчики!</strong></em></font></p>
</td>
</tr>
 </table>
 </center></div><p align="left"><font color="#0000A0"
 size="5"><strong>Сегодня у нас:</strong></font></p>
 <p><font size="4"><strong>План рассылки:</strong></font></p>
 <ul>
<li><a href="#news"><em>Новости</em></a></li>
<li><a href="#theory"><em>Теория</em></a></li>
<li><a href="#segment"><em>Еще немного о
сегментации памяти</em></a></li>
<li><a href="#newoperators"><em>Новые
операторы</em></a></li>
 <li><a href="#progpractice"><em>Программка
 для практики</em></a></li>
 <li><a href="#suggestion"><em>Предложение
 по ведению рассылки</em></a></li>
 </ul>
 <hr>
 <p align="center"><a name="news"></a><font size="5"><strong>Новости</strong></font></p>
 <p><em>Новость первая.</em></p>
 <p>Наша подписка переведена в
 разряд <em>&quot;Серебряных&quot;</em>,
 что, безусловно, радует. Прежде
 всего, <strong>я благодарен вам</strong>,
 что подписались, что
 присылаете свои вопросы и
 пожелания. Надеюсь, что и
 впредь мы останемся вместе
 изучать язык Ассемблера.</p>
 <p><em>Новость вторая.</em></p>
 <p>Я открыл свой <a
 href="http://www.Kalashnikoff.ru"><font color="#0000FF">сайт</font></a>
 (наконец-то!), на котором можно
 скачать кое-какие программы
 (например, TASM), найти ответы на
 часто задаваемые вопросы по
 Ассемблеру, скачать примеры
 программ в DOS-формате с
 пояснениями, которые
 публикуются в наших рассылках,
 и кое-что еще. Но прошу вас не
 злоупотреблять перекачкой
 примеров, т.к. <strong><u>вы должны
 набирать все операторы сами</u></strong>.
 <a href="http://www.Kalashnikoff.ru"><font
 color="#0000FF">Сайт</font></a> открылся <strong>17
 июня 2000 года</strong>, и в данный
 момент на нем, вероятно, вы
 найдете не так много, как
 ожидали. Тем не менее, я
 стараюсь регулярно заносить
 туда новую информацию. Вы уж,
 пожалуйста, пока не критикуйте
 сильно!</p>
 <hr>
 <p align="center"><a name="theory"></a><font size="5"><strong>Немного
 теории.</strong></font></p>
 <p align="left"><font size="3">Итак, давайте
 подведем с вами итог. Вы уже
 знаете:</font></p>
 <ul>
 <li><p align="left"><font size="3"><em>Шестнадцатеричную
 систему счисления;</em></font></p>
 </li>
 <li><p align="left"><font size="3"><em>Двоичную
 систему счисления;</em></font></p>
 </li>
 <li><p align="left"><font size="3"><em>Некоторые
 регистры микропроцессоров
 Intel 8086/8088/80186;</em></font></p>
 </li>
 <li><p align="left"><font size="3"><em>Основы
 сегментации памяти в DOS;</em></font></p>
 </li>
 <li><p align="left"><em>Операторы
 Ассемблера:</em></p>
 <ul type="disc">
<li><p align="left"><strong>org</strong><em>
(с какого места
отсчитывать смещение)</em></p>
</li>
<li><p align="left"><strong>mov</strong><em>
(загрузка данных в
регистр или память)</em></p>
</li>
<li><p align="left"><strong>add</strong><em>
(сложение)</em></p>
</li>
<li><p align="left"><strong>sub</strong><em>
(вычитание)</em></p>
</li>
<li><p align="left"><strong>inc</strong><em>
(увеличение на
единицу)</em></p>
</li>
<li><p align="left"><strong>int</strong><em>
(вызов прерывания)</em></p>
</li>
 </ul>
 </li>
 <li><p align="left"><em>Функцию 09h
 прерывания 21h (вывод строки
 на экран в текущую позицию
 курсора);</em></p>
 </li>
 <li><p align="left"><em>Функцию 10h
 прерывания 16h (ожидание
 нажатия клавиши).</em></p>
 </li>
 </ul>
 <p align="left"><font size="3">В принципе,
 довольно много, чтобы начать
 серьезное и интенсивное
 обучение языка Ассемблера. </font><font
 size="4"><strong><u>Самое интересное
 только начинается</u></strong></font><font
 size="3">! Если что-то из
 вышеперечисленного вам не
 совсем понятно, то </font><a
 href="mailto:Assembler@Kalashnikoff.ru"><font color="#0000FF"
 size="3">спрашивайте</font></a><font size="3">.
 Просмотрите еще раз </font><a
 href="http://www.subscribe.ru/archive/comp.prog.assembler"><font
 color="#0000FF" size="3">прошлые выпуски</font></a><font
 size="3">. Больше заострять
 внимание на том, что в них
 находится мы не будем. Однако,
 если ко мне будет поступать
 много вопросов по прошлым
 выпускам, то я обязательно на
 все отвечу. Итак, <strong><u>теперь
 только вперед!</u></strong></font></p>
 <hr>
 <p align="center"><a name="segment"></a><font size="4"><strong>Еще
 немного о сегментации памяти.</strong></font></p>
 <p align="left"><font size="3">Давайте
 возьмем часть примера, который
 мы уже рассматривали, но
 кое-что в нем упустили.</font></p>
 <p align="left"><font size="3">(1) ...</font></p>
 <p align="left"><font size="3">(2) mov ah,9</font></p>
 <p align="left"><font size="3">(3) mov dx,offset
 My_string</font></p>
 <p align="left"><font size="3">(4) int 21h</font></p>
 <p align="left"><font size="3">(5) ....</font></p>
 <p align="left"><font size="3">(6) My_string db
 'Ура!$'</font></p>
 <p align="left"><font size="3">(7) ...</font></p>
 <p align="left"><font size="3">Опустим
 некоторые операторы: строки (1),
 (5) и (7). Их вы уже знаете.</font></p>
 <p align="left"><font size="3">В строке (3)
 загружаем в регистр DX АДРЕС
 строки в памяти. Обратите
 внимание на запись: mov dx,<strong><u>offset</u></strong>
 My_string. Вы уже знаете, что
 оператор mov загружает в регистр
 число. Например:</font></p>
 <p align="left"><font size="3">mov cx,125</font></p>
 <p align="left"><font size="3">В строке (3) мы
 видим пока еще неизвестный нам
 оператор <em><strong>offset</strong></em>. Что
 же он делает? И почему нельзя
 записать вот так: </font><font size="3"
 face="Arial Cyr">mov dx,My_string</font><font size="3">?</font></p>
 <p align="left"><font size="3"><em>Offset</em>
 по-английски - это <em>смещение.</em>
 Когда, при ассемблировании,
 Ассемблер дойдет до этой
 строки, он заменит offset My_string на
 АДРЕС (смещение) этой строки в
 памяти. Если мы запишем mov
 dx,My_string (хотя, правильнее будет </font><font
 size="3" face="Arial Cyr">mov dx,word ptr My_string</font><font
 size="3">, но об этом позже), то в DX
 загрузится <strong>не адрес
 (смещение)</strong>, а <strong>первые
 два символа</strong> нашей строки
 (в данном случае &quot;Ур&quot;).
 Почему два? Вы не знаете?
 Потому, что DX -
 шестнадцатиразрядный регистр,
 в который можно загрузить два
 байта. А один символ, как вы уже
 знаете, всегда один байт.</font></p>
 <p align="left"><font size="3">Можно
 записать и так: mov dl,My_string (здесь
 правильнее будет </font><font size="3"
 face="Arial Cyr">mov dl,byte ptr My_string</font><font
 size="3">). В этом случае что будет
 находится в DL? Символ &quot;У&quot;!
 Потому, что DL восьмиразрядный
 регистр и может хранить только
 один байт.</font></p>
 <p align="left"><font size="3">Несколько
 слов про записи вида </font><font
 size="3" face="Arial Cyr">mov dl,byte ptr My_string</font><font
 size="3"> и </font><font size="3" face="Arial Cyr">mov
 dx,word ptr My_string</font><font size="3">.</font></p>
 <p align="left"><font size="3"><em>Byte</em> (думаю,
 все знают) - это байт. <em>Word</em> -
 слово (два байта). Посмотрите
 внимательно на приведенные
 выше строки. Вы заметите, что
 когда используется
 восьмиразрядный регистр (DL), мы
 пишем </font><font size="3" face="Arial Cyr">byte</font><font
 size="3">. А когда
 шестнадцатиразрядный (DX) - </font><font
 size="3" face="Arial Cyr">word</font><font size="3">.
 Это указывает Ассемблеру, что
 мы хотим загрузить именно байт
 либо слово.</font></p>
 <p align="left"><font size="3">Вспомним, что
 в DOS для формирования адреса
 используется сегмент и
 смещение. Данный пример - не
 исключение. Для формирования
 адреса строки &quot;Ура!$&quot;
 используется пара регистров DS
 (сегмент) и DX (смещение). Почему
 же мы ничего не загружаем в DS?
 Дело в том, что при загрузке
 *.com-программы в память (а мы
 пока создаем только такие), все
 сегментные регистры принимают
 значение равное тому сегменту,
 в который загрузилась наша
 программа (в т.ч. и DS). Поэтому
 нет необходимости загружать в
 DS сегмент строки (он уже
 загружен). Программа типа *.com
 всегда занимает один сегмент,
 поэтому размер программ такого
 типа ограничен 64 килобайтами.
 Помните, почему?</font></p>
 <p align="left"><font size="3">Программы,
 написанные на &quot;чистом&quot;
 Ассемблере, очень компактны. И
 64 килобайта для них довольно
 большой объем.</font></p>
 <p align="left"><font size="3">Помнится,
 писал когда-то я антивирусную
 оболочку типа &quot;а-ля Нортон
 Коммандер&quot; на Ассемблере.
 Так она заняла у меня примерно
 40 килобайт, хотя и не выполняла
 всех функций NC, но делала
 кое-что другое. Еще пример: Volcov
 Commander поздних версий.
 Практически копия NC, но
 занимает всего 64000 байт (в
 отличие от Нортона). Я
 подозреваю, что писали ее если
 не на &quot;чистом&quot; Ассемблере,
 то хотя бы большую часть кода
 так точно. Да и работает Volkov
 гораздо быстрее Нортона.</font></p>
 <p align="left"><font size="3">Вернемся. Если
 есть желание поэкспериментировать, то
 попробуйте перед вызовом 21h-ого
 прерывания загрузить в DS
 какое-нибудь число. Например,
 так:</font></p>
 <p align="left"><font size="3">...</font></p>
 <p align="left"><font size="3">mov dx,offset My_string</font></p>
 <p align="left"><font size="3">mov ax,10h</font></p>
 <p align="left"><font size="3">mov ds,ax</font></p>
 <p align="left"><font size="3">mov ah,9</font></p>
 <p align="left"><font size="3">int 21h</font></p>
 <p align="left"><font size="3">...</font></p>
 <p align="left"><font size="3">Вы увидите,
 что программа выведет не нашу
 строку, а какой-то &quot;мусор&quot;
 на экран, хотя в DX мы и
 загружаем адрес нашей строки,
 но сегмент другой. Только не
 забудьте восстановить DS после
 выполнения данной функции:</font></p>
 <p align="left"><font size="3">mov ax,cs</font></p>
 <p align="left"><font size="3">mov ds,ax</font></p>
 <p align="left"><font size="3">Итак, полное
 описание:</font></p>
 <p><font color="#804040">Функция 09h
 прерывания 21h - вывод строки
 символов на экран в текущую
 позицию курсора:</font></p>
 <table border="1" cellpadding="2" bordercolor="#000000">
 <tr>
 <td bordercolordark="#000000"
 bordercolorlight="#000000"><strong>Вход:</strong></td>
 <td bordercolordark="#000000"
 bordercolorlight="#000000">AH = 09h<p>DS:DX =
 адрес ASCII-строки символов,
 заканчивающийся '$'</p>
 </td>
 </tr>
 <tr>
 <td bordercolordark="#000000"
 bordercolorlight="#000000"><strong>Выход:</strong></td>
 <td bordercolordark="#000000"
 bordercolorlight="#000000">ничего</td>
 </tr>
 </table>
 <p align="left"><font size="3">Ну,
 разобрались с этим
 окончательно...</font></p>
 <hr>
 <p align="center"><a name="newoperators"></a><font
 size="5">Новые операторы.</font></p>
 <p align="left"><font size="4"><strong>Создание
 циклов.</strong></font></p>
 <p align="left"><font size="3">Что такое
 цикл? Допустим, нам нужно
 выполнить некоторый код
 программы несколько раз.
 Возьмем, к примеру, вывод
 строки функцией 09h прерывания
 21h:</font></p>
 <p align="left"><a name="example1"></a><font size="3"><em>Пример
 1.</em></font></p>
 <p align="left"><font size="3">mov ah,9</font></p>
 <p align="left"><font size="3">mov dx,offset Str</font></p>
 <p align="left"><font size="3">int 21h</font></p>
 <p align="left"><font size="3">mov ah,9</font></p>
 <p align="left"><font size="3">mov dx,offset Str</font></p>
 <p align="left"><font size="3">int 21h</font></p>
 <p align="left"><font size="3">mov ah,9</font></p>
 <p align="left"><font size="3">mov dx,offset Str</font></p>
 <p align="left"><font size="3">int 21h</font></p>
 <p align="left"><font size="3">Этот участок
 кода выведет 3 раза на экран
 некую строку Str. Код получается
 громоздким, неудобно читать.
 Размер программы
 разрастается... Для выполнения
 подобных примеров
 используется оператор </font><font
 size="3" face="Arial Cyr">loop</font><font size="3">
 (вспоминаем, как мы оформляем
 новые операторы):</font></p>
 <div align="left"><table border="1">
 <tr>
 <td bgcolor="#4481DB"><p align="center">Команда</p>
 </td>
 <td bgcolor="#4481DB"><p align="center">Перевод
 (с англ.)</p>
 </td>
 <td bgcolor="#4481DB"><p align="center">Назначение</p>
 </td>
 <td bgcolor="#4481DB"><p align="center">Процессор</p>
 </td>
 </tr>
 <tr>
 <td>LOOP метка</td>
 <td>loop - петля</td>
 <td>Организация циклов</td>
 <td>8086</td>
 </tr>
 </table>
 </div><p align="left"><font size="3">Количество
 повторов задается в регистре CX
 (счетчик). Вот как можно
 использовать этот оператор на
 практике (изменим </font><a
 href="#example1"><font color="#800040" size="3">Пример
 1</font></a><font size="3">):</font></p>
 <p align="left"><a name="example2"></a><font size="3"><em>Пример
 2:</em></font></p>
 <p align="left"><font size="3">(1) mov cx,3</font></p>
 <p align="left"><font size="3">(2) Label_1:</font></p>
 <p align="left"><font size="3">(3) mov ah,9</font></p>
 <p align="left"><font size="3">(4) mov dx,offset Str</font></p>
 <p align="left"><font size="3">(5) int 21h</font></p>
 <p align="left"><font size="3">(6) loop Label_1</font></p>
 <p align="left"><font size="3">(7) ...</font></p>
 <p align="left"><font size="3">В строке (1)
 загружаем в CX количество
 повторов (отсчет будет идти от 3
 до 0). В строке (2) создаем метку
 (Label - метка). Далее (строки (3)-(5))
 выводим сообщение. И в строке (6)
 оператор loop уменьшает на
 единицу CX и, если он не равен
 нулю, переходит на метку Label_1
 (строка (2)). Итого строка будет
 выведена на экран три раза.
 Когда программа перейдет на
 строку (7), регистр CX будет равен
 нулю. В результате код
 программы уменьшается почти в
 три раза по сравнению с
 Примером 1.</font></p>
 <p align="left"><font size="3">Удобно? Без
 вопросов!</font></p>
 <p align="left"><font size="3">Тренироваться
 будем на практике, а теперь
 следующий оператор:</font></p>
 <div align="left"><table border="1">
 <tr>
 <td bgcolor="#4481DB"><p align="center">Команда</p>
 </td>
 <td bgcolor="#4481DB"><p align="center">Перевод
 (с англ.)</p>
 </td>
 <td bgcolor="#4481DB"><p align="center">Назначение</p>
 </td>
 <td bgcolor="#4481DB"><p align="center">Процессор</p>
 </td>
 </tr>
 <tr>
 <td>JMP метка</td>
 <td>jump - прыжок</td>
 <td>Безусловный переход</td>
 <td>8086</td>
 </tr>
 </table>
 </div><p>Команда jmp просто
 переходит на указанную метку в
 программе:</p>
 <p>(1) mov ah,9</p>
 <p>(2) mov dx,offset Str</p>
 <p>(3) int 21h</p>
 <p>(4) jmp Label_2</p>
 <p>(5)</p>
 <p>(6) add cx,12</p>
 <p>(7) dec cx</p>
 <p>(8) Label_2:</p>
 <p>(9) int 20h</p>
 <p>В результате строки (5) - (7)
 работать не будут. Программа
 выведет сообщение на экран, а
 затем jmp перейдет к строке (8),
 после чего программа
 завершится.</p>
 <div align="left"><table border="1">
 <tr>
 <td bgcolor="#4481DB"><p align="center">Команда</p>
 </td>
 <td bgcolor="#4481DB"><p align="center">Перевод
 (с англ.)</p>
 </td>
 <td bgcolor="#4481DB"><p align="center">Назначение</p>
 </td>
 <td bgcolor="#4481DB"><p align="center">Процессор</p>
 </td>
 </tr>
 <tr>
 <td>DEC приемник</td>
 <td>decrement - декремент</td>
 <td>Уменьшение на 1</td>
 <td>8086</td>
 </tr>
 </table>
 </div><p>Оператор dec уменьшает значение приемника на 1:</p>
 <p>mov ah,12 ---&gt; AH=12</p>
 <p>dec ah ---&gt; AH=11</p>
 <p>С помощь данного оператора
 можно также создавать циклы,
 которые будут работать быстрее
 оператора loop. Следующий пример
 будет работать также, как <a
 href="#example2"><font color="#804040">Пример 2</font></a>,
 только чуть-чуть быстрее:</p>
 <p><em>Пример 3:</em></p>
 <p align="left"><font size="3">(1) mov cx,3</font></p>
 <p align="left"><font size="3">(2) Label_1:</font></p>
 <p align="left"><font size="3">(3) mov ah,9</font></p>
 <p align="left"><font size="3">(4) mov dx,offset Str</font></p>
 <p align="left"><font size="3">(5) int 21h</font></p>
 <p align="left"><font size="3">(6) dec cx</font></p>
 <p align="left"><font size="3">(7) jnz Label_1</font></p>
 <p align="left"><font size="3">Не обращайте
 внимание на строку (7). Мы ее
 рассмотрим позже. Я привел этот
 пример для того, чтобы
 показать, что один и тот же
 прием в Ассемблере можно
 выполнить разными операторами.
 И чем лучше программист
 владеет ими, тем компактнее и
 быстрее программа будет
 работать. Поэтому и получается,
 что разные программисты пишут
 на одном языке, но скорость и
 объем программы разные. В
 процессе обучения, я буду также
 учить вас оптимизировать
 программы.</font></p>
 <hr>
 <p align="center"><a name="progpractice"></a><font
 size="5"><strong>Программка для
 практики.</strong></font></p>
 <p align="left"><font size="3">Усовершенствуем
 </font><a
 href="www.Kalashnikoff.ru/Assembler/Programs/Lessons/Less003.asm"><font
 color="#0000FF" size="3">программу</font></a><font
 size="3"> из предыдущей рассылки,
 которая выводила в верхний
 левый угол &quot;рожицу&quot; прямым
 отображением в видеобуфер.</font></p>
<div align="left"><font size="3">
 <p>(1) CSEG segment</p>
 <p>(2) org 100h</p>
 <p>(3) Begin:</font></p>
 <p>(4) mov ax,0B800h</p>
 <p>(5) mov es,ax</p>
 <p>(6) mov di,0</p>
 <p>(7) mov al,1</p>
 <p>(8) mov ah,31</p>
 <p>(9) mov cx,2000</p>
 <p>(10)</p>
 <p>(11) Next_face:</p>
 <p>(12) mov es:[di],ax</p>
 <p>(13) add di,2</p>
 <p>(14) loop Next_face</p>
 <p>(15)</p>
 <p>(16) mov ah,10h</p>
 <p>(17) int 16h</p>
 <p>(18) int 20h</p>
 <p>(19) CSEG ends</p>
 <p>(20) end Begin</p>
 <p>Уфф! Длинная
 получилась. Прежде чем читать
 описание программы, попробуйте
 сами разобраться, что в итоге
 получится. Поверьте, это
 принесет вам пользу. Все ведь
 очень просто!</p>
 <p align="left"><font size="3">Теперь
 описание программы.</font></p>
 <p align="left"><font size="3">Строки с (1) по
 (10) и с (15) по (20) вы уже знаете.
 Объясню только новое.</font></p>
 <p align="left"><font size="3">Строка (11) - это
 метка, как бы &quot;голова&quot;
 нашего цикла. Строка (14) -
 &quot;хвост&quot; цикла. Все, что
 находится в пределах строк (10) -
 (14), является циклом. Сам цикл
 будет повторяться 2000 раз, для
 чего мы и заносим в CX число 2000
 (строка (8)).</font></p>
 <p align="left"><font size="3">В строке (12)
 записываем в видеобуфер (0B800:DI)
 число в AX (это символ (строка (7)
 и атрибут (строка (8)). Итак,
 первый символ занесли. Что
 делаем дальше?</font></p>
 <p align="left"><font size="3">Дальше
 увеличиваем регистр DI на 2 для
 того чтобы перейти к адресу
 следующего символа. Почему на 2?
 Дело в том, что в видеобуфере
 один символ занимает 2 байта:
 сам символ и его атрибут. Т.к.
 символ у нас в AL, а атрибут в AH, и
 мы загрузили уже эти два байта
 в строке (12), то и увеличиваем DI
 (смещение) на 2.</font></p>
 <p align="left"><font size="3">DI теперь
 указывает на адрес для
 следующего символа. Осталось
 уменьшить счетчик (CX) на 1 и
 повторить. Что мы, собственно, и
 делаем в строке (14).</font></p>
 <p align="left"><font size="3">Все! Обратите
 внимание на скорость вывода
 символов при запуске
 программы.</font></p>
 <p align="left"><font
 color="#004080" size="3"><strong>Еще раз напоминаю:
 пожалуйста, печатайте все
 программы сами!</strong> Так вы
 быстрее освоите Ассемблер!</font></p>
 <hr>
 <p align="center"><a name="suggestion"></a><font size="3"><strong>Предложение
 по ведению рассылки</strong></font></p>
 <p align="left"><font size="3"><em><strong>Дорогие
 мои подписчики!</strong></em> Хочу
 вынести на ваш суд следующее
 предложение по построению
 наших уроков.</font></p>
 <p align="left"><font size="3">Мы можем
 начинать писать какую-нибудь
 серьезную программу на
 Ассемблере, попутно изучая сам
 язык. От вас требуется
 проявлять некоторую
 активность и присылать </font><a
 href="mailto:Assembler@Kalashnikoff.ru"><font color="#0000FF"
 size="3">мне</font></a><font size="3"> какую
 программу вы хотели бы
 написать. <strong>Только
 поактивнее, пожалуйста!</strong>
 Все варианты будут
 опубликованы в последующих
 рассылках, а вы уж проголосуете
 за ту или иную программу. Я
 надеюсь, что изучать язык таким
 образом будет гораздо
 интереснее. <em>А вы как думаете?</em></font></p>
 <p align="left"><font size="3"><strong>Удачи и до
 встречи через неделю!</strong></font></p>
 <p align="left"><font size="3"><em><strong>С
 уважением,</strong></em></font></p>
 <p align="left"><font size="3"><em><strong>Калашников
 Олег</strong></em><strong> </strong>(</font><a
 href="mailto:Assembler@Kalashnikoff.ru"><font color="#0000FF"
 size="3">Assembler@Kalashnikoff.ru</font></a><font size="3">).</font></p>

<hr>

<p align="center">[<a href="005.htm">Следующий выпуск</a>] [<a TARGET=_blank href= "http://www.Kalashnikoff.ru/">На главную страницу</a>]</p>

<HR NOSHADE><CENTER>
<!-- SpyLOG v2 f:0211 --><script language="javascript">  
u="u496.71.spylog.com";d=document;nv=navigator;na=nv.appName;p=1;  
bv=Math.round(parseFloat(nv.appVersion)*100);  
n=(na.substring(0,2)=="Mi")?0:1;rn=Math.random();z="p="+p+"&rn="+rn;y="";  
y+="<a href='http://"+u+"/cnt?f=3&p="+p+"&rn="+rn+"' target=_blank>";  
y+="<img src='http://"+u+"/cnt?"+z+  
"&r="+escape(d.referrer)+"&pg="+escape(window.location.href)+"' border=0 width=88 height=31 alt='SpyLOG'>";  
y+="</a>"; d.write(y);if(!n) { d.write("<"+"!--"); }//--></script><noscript><p align="center"><a 
href="http://u496.71.spylog.com/cnt?f=3&amp;p=1" 
target="_blank"><img src="http://u496.71.spylog.com/cnt?p=1" alt="SpyLOG" align="middle" border="0"></a> 
<a href="http://u496.71.spylog.com/cnt?f=3&amp;p=1" target="_blank"></noscript></a> 
<a href="http://u496.71.spylog.com/cnt?f=3&amp;p=1" target="_blank"> 
<script language="javascript1.2"><!-- if(!n) { d.write("--"+">"); }//--></script></a> 
<!-- SpyLOG --> 
 
 <a target=_top href="http://www.one.ru"><img src="http://cnt.one.ru/cgi-bin/cnt.cgi?id=16871&t=9" width=88 height=31 alt="be number one" border=0></a> 
 
 <script language="JavaScript"><!-- 
d=document;a='';a+=';r='+escape(d.referrer) 
js=10//--></script><script language="JavaScript1.1"><!-- 
a+=';j='+navigator.javaEnabled() 
js=11//--></script><script language="JavaScript1.2"><!-- 
s=screen;a+=';s='+s.width+'*'+s.height 
a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth) 
js=12//--></script><script language="JavaScript1.3"><!-- 
js=13//--></script><script language="JavaScript"><!-- 
d.write('<a href="http://top.list.ru/jump?from=87856"'+ 
' target=_top><img src="http://top.list.ru/counter'+ 
'?id=87856;t=54;js='+js+a+';rand='+Math.random()+ 
'" alt="TopList"'+' border=0 height=31 width=88></a>') 
if(js>11)d.write('<'+'!-- ')//--></script><noscript><a 
target=_top href="http://top.list.ru/jump?from=87856"><img 
src="http://top.list.ru/counter?js=na;id=87856;t=54" 
border=0 height=31 width=88 
alt="TopList"></a></noscript><script language="JavaScript"><!-- 
if(js>11)d.write('--'+'>')//--></script> 
 
<br><br> 

</BODY>