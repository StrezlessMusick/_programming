<HTML><HEAD>
<TITLE>Калашников.ru - Ассемблер? Это просто!.. (Выпуск № 006)</TITLE>
</HEAD><BODY BGCOLOR=#EBD2A5 link=#660000 alink=#000000 vlink=#000000 text=#000000>

<P align=center><A 
href="http://ad.ir.ru/bb.cgi?cmd=go&pubid=128269&pg=2&vbn=10001&nocache=77524" 
target=_top><IMG alt="InterReklama " border=0 
src="http://ad.ir.ru/bb.cgi?cmd=ad&pubid=128269&pg=2&vbn=10001&nocache=77524"></A></P>
<P align=center><A href="http://www.ir.ru" target=_top><FONT size=1>InterReklama 
Advertising</FONT></A> </P>
<HR>


<div align="center"><center>

<table border="2" width="100%" bgcolor="#9BDEEC">
 <tr>
 <td width="100%"><div align="center"><center><table
 border="3" width="100%" bgcolor="#3C89B7">
 <tr>
 <td width="100%"><p align="center"><font size="5"><strong>Здравствуйте,
 уважаемые любители
 Ассемблера!</strong></font></p>
 <hr>
 <p align="center">Выпуск N 006</p>
 </td>
 </tr>
 </table>
 </center></div><p align="right"><font size="3"><strong>I
 like to move it, move it</strong></font></p>
 <p align="right"><font size="3"><strong>I like to move
 it, move it</strong></font></p>
 <p align="right"><font size="3"><strong>I like to... move
 it!</strong></font></p>
 <p align="right"><font size="3"><em>Напел я
 старенькую песню и</em></font></p>
 <p align="right"><font size="3"><em>загрузил в
 AX число 20h</em></font></p>
 <hr>
 <p align="left"><font size="5"><strong>Сегодня в
 нашей рассылке:</strong></font></p>
 <ul>
 <li><p align="left"><a href="#letters"><font
 color="#804040" size="3"><strong>Ваши
 письма</strong></font></a><font size="3"><strong>;</strong></font></p>
 </li>
 <li><p align="left"><a href="#results"><font
 color="#804040" size="3"><strong>Результаты
 голосования</strong></font></a><font
 color="#804040" size="3"><strong>;</strong></font></p>
 </li>
 <li><p align="left"><a href="#stack"><font
 color="#804040" size="3"><strong>Стек/стэк
 (stack)</strong></font></a><font size="3"><strong>;</strong></font></p>
 </li>
 <li><p align="left"><a href="#prog"><font
 color="#800000" size="3"><strong>Программка
 для практики</strong></font></a><font
 size="3"><strong>.</strong></font></p>
 </li>
 </ul>
 <hr>
 <p align="center"><a name="letters"><font size="5"><strong>Ваши
 письма</strong></font></a></p>
 <p align="left"><font size="3">На прошлой
 неделе я получил еще порцию
 писем от вас. Вот что мне
 хотелось бы отметить:</font></p>
 <p align="left"><font size="3">Дорогие мои!
 Не спешите! Я, к сожалению, не
 успеваю отвечать на ваши
 вопросы. Давайте все будем
 рассматривать по порядку. Я,
 конечно, понимаю, что вам не
 терпится попробовать ВСЕ. Я сам
 когда-то учился
 программировать. Руки так
 чесались, что по ночам лез на
 стенку. В то время (1993 год) у
 меня не было компьютера, и
 приходилось довольствоваться
 услугами компьютерных центров,
 в которых стояли тогда
 отечественные ЕС-1840 (жалкое
 подобие IBM PC/XT, только без
 винчестера)...</font></p>
 <p align="left"><font size="3">Пробуйте, экспериментируйте. Поверьте,
 самому гораздо интереснее
 докапываться до истины. У вас
 есть все необходимое (tasm, tlink,
 afd/CV). Если кто-то не имеет этих
 программ - возьмите </font><font
 color="#400040" size="3">здесь</font><font size="3">:</font></p>
 <p align="left"><a
 href="http://asm.kalashnikoff.ru/prog/"><font
 color="#0000FF" size="3">http://asm.kalashnikoff.ru/prog/</font></a></p>
 <p align="left"><font size="3">Если уж вы
 зашли в тупик, то пишите ( </font><a
 href="mailto:oleg77@online.ru?Subject=Я в тупике!"><font
 size="3">oleg77@online.ru?Subject=Я в тупике!</font></a><font
 size="3"> ). Постараемся
 разобраться.</font></p>
 <hr>
 <p align="center"><a name="results"><font size="5"><strong>Результаты
 голосования.</strong></font></a></p>
 <p align="left"><font size="3">Спасибо всем,
 кто принял участие в
 голосовании. Вот его
 окончательные результаты
 (прямо хит-парад какой-то
 получился):</font></p>
 <div align="left"><table border="3" width="60%">
 <tr>
 <td width="50%">Команды и
 инструкции 486-Pentium</td>
 <td width="20%">17</td>
 </tr>
 <tr>
 <td width="50%">Viewer для просмотра
 графики</td>
 <td width="20%">9</td>
 </tr>
 <tr>
 <td width="50%">Безобидный вирус</td>
 <td width="20%">31</td>
 </tr>
 <tr>
 <td width="50%">Графическая игра</td>
 <td width="20%">12</td>
 </tr>
 <tr>
 <td width="50%">Дизассемблер</td>
 <td width="20%">7</td>
 </tr>
 <tr>
 <td width="50%">Графическая
 заставка с музыкой</td>
 <td width="20%">15</td>
 </tr>
 <tr>
 <td width="50%">Локальная сеть</td>
 <td width="20%">18</td>
 </tr>
 <tr>
 <td width="50%">Оболочка типа
 Нортон Коммандер</td>
 <td width="20%">29</td>
 </tr>
 <tr>
 <td width="50%">Резидент</td>
 <td width="20%">24</td>
 </tr>
 </table>
 </div><p>Остальные варианты, к
 сожалению, набрали менее 5
 голосов. За предварительными
 результатами можно было
 наблюдать на моей странице (я
 периодически их обновлял).</p>
 <p>Как видите, первая тройка
 выглядит так:</p>
 <p>1) Безобидный вирус;</p>
 <p>2) Оболочка;</p>
 <p>3) Резидент.</p>
 <p>Что тут можно сказать? Очень
 сложно всем угодить, к
 сожалению. У меня есть два
 варианта:</p>
 <p>1) Можно сделать рассылку чаще
 (2 раза в неделю), но меньшего
 объема. При этом, например, в
 понедельник рассматриваем
 Оболочку и команды 486, а в
 четверг Вирус и резидент.</p>
 <p>2) Можно сделать так: в
 рассылке будет три-четыре
 раздела, посвященные той или
 иной теме (вирус, оболочка и
 пр.), но сама рассылка будет
 выходить один раз в неделю.</p>
 <p>Первый вариант, я думаю,
 предпочтительней. Пишите мне,
 если Вы не согласны:</p>
 <p><a
 href="mailto:oleg77@online.ru?Subject=Не согласен!"><font
 color="#800000">oleg77@online.ru?Subject=Не
 согласен!</font></a></p>
 <p>В письме, пожалуйста, укажите
 ваше мнение.</p>
 <p>Когда мы будем писать
 Оболочку, то затронем
 Графическую заставку, возможно
 Viewer и прочее.</p>
 <p>Сейчас у меня небольшие
 проблемы с переездом в новый
 офис. Поэтому не так много
 свободного времени. Но,
 надеюсь, что скоро (как
 обживусь) я смогу уделять
 больше внимания рассылке.
 Потерпите пока немного,
 пожалуйста!</p>
 <hr>
 <p align="center"><a name="stack"><font size="5"><strong>Стек/стэк
 (stack)</strong></font></a></p>
 <p><font size="4">Немного теории.</font></p>
 <p><font size="4">Друзья мои!</font> Я <font
 size="3"><strong><u>настоятельно
 рекомендую</u></strong></font> Вам
 выполнять <strong><u>все</u></strong>, что
 я вас прошу сделать в этом
 разделе (набирать программы,
 запускать их под отладчиком).
 Так вам будет гораздо легче
 разобраться со стеком.</p>
 <p>У кого до сих пор нет
 отладчика, возьмите его,
 пожалуйста, здесь:</p>
 <p><a
 href="http://asm.kalashnikoff.ru/prog/"><font
 color="#0000FF">http://asm.kalashnikoff.ru/prog/</font></a></p>
 <p>Итак, что же такое стек и для
 чего он нужен?</p>
 <p><em><strong>Стек</strong></em><em> - это
 специально отведенная область
 памяти для хранения
 промежуточных данных.</em></p>
 <p>Давайте немного договоримся
 об определениях.</p>
 <p>Пусть будет так, что сегмент
 &quot;растет&quot; сверху вниз:</p>
 <p>0000</p>
 <p>0001</p>
 <p>0002</p>
 <p>...</p>
 <p>FFFE</p>
 <p>FFFF</p>
 <p>Т.е. мы как бы погружаемся под
 землю. Таким образом (сверху
 вниз) выполняется программа
 (если, конечно, не встречаются
 инструкции (команды) типа jmp, call
 и т.п.).</p>
 <p>Стек же наоборот пополняется
 снизу вверх. Вершина стека -
 0FFFFh, а низ (дно) - 0000h.</p>
 <p>Когда мы вызываем
 какую-нибудь подпрограмму
 командой call, процессор кладет в
 стек адрес следующей за
 командой call инструкции.
 Следить за стеком позволяет
 пара регистров SS:SP. Многие уже,
 наверное, заметили, что при
 запуске какой-нибудь
 com-программы регистр SP равен
 0FFFEh, а сегментный регистр SS, как
 уже упоминалось в предыдущих
 выпусках, равен нашему
 единственному сегменту (CSEG)
 (как и CS, DS, ES).</p>
 <p>Теперь вам необходимо
 вооружиться отладчиком.
 Давайте рассмотрим
 вышесказанное на примере:</p>
 <p><strong><u>Напечатайте такую
 программу в редакторе
 (обязательно!):</u></strong></p>
 <p>CSEG segment</p>
 <p>assume cs:CSEG, ds:CSEG, es:CSEG, ss:CSEG</p>
 <p>org 100h</p>
 <p>begin:</p>
 <p>call Our_proc</p>
 <p>int 20h</p>
 <p>Our_proc proc</p>
 <p>ret</p>
 <p>Our_proc endp</p>
 <p>CSEG ends</p>
 <p>end Begin</p>
 <p>Ничего сложного... Запускаем
 отладчик.</p>
 <p>Итак, смотрим на пару
 регистров SS:SP. SS=CS=DS=ES (это
 понятно). SP=0FFFEh (т.е. указывает
 на вершину стека).</p>
 <p>Теперь заходим в процедуру.
 Для CV нажимаем F8, для AFD F1.</p>
 <p>Опа! SP изменился. Он
 уменьшился на 2. Компьютер
 поместил в стек адрес возврата
 из процедуры (на инструкцию int
 20h) (помните <a
 href="http://asm.kalashnikoff.ru/dos"><font
 color="#0000FF">прошлые выпуски</font></a>?).
 Проще говоря, call перешел на
 метку Our_proc, поместив в стек
 адрес возврата из этой
 подпрограммы.</p>
 <p>Нажимаем еще раз F8/F1. Что
 получилось? SP опять изменился!
 Но теперь он увеличился на 2
 (стал равным 0FFFEh). Т.е. команда ret
 взяла из стека адрес возврата и
 перешла по нему. Как раз на int 20h.</p>
 <p>В данном случае говорят, что
 мы выровнили стек. Он был
 изначально равен 0FFFEh и остался
 равен перед выходом 0FFFEh.</p>
 <p>Вот один из способов
 использования стека. Но на этом
 мы не остановимся и рассмотрим
 несколько операторов, которые
 позволяют работать со стеком.</p>
 <div align="left"><table border="2">
 <tr>
 <td bgcolor="#3386B3">Оператор</td>
 <td bgcolor="#3386B3">Перевод</td>
 <td bgcolor="#3386B3">Применение</td>
 <td bgcolor="#3386B3">Процессор</td>
 </tr>
 <tr>
 <td>PUSH приемник</td>
 <td>push - втолкнуть</td>
 <td>Поместить в стек число</td>
 <td>8086</td>
 </tr>
 </table>
 <br>
 </div><div align="left"><table border="2">
 <tr>
 <td bgcolor="#3386B3">Оператор</td>
 <td bgcolor="#3386B3">Перевод</td>
 <td bgcolor="#3386B3">Применение</td>
 <td bgcolor="#3386B3">Процессор</td>
 </tr>
 <tr>
 <td>POP приемник</td>
 <td>pop - вытолкнуть</td>
 <td>Достать из стека число</td>
 <td>8086</td>
 </tr>
 </table>
 </div><p>Допустим, нам нужно
 временно сохранит какое-нибудь
 число. Например, перед вызовом
 процедуры, прерывания или
 циклом.</p>
 <p>Вот как это запишется:</p>
 <p>...</p>
 <p>(1) mov ax,345h</p>
 <p>(2) push ax</p>
 <p>(3) mov ah,10h</p>
 <p>(4) int 16h</p>
 <p>(5) pop ax</p>
 <p>...</p>
 <p>Здесь мы загружаем в AX число
 345h, сохраняем его, ждем нажатия
 клавиши (при этом сама клавиша
 будет в AX, т.е. AX изменится) и
 восстанавливаем AX. В итоге AX
 будет содержать число 345h, что,
 как говорится, и требовалось
 доказать.</p>
 <p>Однако, стоит заметить такой
 момент. Допустим, мы помещаем в
 стек следующие регистры: AX, BX, CX:</p>
 <p>push ax</p>
 <p>push bx</p>
 <p>push cx</p>
 <p>Обратите внимание, что
 восстанавливать со стека нужно
 в обратном порядке:</p>
 <p>pop cx</p>
 <p>pop bx</p>
 <p>pop ax</p>
 <p>Если вы поменяете местами
 регистры при восстановлении,
 то ничего страшного не
 произойдет, только содержать
 они будут другие числа.
 Например:</p>
 <p>mov ax,1234h</p>
 <p>mov bx,5678h</p>
 <p>push ax</p>
 <p>push bx</p>
 <p>pop ax</p>
 <p>pop bx</p>
 <p>В итоге AX будет равен 5678h, а BX -
 1234h.</p>
 <p>Но в процедурах необходимо
 очень тщательно следить за
 стеком. Вот пример:</p>
 <p>...</p>
 <p>call Our_proc</p>
 <p>int 20h</p>
 <p>...</p>
 <p>Our_proc proc</p>
 <p>mov ax,15</p>
 <p>push ax</p>
 <p>mov ah,9</p>
 <p>mov dx,offset Str</p>
 <p>int 21h</p>
 <p>ret</p>
 <p>Our_proc endp</p>
 <p>...</p>
 <p>Обратите внимание, что мы
 &quot;забыли&quot; восстановить из
 стека AX в нашей процедуре
 (Our_proc). Что произойдет?
 Компьютер, дойдя до оператора
 ret, вытащит из стека не адрес
 возврата, а число 15 и перейдет
 на этот адрес. Что находится по
 адресу 15 - не известно. Машина,
 скорее всего, &quot;зависнет&quot;.
 Надеюсь, что это понятно.</p>
 <p>Следить за стеком (как уже
 говорилось) позволяет пара
 регистров SS (сегмент):SP
 (смещение).</p>
 <p>Программист может менять как
 сегмент, так и смещение, но при
 этом следует иметь ввиду, что
 перед сменой регистров SS и SP
 необходимо запретить все
 прерывания, а после изменения
 разрешить (запрет прерываний
 вешает компьютер!
 Восстановление же - приводит к
 нормальной работе. После
 команды cli всегда должна идти
 sti, иначе компьютер виснет!). Это
 позволяют сделать следующие
 операторы:</p>
 <div align="left"><table border="2">
 <tr>
 <td bgcolor="#3386B3">Оператор</td>
 <td bgcolor="#3386B3">Перевод</td>
 <td bgcolor="#3386B3">Применение</td>
 <td bgcolor="#3386B3">Процессор</td>
 </tr>
 <tr>
 <td>CLI</td>
 <td>CLear Interrupt - запретить</td>
 <td>Запретить прерывания</td>
 <td>8086</td>
 </tr>
 </table>
 </div>
 <br>
 <div align="left"><table border="2">
 <tr>
 <td bgcolor="#3386B3">Оператор</td>
 <td bgcolor="#3386B3">Перевод</td>
 <td bgcolor="#3386B3">Применение</td>
 <td bgcolor="#3386B3">Процессор</td>
 </tr>
 <tr>
 <td>STI</td>
 <td>reSTore Interrupt - восстановить</td>
 <td>Разрешить прерывания</td>
 <td>8086</td>
 </tr>
 </table>
 </div><p>Для чего это нужно?
 Давайте рассмотрим это в двух
 словах, т.к. механизму работы
 прерываний необходимо
 посвятить целый выпуск. Если
 что-то не понятно - просто
 опустите, не обращайте
 внимания.</p>
 <p>Когда вы создали программу и
 запустили ее на выполнение, то
 работает не только она одна.
 Простейший пример - таймер,
 который вызывается примерно 18 раз в
 секунду для обновления.
 Компьютер всегда что-то делает!
 Даже тогда, когда ждет от вас
 нажатия клавиши. Что
 происходит, когда вызывается
 прерывание от таймера?
 Примерно тоже, что и при вызове
 процедуры. Компьютер
 запоминает в стеке адрес
 текущей команды, а также все
 регистры и переходит на адрес
 прерывания, по которому
 находится процедура обработки
 этого прерывания (например,
 таймера, которая обновит
 показания часов/минут/секунд).
 Затем, как процедура
 отработала, компьютер
 восстановит из стека адрес
 возврата и все регистры, и наша
 программа пойдет работать
 дальше.</p>
 <p>Вот пример, в котором мы
 изменим регистры SS:SP, не
 запрещая прерывания:</p>
 <p>(1) mov ax,100h</p>
 <p>(2) mov ss,ax</p>
 <p>(3) mov sp,200h</p>
 <p>Допустим, прерывание таймера
 сработало после строки (2). Что у
 нас получилось? SS равен 100h, а SP
 еще не успел измениться.
 Получается, что сегмент стека
 верный, а смещение - осталось
 прежним (допустим, SP=0FFFEh). В
 итоге, SS=100h, а SP=0FFFEh. Компьютер и
 сохранит по этому адресу
 данные. Какой при этом код
 программы затрется - не
 известно. Мы ведь хотели
 сделать SS=100h, а SP=200h! Хорошо,
 если две строки успели
 выполниться перед вызовом
 прерывания. Хорошо также, если
 по адресу 100h:0FFFEh ничего нет
 (память свободна). А если есть?
 Тогда компьютер, скорее всего,
 &quot;зависнет&quot;.</p>
 <p><strong><u>Отсюда вытекает два
 правила:</u></strong></p>
 <p>1) Прежде чем менять регистры
 SS:SP, необходимо запретить все
 прерывания командой cli, а затем
 разрешить командой sti.</p>
 <p>2) SS:SP нужно устанавливать на
 свободную область памяти. При
 этом следует убедиться, что код
 не утратил работоспособности.</p>
 <p>Мы знаем, что после загрузки
 com-программы в память, SS равен
 сегменту, куда загрузилась
 программа, а SP - 0FFFEh. Код
 программы начинается с адреса
 100h (org 100h). Вершина стека - конец
 нашего сегмента. Если наша
 программа занимает, скажем 2000h
 байт, то можем установить SP в
 2200h. В этом случае мы отводим 100h
 (именно сто) байт для стека (т.к.
 программа загружается по
 адресу 100h, то 2000h нужно
 прибавить 100h). Стек, как вы
 помните, растет снизу вверх.
 Если мы переполним стек
 (например, поместим более 100h
 данных), то затрется часть
 нашей программы снизу. Имейте
 это ввиду!</p>
 <p>Друзья мои! Это понятно? <a
 href="mailto:oleg77@online.ru?Subject=Ничего не понял в стеке"><font
 color="#804040">oleg77@online.ru?Subject=Ничего
 не понял в стеке</font></a></p>
 <p>Вот пример изменения регистров стека:</p>
 <p>cli</p>
 <p>mov ax,0B900h</p>
 <p>mov ss,ax</p>
 <p>mov sp,100h</p>
 <p>sti</p>
 <hr>
 <p align="center"><a name="prog"><font size="5"><strong>Программка
 для практики.</strong></font></a></p>
 <p>Прежде чем перейти к
 программе, рассмотрим новый
 оператор:</p>
 <div align="left"><table border="2">
 <tr>
 <td bgcolor="#3386B3">Оператор</td>
 <td bgcolor="#3386B3">Перевод</td>
 <td bgcolor="#3386B3">Применение</td>
 <td bgcolor="#3386B3">Процессор</td>
 </tr>
 <tr>
 <td>NOP</td>
 <td>No OPerand - нет операнда</td>
 <td>Ничего не делает</td>
 <td>8086</td>
 </tr>
 </table>
 </div><p>Этот оператор делает то,
 что ничего не делает, но
 занимает один байт. Его обычно
 используют для резервирования
 места либо для того, чтобы
 &quot;забить&quot; ненужный код,
 когда исходник на Ассемблере
 отсутствует. Например,
 программа перед стартом
 проверяет версию MS-DOS. Версия,
 которая установлена на вашем
 компьютере, не соответствует
 требуемой программой. Для
 этого данным оператором
 &quot;забивают&quot; участок кода,
 который проверяет версию ОС.</p>
 <p>Все это позволяет сделать
 Hacker's View, который можно взять на
 сайте:</p>
 <p><a
 href="http://asm.kalashnikoff.ru/prog/">http://asm.kalashnikoff.ru/prog/</a></p>
 <p><strong><u>Запомните машинный код
 данной команды: </u></strong><font
 size="5"><strong>90h</strong></font>.</p>
 <p>Даю голову на отсечение, что
 ни один язык высоко уровня не
 позволяет сделать того, что
 может наша программа:</p>
 <p>(1) CSEG segment</p>
 <p>(2) assume cs:CSEG, es:CSEG, ds:CSEG, ss:CSEG</p>
 <p>(3) org 100h</p>
 <p>(4) Begin:</p>
 <p>(5) mov sp,offset Lab_1</p>
 <p>(6) mov ax,9090h</p>
 <p>(7) push ax</p>
 <p>(8) int 20h</p>
 <p>(9) Lab_1:</p>
 <p>(10) mov ah,9</p>
 <p>(11) mov dx,offset Mess</p>
 <p>(12) int 21h</p>
 <p>(13) int 20h</p>
 <p>(14) Mess db 'А все-таки она
 выводится!$'</p>
 <p>(15) CSEG ends</p>
 <p>(16) end Begin</p>
 <p>То, что вы видите - обман
 зрения. На первый взгляд,
 программа что-то делает с
 регистром SP, а затем выходит.
 Строки (9) - (12) вообще не будут
 работать. Но это глубокое
 заблуждение!</p>
 <p>Попробуйте запустить ее под
 отладчиком. Вы увидите, что
 CodeView, TurboDebuger, AFD будут сообщать
 какую-то ерунду (непонятные
 операторы, сообщения типа
 &quot;программа завершилась&quot;,
 хотя строка не выведена и пр.).
 Но, если запустить ее просто из
 ДОС, то строка появится на
 экране, т.е. программа будет
 работать корректно!</p>
 <p>Данный пример - типичный
 случай &quot;заламывания рук&quot;
 отладчикам (но не SoftIce!). И вы уже
 можете это делать!</p>
 <p>Вывод один: указанные выше
 отладчики используют стек
 пользовательской программы
 (что это значит - думаю, вы
 разберетесь).</p>
 <p>Ваша задача: разобрать &quot;по
 полочкам&quot; программу. Почему
 так происходит? Почему строка
 выводится? Почему отладчик
 работает неверно? И пр. и пр.
 Вопросов море. И вам предстоит
 дать ответ на них.</p>
 <p>Разобравшись с программой <strong><u>самостоятельно</u></strong>,
 вы почувствуете Силу и
 Неограниченные Возможности
 Ассемблера. И это правда! Не
 спешите писать мне письмо с
 просьбой помочь. Будет не
 интересно! Пробуйте
 разобраться сами! Не бойтесь экспериментировать! Компьютер
 будет часто зависать, но это не
 главное! Ваши мучения приведут
 вас к Истине! Я сам проходил
 когда-то через это...</p>
 <p>Впечатлениями можно делиться
 со мной: </p>
 <p><a
 href="mailto:oleg77@online.ru?Subject=Впечатления"><font
 color="#0000FF">oleg77@online.ru?Subject=Впечатления</font></a></p>
 <p><strong>Давайте попробуем
 встретиться в чате в
 понедельник (07.08.2000) в 09:30 утра
 по московскому времени:</strong></p>
 <p><a href="http://www.chats.ru/users_chats/oleg77/"><strong>http://www.chats.ru/users_chats/oleg77/</strong></a></p>
 <p><strong>Жду вас всех (если
 удастся пробиться)!</strong></p>
 <p><strong>Нескучной Вам недели!</strong></p>
 <p><strong>С уважением,</strong></p>
 <p><strong>Калашников Олег</strong> ( <a
 href="mailto:oleg77@online.ru?Subject=Ассемблер:"><font
 color="#0000FF">oleg77@online.ru?Subject=Ассемблер:</font></a> )</p>

<hr>

<p align="center">[<a href="007.htm">Следующий выпуск</a>] [<a target=_BLANK href="http://www.Kalashnikoff.ru/">На главную страницу</a>]</p>

<HR NOSHADE><CENTER>
<!-- SpyLOG v2 f:0211 --><script language="javascript">  
u="u496.71.spylog.com";d=document;nv=navigator;na=nv.appName;p=1;  
bv=Math.round(parseFloat(nv.appVersion)*100);  
n=(na.substring(0,2)=="Mi")?0:1;rn=Math.random();z="p="+p+"&rn="+rn;y="";  
y+="<a href='http://"+u+"/cnt?f=3&p="+p+"&rn="+rn+"' target=_blank>";  
y+="<img src='http://"+u+"/cnt?"+z+  
"&r="+escape(d.referrer)+"&pg="+escape(window.location.href)+"' border=0 width=88 height=31 alt='SpyLOG'>";  
y+="</a>"; d.write(y);if(!n) { d.write("<"+"!--"); }//--></script><noscript><p align="center"><a 
href="http://u496.71.spylog.com/cnt?f=3&amp;p=1" 
target="_blank"><img src="http://u496.71.spylog.com/cnt?p=1" alt="SpyLOG" align="middle" border="0"></a> 
<a href="http://u496.71.spylog.com/cnt?f=3&amp;p=1" target="_blank"></noscript></a> 
<a href="http://u496.71.spylog.com/cnt?f=3&amp;p=1" target="_blank"> 
<script language="javascript1.2"><!-- if(!n) { d.write("--"+">"); }//--></script></a> 
<!-- SpyLOG --> 
 
 <a target=_top href="http://www.one.ru"><img src="http://cnt.one.ru/cgi-bin/cnt.cgi?id=16871&t=9" width=88 height=31 alt="be number one" border=0></a> 
 
 <script language="JavaScript"><!-- 
d=document;a='';a+=';r='+escape(d.referrer) 
js=10//--></script><script language="JavaScript1.1"><!-- 
a+=';j='+navigator.javaEnabled() 
js=11//--></script><script language="JavaScript1.2"><!-- 
s=screen;a+=';s='+s.width+'*'+s.height 
a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth) 
js=12//--></script><script language="JavaScript1.3"><!-- 
js=13//--></script><script language="JavaScript"><!-- 
d.write('<a href="http://top.list.ru/jump?from=87856"'+ 
' target=_top><img src="http://top.list.ru/counter'+ 
'?id=87856;t=54;js='+js+a+';rand='+Math.random()+ 
'" alt="TopList"'+' border=0 height=31 width=88></a>') 
if(js>11)d.write('<'+'!-- ')//--></script><noscript><a 
target=_top href="http://top.list.ru/jump?from=87856"><img 
src="http://top.list.ru/counter?js=na;id=87856;t=54" 
border=0 height=31 width=88 
alt="TopList"></a></noscript><script language="JavaScript"><!-- 
if(js>11)d.write('--'+'>')//--></script> 
 
<br><br> 


</BODY>