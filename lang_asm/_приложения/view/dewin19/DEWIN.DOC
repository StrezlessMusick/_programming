Описание некоторых возможностей дизассемблера DeWin

При запуске программа пытается загрузить файлы с описаниями функций
стандартных библиотек Windows 3.x (они имеют расширение .ex от англ.
explain обьяснять) и файл с сигнатурами стандартных библиотек языков
высокого уровня dewin.rtl которые ищутся в каталоге, где находится
сама программа (не в текущем, хотя и это работает как частный случай).

WARNING:
Начиная с версии 12/12/98 файлы *.ex обьединены в один win16dll.ex


Кроме того, в текущем каталоге ищется файл userdef.txt, содержащий
различную информацию.

В режиме анализа в текущем каталоге создается файл autodet.txt,
куда записывается собранная дополнительная информация.

Результатом работы программы является файл, одноименный входному,
с расширением .def, содержащий информацию о приложении подобно
той, что выдается TDump.exe от Borland, и несколько файлов .asm с
приблизительным исходным текстом приложения.

Начиная с версии 12/12/98 поддерживается второй проход (пост-процессор)
который может преобразовать листинг, сгенерированный на первом проходе,
в более компактный файл на псевдо-языке высокого уровня. Управление
пост-процессором выполняется посредством файла dewin.mac (макросы).
Найденные во входном потоке лексемы пост-процессор преобразовывает в
предложения в соответствии с правилами, заданными в dewin.mac

В результате выходной поток может содержать на порядок меньше низкоуровневой
информации, приближаясь по семантике к языкам Си или Паскаль.

Приоритет имеет файл макросов в текущем каталоге. Если такого нет,
делается попытка загрузить его из того же каталога, где находится
исполняемый файл DeWin'а и если неудачно, происходит выход в ДОС.

Для замены одних значений на другие (например, уникальных номеров
строковых ресурсов на сами строки) в процессе макрообработки может
использоваться файл lookup имеющий то же имя, что и деассемблируемый,
и расширение .lkp


Все описанные файлы имеют текстовый формат.

---------------------------- Формат файлов .ex --------------------------

Нужен для работы с 16-бит приложениями

Начало первой строки совпадает с именем .DLL, которую этот файл описывает.
Остальное до конца строки не воспринимается (комментарий). В последующих
строках в любом порядке записаны десятичные номера и имена экспортируемых
функций. Номер с двух сторон сопровождается тильдами (~). Когда в приложении
обнаруживается ссылка (вызов процедуры) на внешнюю библиотеку, из
таблицы имен берется имя .DLL и просматриваются все описания (.ex) до их
совпадения. Далее из номера создается строка с тильдами и ищется в
содержимом текущего файла .ex. При нахождении в исходный текст вставляется
строка-имя процедуры, следующая за номером.

После обьединения файлов .ex в один формат был упрощен. Файл состоит из
секций, начало каждой состоит из строки вида
[commdlg]
где в скобках записано имя модуля (.dll) в том виде, как на него ссылается
дизассемблируемое приложение (в общем случае - и любая программа).

Далее в каждой строке файла находятся десятичное число и строка-имя функции,
смысл которых остался прежним. Точка с запятой в начале строки означает
комментарий.

В новом формате файла нет жесткой привязки DeWin'а к конкретным описанным
.dll и пользователь может легко добавлять собственные описания библиотек.


---------------------------- формат userdef.txt -------------------------

Файл позволяет улучшить реконструкцию кода, содержащего текстовые
строки и бинарные данные посреди команд процессора.

Строки, начинающиеся с точки с запятой ";" считаются комментариями и
игнорируются, пустые строки игнорируются.

[секция]
содержимое
...
[секция]
содержимое
...

Допустимые имена секций:

[User defined names-16]  определяемые пользователем функции
[User defined data-16]   -//- участки данных
[User defined options]   -//- опции
[User defined names-32]  определяемые пользователем функции в 32-бит коде
[User defined data-32]   -//- участки данных в 32-бит коде

Форматы данных:

[User defined names-16]
; номер сегмента, двоеточие, смещение, пробел, до конца
; строки имя функции, которое будет использоваться
; в генерируемом исходном тексте
0001:19AB farcalloc()

[User defined names-32]
; адрес на этапе выполнения, пробел, до конца
; строки имя функции, которое будет использоваться
; в генерируемом исходном тексте
001495CA get_time()

[User defined data-16]
; номер сегмента, двоеточие, смещение, пробел, до конца
; строки параметр, управляющий генерацией исходного текста
0003:003C cstring
0003:0E5C db[40]
0004:051C dd
0010:0000 cstring
0006:04A0 dw[6] as WM_MSG16

[User defined data-32]
; адрес на этапе выполнения, пробел, до конца
; строки параметр, управляющий генерацией исходного текста
0003003C cstring
00030E5C db[40]
0004051C dd
00100000 cstring

возможные параметры:
cstring начиная с указанного адреса до первого символа '\0' данные
        считаются ASCII строкой
db      -//- один или более [xx] байтов считаются данными
dd      -//- считаются dword (32 разряда)
dw      -//- word (16 разрядов), если указан модификатор as WM_MSG16,
        значения интерпретируются как сообщения Win 3.x WM_COMMAND и др.


[User defined options]
; формат:
; название параметра, запятая или знак равенства, значение параметра

допустимые параметры:

ImportedNamesExcludeDLL имя модуля .DLL, имена функций которой не следует
                        вносить в список, например из-за их большого
                        количества или если имена неизвестны и используются
                        hints (целые числа). Обычно это runtime языков высокого
                        уровня.
Пример:

ImportedNamesExcludeDLL=mfc42.dll

RCdataName		имя секции файла формата PE (Win32), содержащей
                        ресурсы (по умолчанию .rsrc), до восьми символов.
                        Существуют компиляторы (и приложения), где секция
                        ресурсов имеет имя, отличное от ".rsrc" и обнаруживается
                        загрузчиком Windows по другому алгоритму.
Пример:
RCdataName=res3eng

DATAdataName		имя секции файла формата PE (Win32), содержащей
                        сегмент данных (по умолчанию DATA), до восьми символов.
                        Существуют компиляторы (и приложения), где секция
                        данных имеет имя, отличное от "DATA" и обнаруживается
                        загрузчиком Windows по другому алгоритму.
Пример:
DATAdataName=data5

---------------------------- формат файла dewin.rtl ----------------------

Файл содержит образцы (сигнатуры) наиболее употребительных функций
библиотек языков высокого уровня (runtime), по которым восстанавливаются
имена процедур общего пользования.

Для активизации поиска нужно включить режим анализа (ключ -a), результаты
будут сброшены в файл autodet.txt, откуда при желании их можно скопировать
в userdef.txt, после чего имена процедур будут использоваться в исходном
тексте с меткой UDF.


Строки, начинающиеся с точки с запятой ";" считаются комментариями и
игнорируются, пустые строки игнорируются

В строке может находиться одна или несколько команд, разделенных пробелом.
Длина строки до 120 символов, при этом строки, оканчивающиеся "\", считаются
продолженными на следующей строке.

Допустимые команды (пишутся без кавычек):
	"proc"
	"??"
	"->"
	"-]"
	"<-"
        "calln"

Команда "proc" означает конец описания и после нее указывается имя
процедуры, которой принадлежит описание

Команда "??" означает байт с любым значением в теле процедуры. При
определении процедуры такие байты всегда считаются совпадающими с
описанием.

Команда "->" вызывает near переход в процедуру, адрес которой определяется
суммой 16-бит числа, стоящего в процедуре на этом месте, и счетчика
команд (относительная адресация).

Команда "-]" вызывает near переход в процедуру, адрес которой определяется
16-бит числом, стоящим в процедуре на этом месте (абсолютная адресация).

Команда "<-" вызывает возврат из процедуры, куда был выполнен один из
переходов.

Пример:

; копирование строки
FC 8B DC 8C DA 36 C5 77 0A 36 C4 7F 06 \
36 8B 4F 04 AC 3A C1 76 02 8A C1 AA 8A C8 \
32 ED F3 A4 8E DA CA 0A 00 proc _pstrncpy

Команда "calln" "имя_процедуры" проверяет, что near переход в процедуру
( E8 XX XX ) запускает другую runtime процедуру с указанным именем.

Пример:

99 calln "longdiv( void *)" C3 proc MyDiv

близко соответствует коду

asm { cwd; call near ptr _longdiv; ret }

предполагается, что "longdiv( void *)" описана среди других runtime

Допускается несколько (в текущей версии 4) дочерних именованных
процедур на одну сигнатуру.


---------------------------- Формат файлов .lkp --------------------------

Требуется пост-процессору для выполнения макроса <lookup >

Содержит строки длиной до 80 символов. Начинающиеся с ';' и пустые строки
игнорируются.

Типичный формат:
; комментарий
строка_поиска1 строка_замены1
строка_поиска2 строка_замены2
строка_поиска3 строка_замены3

Когда постпроцессор обнаруживает макрос <lookup >, он выделяет из входного
потока (листинга) подстроку, определяемую параметрами этого макроса.
Например <lookup 2,8,':'> возьмет из третьей строки совпавшего блока символы
с восьмого до (не включая) двоеточия.

Далее подстрока передается процедуре поиска. Если она обнаружила и открыла
файл [имя_модуля].lkp описанного выше формата, то выполняется чтение всех
строк файла до нахождения совпадения с началом строки. Если совпадение
имело место, остаток строки файла возвращается в выходной поток постпроцессора.
Иначе отдается подстрока поиска в исходном виде.

Поскольку поиск выполняется сравнением строк (не чисел), в качестве аргументов
поиска могут выступать любые символьные данные, в том же виде помещенные
в .lkp файл

Для создания файла .lkp удобно использовать, например, секцию RT_STRING
из раздела ресурсов файла *.def создаваемого DeWin'ом на этапе декомпиляции.

В данной версии (4/03/1999) файлы lookup не кешируются, неоправданное их
использование может значительно снизить скорость работы.



