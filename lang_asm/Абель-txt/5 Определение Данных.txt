ГЛАВА 5. Определение Данных

------------------------------------------------------------

Определение Данных

Цель:  Показать методам определения констант и рабочих полей
в ассемблерной программе.

ВВЕДЕНИЕ
------------------------------------------------------------

   Сегмент  данных  предназначен  для  определения констант,
рабочих полей и областей  для  вводв-вывода.  В соответствии
с имеющимися директивами в ассемблере  разрешено определение
данных  различной длины:  например,  директива DB определяет
байт,  а директива DW oпределяет слово. Элемент данных может
содержать непосредственное значение или константу, определен
ную как символьная строка или как числовое значение.
   Другим  способом определения  константы является непосред
ственное  значение,  т.е.  указанное  прямо  в  ассемблерной
команде, например:

                    MOV  AL,20H

   В  этом  случае  шестнадцатеричное  число  20  становится
частью ма шинного объектного кода. Непосредственное значение
ограничено  oдним байтом или  одним словом,  но там, где оно
может быть  применено,  оно является  более эффективным, чем
использование конcтанты.

ДИРЕКТИВЫ ОПРЕДЕЛЕНИЯ ДАННЫХ
------------------------------------------------------------

   Ассемблер  обеспечивает  два способа  определения данных:
во-первых,  через указание длины данных и,  во-вторых, по их
cодержимому. Рассмотрим основной формат определения данных:

               [имя]     Dn   выражение

ъ    Имя  элемента  данных  не  обязательно (это указывается
     квадратными  скобками),  но  если  в  программе имеются
     ссылки   на   некоторый   элемент,   то   это  делается
     посредством имени.  Правила  написания имен приведены в
     разделе "Формат кодирования" в  главе 3.
ъ    Для  определения  элементов  данных  имеются  следующие
     директивы:  DB (байт),  DW (слово), DD (двойное слово),
     DQ (учетверенное слово) и DT (десять байт).
ъ    Выражение может содержать константу, например:

                    FLD1      DB   25

     или знак вопроса для неопределенного значения, например



Ассемблер для IBM PC. Глава 5                            105



                    FLDB      DB   ?

   Выражение может содержать несколько констант, разделенных
запятыми и ограниченными только длиной строки:

          FLD3      DB   11, 12, 13, 14, 15, 16, ...

Ассемблер определяет эти константы в виде последовательности
cмежных  байт.  Ссылка по  имени  FLD3  указывает  на первую
константу,  11,  по FLD3+1  -  на  вторую,  12.  (FLD3 можно
представить как FLD3+0). Например команда

                    MOV  AL,FLD3+3

загружает  в регистр AL  значение  14  (шест. 0E). Выражение
допускает также повторение константы в следующем формате:

          [имя]     Dn  число-повторений DUP (выражение) ...

   Следующие три примера иллюстрируют повторение:

          DW   10 DUP(?)      ;Десять неопределенных слов
          DB   5 DUP(14)      ;Пять байт, содержащих шест.14
          DB   3 DUP(4 DUP(8));Двенадцать восмерок

В третьем примере сначала генерируется  четыре копии десятич
ной 8  (8888),  и затем это значение  повторяется  три раза,
давая в pезультате двенадцать восмерок.
   Выражение может содержать символьную  строку или числовую
константу.

   Символьные строки


   Символьная  строка  используются  для   описания  данных,
таких как,  например,  имена  людей  или  заголовки страниц.
Содержимое    строки    oтмечается   одиночными   кавычками,
например,  'PC'  или  двойными  кавычками -  "PC". Ассемблер
переводит  символьные  строки  в  объектный  код  в  обычном
формате ASCII.
   Символьная  строка  определяется только директивой  DB, в
котоpой указывается более двух символов в нормальной последо
вательности  слева  направо.   Следовательно,  директива  DB
представляет единственно  возможный  формат  для определения
символьных данных. На рис. 5.1 приведен ряд примеров.

------------------------------------------------------------
------------------------------------------------------------
 Рис. 5.1. Определение символьных строк и числовых величин.

   Числовые константы




Ассемблер для IBM PC. Глава 5                            106


   Числовые   константы   используются   для  арифметических
величин и для aдресов памяти. Для описания константы кавычки
не ставятся.  Ассемблер преобразует все числовые константы в
шестнадцитеричные и  записывает  байты  в  объектном  коде в
обратной  последовательности -  справа налево. Ниже показаны
различные числовые форматы.

   Десятичный формат. Десятичный формат допускает десятичные
цифры от 0  до 9  и обозначается последней буквой D, которую
можно не указывать,  например, 125 или 125D. Несмотря на то,
что  ассемблер позволяет кодирование  в  десятичном формате,
он  преобразует   эти   значения  в   шест.  объектный  код.
Например, десятичное число 125 преобразуется в шест. 7D.

   Шестнадцатиричный  формат.  Шест.  формат допускает шест.
цифры от 0  до F и обозначается последней буквой H.  Так как
ассемблер полагает,  что с  буквы начинаются идентификаторы,
то первой цифрой шест.  константы должна быть цифра  от 0 до
9.  Например,  2EH или 0FFFH,  которые ассемблер преобразует
соответственно в 2E и FF0F  (байты во втором  примере записы
ваются в объектный код в обратной последовательности).

   Двоичный формат. Двоичный формат допускает двоичные цифры
0  и  1  и обозначается последней буквой  B. Двоичный формат
обычно используется для более  четкого представления битовых
значений  в  логических  командах  AND,   OR,  XOR  и  TEST.
Десятичное 12,  шест. C и двоичное 1100B все генерируют один
и тот же код:  шест. 0C или двоичное 0000 1100 в зависимости
от того, как вы рассматриваете содержимое байта.

   Восмеричный формат. Восмеричный формат допускает восмерич
ные цифры от 0 до 7 и обозначается последней буквой Q или O,
например,  253Q.  На сегодня восмеричный формат используется
весьма редко.

   Десятичный формат с плавающей точкой.  Этот формат поддер
живается только ассемблером МASM.

   При  записи  символьных  и   числовых   констант  следует
помнить,  что,  например, символьная константа, определенная
как DB '12',  представляет символы ASCII и  генерирует шест.
3132, а числовая константа, oпределенная как DB 12, представ
ляет двоичное число и генерирует шест. 0C.
   Рис. 5.1 иллюстрирует директивы для определения различных
символьных  строк и числовых  констант.  Сегмент  данных был
ассемблирован  для  того,   чтобы  показать  сгенерированный
объектный код (слева).

ДИРЕКТИВА ОПРЕДЕЛЕНИЯ БАЙТА (DB)
------------------------------------------------------------






Ассемблер для IBM PC. Глава 5                            107


   Из  различных  директив,  определяющих  элементы  данных,
наиболее полезной является DB (определить  байт). Символьное
выражение  в диpективе DB  может  содержать  строку символов
любой длины,  вплоть до конца строки (см. FLD2DB и FLD7DB на
рис.  5.1). Обратите внимание, что константа FLD2DB содержит
символьную  строку   'Personal   Computer'.   Объектный  код
показывает  символы кода  ASCII для каждого байта.  Шест. 20
представляет символ пробела.
   Числовое выражение в директиве  DB  может  содержать одну
или более однобайтовых констант.  Один байт выражается двумя
шест.  цифpами. Наибольшее положительное шест. число в одном
байте это 7F,  все "большие"  числа от 80 до FF представляют
отрицательные значения.  В десятичном исчислении эти пределы
выражаются числами +127 и -128.
   В примере  на  рис.  5.1  числовыми  константами являются
FLD3DB,  FLD4DB,  FLD5DB и FLD8DB.  Поле FLD6DB представляет
смесь  из  числовых  и строковых констант,  используемых для
построения таблицы.

ДИРЕКТИВА ОПРЕДЕЛЕНИЯ СЛОВА (DW)
------------------------------------------------------------

   Директива DW определяет  элементы,  которые имеют длину в
одно слово (два байта). Символьное выражение в DW ограничено
двумя символами,  которые ассемблер представляет в объектном
коде   так,   что,   например,  'PC'  становится  'CP'.  Для
определения символьных строк директива DW имеет ограниченное
применение.
   Числовое выражение в DW  может содержать  одно  или более
двухбайтовых  констант.  Два  байта  представляются четырьмя
шест.  цифрами.  Наибольшее положительное шест. число в двух
байтах  это  7FFF;  все  "большие"  числа  от  8000  до FFFF
представляют отрицательные значения. В десятичном исчислении
эти пределы выражаются числами +32767 и -32768.
   В примере на  рис.  5.1  поля FLD1DW  и FLD2DW определяют
числовые константы.  Поле FLD3DW определяет адрес - в данном
случае смещение  на адрес FLD7DB.  В результате генерируется
объектный код 0021  (R  обозначает перемещаемость). Проверяя
выше по рисунку,  видно, что относительный адрес поля FLD7DB
действительно 0021.
   Поле FLD4DW определяет таблицу из пяти числовых констант.
Заметим,  что объектный код для каждой константы имеет длину
в oдно слово (два байта).
   Для форматов директив DW,  DD и DQ  ассемблер преобразует
константы  в  шест.  объектный  код,  но  записывает  его  в
обратной   последовательности.   Таким   образом  десятичное
значение 12345  преобразуется в шест.3039, но записывается в
объектном коде как 3930.

ДИРЕКТИВА ОПРЕДЕЛЕНИЯ ДВОЙНОГО СЛОВА (DD)
------------------------------------------------------------





Ассемблер для IBM PC. Глава 5                            108


   Директива DD определяет  элементы,  которые имеют длину в
два  cлова   (четыре   байта).   Числовое   выражение  может
содержать одну или  более констант,  каждая из которых имеет
максимум  четыре  байта  (восемь  шест.   цифр).  Наибольшее
положительное шест. число в четырех байтых это 7FFFFFFF; все
"большие"   числа  от  80000000   до  FFFFFFFF  представляют
отрицательные значения.  В десятичном исчислении эти пределы
выражаются числами +2147483647 и -2147483648.
   В примере на  рис.  5.1  поле FLD3DD  определяет числовую
константу.  В поле  FLD4DD генерируется разница  между двумя
адресами,  в данном  случае результатом  является длина поля
FLD2DB. Поле FLD5DD определяет две числовые константы.
   Ассемблер преобразует все числовые  константы в директиве
DD  в шест.  представление,  но записывает  объектный  код в
обратной   последовательности.   Таким   образом  десятичное
значение   12345   преобразуется   в   шест.   00003039,  но
записывается в oбъектном коде как 39300000.
   Символьное   выражение  директивы  DD   ограничено  двумя
символами.  Ассемблер преобразует символы  и  выравнивает их
слева в четырехбайтовом  двойном слове,  как показано в поле
FLD2DD в объектном коде.

ДИРЕКТИВА ОПРЕДЕЛЕНИЯ УЧЕТВЕРЕННОГО СЛОВА (DQ)
------------------------------------------------------------

   Директива DQ  определяет  элементы,  имеющие длину четыре
слова (восемь байт). Числовое выражение может содержать одну
или  более  констант,   каждая  из  которых  имеет  максимум
восемь байт или 16 шест.цифр. Наибольшее положительное шест.
число - это семерка и 15 цифр F. Для получения представления
о величине  этого числа,  покажем,  что шест.  1  и 15 нулей
эквивалентен следующему десятичному числу:

                    1152921504606846976

   В примере на рис.  5.1  поля FLD2DQ и FLD3DQ иллюстрируют
числовые  значения.  Ассемблер преобразует  все числовые кон
станты в директиве  DQ в шест.  представление, но записывает
объектный код в обратной последовательности,  как и в дирек-
тивах DD и DW.
   Обработка ассемблером  символьных  строк  в  директиве DQ
aналогично директивам DD и DW.

ДИРЕКТИВА ОПРЕДЕЛЕНИЯ ДЕСЯТИ БАЙТ (DT)
------------------------------------------------------------

   Директива DT определяет элементы данных,  имеющие длину в
десять   байт.   Назначение   этой   директивы   связано   с
"упакованными десятичными" числовыми величинами (см. гл.13).
По  директиве   DT  генерируются   различные   константы,  в
зависимости   от   версии   ассемблера;   для  практического
применения ознакомьтесь с руководством по вашему aссемблера.




Ассемблер для IBM PC. Глава 5                            109


   На  рис.   5.1   приведены  примеры   директивы   DT  для
неопределенного элемента и для двухсимвольной константы.
   Программа на рис.5.1 содержит только сегмент данных. Xотя
асcемблер не выдает сообщений об ошибках, в таблице LINK MAP
появится  предупреждение:  "Warning:  No  STACK  Segment", а
компановщик  LINK  выдаст  "There  were  1  errors detected"
(Обнаружена  1   ошибка).  Несмотря  на  это  предупреждение
можно  использовать отладчик DEBUG для  просмотра объектного
кода, как показано на рис. 5.2.
   Правая  сторона  дампа  отчетливо  показывает  символьные
данные, как, например, "Personal Computer".

НЕПОСРЕДСТВЕННЫЕ ОПЕРАНДЫ
------------------------------------------------------------

   На  рис.  2.1  в  главе  2  было  показано  использование
непосредственных операндов. Команда

                    MOV   AX,0123H

пересылает  непосредственную шест.  константу 0123 в регистр
AX.  Трехбайтный объектный код для этой команды есть B82301,
где B8  обозначает  "переслать  непосредственное  значение в
регистр AX",  a следующие два байта  содержат само значение.
Многие команды имеют два операнда: первый может быть регистр
или адрес памяти, а второй - непосредственная константа.

------------------------------------------------------------
------------------------------------------------------------
               Рис. 5.2. Дамп сегмента данных.

   Использование  непосредственного операнда  более эффектив
но,  чем oпределение числовой константы в сегменте  данных и
организация cсылки на нее в операнде команды MOV, например,

          Сегмент данных:     AMT1 DW   0123H
          Сегмент кодов:           MOV  AX,AMT1

   Длина непосредственных операндов

   Длина непосредственной константы зависит от длины первого
операнда.   Например,   следующий  непосредственный  операнд
является двухбайтовым, но регистр AL имеет только один байт:

                    MOV  AL,0123H  (ошибка)

однако, если непосредственный операнд короче, чем получающий
операнд, как в следующем примере

                    ADD  AX,25H    (нет ошибки)

то  ассемблер  расширяет  непосредственный  операнд  до двух
байт, 0025 и записывает объектный код в виде 2500.



Ассемблер для IBM PC. Глава 5                            110



   Непосредственные форматы

   Непосредственная константа  может быть шестнадцатиричной,
напpимер,   0123H;   десятичной,   например,   291  (которую
ассемблер   конвертирует   в   шест.0123);   или   двоичной,
например, 100100011В (которая преобразуется в шест. 0123).
   Ниже   приведен   список    команд,   которые   допускают
непосредственные операнды:

   Команды пересылки и сравнения:  MOV, CMP.
   Арифметические команды:         ADC, ADD, SBB, SUB.
   Команды сдвига:       RCL, RCR, ROL, ROR, SHL, SAR, SHR.
   Логические команды:   AND, OR, TEST, XOR.

   На  рис.   5.3  приведены  примеры  допустимых  команд  с
непосредственными  операндами.  В  последующих  главах будут
объяснены   команды   арифметического   переноса,  сдвига  и
логические  команды.  Поскольку  сейчас  данные  примеры  не
предназначены  для  выполнения,  в  них  опущено определение
стека и инициализация сегментных регистров.
   Для  создания  элементов,  длинее  чем  два  байта, можно
использовать цикл  (см.  гл.7)  или  строковые  команды (см.
гл.11).

------------------------------------------------------------
------------------------------------------------------------
     Рис. 5.3. Команды с непосредственными данными.

ДИРЕКТИВА EQU
------------------------------------------------------------

   Директива EQU не определяет элемент данных, но определяет
значение,  которое может быть использовано для  постановки в
других   командах.   Предположим,   что  в  сегменте  данных
закодирована следующая директива EQU:

                    TIMES     EQU  10

Имя,  в данном  случае TIMES,  может быть представлено любым
допустимым в ассемблере  именем.  Теперь, в какой-бы команде
или  директиве  не  использовалось  слово   TIMES  ассемблер
подставит  значение  10.   Например,  ассемблер  преобразует
директиву

                    FIELDA    DB   TIMES DUP (?)
в
                    FIELDA    DB   10 DUP (?)

   Имя, связанное с некоторым значением с помощью директивы
EQU, может использоваться в командах, например:

          COUNTR    EQU  05



Ассемблер для IBM PC. Глава 5                            111


                    ...
                    MOV  CX,COUNTR

   Ассемблер заменяет имя COUNTR  в команде MOV  на значение
05,  cоздавая операнд с непосредственным значением, как если
бы было закодировано

                    MOV  CX,05     ;Ассемблер подставляет 05

   Здесь приемущество директивы EQU заключается  в  том, что
многие команды могут использовать  значение, определенное по
имени  COUNTR.  Если это значение  должно  быть изменено, то
изменению подлежит  лишь  одна  директива  EQU. Естественно,
что  использование  директивы  EQU  разумно  лишь  там,  где
подстановка имеет  смысл  для  ассемблера.  В  директиве EQU
можно использовать символические имена:

               1.   TP   EQU  TOTALPAY
               2.   MPY  EQU  MUL

Первый пример предполагает,  что в сегменте данных программы
опpеделено  имя  TOTALPAY.  Для  любой  команды,  содержащей
операнд TP,  ассемблер заменит его на адрес TOTALPAY. Второй
пример  показывает  возможность  использования  в  программе
слова MPY вместо обычного мнемокода MUL.

ОСНОВНЫЕ ПОЛОЖЕНИЯ НА ПАМЯТЬ
------------------------------------------------------------

ъ    Имена элементов данных в программе должны  быть уникаль
     ны  и по  возможности наглядны.  Например,  элемент для
     зарплаты служащего может иметь имя EMPWAGE.

ъ    Для определения символьных строк  используйте директиву
     DB,   так как  ее формат допускает строки  длиннее двух
     байт и  формирует  их  в  нормальной последовательности
     (слева-направо).

ъ    Будьте  внимательны  при  указании  десятичных  и шест.
     значений.   Сравните,  например,  сложение  содержимого
     регистра AX с десятичным 25 и с шест. 25:

                    ADD  AX,25     ;Прибавить 25
                    ADD  AX,25H    ;Прибавить 37

ъ    Помните,  что директивы DW, DD и DQ записывают числовое
     значение в объектном коде в обратной последовательности
     байт.








Ассемблер для IBM PC. Глава 5                            112


ъ    Используйте элементы  DB для  операций с полурегистрами
     (AL,  AH,  BL и  т.д.)  и  DW  для  операций  с полными
     регистрами  (AX,  BX,  CX и  т.д.).  Числовые элементы,
     определенные  директивами  DD  и  DQ  имеют специальное
     применение.

ъ    Следите  за  соответствием  непосредственных  операндов
     размеру регистра: однобайтовая константа - однобайтовый
     регистр  (AL,  BH),  двухбайтовая  константа  -  полный
     регистр (AX, BX).

ВОПРОСЫ ДЛЯ САМОПРОВЕРКИ
------------------------------------------------------------

5.1. Какова длина в байтах  для элементов  данных, определен
     ных директивами: а) DW, б) DD, в) DT, г) DB, д) DQ?

5.2. Определите   символьную   строку   по   имени   TITLE1,
     содержащую константу RGB Electronics.

5.3. Определите  следующие  числовые  значения  в  элементах
     данных с именами от FLDA до FLDE:
     a) четырехбайтовый элемент, содержащтй шест. эквивалент
        десятичного числа 115;
     b) однобайтовый элемент, содержащий шест. эквивалент
        десятичного числа 25;
     c) двухбайтовый элемент, содержащий неопределенное
        значение;
     d) однобайтовый элемент, содержащий двоичной эквивалент
        десятичного числа 25;
     e) директиву DW, содержащую последовательные значения
        16, 19, 20, 27, 30.

5.4. Покажите сгенерированный шест. объектный код для
     а) DB '26' и б) DB 26.

5.5. Определите ассемблерный шест. объектный код для
     а) DB 26H, б) DW 2645H, в) DD 25733AH, г) DQ 25733AH.

5.6. Закодируйте следующие команды с непосредственными
     операндами:
     а) загрузить 320 в регистр AX;
     б) сравнить поле FLDB с нулем;
     в) прибавить шест. 40 к содержимому регистра BX;
     г) вычесть шест. 40 из регистра CX;
     д) сдвинуть содержимое поля FLDB на один бит влево;
     е) сдвинуть содержимое регистра CH на один бит вправо.

5.7. Введите и ассемблируйте элементы  данных  и  команды из
     вопросов 5.2,  5.3  и 5.6. Стек для этого упражнения не
     требуется.  Также не следует  выполнять компановку. Для
     проверки  ассемблированного  кода  используйте отладчик
     DEBUG. Распечатайте LST-файл (листинг), если в результа



Ассемблер для IBM PC. Глава 5                            113


     те ассемблирования не  будет сообщений  об  ошибках. Не
     забудте  команду MODE  LPT1:132,6  для установки ширины
     печати.





















































Ассемблер для IBM PC. Глава 6                            123



