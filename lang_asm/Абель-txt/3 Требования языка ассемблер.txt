ГЛАВА 3. Требования языка ассемблер

------------------------------------------------------------

Требования языка ассемблер

Цель:  показать  основные  требования к  программам на языке
ассемблера и этапы ассемблирования,  компановки и выполнения
программы.

ВВЕДЕНИЕ
------------------------------------------------------------

   В главе 2  было показано как ввести и выполнить программу
на  машинном  языке.  Несомненно при  этом ощутима трудность
расшифровки  машинного   кода  даже   для   очень  небольшой
программы.  Сомнительно,  чтобы кто-либо  серьезно кодировал
программы на машинном языке,  за исключением разных "заплат"
(корректировок)  в программе  на  языках  высокого  уровня и
прикладные  программы.  Более  высоким  уровнем  кодирования
является   уровень   ассемблера,   на   котором  программист
пользуется символическими мнемокодами вместо машинных команд
и описательными именами для полей данных и адресов памяти.
   Программа написанная символическими  мнемокодами, которые
используются в языке ассемблера, представляет собой исходный
модуль.   Для   формирования   исходного   модуля  применяют
программу  DOS EDLIN или  любой  другой  подходящий экранный
редактор.  Затем с помощью программы ассемблерного транслято
ра исходный  текст транслируется в  машинный  код, известный
как  объектная  программа.  И  наконец,  программа  DOS LINK
определяет  все  адресные  ссылки  для  объектной программы,
генерируя загрузочный модуль.
   В данной главе объясняются требования для простой програм
мы на ассемблере и показаны этапы  ассемблирования, компанов
ки и выполнения.

КОММЕНТАРИИ В ПРОГРАММАХ НА АССЕМБЛЕРЕ
------------------------------------------------------------

   Использование  комментариев  в   программе   улучшает  ее
ясность,   oсобенно  там,   где  назначение   набора  команд
непонятно.  Комментаpий  всегда  начинаются  на любой строке
исходного модуля с символа  точка с запятой (;)  и ассемблер
полагает в этом случае,  что все символы, находящиеся справа
от  ;  являются  комментарием.  Комментарий  может содержать
любые печатные символы, включая пробел.
   Комментарий может занимать  всю строку  или  следовать за
командой на той же строке, как это показано в двух следующих
примерах:

   1.     ;Эта строка полностью является комментарием
   2.     ADD AX,BX  ;Комментарий на одной строке с командой




Ассемблер для IBM PC. Глава 3                             61


   Комментарии  появляются  только  в  листингах ассемблиро-
вания  исходного модуля  и не приводят к  генерации машинных
кодов, поэтому можно включать любое количество комментариев,
не  оказывая влияния на эффективность  выполнения программы.
В данной  книге команды  ассемблера  представлены заглавными
буквами,  а  комментарии -  строчными (только для удобочитае
мости).

ФОРМАТ КОДИРОВАНИЯ
------------------------------------------------------------

   Основной  формат  кодирования  команд   ассемблера  имеет
следующий вид:

          [метка]   команда   [операнд(ы)]

   Метка (если имеется),  команда  и операнд  (если имеется)
pазделяются по  крайней  мере  одним  пробелом  или символом
табуляции.  Максимальная длина строки - 132 символа, однако,
большинство предпочитают работать со строками в  80 символов
(соответственно ширине экрана). Примеры кодирования:

     Метка     Команда   Операнд
     COUNT     DB        1    ;Имя, команда, один операнд
               MOV       AX,0 ;Команда, два операнда

   Метки

   Метка в языке ассемблера может содержать  следующие симво
лы:
          Буквы:         от A до Z и от a до z
          Цифры:         от 0 до 9
          Спецсимволы:   знак вопроса (?)
                         точка (.) (только первый символ)
                         знак "коммерческое эт" (@)
                         подчеркивание (-)
                         доллар ($)

Первым символом  в метке должна  быть  буква или спецсимвол.
Ассемблер  не  делает различия между заглавными  и строчными
буквами.  Максимальная  длина  метки  -  31  символ. Примеры
меток:   COUNT,  PAGE25,  $E10.  Рекомендуется  использовать
описательные  и смысловые метки.  Имена регистров, например,
AX,  DI  или AL  являются  зарезервированными и используются
только для указания  соответствующих регистров.  Например, в
команде
                    ADD  AX,BX

ассемблер "знает",  что  AX  и  BX  относится  к  регистрам.
Однако, в команде

                    MOV  REGSAVE,AX




Ассемблер для IBM PC. Глава 3                             62


ассемблер воспримет имя REGSAVE только  в  том  случае, если
оно  будет определено  в сегменте  данных.   В  приложении 3
приведен cписок всех зарезервированных слов ассемблера.

   Команда

   Мнемоническая команда указывает ассемблеру какое действие
должен выполнить данный оператор.  В сегменте данных команда
(или   директива)   определяет  поле,  рабочую  oбласть  или
константу.  В  сегменте  кода  команда  определяет действие,
например, пересылка (MOV) или сложение (ADD).

   Операнд

   Если команда специфирует выполняемое действие, то операнд
определяет  а)  начальное значение  данных  или б) элементы,
над которыми  выполняется действие  по  команде. В следующем
примере  байт COUNTER  определен в сегменте  данных и  имеет
нулевое значение:

          Метка     Команда   Операнд
          COUNTER   DB   0    ;Определить байт (DB)
                              ;  с нулевым значением

   Команда может иметь  один  или  два операнда,  или вообще
быть без операндов. Рассмотрим следующие три примера:

                    Команда Операнд     Комментарий
     Нет операндов    RET               ;Вернуться
     Один операнд     INC     CX        ;Увеличить CX
     Два операнда     ADD     AX,12     ;Прибавить 12 к AX

   Метка, команда и операнд не обязательно должны начинаться
с какой-либо определенной позиции в  строке. Однако, рекомен
дуется записывать  их в колонку  для большей yдобочитаемости
программы.  Для этого, например, редактор DOS EDLIN обеспечи
вает табуляцию чепез каждые восемь позиций.

ДИРЕКТИВЫ
------------------------------------------------------------

   Ассемблер имеет ряд операторов,  которые  позволяют упpав
лять процессом ассемблирования и формирования  листинга. Эти
операторы  называются  псевдокомандами или  директивами. Они
действуют только  в процессе ассемблирования  программы и не
генерируют машинных  кодов.  Большинство директив показаны в
следующих  разделах.   В  главе  24   подробно  описаны  все
директивы  ассемблера  и  приведено   более  чем  достаточно
соответствующей информации.  Главу  24  можно использовать в
качестве справочника.

   Директивы управления листингом: PAGE и TITLE




Ассемблер для IBM PC. Глава 3                             63


   Ассемблер  содержит  ряд  директив,  управляющих форматом
печати (или  листинга).  Обе директивы  PAGE  и  TITLE можно
использовать в любой программе.

   Директива PAGE. В начале программы можно указать количест
во строк,  распечатываемых на одной странице, и максимальное
количество  символов на одной строке.  Для  этой цели cлужит
директива  PAGE.  Следующей  директивой  устанавливается  60
строк на страницу и 132 символа в строке:

                         PAGE 60,132

Количество строк на странице межет быть в пределах  от 10 до
255,  а  символов в  строке -  от 60  до 132. По умолчанию в
ассемблере установлено PAGE 66,80.
   Предположим,  что счетчик строк установлен на 60.  В этом
случае  ассемблер,  распечатав  60  строк,  выполняет прогон
листа  на  начало  следующей  страницы  и  увеличивает номер
страницы  на  eдиницу.  Кроме того можно заставить ассемблер
сделать прогон листа на конкретной строке, например, в конце
сегмента.  Для этого необходимо записать  директиву PAGE без
операндов.  Ассемблер автоматически делает  прогон листа при
обработке диpективы PAGE.

   Директива TITLE.  Для того,  чтобы вверху каждой страницы
листинга печатался заголовок (титул) программы, используется
диpектива TITLE в следующем формате:

                         TITLE   текст

   Рекомендуется в качестве текста использовать  имя програм
мы, под которым она находится в каталоге на диске. Например,
если программа называется ASMSORT, то можно использовать это
имя и описательный комментарий общей длиной до 60 символов:

     TITLE ASMSORT - Ассемблерная программа сортировки имен

   В ассемблере также имеется директива подзаголовка SUBTTL,
которая может оказаться полезной для очень больших программ,
содержащих много подпрограмм.

   Директива SEGMENT

   Любые ассемблерные  программы  содержат  по  крайней мере
один  сегмент  -   сегмент  кода.   В  некоторых  программах
используется  сегмент для стековой  памяти  и сегмент данных
для определения данных.  Асcемблерная директива для описания
сегмента SEGMENT имеет следующий формат:

               Имя       Директива      Операнд
               имя       SEGMENT        [параметры]
                         .
                         .



Ассемблер для IBM PC. Глава 3                             64


                         .
               имя       ENDS

   Имя  сегмента  должно  обязательно  присутствовать,  быть
уникальным  и   соответствовать   соглашениям   для  имен  в
ассемблере.  Директива  ENDS обозначает конец  сегмента. Обе
директивы  SEGMENT и  ENDS  должны  иметь  одинаковые имена.
Директива  SEGMENT  может  содержать  три  типа  параметров,
определяющих выравнивание, объединение и класс.

1.   Выравнивание. Данный параметр определяет границу начала
     сегмента.  Обычным значением является PARA,  по которму
     сегмент устанавливается на  границу  параграфа.  В этом
     случае начальный адрес делится на 16  без остатка, т.е.
     имеет  шест.  адрес  nnn0.  В  случае  отсутствия этого
     операнда ассемблер принимает по умолчанию PARA.
2.   Объединение.  Этот элемент  определяет объединяется  ли
     данный   сегмент   с  другими  сегментами   в  процессе
     компановки  после  ассемблирования   (пояснения  см.  в
     следующем  разделе  "Компановка  программы").  Возможны
     следующие типы  объединений:  STACK, COMMON, PUBLIC, AT
     выражение   и   MEMORY.   Сегмент   стека  определяется
     следующим образом:

               имя  SEGMENT   PARA STACK

     Когда отдельно ассемблированные программы должны объеди
     няться  компановщиком,   то  можно  использовать  типы:
     PUBLIC,  COMMON и  MEMORY.  В случае, если программа не
     должна об'единяться  с другими  программами,  то данная
     опция может быть опущена.
3.   Класс. Данный элемент, заключенный в апострофы,  исполь
     зуется  для группирования  относительных  сегментов при
     компановке:

               имя  SEGMENT   PARA   STACK   'Stack'

   Фрагмент  программы  на  рис.  3.1.  в  следующем разделе
иллюстрирует директиву SEGMENT и ее различные опции.

   Директива PROC

   Сегмент  кода  содержит  выполняемые  команды  программы.
Кроме  того  этот  сегмент также включает  в  себя  одну или
несколько процедур,  определенных директивой  PROC. Сегмент,
содержащий только одну процедуру имеет следующий вид:

     имя-сегмента   SEGMENT   PARA
     имя-процедуры  PROC      FAR       Сегмент
                    .                   кода
                    .                   с
                    .                   одной
                    RET                 процедурой



Ассемблер для IBM PC. Глава 3                             65


     имя-процедуры  ENDP
     имя-сегмента   ENDS

   Имя  процедуры  должно  обязательно  присутствовать, быть
уникальным и удовлетворять соглашениям по именам  в ассембле
ре.  Операнд FAR указывает загрузчику DOS, что начало данной
процедуры является точкой входа для выполнения программы.
   Директива  ENDP  определяет конец процедуры  и имеет имя,
аналогичное  имени в директиве PROC.  Команда  RET завершает
выполнение программы и в данном случае возвращает управление
в DOS.
   Сегмент может содержать несколько процедур (см. гл.7).

   Директива  ASSUME

   Процессор  использует  регистр  SS  для  адресации стека,
ркгистр  DS для адресации  сегмента данных и регистр  CS для
адресации  cегмента  кода.  Ассемблеру  необходимо  сообщить
назначение каждого сегмента.  Для этой цели служит директива
ASSUME, кодируемая в сегменте кода следующим образом:

     Директива Операнд
     ASSUME     SS:имя_стека,DS:имя_с_данных,CS:имя_с_кода

   Например,  SS:имя_стека  указывает,  что ассемблер должен
ассоциировать  имя сегмента  стека с регистром  SS. Операнды
могут  записываться  в любой последовательности.  Регистр ES
также может присутствовать в числе операндов. Если программа
не использует регистр ES,  то его можно опустить или указать
ES:NOTHING.

   Директива END

   Как уже показано,  директива  ENDS  завершает  сегмент, а
директива  ENDP  завершает процедуру.  Директива END  в свою
очередь полностью завершает всю программу:

          Директива      Операнд
          END            [имя_процедуры]

   Операнд может быть опущен,  если программа не предназначе
на для выполнения, например, если ассемблируются только опре
деления данных, или эта программа должна быть скомпанована с
другим  (главным)  модулем.  Для  обычной программы  с одним
модулем oперанд содержит  имя,  указанное в  директиве PROC,
которое было oбозначено как FAR.

ПАМЯТЬ И РЕГИСТРЫ
------------------------------------------------------------

   Рассмотрим  особенности  использования  в  командах имен,
имен  в квадратных  скобках и  чисел.  В  следующих примерах
положим, что WORDA определяет слово в памяти:



Ассемблер для IBM PC. Глава 3                             66



     MOV  AX,BX     ;Переслать содержимое BX в регистр AX
     MOV  AX,WORDA  ;Переслать содержимое WORDA в регистр AX
     MOV  AX,[BX]   ;Переслать содержимое памяти по адресу
                    ;  в регистре BX в регистр AX
     MOV  AX,25     ;Переслать значение 25 в регистр AX
     MOV  AX,[25]   ;Переслать содержимое по смещению 25

   Новым здесь является использование квадратных скобок, что
потребуется в следующих главах.

ИНИЦИАЛИЗАЦИЯ ПРОГРАММЫ
------------------------------------------------------------

   Существует два основных типа загрузочных программ:  EXE и
COM. Рассмотрим требования к EXE-программам, а COM-программы
будут  представлены в  главе 6.  DOS имеет четыре требования
для  инициализации  ассемблерной  EXE-программы:  1) указать
ассемблеру, какие cегментные регистры должны соответствовать
сегментам,  2) сохранить в стеке адрес, находящийся в регист
ре DS, когда программа начнет выполнение, 3) записать в стек
нелевой  адрес и 4)  загрузить в регистр  DS  адрес сегмента
данных.
   Выход из программы и возврат в DOS сводится  к использова
нию команды RET.  Рис.3.1 иллюстрирует требования к инициали
зации и выходу из программы:

1.   ASSUME -  это ассемблерная директива, которая устанавли
     вает  для  ассемблера  соответствие  между  конкретными
     сегментами  и сегментными регистрами;  в данном случае,
     CODESG  -  CS,  DATASG  -  DS и STACKSG -  SS. DATASG и
     STACKSG не  определены  в этом  примере,  но  они будут
     представлены следующим образом:

          STACKSG  SEGMENT  PARA  STACK  Stack  'Stack'
          DATASG   SEGMENT  PARA  'Data'

     Ассоциируя сегменты с сегментными регистрами, ассемблер
     сможет  определить  смещения  к  отдельным  областям  в
     каждом сегменте.  Например,  каждая  команда в сегменте
     кодов  имеет определенную  длину:  первая команда имеет
     смещение 0,  и если это двухбайтовая команда, то вторая
     команда будет иметь смещение 2 и т.д.

2.   Загрузочному модулю в памяти непосредственно предшеству
     ет  256-байтовая (шест.100)  область, называемая префик
     сом  программного  сегмента  PSP.  Программа загрузчика
     использует регистр DS  для  установки  адреса начальной
     точки PSP.  Пользовательская программа должна сохранить
     этот адрес,  поместив его в стек.  Позже,   команда RET
     использует этот адрес для возврата в DOS.





Ассемблер для IBM PC. Глава 3                             67


3.   В системе  требуется,  чтобы следующее значение в стеке
     являлось нулевым адресом (точнее, смещением). Для этого
     команда SUB очищает регистр AX, вычитая его из этого же
     регистра AX,  а  команда PUSH  заносит  это  значение в
     стек.

4.   Загрузчик  DOS устанавливает правильные  адреса стека в
     регистре SS и  сегмента кодов в  регистре CS. Поскольку
     программа  загрузчика использует регистр DS  для других
     целей,  необходимо  инициализировать  регистр  DS двумя
     командами  MOV,  как показано  на  рис.3.1. В следующем
     разделе  этой  главы  "Исходная  программа.  Пример II"
     детально поясняется инициализация регистра DS.

------------------------------------------------------------
------------------------------------------------------------
     Рис. 3.1. Инициализация EXE-программы.

5.   Команда  RET  обеспечивает  выход  из  пользовательской
     программы и возврат  в DOS,  используя для этого адрес,
     записанный в стек в начале программы командой  PUSH DS.
     Другим обычно используемым выходом является команда INT
     20H.

   Теперь,  даже если приведенная инициализация программы до
конца  не  понятна  -   не  отчаивайтесь.  Каждая  программа
фактически имеет аналогичные шаги инициализации,  так что их
можно дублировать всякий раз при кодировании программ.

ПРИМЕР ИСХОДНОЙ ПРОГРАММЫ
------------------------------------------------------------

   Рис. 3.2. обобщает предыдущие сведения в простой исходной
программе на ассемблере.  Программа содержит сегмент стека -
STACKSG и сегмент кода - CODESG.
   STACKSG  содержит  один  элемент  DB  (определить  байт),
который определяет 12  копий слова 'STACKSEG'. В последующих
программах  стек  не  опpеделяется  таким  способом,  но при
использовании   отладчика   для  просмотра  ассемблированной
программы на  экране,  данное определение  помогает локализо
вать стек.
     CODESG  содержит  выполняемые  команды  программы, хотя
первая директива ASSUME не генерирует кода. Директива ASSUME
назначает  регистр SS для  STACKSG и регистр CS  для CODESG.
В действительности,  эта директива  сообщает ассемблеру, что
для  адресации в  STACKSG  необходимо  использовать  адрес в
регистре SS и для адресации в CODESG -  адрес в регистре CS.
Системный загрузчик при загрузке программы с  диска в память
для   выполнения  устанавливает   действительные   адреса  в
регистрах SS и CS.  Программа не имеет  сегмента данных, так
как  в  ней  нет  определения  данных  и,  соответственно, в
ASSUME нет необходимости ассигновать pегистр DS.




Ассемблер для IBM PC. Глава 3                             68


   Команды, следующие за ASSUME - PUSH, SUB и PUSH выполняют
стандартные действия для инициализации стека текущим адресом
в  регистре   DS  и  нулевым  адресом.   Поскольку,  обычно,
программа выполняется из  DOS,  то  эти команды обеспечивают
возврат  в  DOS  после  завершения  программы.  (Можно также
выполнить программу из отладчика, хотя это особый случай).
   Последующие   команды  выполняют  те  же   действия,  что
показаны на pис.2.1 в предыдущей главе, когда рассматривался
отладчик.

ОСНОВНЫЕ ПОЛОЖЕНИЯ НА ПАМЯТЬ
------------------------------------------------------------

ъ    Не забывайте ставить  символ  "точка  с  запятой" перед
     комментариями.

ъ    Завершайте  каждый  сегмент   директивой  ENDS,  каждую
     процедуру -  директивой ENDP,  а программу - директивой
     END.

ъ    В  директиве ASSUME  устанавливайте  соответствия между
     сегментными регистрами и именами сегментов.

ъ    Для EXE-программ  (но не  для  COM-программ,  см. гл.6)
     обеспечивайте не  менее 32  слов  для стека, соблюдайте
     соглашения по инициализации стека командами PUSH, SUB и
     PUSH и заносите в  регистр DS адрес сегмента данных.

ВОПРОСЫ ДЛЯ САМОПРОВЕРКИ
------------------------------------------------------------

3.1. Какие команды заставляют ассемблер печатать заголовок в
     начале каждой страницы листинга и  делать прогон листа?

3.2. Какие из следующих имен неправильны:  а) PC_AT, б) $50,
     в)  @$_Z, г) 34B7, д) AX?

3.3. Какое назначение каждого из трех сегментов, описанных в
     этой главе?

3.4. Что конкретно  подразумевает  директива  END,  если она
     завершает а)  программу, б) процедуру, в) сегмент?

3.5. Укажите  различия  между  директивой  и  командой.

3.6. Укажите различия  в  назначении  RET  и  END.

3.7. Для сегментов кода,  данных и стека  даны  имена CDSEG,
     DATSEG  и STKSEG  соответственно. Сформируйте директиву
     ASSUME.

3.8. Напишите три команды для инициализации  стека адресом в
     DS и нулевым адресом.



Ассемблер для IBM PC. Глава 4                             79



